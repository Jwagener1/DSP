
stm32f4_ADC_40kHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f404  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00085954  0800f5b4  0800f5b4  0001f5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08094f08  08094f08  000b00d8  2**0
                  CONTENTS
  4 .ARM          00000008  08094f08  08094f08  000a4f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08094f10  08094f10  000b00d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08094f10  08094f10  000a4f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08094f14  08094f14  000a4f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08094f18  000b0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000b00d8  2**0
                  CONTENTS
 10 .bss          000087e0  200000d8  200000d8  000b00d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200088b8  200088b8  000b00d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000b00d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002fc1b  00000000  00000000  000b0108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006349  00000000  00000000  000dfd23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024b0  00000000  00000000  000e6070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002298  00000000  00000000  000e8520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002da0a  00000000  00000000  000ea7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ee16  00000000  00000000  001181c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fea40  00000000  00000000  00146fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  00245a18  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009eb0  00000000  00000000  00245ad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003194  00000000  00000000  0024f988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f59c 	.word	0x0800f59c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000dc 	.word	0x200000dc
 80001ec:	0800f59c 	.word	0x0800f59c

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b50:	f000 b974 	b.w	8000e3c <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	4604      	mov	r4, r0
 8000b74:	468e      	mov	lr, r1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d14d      	bne.n	8000c16 <__udivmoddi4+0xaa>
 8000b7a:	428a      	cmp	r2, r1
 8000b7c:	4694      	mov	ip, r2
 8000b7e:	d969      	bls.n	8000c54 <__udivmoddi4+0xe8>
 8000b80:	fab2 f282 	clz	r2, r2
 8000b84:	b152      	cbz	r2, 8000b9c <__udivmoddi4+0x30>
 8000b86:	fa01 f302 	lsl.w	r3, r1, r2
 8000b8a:	f1c2 0120 	rsb	r1, r2, #32
 8000b8e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b92:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b96:	ea41 0e03 	orr.w	lr, r1, r3
 8000b9a:	4094      	lsls	r4, r2
 8000b9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba0:	0c21      	lsrs	r1, r4, #16
 8000ba2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ba6:	fa1f f78c 	uxth.w	r7, ip
 8000baa:	fb08 e316 	mls	r3, r8, r6, lr
 8000bae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bb2:	fb06 f107 	mul.w	r1, r6, r7
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	d90a      	bls.n	8000bd0 <__udivmoddi4+0x64>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bc2:	f080 811f 	bcs.w	8000e04 <__udivmoddi4+0x298>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 811c 	bls.w	8000e04 <__udivmoddi4+0x298>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	4463      	add	r3, ip
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 f707 	mul.w	r7, r0, r7
 8000be4:	42a7      	cmp	r7, r4
 8000be6:	d90a      	bls.n	8000bfe <__udivmoddi4+0x92>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bf0:	f080 810a 	bcs.w	8000e08 <__udivmoddi4+0x29c>
 8000bf4:	42a7      	cmp	r7, r4
 8000bf6:	f240 8107 	bls.w	8000e08 <__udivmoddi4+0x29c>
 8000bfa:	4464      	add	r4, ip
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c02:	1be4      	subs	r4, r4, r7
 8000c04:	2600      	movs	r6, #0
 8000c06:	b11d      	cbz	r5, 8000c10 <__udivmoddi4+0xa4>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c10:	4631      	mov	r1, r6
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xc2>
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	f000 80ef 	beq.w	8000dfe <__udivmoddi4+0x292>
 8000c20:	2600      	movs	r6, #0
 8000c22:	e9c5 0100 	strd	r0, r1, [r5]
 8000c26:	4630      	mov	r0, r6
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f683 	clz	r6, r3
 8000c32:	2e00      	cmp	r6, #0
 8000c34:	d14a      	bne.n	8000ccc <__udivmoddi4+0x160>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd4>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80f9 	bhi.w	8000e32 <__udivmoddi4+0x2c6>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	469e      	mov	lr, r3
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa4>
 8000c4e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa4>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xec>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 8092 	bne.w	8000d86 <__udivmoddi4+0x21a>
 8000c62:	eba1 010c 	sub.w	r1, r1, ip
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f fe8c 	uxth.w	lr, ip
 8000c6e:	2601      	movs	r6, #1
 8000c70:	0c20      	lsrs	r0, r4, #16
 8000c72:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c76:	fb07 1113 	mls	r1, r7, r3, r1
 8000c7a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c7e:	fb0e f003 	mul.w	r0, lr, r3
 8000c82:	4288      	cmp	r0, r1
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x12c>
 8000c86:	eb1c 0101 	adds.w	r1, ip, r1
 8000c8a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x12a>
 8000c90:	4288      	cmp	r0, r1
 8000c92:	f200 80cb 	bhi.w	8000e2c <__udivmoddi4+0x2c0>
 8000c96:	4643      	mov	r3, r8
 8000c98:	1a09      	subs	r1, r1, r0
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ca4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ca8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x156>
 8000cb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cb8:	d202      	bcs.n	8000cc0 <__udivmoddi4+0x154>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f200 80bb 	bhi.w	8000e36 <__udivmoddi4+0x2ca>
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	eba4 040e 	sub.w	r4, r4, lr
 8000cc6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cca:	e79c      	b.n	8000c06 <__udivmoddi4+0x9a>
 8000ccc:	f1c6 0720 	rsb	r7, r6, #32
 8000cd0:	40b3      	lsls	r3, r6
 8000cd2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cd6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cda:	fa20 f407 	lsr.w	r4, r0, r7
 8000cde:	fa01 f306 	lsl.w	r3, r1, r6
 8000ce2:	431c      	orrs	r4, r3
 8000ce4:	40f9      	lsrs	r1, r7
 8000ce6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cea:	fa00 f306 	lsl.w	r3, r0, r6
 8000cee:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cf2:	0c20      	lsrs	r0, r4, #16
 8000cf4:	fa1f fe8c 	uxth.w	lr, ip
 8000cf8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cfc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d00:	fb08 f00e 	mul.w	r0, r8, lr
 8000d04:	4288      	cmp	r0, r1
 8000d06:	fa02 f206 	lsl.w	r2, r2, r6
 8000d0a:	d90b      	bls.n	8000d24 <__udivmoddi4+0x1b8>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d14:	f080 8088 	bcs.w	8000e28 <__udivmoddi4+0x2bc>
 8000d18:	4288      	cmp	r0, r1
 8000d1a:	f240 8085 	bls.w	8000e28 <__udivmoddi4+0x2bc>
 8000d1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d22:	4461      	add	r1, ip
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d2c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d30:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d34:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d38:	458e      	cmp	lr, r1
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x1e2>
 8000d3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d40:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d44:	d26c      	bcs.n	8000e20 <__udivmoddi4+0x2b4>
 8000d46:	458e      	cmp	lr, r1
 8000d48:	d96a      	bls.n	8000e20 <__udivmoddi4+0x2b4>
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	4461      	add	r1, ip
 8000d4e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d52:	fba0 9402 	umull	r9, r4, r0, r2
 8000d56:	eba1 010e 	sub.w	r1, r1, lr
 8000d5a:	42a1      	cmp	r1, r4
 8000d5c:	46c8      	mov	r8, r9
 8000d5e:	46a6      	mov	lr, r4
 8000d60:	d356      	bcc.n	8000e10 <__udivmoddi4+0x2a4>
 8000d62:	d053      	beq.n	8000e0c <__udivmoddi4+0x2a0>
 8000d64:	b15d      	cbz	r5, 8000d7e <__udivmoddi4+0x212>
 8000d66:	ebb3 0208 	subs.w	r2, r3, r8
 8000d6a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d6e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d72:	fa22 f306 	lsr.w	r3, r2, r6
 8000d76:	40f1      	lsrs	r1, r6
 8000d78:	431f      	orrs	r7, r3
 8000d7a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d7e:	2600      	movs	r6, #0
 8000d80:	4631      	mov	r1, r6
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	f1c2 0320 	rsb	r3, r2, #32
 8000d8a:	40d8      	lsrs	r0, r3
 8000d8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d90:	fa21 f303 	lsr.w	r3, r1, r3
 8000d94:	4091      	lsls	r1, r2
 8000d96:	4301      	orrs	r1, r0
 8000d98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9c:	fa1f fe8c 	uxth.w	lr, ip
 8000da0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000da4:	fb07 3610 	mls	r6, r7, r0, r3
 8000da8:	0c0b      	lsrs	r3, r1, #16
 8000daa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dae:	fb00 f60e 	mul.w	r6, r0, lr
 8000db2:	429e      	cmp	r6, r3
 8000db4:	fa04 f402 	lsl.w	r4, r4, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x260>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dc2:	d22f      	bcs.n	8000e24 <__udivmoddi4+0x2b8>
 8000dc4:	429e      	cmp	r6, r3
 8000dc6:	d92d      	bls.n	8000e24 <__udivmoddi4+0x2b8>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	1b9b      	subs	r3, r3, r6
 8000dce:	b289      	uxth	r1, r1
 8000dd0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dd4:	fb07 3316 	mls	r3, r7, r6, r3
 8000dd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ddc:	fb06 f30e 	mul.w	r3, r6, lr
 8000de0:	428b      	cmp	r3, r1
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x28a>
 8000de4:	eb1c 0101 	adds.w	r1, ip, r1
 8000de8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000dec:	d216      	bcs.n	8000e1c <__udivmoddi4+0x2b0>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d914      	bls.n	8000e1c <__udivmoddi4+0x2b0>
 8000df2:	3e02      	subs	r6, #2
 8000df4:	4461      	add	r1, ip
 8000df6:	1ac9      	subs	r1, r1, r3
 8000df8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dfc:	e738      	b.n	8000c70 <__udivmoddi4+0x104>
 8000dfe:	462e      	mov	r6, r5
 8000e00:	4628      	mov	r0, r5
 8000e02:	e705      	b.n	8000c10 <__udivmoddi4+0xa4>
 8000e04:	4606      	mov	r6, r0
 8000e06:	e6e3      	b.n	8000bd0 <__udivmoddi4+0x64>
 8000e08:	4618      	mov	r0, r3
 8000e0a:	e6f8      	b.n	8000bfe <__udivmoddi4+0x92>
 8000e0c:	454b      	cmp	r3, r9
 8000e0e:	d2a9      	bcs.n	8000d64 <__udivmoddi4+0x1f8>
 8000e10:	ebb9 0802 	subs.w	r8, r9, r2
 8000e14:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e18:	3801      	subs	r0, #1
 8000e1a:	e7a3      	b.n	8000d64 <__udivmoddi4+0x1f8>
 8000e1c:	4646      	mov	r6, r8
 8000e1e:	e7ea      	b.n	8000df6 <__udivmoddi4+0x28a>
 8000e20:	4620      	mov	r0, r4
 8000e22:	e794      	b.n	8000d4e <__udivmoddi4+0x1e2>
 8000e24:	4640      	mov	r0, r8
 8000e26:	e7d1      	b.n	8000dcc <__udivmoddi4+0x260>
 8000e28:	46d0      	mov	r8, sl
 8000e2a:	e77b      	b.n	8000d24 <__udivmoddi4+0x1b8>
 8000e2c:	3b02      	subs	r3, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	e732      	b.n	8000c98 <__udivmoddi4+0x12c>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e709      	b.n	8000c4a <__udivmoddi4+0xde>
 8000e36:	4464      	add	r4, ip
 8000e38:	3802      	subs	r0, #2
 8000e3a:	e742      	b.n	8000cc2 <__udivmoddi4+0x156>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e46:	f003 fbbd 	bl	80045c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4a:	f000 f87d 	bl	8000f48 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  BSP_LCD_Init();
 8000e4e:	f002 fd4d 	bl	80038ec <BSP_LCD_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e52:	f000 fc3b 	bl	80016cc <MX_GPIO_Init>
  MX_CRC_Init();
 8000e56:	f000 f93b 	bl	80010d0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000e5a:	f000 f977 	bl	800114c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000e5e:	f000 fbe5 	bl	800162c <MX_FMC_Init>
  MX_I2C3_Init();
 8000e62:	f000 f9a5 	bl	80011b0 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000e66:	f000 f9e3 	bl	8001230 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000e6a:	f000 fa61 	bl	8001330 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000e6e:	f000 fa95 	bl	800139c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000e72:	f000 fb7b 	bl	800156c <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000e76:	f00c fd35 	bl	800d8e4 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 8000e7a:	f000 fadf 	bl	800143c <MX_TIM2_Init>
  MX_DMA_Init();
 8000e7e:	f000 fb9f 	bl	80015c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e82:	f000 f8d3 	bl	800102c <MX_ADC1_Init>
  MX_DAC_Init();
 8000e86:	f000 f937 	bl	80010f8 <MX_DAC_Init>
  MX_TIM4_Init();
 8000e8a:	f000 fb23 	bl	80014d4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
    
  HAL_TIM_Base_Start(&htim2);
 8000e8e:	4825      	ldr	r0, [pc, #148]	; (8000f24 <main+0xe4>)
 8000e90:	f009 fc98 	bl	800a7c4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000e94:	4824      	ldr	r0, [pc, #144]	; (8000f28 <main+0xe8>)
 8000e96:	f009 fc95 	bl	800a7c4 <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)signal_Buffer,Signal_Buffer);
 8000e9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e9e:	4923      	ldr	r1, [pc, #140]	; (8000f2c <main+0xec>)
 8000ea0:	4823      	ldr	r0, [pc, #140]	; (8000f30 <main+0xf0>)
 8000ea2:	f003 fc39 	bl	8004718 <HAL_ADC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_2,DAC_Buffer,1024,DAC_ALIGN_12B_R);
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eae:	4a21      	ldr	r2, [pc, #132]	; (8000f34 <main+0xf4>)
 8000eb0:	2110      	movs	r1, #16
 8000eb2:	4821      	ldr	r0, [pc, #132]	; (8000f38 <main+0xf8>)
 8000eb4:	f004 f924 	bl	8005100 <HAL_DAC_Start_DMA>


  BSP_LCD_DisplayOn();
 8000eb8:	f003 f832 	bl	8003f20 <BSP_LCD_DisplayOn>
  BSP_LCD_LayerDefaultInit(0,LCD_FRAME_BUFFER);
 8000ebc:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f002 fd95 	bl	80039f0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1,LCD_FRAME_BUFFER);
 8000ec6:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f002 fd90 	bl	80039f0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f002 fdf1 	bl	8003ab8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_TRANSPARENT);
 8000ed6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000eda:	f002 fe2f 	bl	8003b3c <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f002 fdea 	bl	8003ab8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_TRANSPARENT);
 8000ee4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000ee8:	f002 fe28 	bl	8003b3c <BSP_LCD_Clear>
   
  arm_rfft_fast_init_f32(&fft_handler, FFT_Buffer_len);
 8000eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef0:	4812      	ldr	r0, [pc, #72]	; (8000f3c <main+0xfc>)
 8000ef2:	f00c ffad 	bl	800de50 <arm_rfft_fast_init_f32>
  FIR_int();
 8000ef6:	f000 fd93 	bl	8001a20 <FIR_int>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DoFIR();
 8000efa:	f000 fdb7 	bl	8001a6c <DoFIR>
      Display(&button_in);
 8000efe:	4810      	ldr	r0, [pc, #64]	; (8000f40 <main+0x100>)
 8000f00:	f000 fe42 	bl	8001b88 <Display>
      if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1)
 8000f04:	2101      	movs	r1, #1
 8000f06:	480f      	ldr	r0, [pc, #60]	; (8000f44 <main+0x104>)
 8000f08:	f005 fd50 	bl	80069ac <HAL_GPIO_ReadPin>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d1f3      	bne.n	8000efa <main+0xba>
      {
          button_in = button_in + 1;
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <main+0x100>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a09      	ldr	r2, [pc, #36]	; (8000f40 <main+0x100>)
 8000f1a:	6013      	str	r3, [r2, #0]
          HAL_Delay(150);
 8000f1c:	2096      	movs	r0, #150	; 0x96
 8000f1e:	f003 fb93 	bl	8004648 <HAL_Delay>
	  DoFIR();
 8000f22:	e7ea      	b.n	8000efa <main+0xba>
 8000f24:	2000040c 	.word	0x2000040c
 8000f28:	20000454 	.word	0x20000454
 8000f2c:	20000514 	.word	0x20000514
 8000f30:	2000010c 	.word	0x2000010c
 8000f34:	2000471c 	.word	0x2000471c
 8000f38:	200001bc 	.word	0x200001bc
 8000f3c:	200000f4 	.word	0x200000f4
 8000f40:	20007f1c 	.word	0x20007f1c
 8000f44:	40020000 	.word	0x40020000

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	; 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0320 	add.w	r3, r7, #32
 8000f52:	2230      	movs	r2, #48	; 0x30
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f00e f87c 	bl	800f054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <SystemClock_Config+0xdc>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a2b      	ldr	r2, [pc, #172]	; (8001024 <SystemClock_Config+0xdc>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b29      	ldr	r3, [pc, #164]	; (8001024 <SystemClock_Config+0xdc>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	4b26      	ldr	r3, [pc, #152]	; (8001028 <SystemClock_Config+0xe0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a25      	ldr	r2, [pc, #148]	; (8001028 <SystemClock_Config+0xe0>)
 8000f92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b23      	ldr	r3, [pc, #140]	; (8001028 <SystemClock_Config+0xe0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000fbc:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000fc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fca:	f107 0320 	add.w	r3, r7, #32
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f007 feae 	bl	8008d30 <HAL_RCC_OscConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fda:	f001 fb3d 	bl	8002658 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fde:	f007 fe57 	bl	8008c90 <HAL_PWREx_EnableOverDrive>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000fe8:	f001 fb36 	bl	8002658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fec:	230f      	movs	r3, #15
 8000fee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ffc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2105      	movs	r1, #5
 800100a:	4618      	mov	r0, r3
 800100c:	f008 f908 	bl	8009220 <HAL_RCC_ClockConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001016:	f001 fb1f 	bl	8002658 <Error_Handler>
  }
}
 800101a:	bf00      	nop
 800101c:	3750      	adds	r7, #80	; 0x50
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40023800 	.word	0x40023800
 8001028:	40007000 	.word	0x40007000

0800102c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800103e:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001040:	4a22      	ldr	r2, [pc, #136]	; (80010cc <MX_ADC1_Init+0xa0>)
 8001042:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001044:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001046:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800104a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <MX_ADC1_Init+0x9c>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001052:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001058:	4b1b      	ldr	r3, [pc, #108]	; (80010c8 <MX_ADC1_Init+0x9c>)
 800105a:	2200      	movs	r2, #0
 800105c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800105e:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001068:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800106e:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001070:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001074:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001076:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <MX_ADC1_Init+0x9c>)
 800107e:	2201      	movs	r2, #1
 8001080:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <MX_ADC1_Init+0x9c>)
 800108c:	2201      	movs	r2, #1
 800108e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <MX_ADC1_Init+0x9c>)
 8001092:	f003 fafd 	bl	8004690 <HAL_ADC_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800109c:	f001 fadc 	bl	8002658 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010a0:	230d      	movs	r3, #13
 80010a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <MX_ADC1_Init+0x9c>)
 80010b2:	f003 fc55 	bl	8004960 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80010bc:	f001 facc 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000010c 	.word	0x2000010c
 80010cc:	40012000 	.word	0x40012000

080010d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_CRC_Init+0x20>)
 80010d6:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <MX_CRC_Init+0x24>)
 80010d8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_CRC_Init+0x20>)
 80010dc:	f003 ffd2 	bl	8005084 <HAL_CRC_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80010e6:	f001 fab7 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200001b4 	.word	0x200001b4
 80010f4:	40023000 	.word	0x40023000

080010f8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <MX_DAC_Init+0x4c>)
 8001108:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <MX_DAC_Init+0x50>)
 800110a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <MX_DAC_Init+0x4c>)
 800110e:	f003 ffd5 	bl	80050bc <HAL_DAC_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001118:	f001 fa9e 	bl	8002658 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800111c:	232c      	movs	r3, #44	; 0x2c
 800111e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001124:	463b      	mov	r3, r7
 8001126:	2210      	movs	r2, #16
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	; (8001144 <MX_DAC_Init+0x4c>)
 800112c:	f004 f938 	bl	80053a0 <HAL_DAC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001136:	f001 fa8f 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200001bc 	.word	0x200001bc
 8001148:	40007400 	.word	0x40007400

0800114c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_DMA2D_Init+0x5c>)
 8001152:	4a16      	ldr	r2, [pc, #88]	; (80011ac <MX_DMA2D_Init+0x60>)
 8001154:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_DMA2D_Init+0x5c>)
 8001158:	2200      	movs	r2, #0
 800115a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <MX_DMA2D_Init+0x5c>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_DMA2D_Init+0x5c>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_DMA2D_Init+0x5c>)
 800116a:	2200      	movs	r2, #0
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_DMA2D_Init+0x5c>)
 8001170:	2200      	movs	r2, #0
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_DMA2D_Init+0x5c>)
 8001176:	2200      	movs	r2, #0
 8001178:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <MX_DMA2D_Init+0x5c>)
 800117c:	2200      	movs	r2, #0
 800117e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001180:	4809      	ldr	r0, [pc, #36]	; (80011a8 <MX_DMA2D_Init+0x5c>)
 8001182:	f004 fdbf 	bl	8005d04 <HAL_DMA2D_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800118c:	f001 fa64 	bl	8002658 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001190:	2101      	movs	r1, #1
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_DMA2D_Init+0x5c>)
 8001194:	f005 f824 	bl	80061e0 <HAL_DMA2D_ConfigLayer>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800119e:	f001 fa5b 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000230 	.word	0x20000230
 80011ac:	4002b000 	.word	0x4002b000

080011b0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_I2C3_Init+0x74>)
 80011b6:	4a1c      	ldr	r2, [pc, #112]	; (8001228 <MX_I2C3_Init+0x78>)
 80011b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_I2C3_Init+0x74>)
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <MX_I2C3_Init+0x7c>)
 80011be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MX_I2C3_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_I2C3_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_I2C3_Init+0x74>)
 80011ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011d2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d4:	4b13      	ldr	r3, [pc, #76]	; (8001224 <MX_I2C3_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_I2C3_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e0:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_I2C3_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_I2C3_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_I2C3_Init+0x74>)
 80011ee:	f006 fffd 	bl	80081ec <HAL_I2C_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80011f8:	f001 fa2e 	bl	8002658 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011fc:	2100      	movs	r1, #0
 80011fe:	4809      	ldr	r0, [pc, #36]	; (8001224 <MX_I2C3_Init+0x74>)
 8001200:	f007 f938 	bl	8008474 <HAL_I2CEx_ConfigAnalogFilter>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800120a:	f001 fa25 	bl	8002658 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_I2C3_Init+0x74>)
 8001212:	f007 f96b 	bl	80084ec <HAL_I2CEx_ConfigDigitalFilter>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800121c:	f001 fa1c 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000270 	.word	0x20000270
 8001228:	40005c00 	.word	0x40005c00
 800122c:	000186a0 	.word	0x000186a0

08001230 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08e      	sub	sp, #56	; 0x38
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2234      	movs	r2, #52	; 0x34
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f00d ff09 	bl	800f054 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001242:	4b39      	ldr	r3, [pc, #228]	; (8001328 <MX_LTDC_Init+0xf8>)
 8001244:	4a39      	ldr	r2, [pc, #228]	; (800132c <MX_LTDC_Init+0xfc>)
 8001246:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001248:	4b37      	ldr	r3, [pc, #220]	; (8001328 <MX_LTDC_Init+0xf8>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800124e:	4b36      	ldr	r3, [pc, #216]	; (8001328 <MX_LTDC_Init+0xf8>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001254:	4b34      	ldr	r3, [pc, #208]	; (8001328 <MX_LTDC_Init+0xf8>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800125a:	4b33      	ldr	r3, [pc, #204]	; (8001328 <MX_LTDC_Init+0xf8>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001260:	4b31      	ldr	r3, [pc, #196]	; (8001328 <MX_LTDC_Init+0xf8>)
 8001262:	2209      	movs	r2, #9
 8001264:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001266:	4b30      	ldr	r3, [pc, #192]	; (8001328 <MX_LTDC_Init+0xf8>)
 8001268:	2201      	movs	r2, #1
 800126a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800126c:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <MX_LTDC_Init+0xf8>)
 800126e:	221d      	movs	r2, #29
 8001270:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001272:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <MX_LTDC_Init+0xf8>)
 8001274:	2203      	movs	r2, #3
 8001276:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001278:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <MX_LTDC_Init+0xf8>)
 800127a:	f240 120d 	movw	r2, #269	; 0x10d
 800127e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001280:	4b29      	ldr	r3, [pc, #164]	; (8001328 <MX_LTDC_Init+0xf8>)
 8001282:	f240 1243 	movw	r2, #323	; 0x143
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001288:	4b27      	ldr	r3, [pc, #156]	; (8001328 <MX_LTDC_Init+0xf8>)
 800128a:	f240 1217 	movw	r2, #279	; 0x117
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001290:	4b25      	ldr	r3, [pc, #148]	; (8001328 <MX_LTDC_Init+0xf8>)
 8001292:	f240 1247 	movw	r2, #327	; 0x147
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001298:	4b23      	ldr	r3, [pc, #140]	; (8001328 <MX_LTDC_Init+0xf8>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <MX_LTDC_Init+0xf8>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <MX_LTDC_Init+0xf8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80012b0:	481d      	ldr	r0, [pc, #116]	; (8001328 <MX_LTDC_Init+0xf8>)
 80012b2:	f007 f95b 	bl	800856c <HAL_LTDC_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80012bc:	f001 f9cc 	bl	8002658 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 320;
 80012c4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012c8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 240;
 80012ce:	23f0      	movs	r3, #240	; 0xf0
 80012d0:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012d2:	2302      	movs	r3, #2
 80012d4:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80012d6:	23ff      	movs	r3, #255	; 0xff
 80012d8:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80012de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012e2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80012e4:	2307      	movs	r3, #7
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80012e8:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80012ee:	23f0      	movs	r3, #240	; 0xf0
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80012f2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80012f6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_LTDC_Init+0xf8>)
 8001312:	f007 fabd 	bl	8008890 <HAL_LTDC_ConfigLayer>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800131c:	f001 f99c 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	3738      	adds	r7, #56	; 0x38
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200002c4 	.word	0x200002c4
 800132c:	40016800 	.word	0x40016800

08001330 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_SPI5_Init+0x64>)
 8001336:	4a18      	ldr	r2, [pc, #96]	; (8001398 <MX_SPI5_Init+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <MX_SPI5_Init+0x64>)
 800133c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001340:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_SPI5_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_SPI5_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_SPI5_Init+0x64>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_SPI5_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_SPI5_Init+0x64>)
 800135c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001360:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_SPI5_Init+0x64>)
 8001364:	2218      	movs	r2, #24
 8001366:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <MX_SPI5_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_SPI5_Init+0x64>)
 8001370:	2200      	movs	r2, #0
 8001372:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <MX_SPI5_Init+0x64>)
 8001376:	2200      	movs	r2, #0
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_SPI5_Init+0x64>)
 800137c:	220a      	movs	r2, #10
 800137e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <MX_SPI5_Init+0x64>)
 8001382:	f008 fbf0 	bl	8009b66 <HAL_SPI_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800138c:	f001 f964 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	2000036c 	.word	0x2000036c
 8001398:	40015000 	.word	0x40015000

0800139c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <MX_TIM1_Init+0x98>)
 80013ba:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <MX_TIM1_Init+0x9c>)
 80013bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80013be:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <MX_TIM1_Init+0x98>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <MX_TIM1_Init+0x98>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <MX_TIM1_Init+0x98>)
 80013cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d2:	4b18      	ldr	r3, [pc, #96]	; (8001434 <MX_TIM1_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013d8:	4b16      	ldr	r3, [pc, #88]	; (8001434 <MX_TIM1_Init+0x98>)
 80013da:	2200      	movs	r2, #0
 80013dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <MX_TIM1_Init+0x98>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013e4:	4813      	ldr	r0, [pc, #76]	; (8001434 <MX_TIM1_Init+0x98>)
 80013e6:	f009 f99d 	bl	800a724 <HAL_TIM_Base_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013f0:	f001 f932 	bl	8002658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	4619      	mov	r1, r3
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <MX_TIM1_Init+0x98>)
 8001402:	f009 fbbf 	bl	800ab84 <HAL_TIM_ConfigClockSource>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800140c:	f001 f924 	bl	8002658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	4619      	mov	r1, r3
 800141c:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_TIM1_Init+0x98>)
 800141e:	f009 fddb 	bl	800afd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001428:	f001 f916 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200003c4 	.word	0x200003c4
 8001438:	40010000 	.word	0x40010000

0800143c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	605a      	str	r2, [r3, #4]
 800144c:	609a      	str	r2, [r3, #8]
 800144e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001450:	463b      	mov	r3, r7
 8001452:	2200      	movs	r2, #0
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <MX_TIM2_Init+0x94>)
 800145a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800145e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <MX_TIM2_Init+0x94>)
 8001462:	2259      	movs	r2, #89	; 0x59
 8001464:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_TIM2_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24;
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <MX_TIM2_Init+0x94>)
 800146e:	2218      	movs	r2, #24
 8001470:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <MX_TIM2_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_TIM2_Init+0x94>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800147e:	4814      	ldr	r0, [pc, #80]	; (80014d0 <MX_TIM2_Init+0x94>)
 8001480:	f009 f950 	bl	800a724 <HAL_TIM_Base_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800148a:	f001 f8e5 	bl	8002658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001494:	f107 0308 	add.w	r3, r7, #8
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <MX_TIM2_Init+0x94>)
 800149c:	f009 fb72 	bl	800ab84 <HAL_TIM_ConfigClockSource>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80014a6:	f001 f8d7 	bl	8002658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014aa:	2320      	movs	r3, #32
 80014ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <MX_TIM2_Init+0x94>)
 80014b8:	f009 fd8e 	bl	800afd8 <HAL_TIMEx_MasterConfigSynchronization>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80014c2:	f001 f8c9 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2000040c 	.word	0x2000040c

080014d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0308 	add.w	r3, r7, #8
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014f0:	4b1c      	ldr	r3, [pc, #112]	; (8001564 <MX_TIM4_Init+0x90>)
 80014f2:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <MX_TIM4_Init+0x94>)
 80014f4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 80014f6:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <MX_TIM4_Init+0x90>)
 80014f8:	2259      	movs	r2, #89	; 0x59
 80014fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <MX_TIM4_Init+0x90>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 12;
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <MX_TIM4_Init+0x90>)
 8001504:	220c      	movs	r2, #12
 8001506:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <MX_TIM4_Init+0x90>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <MX_TIM4_Init+0x90>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <MX_TIM4_Init+0x90>)
 8001516:	f009 f905 	bl	800a724 <HAL_TIM_Base_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001520:	f001 f89a 	bl	8002658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	4619      	mov	r1, r3
 8001530:	480c      	ldr	r0, [pc, #48]	; (8001564 <MX_TIM4_Init+0x90>)
 8001532:	f009 fb27 	bl	800ab84 <HAL_TIM_ConfigClockSource>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 800153c:	f001 f88c 	bl	8002658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001540:	2320      	movs	r3, #32
 8001542:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001544:	2300      	movs	r3, #0
 8001546:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	4619      	mov	r1, r3
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <MX_TIM4_Init+0x90>)
 800154e:	f009 fd43 	bl	800afd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001558:	f001 f87e 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800155c:	bf00      	nop
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000454 	.word	0x20000454
 8001568:	40000800 	.word	0x40000800

0800156c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001570:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001572:	4a12      	ldr	r2, [pc, #72]	; (80015bc <MX_USART1_UART_Init+0x50>)
 8001574:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800157c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001586:	2200      	movs	r2, #0
 8001588:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001592:	220c      	movs	r2, #12
 8001594:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_USART1_UART_Init+0x4c>)
 80015a4:	f009 fda8 	bl	800b0f8 <HAL_UART_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015ae:	f001 f853 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	2000049c 	.word	0x2000049c
 80015bc:	40011000 	.word	0x40011000

080015c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <MX_DMA_Init+0x68>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a16      	ldr	r2, [pc, #88]	; (8001628 <MX_DMA_Init+0x68>)
 80015d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <MX_DMA_Init+0x68>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_DMA_Init+0x68>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <MX_DMA_Init+0x68>)
 80015ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <MX_DMA_Init+0x68>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	2011      	movs	r0, #17
 8001604:	f003 fd14 	bl	8005030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001608:	2011      	movs	r0, #17
 800160a:	f003 fd2d 	bl	8005068 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	2100      	movs	r1, #0
 8001612:	2038      	movs	r0, #56	; 0x38
 8001614:	f003 fd0c 	bl	8005030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001618:	2038      	movs	r0, #56	; 0x38
 800161a:	f003 fd25 	bl	8005068 <HAL_NVIC_EnableIRQ>

}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
 8001640:	615a      	str	r2, [r3, #20]
 8001642:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <MX_FMC_Init+0x98>)
 8001646:	4a20      	ldr	r2, [pc, #128]	; (80016c8 <MX_FMC_Init+0x9c>)
 8001648:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <MX_FMC_Init+0x98>)
 800164c:	2201      	movs	r2, #1
 800164e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001650:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <MX_FMC_Init+0x98>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <MX_FMC_Init+0x98>)
 8001658:	2204      	movs	r2, #4
 800165a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <MX_FMC_Init+0x98>)
 800165e:	2210      	movs	r2, #16
 8001660:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MX_FMC_Init+0x98>)
 8001664:	2240      	movs	r2, #64	; 0x40
 8001666:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <MX_FMC_Init+0x98>)
 800166a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800166e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_FMC_Init+0x98>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <MX_FMC_Init+0x98>)
 8001678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800167c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_FMC_Init+0x98>)
 8001680:	2200      	movs	r2, #0
 8001682:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <MX_FMC_Init+0x98>)
 8001686:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800168c:	2302      	movs	r3, #2
 800168e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001690:	2307      	movs	r3, #7
 8001692:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001694:	2304      	movs	r3, #4
 8001696:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001698:	2307      	movs	r3, #7
 800169a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800169c:	2303      	movs	r3, #3
 800169e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80016a4:	2302      	movs	r3, #2
 80016a6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	4619      	mov	r1, r3
 80016ac:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_FMC_Init+0x98>)
 80016ae:	f008 f9c9 	bl	8009a44 <HAL_SDRAM_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80016b8:	f000 ffce 	bl	8002658 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80016bc:	bf00      	nop
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200004e0 	.word	0x200004e0
 80016c8:	a0000140 	.word	0xa0000140

080016cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08e      	sub	sp, #56	; 0x38
 80016d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
 80016e6:	4b7b      	ldr	r3, [pc, #492]	; (80018d4 <MX_GPIO_Init+0x208>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a7a      	ldr	r2, [pc, #488]	; (80018d4 <MX_GPIO_Init+0x208>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b78      	ldr	r3, [pc, #480]	; (80018d4 <MX_GPIO_Init+0x208>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0304 	and.w	r3, r3, #4
 80016fa:	623b      	str	r3, [r7, #32]
 80016fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
 8001702:	4b74      	ldr	r3, [pc, #464]	; (80018d4 <MX_GPIO_Init+0x208>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a73      	ldr	r2, [pc, #460]	; (80018d4 <MX_GPIO_Init+0x208>)
 8001708:	f043 0320 	orr.w	r3, r3, #32
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b71      	ldr	r3, [pc, #452]	; (80018d4 <MX_GPIO_Init+0x208>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0320 	and.w	r3, r3, #32
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	4b6d      	ldr	r3, [pc, #436]	; (80018d4 <MX_GPIO_Init+0x208>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a6c      	ldr	r2, [pc, #432]	; (80018d4 <MX_GPIO_Init+0x208>)
 8001724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b6a      	ldr	r3, [pc, #424]	; (80018d4 <MX_GPIO_Init+0x208>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	4b66      	ldr	r3, [pc, #408]	; (80018d4 <MX_GPIO_Init+0x208>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a65      	ldr	r2, [pc, #404]	; (80018d4 <MX_GPIO_Init+0x208>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b63      	ldr	r3, [pc, #396]	; (80018d4 <MX_GPIO_Init+0x208>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	4b5f      	ldr	r3, [pc, #380]	; (80018d4 <MX_GPIO_Init+0x208>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a5e      	ldr	r2, [pc, #376]	; (80018d4 <MX_GPIO_Init+0x208>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b5c      	ldr	r3, [pc, #368]	; (80018d4 <MX_GPIO_Init+0x208>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <MX_GPIO_Init+0x208>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a57      	ldr	r2, [pc, #348]	; (80018d4 <MX_GPIO_Init+0x208>)
 8001778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b55      	ldr	r3, [pc, #340]	; (80018d4 <MX_GPIO_Init+0x208>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	4b51      	ldr	r3, [pc, #324]	; (80018d4 <MX_GPIO_Init+0x208>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a50      	ldr	r2, [pc, #320]	; (80018d4 <MX_GPIO_Init+0x208>)
 8001794:	f043 0310 	orr.w	r3, r3, #16
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b4e      	ldr	r3, [pc, #312]	; (80018d4 <MX_GPIO_Init+0x208>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	4b4a      	ldr	r3, [pc, #296]	; (80018d4 <MX_GPIO_Init+0x208>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a49      	ldr	r2, [pc, #292]	; (80018d4 <MX_GPIO_Init+0x208>)
 80017b0:	f043 0308 	orr.w	r3, r3, #8
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b47      	ldr	r3, [pc, #284]	; (80018d4 <MX_GPIO_Init+0x208>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0308 	and.w	r3, r3, #8
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2116      	movs	r1, #22
 80017c6:	4844      	ldr	r0, [pc, #272]	; (80018d8 <MX_GPIO_Init+0x20c>)
 80017c8:	f005 f908 	bl	80069dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80017cc:	2200      	movs	r2, #0
 80017ce:	2180      	movs	r1, #128	; 0x80
 80017d0:	4842      	ldr	r0, [pc, #264]	; (80018dc <MX_GPIO_Init+0x210>)
 80017d2:	f005 f903 	bl	80069dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80017dc:	4840      	ldr	r0, [pc, #256]	; (80018e0 <MX_GPIO_Init+0x214>)
 80017de:	f005 f8fd 	bl	80069dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80017e2:	2200      	movs	r2, #0
 80017e4:	f246 0108 	movw	r1, #24584	; 0x6008
 80017e8:	483e      	ldr	r0, [pc, #248]	; (80018e4 <MX_GPIO_Init+0x218>)
 80017ea:	f005 f8f7 	bl	80069dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80017ee:	2316      	movs	r3, #22
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001802:	4619      	mov	r1, r3
 8001804:	4834      	ldr	r0, [pc, #208]	; (80018d8 <MX_GPIO_Init+0x20c>)
 8001806:	f004 fe19 	bl	800643c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800180a:	f248 0307 	movw	r3, #32775	; 0x8007
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001810:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181e:	4619      	mov	r1, r3
 8001820:	482e      	ldr	r0, [pc, #184]	; (80018dc <MX_GPIO_Init+0x210>)
 8001822:	f004 fe0b 	bl	800643c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183a:	4619      	mov	r1, r3
 800183c:	4827      	ldr	r0, [pc, #156]	; (80018dc <MX_GPIO_Init+0x210>)
 800183e:	f004 fdfd 	bl	800643c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001842:	2320      	movs	r3, #32
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001846:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001854:	4619      	mov	r1, r3
 8001856:	4820      	ldr	r0, [pc, #128]	; (80018d8 <MX_GPIO_Init+0x20c>)
 8001858:	f004 fdf0 	bl	800643c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800185c:	2304      	movs	r3, #4
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001860:	2300      	movs	r3, #0
 8001862:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	4619      	mov	r1, r3
 800186e:	481e      	ldr	r0, [pc, #120]	; (80018e8 <MX_GPIO_Init+0x21c>)
 8001870:	f004 fde4 	bl	800643c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001874:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187a:	2300      	movs	r3, #0
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001886:	4619      	mov	r1, r3
 8001888:	4815      	ldr	r0, [pc, #84]	; (80018e0 <MX_GPIO_Init+0x214>)
 800188a:	f004 fdd7 	bl	800643c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800188e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	2301      	movs	r3, #1
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a4:	4619      	mov	r1, r3
 80018a6:	480e      	ldr	r0, [pc, #56]	; (80018e0 <MX_GPIO_Init+0x214>)
 80018a8:	f004 fdc8 	bl	800643c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|LD3_Pin|LD4_Pin;
 80018ac:	f246 0308 	movw	r3, #24584	; 0x6008
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	2301      	movs	r3, #1
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c2:	4619      	mov	r1, r3
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <MX_GPIO_Init+0x218>)
 80018c6:	f004 fdb9 	bl	800643c <HAL_GPIO_Init>

}
 80018ca:	bf00      	nop
 80018cc:	3738      	adds	r7, #56	; 0x38
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020c00 	.word	0x40020c00
 80018e4:	40021800 	.word	0x40021800
 80018e8:	40020400 	.word	0x40020400

080018ec <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
	{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	//HAL_ADC_Stop_DMA(&hadc1);
    for (int i = 0; i < Signal_Buffer; i++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	e028      	b.n	800194c <HAL_ADC_ConvCpltCallback+0x60>
    {
        input_signal[i] = 3.0 * (float)signal_Buffer[i]/4096.0;
 80018fa:	4a19      	ldr	r2, [pc, #100]	; (8001960 <HAL_ADC_ConvCpltCallback+0x74>)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001902:	ee07 3a90 	vmov	s15, r3
 8001906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800190a:	ee17 0a90 	vmov	r0, s15
 800190e:	f7fe fe33 	bl	8000578 <__aeabi_f2d>
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <HAL_ADC_ConvCpltCallback+0x78>)
 8001918:	f7fe fe86 	bl	8000628 <__aeabi_dmul>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4b0f      	ldr	r3, [pc, #60]	; (8001968 <HAL_ADC_ConvCpltCallback+0x7c>)
 800192a:	f7fe ffa7 	bl	800087c <__aeabi_ddiv>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f8b1 	bl	8000a9c <__aeabi_d2f>
 800193a:	4602      	mov	r2, r0
 800193c:	490b      	ldr	r1, [pc, #44]	; (800196c <HAL_ADC_ConvCpltCallback+0x80>)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < Signal_Buffer; i++)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	3301      	adds	r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001952:	dbd2      	blt.n	80018fa <HAL_ADC_ConvCpltCallback+0xe>
    }
	}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000514 	.word	0x20000514
 8001964:	40080000 	.word	0x40080000
 8001968:	40b00000 	.word	0x40b00000
 800196c:	20000d14 	.word	0x20000d14

08001970 <DoFFT>:

void DoFFT(float *input, float *output, float *output_dB)
   {
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
       arm_rfft_fast_f32(&fft_handler, input, output,0);
 800197c:	2300      	movs	r3, #0
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	68f9      	ldr	r1, [r7, #12]
 8001982:	4825      	ldr	r0, [pc, #148]	; (8001a18 <DoFFT+0xa8>)
 8001984:	f00c fae6 	bl	800df54 <arm_rfft_fast_f32>
       for (int i = 0; i < FFT_Buffer_len; i++)
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	e010      	b.n	80019b0 <DoFFT+0x40>
       {
       	output[i] = 2.0 * output[i];
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	4413      	add	r3, r2
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	4413      	add	r3, r2
 80019a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019a6:	edc3 7a00 	vstr	s15, [r3]
       for (int i = 0; i < FFT_Buffer_len; i++)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	3301      	adds	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b6:	dbea      	blt.n	800198e <DoFFT+0x1e>
       }
       arm_cmplx_mag_f32(output, output_dB, FFT_Buffer_len/2);
 80019b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019bc:	6879      	ldr	r1, [r7, #4]
 80019be:	68b8      	ldr	r0, [r7, #8]
 80019c0:	f00c ff34 	bl	800e82c <arm_cmplx_mag_f32>
       for (int i = 0; i < FFT_Buffer_len/2; i++)
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	e01c      	b.n	8001a04 <DoFFT+0x94>
       {
       	output_dB[i] = 20*log10f(output_dB[i]) - 60;
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4413      	add	r3, r2
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	eeb0 0a67 	vmov.f32	s0, s15
 80019da:	f00d fc41 	bl	800f260 <log10f>
 80019de:	eef0 7a40 	vmov.f32	s15, s0
 80019e2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80019e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001a1c <DoFFT+0xac>
 80019f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019fa:	edc3 7a00 	vstr	s15, [r3]
       for (int i = 0; i < FFT_Buffer_len/2; i++)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	3301      	adds	r3, #1
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a0a:	dbde      	blt.n	80019ca <DoFFT+0x5a>
       }

   }
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3718      	adds	r7, #24
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200000f4 	.word	0x200000f4
 8001a1c:	42700000 	.word	0x42700000

08001a20 <FIR_int>:
void FIR_int()
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
    for (uint8_t n = 0; n < NUM_TAPS; n++)
 8001a26:	2300      	movs	r3, #0
 8001a28:	71fb      	strb	r3, [r7, #7]
 8001a2a:	e009      	b.n	8001a40 <FIR_int+0x20>
    {
        Cir_Buffer[n] = 0.0; // Set buffer to 0
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	4a0c      	ldr	r2, [pc, #48]	; (8001a60 <FIR_int+0x40>)
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
    for (uint8_t n = 0; n < NUM_TAPS; n++)
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	71fb      	strb	r3, [r7, #7]
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	2b69      	cmp	r3, #105	; 0x69
 8001a44:	d9f2      	bls.n	8001a2c <FIR_int+0xc>
    }
    cir_index = 0;  //Set circular index to 0
 8001a46:	4b07      	ldr	r3, [pc, #28]	; (8001a64 <FIR_int+0x44>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
    FIR_out = 0;    //Set filter output to 0
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <FIR_int+0x48>)
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
    
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	2000456c 	.word	0x2000456c
 8001a64:	20004714 	.word	0x20004714
 8001a68:	20004718 	.word	0x20004718

08001a6c <DoFIR>:

void DoFIR()
//Using ring buffer implementation 
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
    for (int i = 0; i < Signal_Buffer; i++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	e06a      	b.n	8001b4e <DoFIR+0xe2>
    {
        
        Cir_Buffer[cir_index] = input_signal[i];  //Place the newest sample where the buffer index is pointing
 8001a78:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <DoFIR+0xf8>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	4a3a      	ldr	r2, [pc, #232]	; (8001b68 <DoFIR+0xfc>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4938      	ldr	r1, [pc, #224]	; (8001b6c <DoFIR+0x100>)
 8001a8a:	0083      	lsls	r3, r0, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	601a      	str	r2, [r3, #0]
        
        cir_index++; //Incremnt the circular index
 8001a90:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <DoFIR+0xf8>)
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <DoFIR+0xf8>)
 8001a9a:	701a      	strb	r2, [r3, #0]
        
        if (cir_index == NUM_TAPS)
 8001a9c:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <DoFIR+0xf8>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b6a      	cmp	r3, #106	; 0x6a
 8001aa2:	d102      	bne.n	8001aaa <DoFIR+0x3e>
        {
            cir_index = 0; // Set circular index to 0 if the index is larger than the buffer
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <DoFIR+0xf8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
        }
        FIR_out = 0; // Set output to 0
 8001aaa:	4b31      	ldr	r3, [pc, #196]	; (8001b70 <DoFIR+0x104>)
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
        
        uint8_t S_Index = cir_index; // Creare an index that keeps track of the sum
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <DoFIR+0xf8>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	70fb      	strb	r3, [r7, #3]
        for (uint8_t n = 0; n < NUM_TAPS; n++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	70bb      	strb	r3, [r7, #2]
 8001abc:	e021      	b.n	8001b02 <DoFIR+0x96>
        {
            if (S_Index > 0) //If the sum index is larger than 0 need to decrement it
 8001abe:	78fb      	ldrb	r3, [r7, #3]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <DoFIR+0x60>
            {
                S_Index--;
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	70fb      	strb	r3, [r7, #3]
 8001aca:	e001      	b.n	8001ad0 <DoFIR+0x64>
            }
            else
            {
                S_Index = NUM_TAPS - 1;
 8001acc:	2369      	movs	r3, #105	; 0x69
 8001ace:	70fb      	strb	r3, [r7, #3]
            }
            FIR_out += coe[n] * Cir_Buffer[S_Index];
 8001ad0:	78bb      	ldrb	r3, [r7, #2]
 8001ad2:	4a28      	ldr	r2, [pc, #160]	; (8001b74 <DoFIR+0x108>)
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	ed93 7a00 	vldr	s14, [r3]
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	4a23      	ldr	r2, [pc, #140]	; (8001b6c <DoFIR+0x100>)
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	edd3 7a00 	vldr	s15, [r3]
 8001ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aec:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <DoFIR+0x104>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af6:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <DoFIR+0x104>)
 8001af8:	edc3 7a00 	vstr	s15, [r3]
        for (uint8_t n = 0; n < NUM_TAPS; n++)
 8001afc:	78bb      	ldrb	r3, [r7, #2]
 8001afe:	3301      	adds	r3, #1
 8001b00:	70bb      	strb	r3, [r7, #2]
 8001b02:	78bb      	ldrb	r3, [r7, #2]
 8001b04:	2b69      	cmp	r3, #105	; 0x69
 8001b06:	d9da      	bls.n	8001abe <DoFIR+0x52>
        }

        FIR_signal_Buffer[i] = FIR_out;
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <DoFIR+0x104>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	491a      	ldr	r1, [pc, #104]	; (8001b78 <DoFIR+0x10c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	601a      	str	r2, [r3, #0]
        FIR_out = (FIR_out * 1024) + 250;
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <DoFIR+0x104>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001b7c <DoFIR+0x110>
 8001b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b24:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001b80 <DoFIR+0x114>
 8001b28:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <DoFIR+0x104>)
 8001b2e:	edc3 7a00 	vstr	s15, [r3]
        DAC_Buffer[i] = (uint32_t)FIR_out;
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <DoFIR+0x104>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b3c:	ee17 1a90 	vmov	r1, s15
 8001b40:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <DoFIR+0x118>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < Signal_Buffer; i++)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b54:	db90      	blt.n	8001a78 <DoFIR+0xc>
        //HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R,(int)(FIR_out));
    }
    
    
    
}
 8001b56:	bf00      	nop
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	20004714 	.word	0x20004714
 8001b68:	20000d14 	.word	0x20000d14
 8001b6c:	2000456c 	.word	0x2000456c
 8001b70:	20004718 	.word	0x20004718
 8001b74:	0807fe28 	.word	0x0807fe28
 8001b78:	2000356c 	.word	0x2000356c
 8001b7c:	44800000 	.word	0x44800000
 8001b80:	437a0000 	.word	0x437a0000
 8001b84:	2000471c 	.word	0x2000471c

08001b88 <Display>:


void Display(int *button)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b096      	sub	sp, #88	; 0x58
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    int test = *button;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	61bb      	str	r3, [r7, #24]
    switch(test)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	f200 8520 	bhi.w	80025de <Display+0xa56>
 8001b9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <Display+0x1c>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001bbd 	.word	0x08001bbd
 8001ba8:	08001c9f 	.word	0x08001c9f
 8001bac:	08001e0d 	.word	0x08001e0d
 8001bb0:	08001f4b 	.word	0x08001f4b
 8001bb4:	080020c9 	.word	0x080020c9
 8001bb8:	080022a7 	.word	0x080022a7
    {
        case 0: //Orginal Signal
            BSP_LCD_SelectLayer(0);
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f001 ff7b 	bl	8003ab8 <BSP_LCD_SelectLayer>
            BSP_LCD_DrawBitmap (0,0, (uint8_t *)signalg);
 8001bc2:	4a9d      	ldr	r2, [pc, #628]	; (8001e38 <Display+0x2b0>)
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f002 f8f8 	bl	8003dbc <BSP_LCD_DrawBitmap>
            for (int i = 0; i < s_h_len; i++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	657b      	str	r3, [r7, #84]	; 0x54
 8001bd0:	e056      	b.n	8001c80 <Display+0xf8>
            {
                float temp =  (float)signal_Buffer[i] * (s_v_len/4096.0) + (float)s_v_start;
 8001bd2:	4a9a      	ldr	r2, [pc, #616]	; (8001e3c <Display+0x2b4>)
 8001bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001be2:	ee17 0a90 	vmov	r0, s15
 8001be6:	f7fe fcc7 	bl	8000578 <__aeabi_f2d>
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4b94      	ldr	r3, [pc, #592]	; (8001e40 <Display+0x2b8>)
 8001bf0:	f7fe fd1a 	bl	8000628 <__aeabi_dmul>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	4b90      	ldr	r3, [pc, #576]	; (8001e44 <Display+0x2bc>)
 8001c02:	f7fe fb5b 	bl	80002bc <__adddf3>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe ff45 	bl	8000a9c <__aeabi_d2f>
 8001c12:	4603      	mov	r3, r0
 8001c14:	60fb      	str	r3, [r7, #12]
                signal[i].X = (int)temp;
 8001c16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c1e:	ee17 3a90 	vmov	r3, s15
 8001c22:	b219      	sxth	r1, r3
 8001c24:	4a88      	ldr	r2, [pc, #544]	; (8001e48 <Display+0x2c0>)
 8001c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c28:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
                signal[s_h_len*2 - i -1].X = (int)temp;
 8001c2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c36:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001c3a:	3303      	adds	r3, #3
 8001c3c:	ee17 2a90 	vmov	r2, s15
 8001c40:	b211      	sxth	r1, r2
 8001c42:	4a81      	ldr	r2, [pc, #516]	; (8001e48 <Display+0x2c0>)
 8001c44:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
                
                signal[i].Y = i + s_h_start;
 8001c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	332e      	adds	r3, #46	; 0x2e
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	b219      	sxth	r1, r3
 8001c52:	4a7d      	ldr	r2, [pc, #500]	; (8001e48 <Display+0x2c0>)
 8001c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	460a      	mov	r2, r1
 8001c5c:	805a      	strh	r2, [r3, #2]
                signal[s_h_len*2 - i - 1].Y = i + s_h_start ;
 8001c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	332e      	adds	r3, #46	; 0x2e
 8001c64:	b29a      	uxth	r2, r3
 8001c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c68:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001c6c:	3303      	adds	r3, #3
 8001c6e:	b211      	sxth	r1, r2
 8001c70:	4a75      	ldr	r2, [pc, #468]	; (8001e48 <Display+0x2c0>)
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	460a      	mov	r2, r1
 8001c78:	805a      	strh	r2, [r3, #2]
            for (int i = 0; i < s_h_len; i++)
 8001c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	657b      	str	r3, [r7, #84]	; 0x54
 8001c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c82:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001c86:	dba4      	blt.n	8001bd2 <Display+0x4a>
            }
            BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001c88:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001c8c:	f001 ff24 	bl	8003ad8 <BSP_LCD_SetTextColor>
            BSP_LCD_DrawPolygon(signal,s_h_len*2);
 8001c90:	f44f 7101 	mov.w	r1, #516	; 0x204
 8001c94:	486c      	ldr	r0, [pc, #432]	; (8001e48 <Display+0x2c0>)
 8001c96:	f002 f843 	bl	8003d20 <BSP_LCD_DrawPolygon>
        break;
 8001c9a:	f000 bca4 	b.w	80025e6 <Display+0xa5e>
            
        case 1: //Orginal FFT
            for (int i = 0; i < FFT_Buffer_len; i++)
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	653b      	str	r3, [r7, #80]	; 0x50
 8001ca2:	e00c      	b.n	8001cbe <Display+0x136>
            {
                fft_in_buf[i] = input_signal[i];
 8001ca4:	4a69      	ldr	r2, [pc, #420]	; (8001e4c <Display+0x2c4>)
 8001ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4968      	ldr	r1, [pc, #416]	; (8001e50 <Display+0x2c8>)
 8001cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < FFT_Buffer_len; i++)
 8001cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cba:	3301      	adds	r3, #1
 8001cbc:	653b      	str	r3, [r7, #80]	; 0x50
 8001cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc4:	dbee      	blt.n	8001ca4 <Display+0x11c>
            }
            DoFFT(fft_in_buf,fft_out_buf,fft_out_mag);
 8001cc6:	4a63      	ldr	r2, [pc, #396]	; (8001e54 <Display+0x2cc>)
 8001cc8:	4963      	ldr	r1, [pc, #396]	; (8001e58 <Display+0x2d0>)
 8001cca:	4861      	ldr	r0, [pc, #388]	; (8001e50 <Display+0x2c8>)
 8001ccc:	f7ff fe50 	bl	8001970 <DoFFT>
            
            BSP_LCD_SelectLayer(0);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f001 fef1 	bl	8003ab8 <BSP_LCD_SelectLayer>
            BSP_LCD_DrawBitmap (0,0, (uint8_t *)fft);
 8001cd6:	4a61      	ldr	r2, [pc, #388]	; (8001e5c <Display+0x2d4>)
 8001cd8:	2100      	movs	r1, #0
 8001cda:	2000      	movs	r0, #0
 8001cdc:	f002 f86e 	bl	8003dbc <BSP_LCD_DrawBitmap>
            for (int i = 0; i < fft_h_len ; i++)
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ce4:	e080      	b.n	8001de8 <Display+0x260>
            {
                float temp =  fft_v_len - (fft_out_mag[(int)(i *  (1.946768061))] * (fft_v_len / - 60.0)) + fft_v_start;
 8001ce6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001ce8:	f7fe fc34 	bl	8000554 <__aeabi_i2d>
 8001cec:	a34e      	add	r3, pc, #312	; (adr r3, 8001e28 <Display+0x2a0>)
 8001cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf2:	f7fe fc99 	bl	8000628 <__aeabi_dmul>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f7fe fea5 	bl	8000a4c <__aeabi_d2iz>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4a53      	ldr	r2, [pc, #332]	; (8001e54 <Display+0x2cc>)
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fc33 	bl	8000578 <__aeabi_f2d>
 8001d12:	a347      	add	r3, pc, #284	; (adr r3, 8001e30 <Display+0x2a8>)
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	f7fe fc86 	bl	8000628 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <Display+0x2d8>)
 8001d2a:	f7fe fac7 	bl	80002bc <__adddf3>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <Display+0x2dc>)
 8001d3c:	f7fe fabe 	bl	80002bc <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4610      	mov	r0, r2
 8001d46:	4619      	mov	r1, r3
 8001d48:	f7fe fea8 	bl	8000a9c <__aeabi_d2f>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	64bb      	str	r3, [r7, #72]	; 0x48
                if (temp < fft_v_start)
 8001d50:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d54:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001e68 <Display+0x2e0>
 8001d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d60:	d502      	bpl.n	8001d68 <Display+0x1e0>
                  {
                      temp = 37.0;
 8001d62:	4b42      	ldr	r3, [pc, #264]	; (8001e6c <Display+0x2e4>)
 8001d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d66:	e00a      	b.n	8001d7e <Display+0x1f6>
                  }
                else if (fft_v_end < temp)
 8001d68:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d6c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001e70 <Display+0x2e8>
 8001d70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d78:	dd01      	ble.n	8001d7e <Display+0x1f6>
                  {
                     temp = fft_v_end;
 8001d7a:	4b3e      	ldr	r3, [pc, #248]	; (8001e74 <Display+0x2ec>)
 8001d7c:	64bb      	str	r3, [r7, #72]	; 0x48
                  }
                fft_p[i].X = (int)temp;
 8001d7e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d86:	ee17 3a90 	vmov	r3, s15
 8001d8a:	b219      	sxth	r1, r3
 8001d8c:	4a3a      	ldr	r2, [pc, #232]	; (8001e78 <Display+0x2f0>)
 8001d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d90:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
                fft_p[fft_h_len*2 - i - 1].X = (int)temp;
 8001d94:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d9e:	f5c3 7303 	rsb	r3, r3, #524	; 0x20c
 8001da2:	3301      	adds	r3, #1
 8001da4:	ee17 2a90 	vmov	r2, s15
 8001da8:	b211      	sxth	r1, r2
 8001daa:	4a33      	ldr	r2, [pc, #204]	; (8001e78 <Display+0x2f0>)
 8001dac:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]

                fft_p[i].Y = i + fft_h_start;
 8001db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	332b      	adds	r3, #43	; 0x2b
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	b219      	sxth	r1, r3
 8001dba:	4a2f      	ldr	r2, [pc, #188]	; (8001e78 <Display+0x2f0>)
 8001dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	460a      	mov	r2, r1
 8001dc4:	805a      	strh	r2, [r3, #2]
                fft_p[fft_h_len*2 - i - 1].Y = i + fft_h_start;
 8001dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	332b      	adds	r3, #43	; 0x2b
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd0:	f5c3 7303 	rsb	r3, r3, #524	; 0x20c
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	b211      	sxth	r1, r2
 8001dd8:	4a27      	ldr	r2, [pc, #156]	; (8001e78 <Display+0x2f0>)
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	460a      	mov	r2, r1
 8001de0:	805a      	strh	r2, [r3, #2]
            for (int i = 0; i < fft_h_len ; i++)
 8001de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de4:	3301      	adds	r3, #1
 8001de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dea:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 8001dee:	f77f af7a 	ble.w	8001ce6 <Display+0x15e>
            }
            BSP_LCD_SelectLayer(1);
 8001df2:	2001      	movs	r0, #1
 8001df4:	f001 fe60 	bl	8003ab8 <BSP_LCD_SelectLayer>
            BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001df8:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001dfc:	f001 fe6c 	bl	8003ad8 <BSP_LCD_SetTextColor>
            BSP_LCD_DrawPolygon(fft_p,fft_h_len*2);
 8001e00:	f240 210e 	movw	r1, #526	; 0x20e
 8001e04:	481c      	ldr	r0, [pc, #112]	; (8001e78 <Display+0x2f0>)
 8001e06:	f001 ff8b 	bl	8003d20 <BSP_LCD_DrawPolygon>
            
        break;
 8001e0a:	e3ec      	b.n	80025e6 <Display+0xa5e>
            
        case 2: //Filterd Signal
            BSP_LCD_SelectLayer(0);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f001 fe53 	bl	8003ab8 <BSP_LCD_SelectLayer>
            BSP_LCD_DrawBitmap (0,0, (uint8_t *)signalg);
 8001e12:	4a09      	ldr	r2, [pc, #36]	; (8001e38 <Display+0x2b0>)
 8001e14:	2100      	movs	r1, #0
 8001e16:	2000      	movs	r0, #0
 8001e18:	f001 ffd0 	bl	8003dbc <BSP_LCD_DrawBitmap>
            for (int i = 0; i < s_h_len; i++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e20:	e085      	b.n	8001f2e <Display+0x3a6>
 8001e22:	bf00      	nop
 8001e24:	f3af 8000 	nop.w
 8001e28:	442e46ff 	.word	0x442e46ff
 8001e2c:	3fff25f6 	.word	0x3fff25f6
 8001e30:	88888889 	.word	0x88888889
 8001e34:	40088888 	.word	0x40088888
 8001e38:	080479f0 	.word	0x080479f0
 8001e3c:	20000514 	.word	0x20000514
 8001e40:	3fa88000 	.word	0x3fa88000
 8001e44:	40370000 	.word	0x40370000
 8001e48:	20001d14 	.word	0x20001d14
 8001e4c:	20000d14 	.word	0x20000d14
 8001e50:	2000571c 	.word	0x2000571c
 8001e54:	2000771c 	.word	0x2000771c
 8001e58:	2000671c 	.word	0x2000671c
 8001e5c:	0800f5b8 	.word	0x0800f5b8
 8001e60:	40670000 	.word	0x40670000
 8001e64:	40418000 	.word	0x40418000
 8001e68:	420c0000 	.word	0x420c0000
 8001e6c:	42140000 	.word	0x42140000
 8001e70:	435b0000 	.word	0x435b0000
 8001e74:	435b0000 	.word	0x435b0000
 8001e78:	20002524 	.word	0x20002524
            {
                float temp =  ((float)FIR_signal_Buffer[i] * s_v_len/3.2)  + (float)s_v_start;
 8001e7c:	4a9e      	ldr	r2, [pc, #632]	; (80020f8 <Display+0x570>)
 8001e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 80020fc <Display+0x574>
 8001e8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e90:	ee17 0a90 	vmov	r0, s15
 8001e94:	f7fe fb70 	bl	8000578 <__aeabi_f2d>
 8001e98:	a391      	add	r3, pc, #580	; (adr r3, 80020e0 <Display+0x558>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	f7fe fced 	bl	800087c <__aeabi_ddiv>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f04f 0200 	mov.w	r2, #0
 8001eae:	4b94      	ldr	r3, [pc, #592]	; (8002100 <Display+0x578>)
 8001eb0:	f7fe fa04 	bl	80002bc <__adddf3>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4610      	mov	r0, r2
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f7fe fdee 	bl	8000a9c <__aeabi_d2f>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	613b      	str	r3, [r7, #16]
                signal[i].X = (int)temp;
 8001ec4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ec8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ecc:	ee17 3a90 	vmov	r3, s15
 8001ed0:	b219      	sxth	r1, r3
 8001ed2:	4a8c      	ldr	r2, [pc, #560]	; (8002104 <Display+0x57c>)
 8001ed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ed6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
                signal[s_h_len*2 - i -1].X = (int)temp;
 8001eda:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001ee8:	3303      	adds	r3, #3
 8001eea:	ee17 2a90 	vmov	r2, s15
 8001eee:	b211      	sxth	r1, r2
 8001ef0:	4a84      	ldr	r2, [pc, #528]	; (8002104 <Display+0x57c>)
 8001ef2:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
                
                signal[i].Y = i + s_h_start;
 8001ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	332e      	adds	r3, #46	; 0x2e
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	b219      	sxth	r1, r3
 8001f00:	4a80      	ldr	r2, [pc, #512]	; (8002104 <Display+0x57c>)
 8001f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	460a      	mov	r2, r1
 8001f0a:	805a      	strh	r2, [r3, #2]
                signal[s_h_len*2 - i - 1].Y = i + s_h_start ;
 8001f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	332e      	adds	r3, #46	; 0x2e
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f16:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001f1a:	3303      	adds	r3, #3
 8001f1c:	b211      	sxth	r1, r2
 8001f1e:	4a79      	ldr	r2, [pc, #484]	; (8002104 <Display+0x57c>)
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	460a      	mov	r2, r1
 8001f26:	805a      	strh	r2, [r3, #2]
            for (int i = 0; i < s_h_len; i++)
 8001f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f30:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001f34:	dba2      	blt.n	8001e7c <Display+0x2f4>
            }
            BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8001f36:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8001f3a:	f001 fdcd 	bl	8003ad8 <BSP_LCD_SetTextColor>
            BSP_LCD_DrawPolygon(signal,s_h_len*2);
 8001f3e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8001f42:	4870      	ldr	r0, [pc, #448]	; (8002104 <Display+0x57c>)
 8001f44:	f001 feec 	bl	8003d20 <BSP_LCD_DrawPolygon>
        break;
 8001f48:	e34d      	b.n	80025e6 <Display+0xa5e>
            
        case 3: //Filterd FFT
            BSP_LCD_SelectLayer(0);
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f001 fdb4 	bl	8003ab8 <BSP_LCD_SelectLayer>
            BSP_LCD_DrawBitmap (0,0, (uint8_t *)fft);
 8001f50:	4a6d      	ldr	r2, [pc, #436]	; (8002108 <Display+0x580>)
 8001f52:	2100      	movs	r1, #0
 8001f54:	2000      	movs	r0, #0
 8001f56:	f001 ff31 	bl	8003dbc <BSP_LCD_DrawBitmap>
            for (int i = 0; i < FFT_Buffer_len; i++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	643b      	str	r3, [r7, #64]	; 0x40
 8001f5e:	e00c      	b.n	8001f7a <Display+0x3f2>
            {
                fft_in_buf[i] = FIR_signal_Buffer[i];
 8001f60:	4a65      	ldr	r2, [pc, #404]	; (80020f8 <Display+0x570>)
 8001f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4968      	ldr	r1, [pc, #416]	; (800210c <Display+0x584>)
 8001f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < FFT_Buffer_len; i++)
 8001f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f76:	3301      	adds	r3, #1
 8001f78:	643b      	str	r3, [r7, #64]	; 0x40
 8001f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f80:	dbee      	blt.n	8001f60 <Display+0x3d8>
            }
            DoFFT(fft_in_buf,fft_out_buf,fft_out_mag);
 8001f82:	4a63      	ldr	r2, [pc, #396]	; (8002110 <Display+0x588>)
 8001f84:	4963      	ldr	r1, [pc, #396]	; (8002114 <Display+0x58c>)
 8001f86:	4861      	ldr	r0, [pc, #388]	; (800210c <Display+0x584>)
 8001f88:	f7ff fcf2 	bl	8001970 <DoFFT>
            
            BSP_LCD_SelectLayer(0);
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f001 fd93 	bl	8003ab8 <BSP_LCD_SelectLayer>
            BSP_LCD_DrawBitmap (0,0, (uint8_t *)fft);
 8001f92:	4a5d      	ldr	r2, [pc, #372]	; (8002108 <Display+0x580>)
 8001f94:	2100      	movs	r1, #0
 8001f96:	2000      	movs	r0, #0
 8001f98:	f001 ff10 	bl	8003dbc <BSP_LCD_DrawBitmap>
            for (int i = 0; i < fft_h_len ; i++)
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fa0:	e080      	b.n	80020a4 <Display+0x51c>
            {
                float temp =  fft_v_len - (fft_out_mag[(int)(i *  (1.946768061))] * (fft_v_len / - 60.0)) + fft_v_start;
 8001fa2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001fa4:	f7fe fad6 	bl	8000554 <__aeabi_i2d>
 8001fa8:	a34f      	add	r3, pc, #316	; (adr r3, 80020e8 <Display+0x560>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe fb3b 	bl	8000628 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f7fe fd47 	bl	8000a4c <__aeabi_d2iz>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4a53      	ldr	r2, [pc, #332]	; (8002110 <Display+0x588>)
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7fe fad5 	bl	8000578 <__aeabi_f2d>
 8001fce:	a348      	add	r3, pc, #288	; (adr r3, 80020f0 <Display+0x568>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	f7fe fb28 	bl	8000628 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4610      	mov	r0, r2
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	4b4c      	ldr	r3, [pc, #304]	; (8002118 <Display+0x590>)
 8001fe6:	f7fe f969 	bl	80002bc <__adddf3>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4610      	mov	r0, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	4b49      	ldr	r3, [pc, #292]	; (800211c <Display+0x594>)
 8001ff8:	f7fe f960 	bl	80002bc <__adddf3>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4610      	mov	r0, r2
 8002002:	4619      	mov	r1, r3
 8002004:	f7fe fd4a 	bl	8000a9c <__aeabi_d2f>
 8002008:	4603      	mov	r3, r0
 800200a:	63bb      	str	r3, [r7, #56]	; 0x38
                if (temp < fft_v_start)
 800200c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002010:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002120 <Display+0x598>
 8002014:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201c:	d502      	bpl.n	8002024 <Display+0x49c>
                  {
                      temp = 37.0;
 800201e:	4b41      	ldr	r3, [pc, #260]	; (8002124 <Display+0x59c>)
 8002020:	63bb      	str	r3, [r7, #56]	; 0x38
 8002022:	e00a      	b.n	800203a <Display+0x4b2>
                  }
                else if (fft_v_end < temp)
 8002024:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002028:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002128 <Display+0x5a0>
 800202c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002034:	dd01      	ble.n	800203a <Display+0x4b2>
                  {
                     temp = fft_v_end;
 8002036:	4b3d      	ldr	r3, [pc, #244]	; (800212c <Display+0x5a4>)
 8002038:	63bb      	str	r3, [r7, #56]	; 0x38
                  }
                fft_p[i].X = (int)temp;
 800203a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800203e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002042:	ee17 3a90 	vmov	r3, s15
 8002046:	b219      	sxth	r1, r3
 8002048:	4a39      	ldr	r2, [pc, #228]	; (8002130 <Display+0x5a8>)
 800204a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
                fft_p[fft_h_len*2 - i - 1].X = (int)temp;
 8002050:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800205a:	f5c3 7303 	rsb	r3, r3, #524	; 0x20c
 800205e:	3301      	adds	r3, #1
 8002060:	ee17 2a90 	vmov	r2, s15
 8002064:	b211      	sxth	r1, r2
 8002066:	4a32      	ldr	r2, [pc, #200]	; (8002130 <Display+0x5a8>)
 8002068:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]

                fft_p[i].Y = i + fft_h_start;
 800206c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800206e:	b29b      	uxth	r3, r3
 8002070:	332b      	adds	r3, #43	; 0x2b
 8002072:	b29b      	uxth	r3, r3
 8002074:	b219      	sxth	r1, r3
 8002076:	4a2e      	ldr	r2, [pc, #184]	; (8002130 <Display+0x5a8>)
 8002078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	460a      	mov	r2, r1
 8002080:	805a      	strh	r2, [r3, #2]
                fft_p[fft_h_len*2 - i - 1].Y = i + fft_h_start;
 8002082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002084:	b29b      	uxth	r3, r3
 8002086:	332b      	adds	r3, #43	; 0x2b
 8002088:	b29a      	uxth	r2, r3
 800208a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208c:	f5c3 7303 	rsb	r3, r3, #524	; 0x20c
 8002090:	3301      	adds	r3, #1
 8002092:	b211      	sxth	r1, r2
 8002094:	4a26      	ldr	r2, [pc, #152]	; (8002130 <Display+0x5a8>)
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	460a      	mov	r2, r1
 800209c:	805a      	strh	r2, [r3, #2]
            for (int i = 0; i < fft_h_len ; i++)
 800209e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a0:	3301      	adds	r3, #1
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a6:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80020aa:	f77f af7a 	ble.w	8001fa2 <Display+0x41a>
            }
            BSP_LCD_SelectLayer(1);
 80020ae:	2001      	movs	r0, #1
 80020b0:	f001 fd02 	bl	8003ab8 <BSP_LCD_SelectLayer>
            BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80020b4:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80020b8:	f001 fd0e 	bl	8003ad8 <BSP_LCD_SetTextColor>
            BSP_LCD_DrawPolygon(fft_p,fft_h_len*2);
 80020bc:	f240 210e 	movw	r1, #526	; 0x20e
 80020c0:	481b      	ldr	r0, [pc, #108]	; (8002130 <Display+0x5a8>)
 80020c2:	f001 fe2d 	bl	8003d20 <BSP_LCD_DrawPolygon>
        break;
 80020c6:	e28e      	b.n	80025e6 <Display+0xa5e>
            
        case 4: //Filterd & Orginal Signal
            BSP_LCD_SelectLayer(0);
 80020c8:	2000      	movs	r0, #0
 80020ca:	f001 fcf5 	bl	8003ab8 <BSP_LCD_SelectLayer>
            BSP_LCD_DrawBitmap (0,0, (uint8_t *)signalg);
 80020ce:	4a19      	ldr	r2, [pc, #100]	; (8002134 <Display+0x5ac>)
 80020d0:	2100      	movs	r1, #0
 80020d2:	2000      	movs	r0, #0
 80020d4:	f001 fe72 	bl	8003dbc <BSP_LCD_DrawBitmap>
            for (int i = 0; i < s_h_len; i++)
 80020d8:	2300      	movs	r3, #0
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
 80020dc:	e0cb      	b.n	8002276 <Display+0x6ee>
 80020de:	bf00      	nop
 80020e0:	9999999a 	.word	0x9999999a
 80020e4:	40099999 	.word	0x40099999
 80020e8:	442e46ff 	.word	0x442e46ff
 80020ec:	3fff25f6 	.word	0x3fff25f6
 80020f0:	88888889 	.word	0x88888889
 80020f4:	40088888 	.word	0x40088888
 80020f8:	2000356c 	.word	0x2000356c
 80020fc:	43440000 	.word	0x43440000
 8002100:	40370000 	.word	0x40370000
 8002104:	20001d14 	.word	0x20001d14
 8002108:	0800f5b8 	.word	0x0800f5b8
 800210c:	2000571c 	.word	0x2000571c
 8002110:	2000771c 	.word	0x2000771c
 8002114:	2000671c 	.word	0x2000671c
 8002118:	40670000 	.word	0x40670000
 800211c:	40418000 	.word	0x40418000
 8002120:	420c0000 	.word	0x420c0000
 8002124:	42140000 	.word	0x42140000
 8002128:	435b0000 	.word	0x435b0000
 800212c:	435b0000 	.word	0x435b0000
 8002130:	20002524 	.word	0x20002524
 8002134:	080479f0 	.word	0x080479f0
            {
                float temp =  (input_signal[i] * s_v_len/3)  + (float)s_v_start;
 8002138:	4a97      	ldr	r2, [pc, #604]	; (8002398 <Display+0x810>)
 800213a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800239c <Display+0x814>
 8002148:	ee27 7a87 	vmul.f32	s14, s15, s14
 800214c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002150:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002154:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8002158:	ee77 7a87 	vadd.f32	s15, s15, s14
 800215c:	edc7 7a05 	vstr	s15, [r7, #20]
                signal[i].X = (int)temp;
 8002160:	edd7 7a05 	vldr	s15, [r7, #20]
 8002164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002168:	ee17 3a90 	vmov	r3, s15
 800216c:	b219      	sxth	r1, r3
 800216e:	4a8c      	ldr	r2, [pc, #560]	; (80023a0 <Display+0x818>)
 8002170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002172:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
                signal[s_h_len*2 - i -1].X = (int)temp;
 8002176:	edd7 7a05 	vldr	s15, [r7, #20]
 800217a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800217e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002180:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002184:	3303      	adds	r3, #3
 8002186:	ee17 2a90 	vmov	r2, s15
 800218a:	b211      	sxth	r1, r2
 800218c:	4a84      	ldr	r2, [pc, #528]	; (80023a0 <Display+0x818>)
 800218e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
                
                temp =  (FIR_signal_Buffer[i] * s_v_len/3.2)  + (float)s_v_start;
 8002192:	4a84      	ldr	r2, [pc, #528]	; (80023a4 <Display+0x81c>)
 8002194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	edd3 7a00 	vldr	s15, [r3]
 800219e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800239c <Display+0x814>
 80021a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021a6:	ee17 0a90 	vmov	r0, s15
 80021aa:	f7fe f9e5 	bl	8000578 <__aeabi_f2d>
 80021ae:	a374      	add	r3, pc, #464	; (adr r3, 8002380 <Display+0x7f8>)
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	f7fe fb62 	bl	800087c <__aeabi_ddiv>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	4b78      	ldr	r3, [pc, #480]	; (80023a8 <Display+0x820>)
 80021c6:	f7fe f879 	bl	80002bc <__adddf3>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	f7fe fc63 	bl	8000a9c <__aeabi_d2f>
 80021d6:	4603      	mov	r3, r0
 80021d8:	617b      	str	r3, [r7, #20]
                signal2[i].X = (int)temp;
 80021da:	edd7 7a05 	vldr	s15, [r7, #20]
 80021de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021e2:	ee17 3a90 	vmov	r3, s15
 80021e6:	b219      	sxth	r1, r3
 80021e8:	4a70      	ldr	r2, [pc, #448]	; (80023ac <Display+0x824>)
 80021ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ec:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
                signal2[s_h_len*2 - i -1].X = (int)temp;
 80021f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80021f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021fa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80021fe:	3303      	adds	r3, #3
 8002200:	ee17 2a90 	vmov	r2, s15
 8002204:	b211      	sxth	r1, r2
 8002206:	4a69      	ldr	r2, [pc, #420]	; (80023ac <Display+0x824>)
 8002208:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
                
                signal[i].Y = i + s_h_start;
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	b29b      	uxth	r3, r3
 8002210:	332e      	adds	r3, #46	; 0x2e
 8002212:	b29b      	uxth	r3, r3
 8002214:	b219      	sxth	r1, r3
 8002216:	4a62      	ldr	r2, [pc, #392]	; (80023a0 <Display+0x818>)
 8002218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	460a      	mov	r2, r1
 8002220:	805a      	strh	r2, [r3, #2]
                signal[s_h_len*2 - i - 1].Y = i + s_h_start ;
 8002222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002224:	b29b      	uxth	r3, r3
 8002226:	332e      	adds	r3, #46	; 0x2e
 8002228:	b29a      	uxth	r2, r3
 800222a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800222c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002230:	3303      	adds	r3, #3
 8002232:	b211      	sxth	r1, r2
 8002234:	4a5a      	ldr	r2, [pc, #360]	; (80023a0 <Display+0x818>)
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	460a      	mov	r2, r1
 800223c:	805a      	strh	r2, [r3, #2]
                signal2[i].Y = i + s_h_start;
 800223e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002240:	b29b      	uxth	r3, r3
 8002242:	332e      	adds	r3, #46	; 0x2e
 8002244:	b29b      	uxth	r3, r3
 8002246:	b219      	sxth	r1, r3
 8002248:	4a58      	ldr	r2, [pc, #352]	; (80023ac <Display+0x824>)
 800224a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	460a      	mov	r2, r1
 8002252:	805a      	strh	r2, [r3, #2]
                signal2[s_h_len*2 - i - 1].Y = i + s_h_start ;
 8002254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002256:	b29b      	uxth	r3, r3
 8002258:	332e      	adds	r3, #46	; 0x2e
 800225a:	b29a      	uxth	r2, r3
 800225c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002262:	3303      	adds	r3, #3
 8002264:	b211      	sxth	r1, r2
 8002266:	4a51      	ldr	r2, [pc, #324]	; (80023ac <Display+0x824>)
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	460a      	mov	r2, r1
 800226e:	805a      	strh	r2, [r3, #2]
            for (int i = 0; i < s_h_len; i++)
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	3301      	adds	r3, #1
 8002274:	637b      	str	r3, [r7, #52]	; 0x34
 8002276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002278:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800227c:	f6ff af5c 	blt.w	8002138 <Display+0x5b0>
            }
            BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8002280:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8002284:	f001 fc28 	bl	8003ad8 <BSP_LCD_SetTextColor>
            BSP_LCD_DrawPolygon(signal,s_h_len*2);
 8002288:	f44f 7101 	mov.w	r1, #516	; 0x204
 800228c:	4844      	ldr	r0, [pc, #272]	; (80023a0 <Display+0x818>)
 800228e:	f001 fd47 	bl	8003d20 <BSP_LCD_DrawPolygon>
            BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8002292:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8002296:	f001 fc1f 	bl	8003ad8 <BSP_LCD_SetTextColor>
            BSP_LCD_DrawPolygon(signal2,s_h_len*2);
 800229a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800229e:	4843      	ldr	r0, [pc, #268]	; (80023ac <Display+0x824>)
 80022a0:	f001 fd3e 	bl	8003d20 <BSP_LCD_DrawPolygon>
        break;
 80022a4:	e19f      	b.n	80025e6 <Display+0xa5e>
            
        case 5: //Filterd & Orginal FFT
            BSP_LCD_SelectLayer(0);
 80022a6:	2000      	movs	r0, #0
 80022a8:	f001 fc06 	bl	8003ab8 <BSP_LCD_SelectLayer>
            BSP_LCD_DrawBitmap (0,0, (uint8_t *)fft);
 80022ac:	4a40      	ldr	r2, [pc, #256]	; (80023b0 <Display+0x828>)
 80022ae:	2100      	movs	r1, #0
 80022b0:	2000      	movs	r0, #0
 80022b2:	f001 fd83 	bl	8003dbc <BSP_LCD_DrawBitmap>
            for (int i = 0; i < FFT_Buffer_len; i++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
 80022ba:	e00c      	b.n	80022d6 <Display+0x74e>
            {
                fft_in_buf[i] = FIR_signal_Buffer[i];
 80022bc:	4a39      	ldr	r2, [pc, #228]	; (80023a4 <Display+0x81c>)
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	493b      	ldr	r1, [pc, #236]	; (80023b4 <Display+0x82c>)
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < FFT_Buffer_len; i++)
 80022d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d2:	3301      	adds	r3, #1
 80022d4:	633b      	str	r3, [r7, #48]	; 0x30
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022dc:	dbee      	blt.n	80022bc <Display+0x734>
            }
            DoFFT(fft_in_buf,fft_out_buf,fft_out_mag);
 80022de:	4a36      	ldr	r2, [pc, #216]	; (80023b8 <Display+0x830>)
 80022e0:	4936      	ldr	r1, [pc, #216]	; (80023bc <Display+0x834>)
 80022e2:	4834      	ldr	r0, [pc, #208]	; (80023b4 <Display+0x82c>)
 80022e4:	f7ff fb44 	bl	8001970 <DoFFT>
            
            BSP_LCD_SelectLayer(0);
 80022e8:	2000      	movs	r0, #0
 80022ea:	f001 fbe5 	bl	8003ab8 <BSP_LCD_SelectLayer>
            BSP_LCD_DrawBitmap (0,0, (uint8_t *)fft);
 80022ee:	4a30      	ldr	r2, [pc, #192]	; (80023b0 <Display+0x828>)
 80022f0:	2100      	movs	r1, #0
 80022f2:	2000      	movs	r0, #0
 80022f4:	f001 fd62 	bl	8003dbc <BSP_LCD_DrawBitmap>
            for (int i = 0; i < fft_h_len ; i++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022fc:	e0aa      	b.n	8002454 <Display+0x8cc>
            {
                float temp =  fft_v_len - (fft_out_mag[(int)(i *  (1.946768061))] * (fft_v_len / - 60.0)) + fft_v_start;
 80022fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002300:	f7fe f928 	bl	8000554 <__aeabi_i2d>
 8002304:	a320      	add	r3, pc, #128	; (adr r3, 8002388 <Display+0x800>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe f98d 	bl	8000628 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	f7fe fb99 	bl	8000a4c <__aeabi_d2iz>
 800231a:	4603      	mov	r3, r0
 800231c:	4a26      	ldr	r2, [pc, #152]	; (80023b8 <Display+0x830>)
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe f927 	bl	8000578 <__aeabi_f2d>
 800232a:	a319      	add	r3, pc, #100	; (adr r3, 8002390 <Display+0x808>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	f7fe f97a 	bl	8000628 <__aeabi_dmul>
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4610      	mov	r0, r2
 800233a:	4619      	mov	r1, r3
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <Display+0x838>)
 8002342:	f7fd ffbb 	bl	80002bc <__adddf3>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <Display+0x83c>)
 8002354:	f7fd ffb2 	bl	80002bc <__adddf3>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f7fe fb9c 	bl	8000a9c <__aeabi_d2f>
 8002364:	4603      	mov	r3, r0
 8002366:	62bb      	str	r3, [r7, #40]	; 0x28
                if (temp < fft_v_start)
 8002368:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800236c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80023c8 <Display+0x840>
 8002370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002378:	d52c      	bpl.n	80023d4 <Display+0x84c>
                  {
                      temp = 37.0;
 800237a:	4b14      	ldr	r3, [pc, #80]	; (80023cc <Display+0x844>)
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
 800237e:	e034      	b.n	80023ea <Display+0x862>
 8002380:	9999999a 	.word	0x9999999a
 8002384:	40099999 	.word	0x40099999
 8002388:	442e46ff 	.word	0x442e46ff
 800238c:	3fff25f6 	.word	0x3fff25f6
 8002390:	88888889 	.word	0x88888889
 8002394:	40088888 	.word	0x40088888
 8002398:	20000d14 	.word	0x20000d14
 800239c:	43440000 	.word	0x43440000
 80023a0:	20001d14 	.word	0x20001d14
 80023a4:	2000356c 	.word	0x2000356c
 80023a8:	40370000 	.word	0x40370000
 80023ac:	20002d5c 	.word	0x20002d5c
 80023b0:	0800f5b8 	.word	0x0800f5b8
 80023b4:	2000571c 	.word	0x2000571c
 80023b8:	2000771c 	.word	0x2000771c
 80023bc:	2000671c 	.word	0x2000671c
 80023c0:	40670000 	.word	0x40670000
 80023c4:	40418000 	.word	0x40418000
 80023c8:	420c0000 	.word	0x420c0000
 80023cc:	42140000 	.word	0x42140000
 80023d0:	435b0000 	.word	0x435b0000
                  }
                else if (fft_v_end < temp)
 80023d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80023d8:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80023d0 <Display+0x848>
 80023dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e4:	dd01      	ble.n	80023ea <Display+0x862>
                  {
                     temp = fft_v_end;
 80023e6:	4b86      	ldr	r3, [pc, #536]	; (8002600 <Display+0xa78>)
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
                  }
                fft_p[i].X = (int)temp;
 80023ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80023ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023f2:	ee17 3a90 	vmov	r3, s15
 80023f6:	b219      	sxth	r1, r3
 80023f8:	4a82      	ldr	r2, [pc, #520]	; (8002604 <Display+0xa7c>)
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
                fft_p[fft_h_len*2 - i - 1].X = (int)temp;
 8002400:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240a:	f5c3 7303 	rsb	r3, r3, #524	; 0x20c
 800240e:	3301      	adds	r3, #1
 8002410:	ee17 2a90 	vmov	r2, s15
 8002414:	b211      	sxth	r1, r2
 8002416:	4a7b      	ldr	r2, [pc, #492]	; (8002604 <Display+0xa7c>)
 8002418:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]

                fft_p[i].Y = i + fft_h_start;
 800241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241e:	b29b      	uxth	r3, r3
 8002420:	332b      	adds	r3, #43	; 0x2b
 8002422:	b29b      	uxth	r3, r3
 8002424:	b219      	sxth	r1, r3
 8002426:	4a77      	ldr	r2, [pc, #476]	; (8002604 <Display+0xa7c>)
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	460a      	mov	r2, r1
 8002430:	805a      	strh	r2, [r3, #2]
                fft_p[fft_h_len*2 - i - 1].Y = i + fft_h_start;
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	b29b      	uxth	r3, r3
 8002436:	332b      	adds	r3, #43	; 0x2b
 8002438:	b29a      	uxth	r2, r3
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	f5c3 7303 	rsb	r3, r3, #524	; 0x20c
 8002440:	3301      	adds	r3, #1
 8002442:	b211      	sxth	r1, r2
 8002444:	4a6f      	ldr	r2, [pc, #444]	; (8002604 <Display+0xa7c>)
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	4413      	add	r3, r2
 800244a:	460a      	mov	r2, r1
 800244c:	805a      	strh	r2, [r3, #2]
            for (int i = 0; i < fft_h_len ; i++)
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	3301      	adds	r3, #1
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800245a:	f77f af50 	ble.w	80022fe <Display+0x776>
            }
            BSP_LCD_SelectLayer(1);
 800245e:	2001      	movs	r0, #1
 8002460:	f001 fb2a 	bl	8003ab8 <BSP_LCD_SelectLayer>
            BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8002464:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8002468:	f001 fb36 	bl	8003ad8 <BSP_LCD_SetTextColor>
            BSP_LCD_DrawPolygon(fft_p,fft_h_len*2);
 800246c:	f240 210e 	movw	r1, #526	; 0x20e
 8002470:	4864      	ldr	r0, [pc, #400]	; (8002604 <Display+0xa7c>)
 8002472:	f001 fc55 	bl	8003d20 <BSP_LCD_DrawPolygon>
            
            for (int i = 0; i < FFT_Buffer_len; i++)
 8002476:	2300      	movs	r3, #0
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
 800247a:	e00c      	b.n	8002496 <Display+0x90e>
            {
                fft_in_buf[i] = input_signal[i];
 800247c:	4a62      	ldr	r2, [pc, #392]	; (8002608 <Display+0xa80>)
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	4961      	ldr	r1, [pc, #388]	; (800260c <Display+0xa84>)
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < FFT_Buffer_len; i++)
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	3301      	adds	r3, #1
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800249c:	dbee      	blt.n	800247c <Display+0x8f4>
            }
            DoFFT(fft_in_buf,fft_out_buf,fft_out_mag);
 800249e:	4a5c      	ldr	r2, [pc, #368]	; (8002610 <Display+0xa88>)
 80024a0:	495c      	ldr	r1, [pc, #368]	; (8002614 <Display+0xa8c>)
 80024a2:	485a      	ldr	r0, [pc, #360]	; (800260c <Display+0xa84>)
 80024a4:	f7ff fa64 	bl	8001970 <DoFFT>
            
            BSP_LCD_SelectLayer(0);
 80024a8:	2000      	movs	r0, #0
 80024aa:	f001 fb05 	bl	8003ab8 <BSP_LCD_SelectLayer>
            BSP_LCD_DrawBitmap (0,0, (uint8_t *)fft);
 80024ae:	4a5a      	ldr	r2, [pc, #360]	; (8002618 <Display+0xa90>)
 80024b0:	2100      	movs	r1, #0
 80024b2:	2000      	movs	r0, #0
 80024b4:	f001 fc82 	bl	8003dbc <BSP_LCD_DrawBitmap>
            for (int i = 0; i < fft_h_len ; i++)
 80024b8:	2300      	movs	r3, #0
 80024ba:	623b      	str	r3, [r7, #32]
 80024bc:	e080      	b.n	80025c0 <Display+0xa38>
            {
                float temp =  fft_v_len - (fft_out_mag[(int)(i *  (1.946768061))] * (fft_v_len / - 60.0)) + fft_v_start;
 80024be:	6a38      	ldr	r0, [r7, #32]
 80024c0:	f7fe f848 	bl	8000554 <__aeabi_i2d>
 80024c4:	a34a      	add	r3, pc, #296	; (adr r3, 80025f0 <Display+0xa68>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	f7fe f8ad 	bl	8000628 <__aeabi_dmul>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	f7fe fab9 	bl	8000a4c <__aeabi_d2iz>
 80024da:	4603      	mov	r3, r0
 80024dc:	4a4c      	ldr	r2, [pc, #304]	; (8002610 <Display+0xa88>)
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe f847 	bl	8000578 <__aeabi_f2d>
 80024ea:	a343      	add	r3, pc, #268	; (adr r3, 80025f8 <Display+0xa70>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fe f89a 	bl	8000628 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	4b46      	ldr	r3, [pc, #280]	; (800261c <Display+0xa94>)
 8002502:	f7fd fedb 	bl	80002bc <__adddf3>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	4b43      	ldr	r3, [pc, #268]	; (8002620 <Display+0xa98>)
 8002514:	f7fd fed2 	bl	80002bc <__adddf3>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	f7fe fabc 	bl	8000a9c <__aeabi_d2f>
 8002524:	4603      	mov	r3, r0
 8002526:	61fb      	str	r3, [r7, #28]
                if (temp < fft_v_start)
 8002528:	edd7 7a07 	vldr	s15, [r7, #28]
 800252c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002624 <Display+0xa9c>
 8002530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002538:	d502      	bpl.n	8002540 <Display+0x9b8>
                  {
                      temp = 37.0;
 800253a:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <Display+0xaa0>)
 800253c:	61fb      	str	r3, [r7, #28]
 800253e:	e00a      	b.n	8002556 <Display+0x9ce>
                  }
                else if (fft_v_end < temp)
 8002540:	edd7 7a07 	vldr	s15, [r7, #28]
 8002544:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800262c <Display+0xaa4>
 8002548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800254c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002550:	dd01      	ble.n	8002556 <Display+0x9ce>
                  {
                     temp = fft_v_end;
 8002552:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <Display+0xa78>)
 8002554:	61fb      	str	r3, [r7, #28]
                  }
                fft_p[i].X = (int)temp;
 8002556:	edd7 7a07 	vldr	s15, [r7, #28]
 800255a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800255e:	ee17 3a90 	vmov	r3, s15
 8002562:	b219      	sxth	r1, r3
 8002564:	4a27      	ldr	r2, [pc, #156]	; (8002604 <Display+0xa7c>)
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
                fft_p[fft_h_len*2 - i - 1].X = (int)temp;
 800256c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	f5c3 7303 	rsb	r3, r3, #524	; 0x20c
 800257a:	3301      	adds	r3, #1
 800257c:	ee17 2a90 	vmov	r2, s15
 8002580:	b211      	sxth	r1, r2
 8002582:	4a20      	ldr	r2, [pc, #128]	; (8002604 <Display+0xa7c>)
 8002584:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]

                fft_p[i].Y = i + fft_h_start;
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	b29b      	uxth	r3, r3
 800258c:	332b      	adds	r3, #43	; 0x2b
 800258e:	b29b      	uxth	r3, r3
 8002590:	b219      	sxth	r1, r3
 8002592:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <Display+0xa7c>)
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	460a      	mov	r2, r1
 800259c:	805a      	strh	r2, [r3, #2]
                fft_p[fft_h_len*2 - i - 1].Y = i + fft_h_start;
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	332b      	adds	r3, #43	; 0x2b
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	6a3b      	ldr	r3, [r7, #32]
 80025a8:	f5c3 7303 	rsb	r3, r3, #524	; 0x20c
 80025ac:	3301      	adds	r3, #1
 80025ae:	b211      	sxth	r1, r2
 80025b0:	4a14      	ldr	r2, [pc, #80]	; (8002604 <Display+0xa7c>)
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	460a      	mov	r2, r1
 80025b8:	805a      	strh	r2, [r3, #2]
            for (int i = 0; i < fft_h_len ; i++)
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	3301      	adds	r3, #1
 80025be:	623b      	str	r3, [r7, #32]
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80025c6:	f77f af7a 	ble.w	80024be <Display+0x936>
            }
            BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80025ca:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80025ce:	f001 fa83 	bl	8003ad8 <BSP_LCD_SetTextColor>
            BSP_LCD_DrawPolygon(fft_p,fft_h_len*2);
 80025d2:	f240 210e 	movw	r1, #526	; 0x20e
 80025d6:	480b      	ldr	r0, [pc, #44]	; (8002604 <Display+0xa7c>)
 80025d8:	f001 fba2 	bl	8003d20 <BSP_LCD_DrawPolygon>
        break;
 80025dc:	e003      	b.n	80025e6 <Display+0xa5e>
            
        default:
            button_in = 0;
 80025de:	4b14      	ldr	r3, [pc, #80]	; (8002630 <Display+0xaa8>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
        break;
 80025e4:	bf00      	nop
    }
    
}
 80025e6:	bf00      	nop
 80025e8:	3758      	adds	r7, #88	; 0x58
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	442e46ff 	.word	0x442e46ff
 80025f4:	3fff25f6 	.word	0x3fff25f6
 80025f8:	88888889 	.word	0x88888889
 80025fc:	40088888 	.word	0x40088888
 8002600:	435b0000 	.word	0x435b0000
 8002604:	20002524 	.word	0x20002524
 8002608:	20000d14 	.word	0x20000d14
 800260c:	2000571c 	.word	0x2000571c
 8002610:	2000771c 	.word	0x2000771c
 8002614:	2000671c 	.word	0x2000671c
 8002618:	0800f5b8 	.word	0x0800f5b8
 800261c:	40670000 	.word	0x40670000
 8002620:	40418000 	.word	0x40418000
 8002624:	420c0000 	.word	0x420c0000
 8002628:	42140000 	.word	0x42140000
 800262c:	435b0000 	.word	0x435b0000
 8002630:	20007f1c 	.word	0x20007f1c

08002634 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a04      	ldr	r2, [pc, #16]	; (8002654 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002646:	f001 ffdf 	bl	8004608 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40001000 	.word	0x40001000

08002658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800265c:	b672      	cpsid	i
}
 800265e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002660:	e7fe      	b.n	8002660 <Error_Handler+0x8>
	...

08002664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_MspInit+0x4c>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	4a0f      	ldr	r2, [pc, #60]	; (80026b0 <HAL_MspInit+0x4c>)
 8002674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002678:	6453      	str	r3, [r2, #68]	; 0x44
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <HAL_MspInit+0x4c>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <HAL_MspInit+0x4c>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	4a08      	ldr	r2, [pc, #32]	; (80026b0 <HAL_MspInit+0x4c>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002694:	6413      	str	r3, [r2, #64]	; 0x40
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_MspInit+0x4c>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800

080026b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08a      	sub	sp, #40	; 0x28
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0314 	add.w	r3, r7, #20
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2f      	ldr	r2, [pc, #188]	; (8002790 <HAL_ADC_MspInit+0xdc>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d157      	bne.n	8002786 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	613b      	str	r3, [r7, #16]
 80026da:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <HAL_ADC_MspInit+0xe0>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a2d      	ldr	r2, [pc, #180]	; (8002794 <HAL_ADC_MspInit+0xe0>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_ADC_MspInit+0xe0>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	4b27      	ldr	r3, [pc, #156]	; (8002794 <HAL_ADC_MspInit+0xe0>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a26      	ldr	r2, [pc, #152]	; (8002794 <HAL_ADC_MspInit+0xe0>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_ADC_MspInit+0xe0>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800270e:	2308      	movs	r3, #8
 8002710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002712:	2303      	movs	r3, #3
 8002714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800271a:	f107 0314 	add.w	r3, r7, #20
 800271e:	4619      	mov	r1, r3
 8002720:	481d      	ldr	r0, [pc, #116]	; (8002798 <HAL_ADC_MspInit+0xe4>)
 8002722:	f003 fe8b 	bl	800643c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002726:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_ADC_MspInit+0xe8>)
 8002728:	4a1d      	ldr	r2, [pc, #116]	; (80027a0 <HAL_ADC_MspInit+0xec>)
 800272a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800272c:	4b1b      	ldr	r3, [pc, #108]	; (800279c <HAL_ADC_MspInit+0xe8>)
 800272e:	2200      	movs	r2, #0
 8002730:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002732:	4b1a      	ldr	r3, [pc, #104]	; (800279c <HAL_ADC_MspInit+0xe8>)
 8002734:	2200      	movs	r2, #0
 8002736:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002738:	4b18      	ldr	r3, [pc, #96]	; (800279c <HAL_ADC_MspInit+0xe8>)
 800273a:	2200      	movs	r2, #0
 800273c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <HAL_ADC_MspInit+0xe8>)
 8002740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002744:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_ADC_MspInit+0xe8>)
 8002748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800274c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800274e:	4b13      	ldr	r3, [pc, #76]	; (800279c <HAL_ADC_MspInit+0xe8>)
 8002750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002754:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <HAL_ADC_MspInit+0xe8>)
 8002758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800275c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_ADC_MspInit+0xe8>)
 8002760:	2200      	movs	r2, #0
 8002762:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002764:	4b0d      	ldr	r3, [pc, #52]	; (800279c <HAL_ADC_MspInit+0xe8>)
 8002766:	2200      	movs	r2, #0
 8002768:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800276a:	480c      	ldr	r0, [pc, #48]	; (800279c <HAL_ADC_MspInit+0xe8>)
 800276c:	f002 fefc 	bl	8005568 <HAL_DMA_Init>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002776:	f7ff ff6f 	bl	8002658 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a07      	ldr	r2, [pc, #28]	; (800279c <HAL_ADC_MspInit+0xe8>)
 800277e:	639a      	str	r2, [r3, #56]	; 0x38
 8002780:	4a06      	ldr	r2, [pc, #24]	; (800279c <HAL_ADC_MspInit+0xe8>)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002786:	bf00      	nop
 8002788:	3728      	adds	r7, #40	; 0x28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40012000 	.word	0x40012000
 8002794:	40023800 	.word	0x40023800
 8002798:	40020800 	.word	0x40020800
 800279c:	20000154 	.word	0x20000154
 80027a0:	40026410 	.word	0x40026410

080027a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <HAL_CRC_MspInit+0x3c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10d      	bne.n	80027d2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_CRC_MspInit+0x40>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <HAL_CRC_MspInit+0x40>)
 80027c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b07      	ldr	r3, [pc, #28]	; (80027e4 <HAL_CRC_MspInit+0x40>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40023000 	.word	0x40023000
 80027e4:	40023800 	.word	0x40023800

080027e8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	; 0x28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a33      	ldr	r2, [pc, #204]	; (80028d4 <HAL_DAC_MspInit+0xec>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d160      	bne.n	80028cc <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <HAL_DAC_MspInit+0xf0>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	4a31      	ldr	r2, [pc, #196]	; (80028d8 <HAL_DAC_MspInit+0xf0>)
 8002814:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002818:	6413      	str	r3, [r2, #64]	; 0x40
 800281a:	4b2f      	ldr	r3, [pc, #188]	; (80028d8 <HAL_DAC_MspInit+0xf0>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002822:	613b      	str	r3, [r7, #16]
 8002824:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <HAL_DAC_MspInit+0xf0>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a2a      	ldr	r2, [pc, #168]	; (80028d8 <HAL_DAC_MspInit+0xf0>)
 8002830:	f043 0301 	orr.w	r3, r3, #1
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b28      	ldr	r3, [pc, #160]	; (80028d8 <HAL_DAC_MspInit+0xf0>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002842:	2320      	movs	r3, #32
 8002844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002846:	2303      	movs	r3, #3
 8002848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284e:	f107 0314 	add.w	r3, r7, #20
 8002852:	4619      	mov	r1, r3
 8002854:	4821      	ldr	r0, [pc, #132]	; (80028dc <HAL_DAC_MspInit+0xf4>)
 8002856:	f003 fdf1 	bl	800643c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 800285a:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <HAL_DAC_MspInit+0xf8>)
 800285c:	4a21      	ldr	r2, [pc, #132]	; (80028e4 <HAL_DAC_MspInit+0xfc>)
 800285e:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8002860:	4b1f      	ldr	r3, [pc, #124]	; (80028e0 <HAL_DAC_MspInit+0xf8>)
 8002862:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002866:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <HAL_DAC_MspInit+0xf8>)
 800286a:	2240      	movs	r2, #64	; 0x40
 800286c:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_DAC_MspInit+0xf8>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8002874:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <HAL_DAC_MspInit+0xf8>)
 8002876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800287a:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_DAC_MspInit+0xf8>)
 800287e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002882:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002884:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <HAL_DAC_MspInit+0xf8>)
 8002886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800288a:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 800288c:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <HAL_DAC_MspInit+0xf8>)
 800288e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002892:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_DAC_MspInit+0xf8>)
 8002896:	2200      	movs	r2, #0
 8002898:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_DAC_MspInit+0xf8>)
 800289c:	2200      	movs	r2, #0
 800289e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80028a0:	480f      	ldr	r0, [pc, #60]	; (80028e0 <HAL_DAC_MspInit+0xf8>)
 80028a2:	f002 fe61 	bl	8005568 <HAL_DMA_Init>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80028ac:	f7ff fed4 	bl	8002658 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <HAL_DAC_MspInit+0xf8>)
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <HAL_DAC_MspInit+0xf8>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80028bc:	2200      	movs	r2, #0
 80028be:	210f      	movs	r1, #15
 80028c0:	2036      	movs	r0, #54	; 0x36
 80028c2:	f002 fbb5 	bl	8005030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028c6:	2036      	movs	r0, #54	; 0x36
 80028c8:	f002 fbce 	bl	8005068 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80028cc:	bf00      	nop
 80028ce:	3728      	adds	r7, #40	; 0x28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40007400 	.word	0x40007400
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40020000 	.word	0x40020000
 80028e0:	200001d0 	.word	0x200001d0
 80028e4:	400260a0 	.word	0x400260a0

080028e8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <HAL_DMA2D_MspInit+0x48>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d115      	bne.n	8002926 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <HAL_DMA2D_MspInit+0x4c>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002902:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <HAL_DMA2D_MspInit+0x4c>)
 8002904:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002908:	6313      	str	r3, [r2, #48]	; 0x30
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <HAL_DMA2D_MspInit+0x4c>)
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2105      	movs	r1, #5
 800291a:	205a      	movs	r0, #90	; 0x5a
 800291c:	f002 fb88 	bl	8005030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8002920:	205a      	movs	r0, #90	; 0x5a
 8002922:	f002 fba1 	bl	8005068 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	4002b000 	.word	0x4002b000
 8002934:	40023800 	.word	0x40023800

08002938 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a29      	ldr	r2, [pc, #164]	; (80029fc <HAL_I2C_MspInit+0xc4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d14b      	bne.n	80029f2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <HAL_I2C_MspInit+0xc8>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <HAL_I2C_MspInit+0xc8>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <HAL_I2C_MspInit+0xc8>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	613b      	str	r3, [r7, #16]
 8002974:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <HAL_I2C_MspInit+0xc8>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a20      	ldr	r2, [pc, #128]	; (8002a00 <HAL_I2C_MspInit+0xc8>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <HAL_I2C_MspInit+0xc8>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	60fb      	str	r3, [r7, #12]
 8002990:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002998:	2312      	movs	r3, #18
 800299a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299c:	2301      	movs	r3, #1
 800299e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a0:	2300      	movs	r3, #0
 80029a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029a4:	2304      	movs	r3, #4
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4619      	mov	r1, r3
 80029ae:	4815      	ldr	r0, [pc, #84]	; (8002a04 <HAL_I2C_MspInit+0xcc>)
 80029b0:	f003 fd44 	bl	800643c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80029b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ba:	2312      	movs	r3, #18
 80029bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029be:	2301      	movs	r3, #1
 80029c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029c6:	2304      	movs	r3, #4
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80029ca:	f107 0314 	add.w	r3, r7, #20
 80029ce:	4619      	mov	r1, r3
 80029d0:	480d      	ldr	r0, [pc, #52]	; (8002a08 <HAL_I2C_MspInit+0xd0>)
 80029d2:	f003 fd33 	bl	800643c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_I2C_MspInit+0xc8>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a08      	ldr	r2, [pc, #32]	; (8002a00 <HAL_I2C_MspInit+0xc8>)
 80029e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_I2C_MspInit+0xc8>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80029f2:	bf00      	nop
 80029f4:	3728      	adds	r7, #40	; 0x28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40005c00 	.word	0x40005c00
 8002a00:	40023800 	.word	0x40023800
 8002a04:	40020800 	.word	0x40020800
 8002a08:	40020000 	.word	0x40020000

08002a0c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b09a      	sub	sp, #104	; 0x68
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a28:	2230      	movs	r2, #48	; 0x30
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f00c fb11 	bl	800f054 <memset>
  if(hltdc->Instance==LTDC)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a89      	ldr	r2, [pc, #548]	; (8002c5c <HAL_LTDC_MspInit+0x250>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	f040 810a 	bne.w	8002c52 <HAL_LTDC_MspInit+0x246>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a3e:	2308      	movs	r3, #8
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8002a42:	2364      	movs	r3, #100	; 0x64
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002a46:	2304      	movs	r3, #4
 8002a48:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a52:	4618      	mov	r0, r3
 8002a54:	f006 fe36 	bl	80096c4 <HAL_RCCEx_PeriphCLKConfig>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002a5e:	f7ff fdfb 	bl	8002658 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
 8002a66:	4b7e      	ldr	r3, [pc, #504]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a6a:	4a7d      	ldr	r2, [pc, #500]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002a6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a70:	6453      	str	r3, [r2, #68]	; 0x44
 8002a72:	4b7b      	ldr	r3, [pc, #492]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a7a:	623b      	str	r3, [r7, #32]
 8002a7c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	4b77      	ldr	r3, [pc, #476]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	4a76      	ldr	r2, [pc, #472]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002a88:	f043 0320 	orr.w	r3, r3, #32
 8002a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8e:	4b74      	ldr	r3, [pc, #464]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	61fb      	str	r3, [r7, #28]
 8002a98:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	4b70      	ldr	r3, [pc, #448]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa2:	4a6f      	ldr	r2, [pc, #444]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aaa:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	61bb      	str	r3, [r7, #24]
 8002ab4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	4b69      	ldr	r3, [pc, #420]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	4a68      	ldr	r2, [pc, #416]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002ac0:	f043 0302 	orr.w	r3, r3, #2
 8002ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac6:	4b66      	ldr	r3, [pc, #408]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	4b62      	ldr	r3, [pc, #392]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a61      	ldr	r2, [pc, #388]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b5f      	ldr	r3, [pc, #380]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b5b      	ldr	r3, [pc, #364]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a5a      	ldr	r2, [pc, #360]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
 8002afe:	4b58      	ldr	r3, [pc, #352]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	4b54      	ldr	r3, [pc, #336]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	4a53      	ldr	r2, [pc, #332]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002b14:	f043 0308 	orr.w	r3, r3, #8
 8002b18:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1a:	4b51      	ldr	r3, [pc, #324]	; (8002c60 <HAL_LTDC_MspInit+0x254>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b2a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2300      	movs	r3, #0
 8002b36:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b38:	230e      	movs	r3, #14
 8002b3a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002b3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b40:	4619      	mov	r1, r3
 8002b42:	4848      	ldr	r0, [pc, #288]	; (8002c64 <HAL_LTDC_MspInit+0x258>)
 8002b44:	f003 fc7a 	bl	800643c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002b48:	f641 0358 	movw	r3, #6232	; 0x1858
 8002b4c:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b5a:	230e      	movs	r3, #14
 8002b5c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b62:	4619      	mov	r1, r3
 8002b64:	4840      	ldr	r0, [pc, #256]	; (8002c68 <HAL_LTDC_MspInit+0x25c>)
 8002b66:	f003 fc69 	bl	800643c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b7a:	2309      	movs	r3, #9
 8002b7c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b82:	4619      	mov	r1, r3
 8002b84:	4839      	ldr	r0, [pc, #228]	; (8002c6c <HAL_LTDC_MspInit+0x260>)
 8002b86:	f003 fc59 	bl	800643c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002b8a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002b8e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b9c:	230e      	movs	r3, #14
 8002b9e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4831      	ldr	r0, [pc, #196]	; (8002c6c <HAL_LTDC_MspInit+0x260>)
 8002ba8:	f003 fc48 	bl	800643c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002bac:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002bb0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002bbe:	230e      	movs	r3, #14
 8002bc0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4829      	ldr	r0, [pc, #164]	; (8002c70 <HAL_LTDC_MspInit+0x264>)
 8002bca:	f003 fc37 	bl	800643c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002bce:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002bd2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002be0:	230e      	movs	r3, #14
 8002be2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002be4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002be8:	4619      	mov	r1, r3
 8002bea:	4822      	ldr	r0, [pc, #136]	; (8002c74 <HAL_LTDC_MspInit+0x268>)
 8002bec:	f003 fc26 	bl	800643c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002bf0:	2348      	movs	r3, #72	; 0x48
 8002bf2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002c00:	230e      	movs	r3, #14
 8002c02:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c08:	4619      	mov	r1, r3
 8002c0a:	481b      	ldr	r0, [pc, #108]	; (8002c78 <HAL_LTDC_MspInit+0x26c>)
 8002c0c:	f003 fc16 	bl	800643c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002c10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c14:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c16:	2302      	movs	r3, #2
 8002c18:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002c22:	2309      	movs	r3, #9
 8002c24:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4810      	ldr	r0, [pc, #64]	; (8002c70 <HAL_LTDC_MspInit+0x264>)
 8002c2e:	f003 fc05 	bl	800643c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 10, 0);
 8002c32:	2200      	movs	r2, #0
 8002c34:	210a      	movs	r1, #10
 8002c36:	2058      	movs	r0, #88	; 0x58
 8002c38:	f002 f9fa 	bl	8005030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002c3c:	2058      	movs	r0, #88	; 0x58
 8002c3e:	f002 fa13 	bl	8005068 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2100      	movs	r1, #0
 8002c46:	2059      	movs	r0, #89	; 0x59
 8002c48:	f002 f9f2 	bl	8005030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8002c4c:	2059      	movs	r0, #89	; 0x59
 8002c4e:	f002 fa0b 	bl	8005068 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002c52:	bf00      	nop
 8002c54:	3768      	adds	r7, #104	; 0x68
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40016800 	.word	0x40016800
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40021400 	.word	0x40021400
 8002c68:	40020000 	.word	0x40020000
 8002c6c:	40020400 	.word	0x40020400
 8002c70:	40021800 	.word	0x40021800
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40020c00 	.word	0x40020c00

08002c7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	; 0x28
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a19      	ldr	r2, [pc, #100]	; (8002d00 <HAL_SPI_MspInit+0x84>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d12c      	bne.n	8002cf8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <HAL_SPI_MspInit+0x88>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <HAL_SPI_MspInit+0x88>)
 8002ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cac:	6453      	str	r3, [r2, #68]	; 0x44
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <HAL_SPI_MspInit+0x88>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HAL_SPI_MspInit+0x88>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	4a10      	ldr	r2, [pc, #64]	; (8002d04 <HAL_SPI_MspInit+0x88>)
 8002cc4:	f043 0320 	orr.w	r3, r3, #32
 8002cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_SPI_MspInit+0x88>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	60fb      	str	r3, [r7, #12]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002cd6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002ce8:	2305      	movs	r3, #5
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4805      	ldr	r0, [pc, #20]	; (8002d08 <HAL_SPI_MspInit+0x8c>)
 8002cf4:	f003 fba2 	bl	800643c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002cf8:	bf00      	nop
 8002cfa:	3728      	adds	r7, #40	; 0x28
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40015000 	.word	0x40015000
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40021400 	.word	0x40021400

08002d0c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a08      	ldr	r2, [pc, #32]	; (8002d3c <HAL_SPI_MspDeInit+0x30>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d10a      	bne.n	8002d34 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <HAL_SPI_MspDeInit+0x34>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <HAL_SPI_MspDeInit+0x34>)
 8002d24:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d28:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8002d2a:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002d2e:	4805      	ldr	r0, [pc, #20]	; (8002d44 <HAL_SPI_MspDeInit+0x38>)
 8002d30:	f003 fd30 	bl	8006794 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40015000 	.word	0x40015000
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40021400 	.word	0x40021400

08002d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a1f      	ldr	r2, [pc, #124]	; (8002dd4 <HAL_TIM_Base_MspInit+0x8c>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d10e      	bne.n	8002d78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	4b1e      	ldr	r3, [pc, #120]	; (8002dd8 <HAL_TIM_Base_MspInit+0x90>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	4a1d      	ldr	r2, [pc, #116]	; (8002dd8 <HAL_TIM_Base_MspInit+0x90>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6a:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_TIM_Base_MspInit+0x90>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002d76:	e026      	b.n	8002dc6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d80:	d10e      	bne.n	8002da0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	4b14      	ldr	r3, [pc, #80]	; (8002dd8 <HAL_TIM_Base_MspInit+0x90>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	4a13      	ldr	r2, [pc, #76]	; (8002dd8 <HAL_TIM_Base_MspInit+0x90>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6413      	str	r3, [r2, #64]	; 0x40
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <HAL_TIM_Base_MspInit+0x90>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	693b      	ldr	r3, [r7, #16]
}
 8002d9e:	e012      	b.n	8002dc6 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM4)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a0d      	ldr	r2, [pc, #52]	; (8002ddc <HAL_TIM_Base_MspInit+0x94>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d10d      	bne.n	8002dc6 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HAL_TIM_Base_MspInit+0x90>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	4a09      	ldr	r2, [pc, #36]	; (8002dd8 <HAL_TIM_Base_MspInit+0x90>)
 8002db4:	f043 0304 	orr.w	r3, r3, #4
 8002db8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dba:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <HAL_TIM_Base_MspInit+0x90>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
}
 8002dc6:	bf00      	nop
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40010000 	.word	0x40010000
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40000800 	.word	0x40000800

08002de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08a      	sub	sp, #40	; 0x28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <HAL_UART_MspInit+0x84>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d12c      	bne.n	8002e5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	4b18      	ldr	r3, [pc, #96]	; (8002e68 <HAL_UART_MspInit+0x88>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_UART_MspInit+0x88>)
 8002e0c:	f043 0310 	orr.w	r3, r3, #16
 8002e10:	6453      	str	r3, [r2, #68]	; 0x44
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <HAL_UART_MspInit+0x88>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <HAL_UART_MspInit+0x88>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <HAL_UART_MspInit+0x88>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <HAL_UART_MspInit+0x88>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002e3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e40:	2302      	movs	r3, #2
 8002e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e4c:	2307      	movs	r3, #7
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	4619      	mov	r1, r3
 8002e56:	4805      	ldr	r0, [pc, #20]	; (8002e6c <HAL_UART_MspInit+0x8c>)
 8002e58:	f003 faf0 	bl	800643c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e5c:	bf00      	nop
 8002e5e:	3728      	adds	r7, #40	; 0x28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40011000 	.word	0x40011000
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020000 	.word	0x40020000

08002e70 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002e84:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <HAL_FMC_MspInit+0x104>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d16f      	bne.n	8002f6c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002e8c:	4b39      	ldr	r3, [pc, #228]	; (8002f74 <HAL_FMC_MspInit+0x104>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	4b38      	ldr	r3, [pc, #224]	; (8002f78 <HAL_FMC_MspInit+0x108>)
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	4a37      	ldr	r2, [pc, #220]	; (8002f78 <HAL_FMC_MspInit+0x108>)
 8002e9c:	f043 0301 	orr.w	r3, r3, #1
 8002ea0:	6393      	str	r3, [r2, #56]	; 0x38
 8002ea2:	4b35      	ldr	r3, [pc, #212]	; (8002f78 <HAL_FMC_MspInit+0x108>)
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002eae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002eb2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ec0:	230c      	movs	r3, #12
 8002ec2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	482c      	ldr	r0, [pc, #176]	; (8002f7c <HAL_FMC_MspInit+0x10c>)
 8002eca:	f003 fab7 	bl	800643c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eda:	2303      	movs	r3, #3
 8002edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ede:	230c      	movs	r3, #12
 8002ee0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002ee2:	1d3b      	adds	r3, r7, #4
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4826      	ldr	r0, [pc, #152]	; (8002f80 <HAL_FMC_MspInit+0x110>)
 8002ee8:	f003 faa8 	bl	800643c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002eec:	f248 1333 	movw	r3, #33075	; 0x8133
 8002ef0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efa:	2303      	movs	r3, #3
 8002efc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002efe:	230c      	movs	r3, #12
 8002f00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	4619      	mov	r1, r3
 8002f06:	481f      	ldr	r0, [pc, #124]	; (8002f84 <HAL_FMC_MspInit+0x114>)
 8002f08:	f003 fa98 	bl	800643c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002f0c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002f10:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f12:	2302      	movs	r3, #2
 8002f14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f1e:	230c      	movs	r3, #12
 8002f20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	4619      	mov	r1, r3
 8002f26:	4818      	ldr	r0, [pc, #96]	; (8002f88 <HAL_FMC_MspInit+0x118>)
 8002f28:	f003 fa88 	bl	800643c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002f2c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002f30:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f32:	2302      	movs	r3, #2
 8002f34:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f3e:	230c      	movs	r3, #12
 8002f40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f42:	1d3b      	adds	r3, r7, #4
 8002f44:	4619      	mov	r1, r3
 8002f46:	4811      	ldr	r0, [pc, #68]	; (8002f8c <HAL_FMC_MspInit+0x11c>)
 8002f48:	f003 fa78 	bl	800643c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002f4c:	2360      	movs	r3, #96	; 0x60
 8002f4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	2302      	movs	r3, #2
 8002f52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002f5c:	230c      	movs	r3, #12
 8002f5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f60:	1d3b      	adds	r3, r7, #4
 8002f62:	4619      	mov	r1, r3
 8002f64:	480a      	ldr	r0, [pc, #40]	; (8002f90 <HAL_FMC_MspInit+0x120>)
 8002f66:	f003 fa69 	bl	800643c <HAL_GPIO_Init>
 8002f6a:	e000      	b.n	8002f6e <HAL_FMC_MspInit+0xfe>
    return;
 8002f6c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20007f20 	.word	0x20007f20
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40021400 	.word	0x40021400
 8002f80:	40020800 	.word	0x40020800
 8002f84:	40021800 	.word	0x40021800
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40020c00 	.word	0x40020c00
 8002f90:	40020400 	.word	0x40020400

08002f94 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002f9c:	f7ff ff68 	bl	8002e70 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b08c      	sub	sp, #48	; 0x30
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002fb8:	2200      	movs	r2, #0
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	2036      	movs	r0, #54	; 0x36
 8002fbe:	f002 f837 	bl	8005030 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fc2:	2036      	movs	r0, #54	; 0x36
 8002fc4:	f002 f850 	bl	8005068 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	4b1f      	ldr	r3, [pc, #124]	; (800304c <HAL_InitTick+0xa4>)
 8002fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd0:	4a1e      	ldr	r2, [pc, #120]	; (800304c <HAL_InitTick+0xa4>)
 8002fd2:	f043 0310 	orr.w	r3, r3, #16
 8002fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd8:	4b1c      	ldr	r3, [pc, #112]	; (800304c <HAL_InitTick+0xa4>)
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002fe4:	f107 0210 	add.w	r2, r7, #16
 8002fe8:	f107 0314 	add.w	r3, r7, #20
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f006 fb36 	bl	8009660 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002ff4:	f006 fb0c 	bl	8009610 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	4a13      	ldr	r2, [pc, #76]	; (8003050 <HAL_InitTick+0xa8>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	0c9b      	lsrs	r3, r3, #18
 8003008:	3b01      	subs	r3, #1
 800300a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800300c:	4b11      	ldr	r3, [pc, #68]	; (8003054 <HAL_InitTick+0xac>)
 800300e:	4a12      	ldr	r2, [pc, #72]	; (8003058 <HAL_InitTick+0xb0>)
 8003010:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003012:	4b10      	ldr	r3, [pc, #64]	; (8003054 <HAL_InitTick+0xac>)
 8003014:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003018:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800301a:	4a0e      	ldr	r2, [pc, #56]	; (8003054 <HAL_InitTick+0xac>)
 800301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <HAL_InitTick+0xac>)
 8003022:	2200      	movs	r2, #0
 8003024:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_InitTick+0xac>)
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800302c:	4809      	ldr	r0, [pc, #36]	; (8003054 <HAL_InitTick+0xac>)
 800302e:	f007 fb79 	bl	800a724 <HAL_TIM_Base_Init>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d104      	bne.n	8003042 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003038:	4806      	ldr	r0, [pc, #24]	; (8003054 <HAL_InitTick+0xac>)
 800303a:	f007 fc2b 	bl	800a894 <HAL_TIM_Base_Start_IT>
 800303e:	4603      	mov	r3, r0
 8003040:	e000      	b.n	8003044 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
}
 8003044:	4618      	mov	r0, r3
 8003046:	3730      	adds	r7, #48	; 0x30
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40023800 	.word	0x40023800
 8003050:	431bde83 	.word	0x431bde83
 8003054:	20007f24 	.word	0x20007f24
 8003058:	40001000 	.word	0x40001000

0800305c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003060:	e7fe      	b.n	8003060 <NMI_Handler+0x4>

08003062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003062:	b480      	push	{r7}
 8003064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003066:	e7fe      	b.n	8003066 <HardFault_Handler+0x4>

08003068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800306c:	e7fe      	b.n	800306c <MemManage_Handler+0x4>

0800306e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800306e:	b480      	push	{r7}
 8003070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003072:	e7fe      	b.n	8003072 <BusFault_Handler+0x4>

08003074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003078:	e7fe      	b.n	8003078 <UsageFault_Handler+0x4>

0800307a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80030b8:	4802      	ldr	r0, [pc, #8]	; (80030c4 <DMA1_Stream6_IRQHandler+0x10>)
 80030ba:	f002 fbb9 	bl	8005830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	200001d0 	.word	0x200001d0

080030c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <TIM6_DAC_IRQHandler+0x20>)
 80030ce:	791b      	ldrb	r3, [r3, #4]
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80030d6:	4804      	ldr	r0, [pc, #16]	; (80030e8 <TIM6_DAC_IRQHandler+0x20>)
 80030d8:	f002 f8e0 	bl	800529c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80030dc:	4803      	ldr	r0, [pc, #12]	; (80030ec <TIM6_DAC_IRQHandler+0x24>)
 80030de:	f007 fc49 	bl	800a974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	200001bc 	.word	0x200001bc
 80030ec:	20007f24 	.word	0x20007f24

080030f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030f4:	4802      	ldr	r0, [pc, #8]	; (8003100 <DMA2_Stream0_IRQHandler+0x10>)
 80030f6:	f002 fb9b 	bl	8005830 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000154 	.word	0x20000154

08003104 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8003108:	4802      	ldr	r0, [pc, #8]	; (8003114 <OTG_HS_IRQHandler+0x10>)
 800310a:	f003 feeb 	bl	8006ee4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	200085a4 	.word	0x200085a4

08003118 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800311c:	4802      	ldr	r0, [pc, #8]	; (8003128 <LTDC_IRQHandler+0x10>)
 800311e:	f005 faf5 	bl	800870c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	200002c4 	.word	0x200002c4

0800312c <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003130:	4802      	ldr	r0, [pc, #8]	; (800313c <LTDC_ER_IRQHandler+0x10>)
 8003132:	f005 faeb 	bl	800870c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	200002c4 	.word	0x200002c4

08003140 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003144:	4802      	ldr	r0, [pc, #8]	; (8003150 <DMA2D_IRQHandler+0x10>)
 8003146:	f002 ff3a 	bl	8005fbe <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000230 	.word	0x20000230

08003154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800315c:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <_sbrk+0x5c>)
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <_sbrk+0x60>)
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003168:	4b13      	ldr	r3, [pc, #76]	; (80031b8 <_sbrk+0x64>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003170:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <_sbrk+0x64>)
 8003172:	4a12      	ldr	r2, [pc, #72]	; (80031bc <_sbrk+0x68>)
 8003174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <_sbrk+0x64>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	429a      	cmp	r2, r3
 8003182:	d207      	bcs.n	8003194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003184:	f00b ff2c 	bl	800efe0 <__errno>
 8003188:	4603      	mov	r3, r0
 800318a:	220c      	movs	r2, #12
 800318c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800318e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003192:	e009      	b.n	80031a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <_sbrk+0x64>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800319a:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <_sbrk+0x64>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	4a05      	ldr	r2, [pc, #20]	; (80031b8 <_sbrk+0x64>)
 80031a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031a6:	68fb      	ldr	r3, [r7, #12]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20030000 	.word	0x20030000
 80031b4:	00000400 	.word	0x00000400
 80031b8:	20007f6c 	.word	0x20007f6c
 80031bc:	200088b8 	.word	0x200088b8

080031c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <SystemInit+0x20>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ca:	4a05      	ldr	r2, [pc, #20]	; (80031e0 <SystemInit+0x20>)
 80031cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80031e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800321c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031e8:	480d      	ldr	r0, [pc, #52]	; (8003220 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80031ea:	490e      	ldr	r1, [pc, #56]	; (8003224 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80031ec:	4a0e      	ldr	r2, [pc, #56]	; (8003228 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80031ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031f0:	e002      	b.n	80031f8 <LoopCopyDataInit>

080031f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031f6:	3304      	adds	r3, #4

080031f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031fc:	d3f9      	bcc.n	80031f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031fe:	4a0b      	ldr	r2, [pc, #44]	; (800322c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003200:	4c0b      	ldr	r4, [pc, #44]	; (8003230 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003204:	e001      	b.n	800320a <LoopFillZerobss>

08003206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003208:	3204      	adds	r2, #4

0800320a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800320a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800320c:	d3fb      	bcc.n	8003206 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800320e:	f7ff ffd7 	bl	80031c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003212:	f00b feeb 	bl	800efec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003216:	f7fd fe13 	bl	8000e40 <main>
  bx  lr    
 800321a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800321c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003224:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8003228:	08094f18 	.word	0x08094f18
  ldr r2, =_sbss
 800322c:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8003230:	200088b8 	.word	0x200088b8

08003234 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003234:	e7fe      	b.n	8003234 <ADC_IRQHandler>

08003236 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800323a:	f000 fa5d 	bl	80036f8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800323e:	20ca      	movs	r0, #202	; 0xca
 8003240:	f000 f95d 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8003244:	20c3      	movs	r0, #195	; 0xc3
 8003246:	f000 f967 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800324a:	2008      	movs	r0, #8
 800324c:	f000 f964 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8003250:	2050      	movs	r0, #80	; 0x50
 8003252:	f000 f961 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8003256:	20cf      	movs	r0, #207	; 0xcf
 8003258:	f000 f951 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800325c:	2000      	movs	r0, #0
 800325e:	f000 f95b 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8003262:	20c1      	movs	r0, #193	; 0xc1
 8003264:	f000 f958 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8003268:	2030      	movs	r0, #48	; 0x30
 800326a:	f000 f955 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800326e:	20ed      	movs	r0, #237	; 0xed
 8003270:	f000 f945 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8003274:	2064      	movs	r0, #100	; 0x64
 8003276:	f000 f94f 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800327a:	2003      	movs	r0, #3
 800327c:	f000 f94c 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8003280:	2012      	movs	r0, #18
 8003282:	f000 f949 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8003286:	2081      	movs	r0, #129	; 0x81
 8003288:	f000 f946 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800328c:	20e8      	movs	r0, #232	; 0xe8
 800328e:	f000 f936 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8003292:	2085      	movs	r0, #133	; 0x85
 8003294:	f000 f940 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003298:	2000      	movs	r0, #0
 800329a:	f000 f93d 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800329e:	2078      	movs	r0, #120	; 0x78
 80032a0:	f000 f93a 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80032a4:	20cb      	movs	r0, #203	; 0xcb
 80032a6:	f000 f92a 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80032aa:	2039      	movs	r0, #57	; 0x39
 80032ac:	f000 f934 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80032b0:	202c      	movs	r0, #44	; 0x2c
 80032b2:	f000 f931 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80032b6:	2000      	movs	r0, #0
 80032b8:	f000 f92e 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80032bc:	2034      	movs	r0, #52	; 0x34
 80032be:	f000 f92b 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80032c2:	2002      	movs	r0, #2
 80032c4:	f000 f928 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80032c8:	20f7      	movs	r0, #247	; 0xf7
 80032ca:	f000 f918 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80032ce:	2020      	movs	r0, #32
 80032d0:	f000 f922 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80032d4:	20ea      	movs	r0, #234	; 0xea
 80032d6:	f000 f912 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80032da:	2000      	movs	r0, #0
 80032dc:	f000 f91c 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80032e0:	2000      	movs	r0, #0
 80032e2:	f000 f919 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80032e6:	20b1      	movs	r0, #177	; 0xb1
 80032e8:	f000 f909 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80032ec:	2000      	movs	r0, #0
 80032ee:	f000 f913 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80032f2:	201b      	movs	r0, #27
 80032f4:	f000 f910 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80032f8:	20b6      	movs	r0, #182	; 0xb6
 80032fa:	f000 f900 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80032fe:	200a      	movs	r0, #10
 8003300:	f000 f90a 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8003304:	20a2      	movs	r0, #162	; 0xa2
 8003306:	f000 f907 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800330a:	20c0      	movs	r0, #192	; 0xc0
 800330c:	f000 f8f7 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8003310:	2010      	movs	r0, #16
 8003312:	f000 f901 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8003316:	20c1      	movs	r0, #193	; 0xc1
 8003318:	f000 f8f1 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800331c:	2010      	movs	r0, #16
 800331e:	f000 f8fb 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8003322:	20c5      	movs	r0, #197	; 0xc5
 8003324:	f000 f8eb 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8003328:	2045      	movs	r0, #69	; 0x45
 800332a:	f000 f8f5 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800332e:	2015      	movs	r0, #21
 8003330:	f000 f8f2 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8003334:	20c7      	movs	r0, #199	; 0xc7
 8003336:	f000 f8e2 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800333a:	2090      	movs	r0, #144	; 0x90
 800333c:	f000 f8ec 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8003340:	2036      	movs	r0, #54	; 0x36
 8003342:	f000 f8dc 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8003346:	20c8      	movs	r0, #200	; 0xc8
 8003348:	f000 f8e6 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800334c:	20f2      	movs	r0, #242	; 0xf2
 800334e:	f000 f8d6 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003352:	2000      	movs	r0, #0
 8003354:	f000 f8e0 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8003358:	20b0      	movs	r0, #176	; 0xb0
 800335a:	f000 f8d0 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800335e:	20c2      	movs	r0, #194	; 0xc2
 8003360:	f000 f8da 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8003364:	20b6      	movs	r0, #182	; 0xb6
 8003366:	f000 f8ca 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800336a:	200a      	movs	r0, #10
 800336c:	f000 f8d4 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8003370:	20a7      	movs	r0, #167	; 0xa7
 8003372:	f000 f8d1 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8003376:	2027      	movs	r0, #39	; 0x27
 8003378:	f000 f8ce 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800337c:	2004      	movs	r0, #4
 800337e:	f000 f8cb 	bl	8003518 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8003382:	202a      	movs	r0, #42	; 0x2a
 8003384:	f000 f8bb 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003388:	2000      	movs	r0, #0
 800338a:	f000 f8c5 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800338e:	2000      	movs	r0, #0
 8003390:	f000 f8c2 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003394:	2000      	movs	r0, #0
 8003396:	f000 f8bf 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800339a:	20ef      	movs	r0, #239	; 0xef
 800339c:	f000 f8bc 	bl	8003518 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80033a0:	202b      	movs	r0, #43	; 0x2b
 80033a2:	f000 f8ac 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80033a6:	2000      	movs	r0, #0
 80033a8:	f000 f8b6 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80033ac:	2000      	movs	r0, #0
 80033ae:	f000 f8b3 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80033b2:	2001      	movs	r0, #1
 80033b4:	f000 f8b0 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80033b8:	203f      	movs	r0, #63	; 0x3f
 80033ba:	f000 f8ad 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80033be:	20f6      	movs	r0, #246	; 0xf6
 80033c0:	f000 f89d 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80033c4:	2001      	movs	r0, #1
 80033c6:	f000 f8a7 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80033ca:	2000      	movs	r0, #0
 80033cc:	f000 f8a4 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80033d0:	2006      	movs	r0, #6
 80033d2:	f000 f8a1 	bl	8003518 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80033d6:	202c      	movs	r0, #44	; 0x2c
 80033d8:	f000 f891 	bl	80034fe <ili9341_WriteReg>
  LCD_Delay(200);
 80033dc:	20c8      	movs	r0, #200	; 0xc8
 80033de:	f000 fa79 	bl	80038d4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80033e2:	2026      	movs	r0, #38	; 0x26
 80033e4:	f000 f88b 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80033e8:	2001      	movs	r0, #1
 80033ea:	f000 f895 	bl	8003518 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80033ee:	20e0      	movs	r0, #224	; 0xe0
 80033f0:	f000 f885 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80033f4:	200f      	movs	r0, #15
 80033f6:	f000 f88f 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80033fa:	2029      	movs	r0, #41	; 0x29
 80033fc:	f000 f88c 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8003400:	2024      	movs	r0, #36	; 0x24
 8003402:	f000 f889 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003406:	200c      	movs	r0, #12
 8003408:	f000 f886 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800340c:	200e      	movs	r0, #14
 800340e:	f000 f883 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8003412:	2009      	movs	r0, #9
 8003414:	f000 f880 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8003418:	204e      	movs	r0, #78	; 0x4e
 800341a:	f000 f87d 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800341e:	2078      	movs	r0, #120	; 0x78
 8003420:	f000 f87a 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8003424:	203c      	movs	r0, #60	; 0x3c
 8003426:	f000 f877 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800342a:	2009      	movs	r0, #9
 800342c:	f000 f874 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8003430:	2013      	movs	r0, #19
 8003432:	f000 f871 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003436:	2005      	movs	r0, #5
 8003438:	f000 f86e 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800343c:	2017      	movs	r0, #23
 800343e:	f000 f86b 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003442:	2011      	movs	r0, #17
 8003444:	f000 f868 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003448:	2000      	movs	r0, #0
 800344a:	f000 f865 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800344e:	20e1      	movs	r0, #225	; 0xe1
 8003450:	f000 f855 	bl	80034fe <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003454:	2000      	movs	r0, #0
 8003456:	f000 f85f 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800345a:	2016      	movs	r0, #22
 800345c:	f000 f85c 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8003460:	201b      	movs	r0, #27
 8003462:	f000 f859 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003466:	2004      	movs	r0, #4
 8003468:	f000 f856 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800346c:	2011      	movs	r0, #17
 800346e:	f000 f853 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8003472:	2007      	movs	r0, #7
 8003474:	f000 f850 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8003478:	2031      	movs	r0, #49	; 0x31
 800347a:	f000 f84d 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800347e:	2033      	movs	r0, #51	; 0x33
 8003480:	f000 f84a 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8003484:	2042      	movs	r0, #66	; 0x42
 8003486:	f000 f847 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800348a:	2005      	movs	r0, #5
 800348c:	f000 f844 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8003490:	200c      	movs	r0, #12
 8003492:	f000 f841 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8003496:	200a      	movs	r0, #10
 8003498:	f000 f83e 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800349c:	2028      	movs	r0, #40	; 0x28
 800349e:	f000 f83b 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80034a2:	202f      	movs	r0, #47	; 0x2f
 80034a4:	f000 f838 	bl	8003518 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80034a8:	200f      	movs	r0, #15
 80034aa:	f000 f835 	bl	8003518 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80034ae:	2011      	movs	r0, #17
 80034b0:	f000 f825 	bl	80034fe <ili9341_WriteReg>
  LCD_Delay(200);
 80034b4:	20c8      	movs	r0, #200	; 0xc8
 80034b6:	f000 fa0d 	bl	80038d4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80034ba:	2029      	movs	r0, #41	; 0x29
 80034bc:	f000 f81f 	bl	80034fe <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80034c0:	202c      	movs	r0, #44	; 0x2c
 80034c2:	f000 f81c 	bl	80034fe <ili9341_WriteReg>
}
 80034c6:	bf00      	nop
 80034c8:	bd80      	pop	{r7, pc}

080034ca <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80034ce:	f000 f913 	bl	80036f8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80034d2:	2103      	movs	r1, #3
 80034d4:	20d3      	movs	r0, #211	; 0xd3
 80034d6:	f000 f82c 	bl	8003532 <ili9341_ReadData>
 80034da:	4603      	mov	r3, r0
 80034dc:	b29b      	uxth	r3, r3
}
 80034de:	4618      	mov	r0, r3
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80034e6:	2029      	movs	r0, #41	; 0x29
 80034e8:	f000 f809 	bl	80034fe <ili9341_WriteReg>
}
 80034ec:	bf00      	nop
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80034f4:	2028      	movs	r0, #40	; 0x28
 80034f6:	f000 f802 	bl	80034fe <ili9341_WriteReg>
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}

080034fe <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	4603      	mov	r3, r0
 8003506:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f98e 	bl	800382c <LCD_IO_WriteReg>
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	4618      	mov	r0, r3
 8003526:	f000 f95f 	bl	80037e8 <LCD_IO_WriteData>
}
 800352a:	bf00      	nop
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	4603      	mov	r3, r0
 800353a:	460a      	mov	r2, r1
 800353c:	80fb      	strh	r3, [r7, #6]
 800353e:	4613      	mov	r3, r2
 8003540:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8003542:	797a      	ldrb	r2, [r7, #5]
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f000 f991 	bl	8003870 <LCD_IO_ReadData>
 800354e:	4603      	mov	r3, r0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800355c:	23f0      	movs	r3, #240	; 0xf0
}
 800355e:	4618      	mov	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800356c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8003570:	4618      	mov	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003580:	4819      	ldr	r0, [pc, #100]	; (80035e8 <SPIx_Init+0x6c>)
 8003582:	f006 ff90 	bl	800a4a6 <HAL_SPI_GetState>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d12b      	bne.n	80035e4 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800358c:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <SPIx_Init+0x6c>)
 800358e:	4a17      	ldr	r2, [pc, #92]	; (80035ec <SPIx_Init+0x70>)
 8003590:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003592:	4b15      	ldr	r3, [pc, #84]	; (80035e8 <SPIx_Init+0x6c>)
 8003594:	2218      	movs	r2, #24
 8003596:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003598:	4b13      	ldr	r3, [pc, #76]	; (80035e8 <SPIx_Init+0x6c>)
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <SPIx_Init+0x6c>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80035a4:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <SPIx_Init+0x6c>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80035aa:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <SPIx_Init+0x6c>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80035b0:	4b0d      	ldr	r3, [pc, #52]	; (80035e8 <SPIx_Init+0x6c>)
 80035b2:	2207      	movs	r2, #7
 80035b4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80035b6:	4b0c      	ldr	r3, [pc, #48]	; (80035e8 <SPIx_Init+0x6c>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <SPIx_Init+0x6c>)
 80035be:	2200      	movs	r2, #0
 80035c0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80035c2:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <SPIx_Init+0x6c>)
 80035c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80035ca:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <SPIx_Init+0x6c>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <SPIx_Init+0x6c>)
 80035d2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035d6:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80035d8:	4803      	ldr	r0, [pc, #12]	; (80035e8 <SPIx_Init+0x6c>)
 80035da:	f000 f853 	bl	8003684 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80035de:	4802      	ldr	r0, [pc, #8]	; (80035e8 <SPIx_Init+0x6c>)
 80035e0:	f006 fac1 	bl	8009b66 <HAL_SPI_Init>
  } 
}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20007f70 	.word	0x20007f70
 80035ec:	40015000 	.word	0x40015000

080035f0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80035fa:	2300      	movs	r3, #0
 80035fc:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80035fe:	79fb      	ldrb	r3, [r7, #7]
 8003600:	b29a      	uxth	r2, r3
 8003602:	4b09      	ldr	r3, [pc, #36]	; (8003628 <SPIx_Read+0x38>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f107 0108 	add.w	r1, r7, #8
 800360a:	4808      	ldr	r0, [pc, #32]	; (800362c <SPIx_Read+0x3c>)
 800360c:	f006 fc98 	bl	8009f40 <HAL_SPI_Receive>
 8003610:	4603      	mov	r3, r0
 8003612:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800361a:	f000 f827 	bl	800366c <SPIx_Error>
  }
  
  return readvalue;
 800361e:	68bb      	ldr	r3, [r7, #8]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	2000003c 	.word	0x2000003c
 800362c:	20007f70 	.word	0x20007f70

08003630 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <SPIx_Write+0x34>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	1db9      	adds	r1, r7, #6
 8003644:	2201      	movs	r2, #1
 8003646:	4808      	ldr	r0, [pc, #32]	; (8003668 <SPIx_Write+0x38>)
 8003648:	f006 fb3e 	bl	8009cc8 <HAL_SPI_Transmit>
 800364c:	4603      	mov	r3, r0
 800364e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003650:	7bfb      	ldrb	r3, [r7, #15]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003656:	f000 f809 	bl	800366c <SPIx_Error>
  }
}
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	2000003c 	.word	0x2000003c
 8003668:	20007f70 	.word	0x20007f70

0800366c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003670:	4803      	ldr	r0, [pc, #12]	; (8003680 <SPIx_Error+0x14>)
 8003672:	f006 fb01 	bl	8009c78 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003676:	f7ff ff81 	bl	800357c <SPIx_Init>
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20007f70 	.word	0x20007f70

08003684 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	; 0x28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	4b17      	ldr	r3, [pc, #92]	; (80036f0 <SPIx_MspInit+0x6c>)
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	4a16      	ldr	r2, [pc, #88]	; (80036f0 <SPIx_MspInit+0x6c>)
 8003696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800369a:	6453      	str	r3, [r2, #68]	; 0x44
 800369c:	4b14      	ldr	r3, [pc, #80]	; (80036f0 <SPIx_MspInit+0x6c>)
 800369e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a4:	613b      	str	r3, [r7, #16]
 80036a6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <SPIx_MspInit+0x6c>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	4a0f      	ldr	r2, [pc, #60]	; (80036f0 <SPIx_MspInit+0x6c>)
 80036b2:	f043 0320 	orr.w	r3, r3, #32
 80036b6:	6313      	str	r3, [r2, #48]	; 0x30
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <SPIx_MspInit+0x6c>)
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	f003 0320 	and.w	r3, r3, #32
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80036c4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80036c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80036ce:	2302      	movs	r3, #2
 80036d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80036d2:	2301      	movs	r3, #1
 80036d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80036d6:	2305      	movs	r3, #5
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80036da:	f107 0314 	add.w	r3, r7, #20
 80036de:	4619      	mov	r1, r3
 80036e0:	4804      	ldr	r0, [pc, #16]	; (80036f4 <SPIx_MspInit+0x70>)
 80036e2:	f002 feab 	bl	800643c <HAL_GPIO_Init>
}
 80036e6:	bf00      	nop
 80036e8:	3728      	adds	r7, #40	; 0x28
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40021400 	.word	0x40021400

080036f8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80036fe:	4b36      	ldr	r3, [pc, #216]	; (80037d8 <LCD_IO_Init+0xe0>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d164      	bne.n	80037d0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8003706:	4b34      	ldr	r3, [pc, #208]	; (80037d8 <LCD_IO_Init+0xe0>)
 8003708:	2201      	movs	r2, #1
 800370a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800370c:	2300      	movs	r3, #0
 800370e:	60bb      	str	r3, [r7, #8]
 8003710:	4b32      	ldr	r3, [pc, #200]	; (80037dc <LCD_IO_Init+0xe4>)
 8003712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003714:	4a31      	ldr	r2, [pc, #196]	; (80037dc <LCD_IO_Init+0xe4>)
 8003716:	f043 0308 	orr.w	r3, r3, #8
 800371a:	6313      	str	r3, [r2, #48]	; 0x30
 800371c:	4b2f      	ldr	r3, [pc, #188]	; (80037dc <LCD_IO_Init+0xe4>)
 800371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800372c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800372e:	2301      	movs	r3, #1
 8003730:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003736:	2302      	movs	r3, #2
 8003738:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800373a:	f107 030c 	add.w	r3, r7, #12
 800373e:	4619      	mov	r1, r3
 8003740:	4827      	ldr	r0, [pc, #156]	; (80037e0 <LCD_IO_Init+0xe8>)
 8003742:	f002 fe7b 	bl	800643c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	4b24      	ldr	r3, [pc, #144]	; (80037dc <LCD_IO_Init+0xe4>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	4a23      	ldr	r2, [pc, #140]	; (80037dc <LCD_IO_Init+0xe4>)
 8003750:	f043 0308 	orr.w	r3, r3, #8
 8003754:	6313      	str	r3, [r2, #48]	; 0x30
 8003756:	4b21      	ldr	r3, [pc, #132]	; (80037dc <LCD_IO_Init+0xe4>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003766:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003768:	2301      	movs	r3, #1
 800376a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003770:	2302      	movs	r3, #2
 8003772:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003774:	f107 030c 	add.w	r3, r7, #12
 8003778:	4619      	mov	r1, r3
 800377a:	4819      	ldr	r0, [pc, #100]	; (80037e0 <LCD_IO_Init+0xe8>)
 800377c:	f002 fe5e 	bl	800643c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003780:	2300      	movs	r3, #0
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	4b15      	ldr	r3, [pc, #84]	; (80037dc <LCD_IO_Init+0xe4>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	4a14      	ldr	r2, [pc, #80]	; (80037dc <LCD_IO_Init+0xe4>)
 800378a:	f043 0304 	orr.w	r3, r3, #4
 800378e:	6313      	str	r3, [r2, #48]	; 0x30
 8003790:	4b12      	ldr	r3, [pc, #72]	; (80037dc <LCD_IO_Init+0xe4>)
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800379c:	2304      	movs	r3, #4
 800379e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80037a0:	2301      	movs	r3, #1
 80037a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80037a8:	2302      	movs	r3, #2
 80037aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80037ac:	f107 030c 	add.w	r3, r7, #12
 80037b0:	4619      	mov	r1, r3
 80037b2:	480c      	ldr	r0, [pc, #48]	; (80037e4 <LCD_IO_Init+0xec>)
 80037b4:	f002 fe42 	bl	800643c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80037b8:	2200      	movs	r2, #0
 80037ba:	2104      	movs	r1, #4
 80037bc:	4809      	ldr	r0, [pc, #36]	; (80037e4 <LCD_IO_Init+0xec>)
 80037be:	f003 f90d 	bl	80069dc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80037c2:	2201      	movs	r2, #1
 80037c4:	2104      	movs	r1, #4
 80037c6:	4807      	ldr	r0, [pc, #28]	; (80037e4 <LCD_IO_Init+0xec>)
 80037c8:	f003 f908 	bl	80069dc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80037cc:	f7ff fed6 	bl	800357c <SPIx_Init>
  }
}
 80037d0:	bf00      	nop
 80037d2:	3720      	adds	r7, #32
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	20007fc8 	.word	0x20007fc8
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40020c00 	.word	0x40020c00
 80037e4:	40020800 	.word	0x40020800

080037e8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80037f2:	2201      	movs	r2, #1
 80037f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037f8:	480a      	ldr	r0, [pc, #40]	; (8003824 <LCD_IO_WriteData+0x3c>)
 80037fa:	f003 f8ef 	bl	80069dc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80037fe:	2200      	movs	r2, #0
 8003800:	2104      	movs	r1, #4
 8003802:	4809      	ldr	r0, [pc, #36]	; (8003828 <LCD_IO_WriteData+0x40>)
 8003804:	f003 f8ea 	bl	80069dc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003808:	88fb      	ldrh	r3, [r7, #6]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff ff10 	bl	8003630 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003810:	2201      	movs	r2, #1
 8003812:	2104      	movs	r1, #4
 8003814:	4804      	ldr	r0, [pc, #16]	; (8003828 <LCD_IO_WriteData+0x40>)
 8003816:	f003 f8e1 	bl	80069dc <HAL_GPIO_WritePin>
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40020c00 	.word	0x40020c00
 8003828:	40020800 	.word	0x40020800

0800382c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003836:	2200      	movs	r2, #0
 8003838:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800383c:	480a      	ldr	r0, [pc, #40]	; (8003868 <LCD_IO_WriteReg+0x3c>)
 800383e:	f003 f8cd 	bl	80069dc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003842:	2200      	movs	r2, #0
 8003844:	2104      	movs	r1, #4
 8003846:	4809      	ldr	r0, [pc, #36]	; (800386c <LCD_IO_WriteReg+0x40>)
 8003848:	f003 f8c8 	bl	80069dc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	b29b      	uxth	r3, r3
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff feed 	bl	8003630 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003856:	2201      	movs	r2, #1
 8003858:	2104      	movs	r1, #4
 800385a:	4804      	ldr	r0, [pc, #16]	; (800386c <LCD_IO_WriteReg+0x40>)
 800385c:	f003 f8be 	bl	80069dc <HAL_GPIO_WritePin>
}
 8003860:	bf00      	nop
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	40020c00 	.word	0x40020c00
 800386c:	40020800 	.word	0x40020800

08003870 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	460a      	mov	r2, r1
 800387a:	80fb      	strh	r3, [r7, #6]
 800387c:	4613      	mov	r3, r2
 800387e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003884:	2200      	movs	r2, #0
 8003886:	2104      	movs	r1, #4
 8003888:	4810      	ldr	r0, [pc, #64]	; (80038cc <LCD_IO_ReadData+0x5c>)
 800388a:	f003 f8a7 	bl	80069dc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800388e:	2200      	movs	r2, #0
 8003890:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003894:	480e      	ldr	r0, [pc, #56]	; (80038d0 <LCD_IO_ReadData+0x60>)
 8003896:	f003 f8a1 	bl	80069dc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff fec7 	bl	8003630 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80038a2:	797b      	ldrb	r3, [r7, #5]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff fea3 	bl	80035f0 <SPIx_Read>
 80038aa:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80038ac:	2201      	movs	r2, #1
 80038ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80038b2:	4807      	ldr	r0, [pc, #28]	; (80038d0 <LCD_IO_ReadData+0x60>)
 80038b4:	f003 f892 	bl	80069dc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80038b8:	2201      	movs	r2, #1
 80038ba:	2104      	movs	r1, #4
 80038bc:	4803      	ldr	r0, [pc, #12]	; (80038cc <LCD_IO_ReadData+0x5c>)
 80038be:	f003 f88d 	bl	80069dc <HAL_GPIO_WritePin>
  
  return readvalue;
 80038c2:	68fb      	ldr	r3, [r7, #12]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40020800 	.word	0x40020800
 80038d0:	40020c00 	.word	0x40020c00

080038d4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 feb3 	bl	8004648 <HAL_Delay>
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80038f0:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <BSP_LCD_Init+0xbc>)
 80038f2:	4a2e      	ldr	r2, [pc, #184]	; (80039ac <BSP_LCD_Init+0xc0>)
 80038f4:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80038f6:	4b2c      	ldr	r3, [pc, #176]	; (80039a8 <BSP_LCD_Init+0xbc>)
 80038f8:	2209      	movs	r2, #9
 80038fa:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80038fc:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <BSP_LCD_Init+0xbc>)
 80038fe:	2201      	movs	r2, #1
 8003900:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003902:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <BSP_LCD_Init+0xbc>)
 8003904:	221d      	movs	r2, #29
 8003906:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003908:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <BSP_LCD_Init+0xbc>)
 800390a:	2203      	movs	r2, #3
 800390c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800390e:	4b26      	ldr	r3, [pc, #152]	; (80039a8 <BSP_LCD_Init+0xbc>)
 8003910:	f240 120d 	movw	r2, #269	; 0x10d
 8003914:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003916:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <BSP_LCD_Init+0xbc>)
 8003918:	f240 1243 	movw	r2, #323	; 0x143
 800391c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <BSP_LCD_Init+0xbc>)
 8003920:	f240 1217 	movw	r2, #279	; 0x117
 8003924:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <BSP_LCD_Init+0xbc>)
 8003928:	f240 1247 	movw	r2, #327	; 0x147
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800392e:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <BSP_LCD_Init+0xbc>)
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003936:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <BSP_LCD_Init+0xbc>)
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800393e:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <BSP_LCD_Init+0xbc>)
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003946:	4b1a      	ldr	r3, [pc, #104]	; (80039b0 <BSP_LCD_Init+0xc4>)
 8003948:	2208      	movs	r2, #8
 800394a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800394c:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <BSP_LCD_Init+0xc4>)
 800394e:	22c0      	movs	r2, #192	; 0xc0
 8003950:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003952:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <BSP_LCD_Init+0xc4>)
 8003954:	2204      	movs	r2, #4
 8003956:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003958:	4b15      	ldr	r3, [pc, #84]	; (80039b0 <BSP_LCD_Init+0xc4>)
 800395a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800395e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003960:	4813      	ldr	r0, [pc, #76]	; (80039b0 <BSP_LCD_Init+0xc4>)
 8003962:	f005 feaf 	bl	80096c4 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <BSP_LCD_Init+0xbc>)
 8003968:	2200      	movs	r2, #0
 800396a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800396c:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <BSP_LCD_Init+0xbc>)
 800396e:	2200      	movs	r2, #0
 8003970:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <BSP_LCD_Init+0xbc>)
 8003974:	2200      	movs	r2, #0
 8003976:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003978:	4b0b      	ldr	r3, [pc, #44]	; (80039a8 <BSP_LCD_Init+0xbc>)
 800397a:	2200      	movs	r2, #0
 800397c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800397e:	f000 fadf 	bl	8003f40 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003982:	4809      	ldr	r0, [pc, #36]	; (80039a8 <BSP_LCD_Init+0xbc>)
 8003984:	f004 fdf2 	bl	800856c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003988:	4b0a      	ldr	r3, [pc, #40]	; (80039b4 <BSP_LCD_Init+0xc8>)
 800398a:	4a0b      	ldr	r2, [pc, #44]	; (80039b8 <BSP_LCD_Init+0xcc>)
 800398c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800398e:	4b09      	ldr	r3, [pc, #36]	; (80039b4 <BSP_LCD_Init+0xc8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003996:	f000 fc4b 	bl	8004230 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800399a:	4808      	ldr	r0, [pc, #32]	; (80039bc <BSP_LCD_Init+0xd0>)
 800399c:	f000 f8b4 	bl	8003b08 <BSP_LCD_SetFont>

  return LCD_OK;
 80039a0:	2300      	movs	r3, #0
}  
 80039a2:	4618      	mov	r0, r3
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20007fcc 	.word	0x20007fcc
 80039ac:	40016800 	.word	0x40016800
 80039b0:	200080b4 	.word	0x200080b4
 80039b4:	20008100 	.word	0x20008100
 80039b8:	20000004 	.word	0x20000004
 80039bc:	20000040 	.word	0x20000040

080039c0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <BSP_LCD_GetXSize+0x14>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	4798      	blx	r3
 80039cc:	4603      	mov	r3, r0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20008100 	.word	0x20008100

080039d8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80039dc:	4b03      	ldr	r3, [pc, #12]	; (80039ec <BSP_LCD_GetYSize+0x14>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	4798      	blx	r3
 80039e4:	4603      	mov	r3, r0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20008100 	.word	0x20008100

080039f0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b090      	sub	sp, #64	; 0x40
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	6039      	str	r1, [r7, #0]
 80039fa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003a00:	f7ff ffde 	bl	80039c0 <BSP_LCD_GetXSize>
 8003a04:	4603      	mov	r3, r0
 8003a06:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003a0c:	f7ff ffe4 	bl	80039d8 <BSP_LCD_GetYSize>
 8003a10:	4603      	mov	r3, r0
 8003a12:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8003a1c:	23ff      	movs	r3, #255	; 0xff
 8003a1e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003a36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003a3c:	2307      	movs	r3, #7
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003a40:	f7ff ffbe 	bl	80039c0 <BSP_LCD_GetXSize>
 8003a44:	4603      	mov	r3, r0
 8003a46:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003a48:	f7ff ffc6 	bl	80039d8 <BSP_LCD_GetYSize>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003a50:	88fa      	ldrh	r2, [r7, #6]
 8003a52:	f107 030c 	add.w	r3, r7, #12
 8003a56:	4619      	mov	r1, r3
 8003a58:	4814      	ldr	r0, [pc, #80]	; (8003aac <BSP_LCD_LayerDefaultInit+0xbc>)
 8003a5a:	f004 ff19 	bl	8008890 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	4913      	ldr	r1, [pc, #76]	; (8003ab0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003a62:	4613      	mov	r3, r2
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a72:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003a74:	88fa      	ldrh	r2, [r7, #6]
 8003a76:	490e      	ldr	r1, [pc, #56]	; (8003ab0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003a78:	4613      	mov	r3, r2
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	3308      	adds	r3, #8
 8003a84:	4a0b      	ldr	r2, [pc, #44]	; (8003ab4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8003a86:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003a88:	88fa      	ldrh	r2, [r7, #6]
 8003a8a:	4909      	ldr	r1, [pc, #36]	; (8003ab0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	4413      	add	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003a9a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003a9c:	4803      	ldr	r0, [pc, #12]	; (8003aac <BSP_LCD_LayerDefaultInit+0xbc>)
 8003a9e:	f004 ff35 	bl	800890c <HAL_LTDC_EnableDither>
}
 8003aa2:	bf00      	nop
 8003aa4:	3740      	adds	r7, #64	; 0x40
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20007fcc 	.word	0x20007fcc
 8003ab0:	200080e8 	.word	0x200080e8
 8003ab4:	20000040 	.word	0x20000040

08003ab8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003ac0:	4a04      	ldr	r2, [pc, #16]	; (8003ad4 <BSP_LCD_SelectLayer+0x1c>)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6013      	str	r3, [r2, #0]
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	200080e4 	.word	0x200080e4

08003ad8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003ae0:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <BSP_LCD_SetTextColor+0x28>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4907      	ldr	r1, [pc, #28]	; (8003b04 <BSP_LCD_SetTextColor+0x2c>)
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	601a      	str	r2, [r3, #0]
}
 8003af4:	bf00      	nop
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	200080e4 	.word	0x200080e4
 8003b04:	200080e8 	.word	0x200080e8

08003b08 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003b10:	4b08      	ldr	r3, [pc, #32]	; (8003b34 <BSP_LCD_SetFont+0x2c>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4908      	ldr	r1, [pc, #32]	; (8003b38 <BSP_LCD_SetFont+0x30>)
 8003b16:	4613      	mov	r3, r2
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	3308      	adds	r3, #8
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	601a      	str	r2, [r3, #0]
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	200080e4 	.word	0x200080e4
 8003b38:	200080e8 	.word	0x200080e8

08003b3c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003b44:	4b0f      	ldr	r3, [pc, #60]	; (8003b84 <BSP_LCD_Clear+0x48>)
 8003b46:	681c      	ldr	r4, [r3, #0]
 8003b48:	4b0e      	ldr	r3, [pc, #56]	; (8003b84 <BSP_LCD_Clear+0x48>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0e      	ldr	r2, [pc, #56]	; (8003b88 <BSP_LCD_Clear+0x4c>)
 8003b4e:	2134      	movs	r1, #52	; 0x34
 8003b50:	fb01 f303 	mul.w	r3, r1, r3
 8003b54:	4413      	add	r3, r2
 8003b56:	335c      	adds	r3, #92	; 0x5c
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	461e      	mov	r6, r3
 8003b5c:	f7ff ff30 	bl	80039c0 <BSP_LCD_GetXSize>
 8003b60:	4605      	mov	r5, r0
 8003b62:	f7ff ff39 	bl	80039d8 <BSP_LCD_GetYSize>
 8003b66:	4602      	mov	r2, r0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	9301      	str	r3, [sp, #4]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	4613      	mov	r3, r2
 8003b72:	462a      	mov	r2, r5
 8003b74:	4631      	mov	r1, r6
 8003b76:	4620      	mov	r0, r4
 8003b78:	f000 fade 	bl	8004138 <FillBuffer>
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b84:	200080e4 	.word	0x200080e4
 8003b88:	20007fcc 	.word	0x20007fcc

08003b8c <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003b8c:	b590      	push	{r4, r7, lr}
 8003b8e:	b08b      	sub	sp, #44	; 0x2c
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4604      	mov	r4, r0
 8003b94:	4608      	mov	r0, r1
 8003b96:	4611      	mov	r1, r2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4623      	mov	r3, r4
 8003b9c:	80fb      	strh	r3, [r7, #6]
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	80bb      	strh	r3, [r7, #4]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	807b      	strh	r3, [r7, #2]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003baa:	2300      	movs	r3, #0
 8003bac:	823b      	strh	r3, [r7, #16]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	81fb      	strh	r3, [r7, #14]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003bba:	2300      	movs	r3, #0
 8003bbc:	847b      	strh	r3, [r7, #34]	; 0x22
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	83fb      	strh	r3, [r7, #30]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	83bb      	strh	r3, [r7, #28]
 8003bca:	2300      	movs	r3, #0
 8003bcc:	837b      	strh	r3, [r7, #26]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	833b      	strh	r3, [r7, #24]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	82fb      	strh	r3, [r7, #22]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8003bde:	887a      	ldrh	r2, [r7, #2]
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bfb8      	it	lt
 8003be8:	425b      	neglt	r3, r3
 8003bea:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8003bec:	883a      	ldrh	r2, [r7, #0]
 8003bee:	88bb      	ldrh	r3, [r7, #4]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	bfb8      	it	lt
 8003bf6:	425b      	neglt	r3, r3
 8003bf8:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8003bfe:	88bb      	ldrh	r3, [r7, #4]
 8003c00:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8003c02:	887a      	ldrh	r2, [r7, #2]
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d304      	bcc.n	8003c14 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	843b      	strh	r3, [r7, #32]
 8003c12:	e005      	b.n	8003c20 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003c14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c18:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c1e:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8003c20:	883a      	ldrh	r2, [r7, #0]
 8003c22:	88bb      	ldrh	r3, [r7, #4]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d304      	bcc.n	8003c32 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	83bb      	strh	r3, [r7, #28]
 8003c30:	e005      	b.n	8003c3e <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c36:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c3c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003c3e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003c42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	db10      	blt.n	8003c6c <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003c4e:	2300      	movs	r3, #0
 8003c50:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003c52:	8a3b      	ldrh	r3, [r7, #16]
 8003c54:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003c56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c5a:	0fda      	lsrs	r2, r3, #31
 8003c5c:	4413      	add	r3, r2
 8003c5e:	105b      	asrs	r3, r3, #1
 8003c60:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8003c62:	89fb      	ldrh	r3, [r7, #14]
 8003c64:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8003c66:	8a3b      	ldrh	r3, [r7, #16]
 8003c68:	82bb      	strh	r3, [r7, #20]
 8003c6a:	e00f      	b.n	8003c8c <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003c70:	2300      	movs	r3, #0
 8003c72:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003c74:	89fb      	ldrh	r3, [r7, #14]
 8003c76:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003c78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c7c:	0fda      	lsrs	r2, r3, #31
 8003c7e:	4413      	add	r3, r2
 8003c80:	105b      	asrs	r3, r3, #1
 8003c82:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8003c84:	8a3b      	ldrh	r3, [r7, #16]
 8003c86:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003c88:	89fb      	ldrh	r3, [r7, #14]
 8003c8a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	827b      	strh	r3, [r7, #18]
 8003c90:	e037      	b.n	8003d02 <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003c92:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003c94:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003c96:	4b20      	ldr	r3, [pc, #128]	; (8003d18 <BSP_LCD_DrawLine+0x18c>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	4c20      	ldr	r4, [pc, #128]	; (8003d1c <BSP_LCD_DrawLine+0x190>)
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4423      	add	r3, r4
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f000 fa1f 	bl	80040ec <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8003cae:	8b3a      	ldrh	r2, [r7, #24]
 8003cb0:	8afb      	ldrh	r3, [r7, #22]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003cb8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003cbc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	db0e      	blt.n	8003ce2 <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003cc4:	8b3a      	ldrh	r2, [r7, #24]
 8003cc6:	8b7b      	ldrh	r3, [r7, #26]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003cce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003cd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003cd2:	4413      	add	r3, r2
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003cd8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cda:	8bfb      	ldrh	r3, [r7, #30]
 8003cdc:	4413      	add	r3, r2
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003ce2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ce4:	8c3b      	ldrh	r3, [r7, #32]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003cec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cee:	8bbb      	ldrh	r3, [r7, #28]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003cf6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	827b      	strh	r3, [r7, #18]
 8003d02:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003d06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	ddc1      	ble.n	8003c92 <BSP_LCD_DrawLine+0x106>
  }
}
 8003d0e:	bf00      	nop
 8003d10:	bf00      	nop
 8003d12:	372c      	adds	r7, #44	; 0x2c
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd90      	pop	{r4, r7, pc}
 8003d18:	200080e4 	.word	0x200080e4
 8003d1c:	200080e8 	.word	0x200080e8

08003d20 <BSP_LCD_DrawPolygon>:
  * @brief  Displays an poly-line (between many points).
  * @param  Points: pointer to the points array
  * @param  PointCount: Number of points
  */
void BSP_LCD_DrawPolygon(pPoint Points, uint16_t PointCount)
{
 8003d20:	b590      	push	{r4, r7, lr}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	460b      	mov	r3, r1
 8003d2a:	807b      	strh	r3, [r7, #2]
  int16_t x = 0, y = 0;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	81fb      	strh	r3, [r7, #14]
 8003d30:	2300      	movs	r3, #0
 8003d32:	81bb      	strh	r3, [r7, #12]

  if(PointCount < 2)
 8003d34:	887b      	ldrh	r3, [r7, #2]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d93b      	bls.n	8003db2 <BSP_LCD_DrawPolygon+0x92>
  {
    return;
  }

  BSP_LCD_DrawLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d40:	b298      	uxth	r0, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d48:	b299      	uxth	r1, r3
 8003d4a:	887b      	ldrh	r3, [r7, #2]
 8003d4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d50:	3b01      	subs	r3, #1
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d5c:	b29c      	uxth	r4, r3
 8003d5e:	887b      	ldrh	r3, [r7, #2]
 8003d60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d64:	3b01      	subs	r3, #1
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	4622      	mov	r2, r4
 8003d74:	f7ff ff0a 	bl	8003b8c <BSP_LCD_DrawLine>
  
  while(--PointCount)
 8003d78:	e014      	b.n	8003da4 <BSP_LCD_DrawPolygon+0x84>
  {
    x = Points->X;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	81fb      	strh	r3, [r7, #14]
    y = Points->Y;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	885b      	ldrh	r3, [r3, #2]
 8003d84:	81bb      	strh	r3, [r7, #12]
    Points++;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	607b      	str	r3, [r7, #4]
    BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 8003d8c:	89f8      	ldrh	r0, [r7, #14]
 8003d8e:	89b9      	ldrh	r1, [r7, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	f7ff fef4 	bl	8003b8c <BSP_LCD_DrawLine>
  while(--PointCount)
 8003da4:	887b      	ldrh	r3, [r7, #2]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	807b      	strh	r3, [r7, #2]
 8003daa:	887b      	ldrh	r3, [r7, #2]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e4      	bne.n	8003d7a <BSP_LCD_DrawPolygon+0x5a>
 8003db0:	e000      	b.n	8003db4 <BSP_LCD_DrawPolygon+0x94>
    return;
 8003db2:	bf00      	nop
  }
}
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd90      	pop	{r4, r7, pc}
	...

08003dbc <BSP_LCD_DrawBitmap>:
  * @param  X: the bmp x position in the LCD
  * @param  Y: the bmp Y position in the LCD
  * @param  pBmp: Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t X, uint32_t Y, uint8_t *pBmp)
{
 8003dbc:	b590      	push	{r4, r7, lr}
 8003dbe:	b08b      	sub	sp, #44	; 0x2c
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bitpixel = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
 8003dcc:	2300      	movs	r3, #0
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t inputcolormode = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	330a      	adds	r3, #10
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	330b      	adds	r3, #11
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	441a      	add	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	330c      	adds	r3, #12
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	041b      	lsls	r3, r3, #16
 8003df6:	441a      	add	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	330d      	adds	r3, #13
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	061b      	lsls	r3, r3, #24
 8003e00:	4413      	add	r3, r2
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3312      	adds	r3, #18
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3313      	adds	r3, #19
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	021b      	lsls	r3, r3, #8
 8003e14:	441a      	add	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3314      	adds	r3, #20
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	441a      	add	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3315      	adds	r3, #21
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	061b      	lsls	r3, r3, #24
 8003e28:	4413      	add	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3316      	adds	r3, #22
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3317      	adds	r3, #23
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	441a      	add	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3318      	adds	r3, #24
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	041b      	lsls	r3, r3, #16
 8003e46:	441a      	add	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3319      	adds	r3, #25
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	061b      	lsls	r3, r3, #24
 8003e50:	4413      	add	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bitpixel = pBmp[28] + (pBmp[29] << 8);   
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	331c      	adds	r3, #28
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	331d      	adds	r3, #29
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	4413      	add	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
 
  /* Set Address */
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8003e68:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <BSP_LCD_DrawBitmap+0x15c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a2b      	ldr	r2, [pc, #172]	; (8003f1c <BSP_LCD_DrawBitmap+0x160>)
 8003e6e:	2134      	movs	r1, #52	; 0x34
 8003e70:	fb01 f303 	mul.w	r3, r1, r3
 8003e74:	4413      	add	r3, r2
 8003e76:	335c      	adds	r3, #92	; 0x5c
 8003e78:	681c      	ldr	r4, [r3, #0]
 8003e7a:	f7ff fda1 	bl	80039c0 <BSP_LCD_GetXSize>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	fb03 f202 	mul.w	r2, r3, r2
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4423      	add	r3, r4
 8003e8e:	623b      	str	r3, [r7, #32]

  /* Get the Layer pixel format */    
  if ((bitpixel/8) == 4)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	3b20      	subs	r3, #32
 8003e94:	2b07      	cmp	r3, #7
 8003e96:	d802      	bhi.n	8003e9e <BSP_LCD_DrawBitmap+0xe2>
  {
    inputcolormode = CM_ARGB8888;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	e008      	b.n	8003eb0 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bitpixel/8) == 2)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	3b10      	subs	r3, #16
 8003ea2:	2b07      	cmp	r3, #7
 8003ea4:	d802      	bhi.n	8003eac <BSP_LCD_DrawBitmap+0xf0>
  {
    inputcolormode = CM_RGB565;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	e001      	b.n	8003eb0 <BSP_LCD_DrawBitmap+0xf4>
  }
  else
  {
    inputcolormode = CM_RGB888;
 8003eac:	2301      	movs	r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]
  }
 
  /* bypass the bitmap header */
  pBmp += (index + (width * (height - 1) * (bitpixel/8)));
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	08d2      	lsrs	r2, r2, #3
 8003ebe:	fb03 f202 	mul.w	r2, r3, r2
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	4413      	add	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	4413      	add	r3, r2
 8003eca:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed0:	e018      	b.n	8003f04 <BSP_LCD_DrawBitmap+0x148>
  {
  /* Pixel format conversion */
  ConvertLineToARGB8888((uint32_t *)pBmp, (uint32_t *)address, width, inputcolormode);
 8003ed2:	6a39      	ldr	r1, [r7, #32]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f965 	bl	80041a8 <ConvertLineToARGB8888>

  /* Increment the source and destination buffers */
  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 8003ede:	f7ff fd6f 	bl	80039c0 <BSP_LCD_GetXSize>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	6a3a      	ldr	r2, [r7, #32]
 8003ee8:	4413      	add	r3, r2
 8003eea:	623b      	str	r3, [r7, #32]
  pBmp -= width*(bitpixel/8);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	08db      	lsrs	r3, r3, #3
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	fb02 f303 	mul.w	r3, r2, r3
 8003ef6:	425b      	negs	r3, r3
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	4413      	add	r3, r2
 8003efc:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	3301      	adds	r3, #1
 8003f02:	627b      	str	r3, [r7, #36]	; 0x24
 8003f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d3e2      	bcc.n	8003ed2 <BSP_LCD_DrawBitmap+0x116>
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	372c      	adds	r7, #44	; 0x2c
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd90      	pop	{r4, r7, pc}
 8003f16:	bf00      	nop
 8003f18:	200080e4 	.word	0x200080e4
 8003f1c:	20007fcc 	.word	0x20007fcc

08003f20 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <BSP_LCD_DisplayOn+0x1c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003f2e:	4b03      	ldr	r3, [pc, #12]	; (8003f3c <BSP_LCD_DisplayOn+0x1c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4798      	blx	r3
  }
}
 8003f36:	bf00      	nop
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	20008100 	.word	0x20008100

08003f40 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08e      	sub	sp, #56	; 0x38
 8003f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003f46:	2300      	movs	r3, #0
 8003f48:	623b      	str	r3, [r7, #32]
 8003f4a:	4b61      	ldr	r3, [pc, #388]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	4a60      	ldr	r2, [pc, #384]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003f50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f54:	6453      	str	r3, [r2, #68]	; 0x44
 8003f56:	4b5e      	ldr	r3, [pc, #376]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f5e:	623b      	str	r3, [r7, #32]
 8003f60:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	4b5a      	ldr	r3, [pc, #360]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	4a59      	ldr	r2, [pc, #356]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003f6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f70:	6313      	str	r3, [r2, #48]	; 0x30
 8003f72:	4b57      	ldr	r3, [pc, #348]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f7a:	61fb      	str	r3, [r7, #28]
 8003f7c:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	4b53      	ldr	r3, [pc, #332]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	4a52      	ldr	r2, [pc, #328]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8e:	4b50      	ldr	r3, [pc, #320]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	61bb      	str	r3, [r7, #24]
 8003f98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	4b4c      	ldr	r3, [pc, #304]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	4a4b      	ldr	r2, [pc, #300]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003fa4:	f043 0302 	orr.w	r3, r3, #2
 8003fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8003faa:	4b49      	ldr	r3, [pc, #292]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	4b45      	ldr	r3, [pc, #276]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	4a44      	ldr	r2, [pc, #272]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003fc0:	f043 0304 	orr.w	r3, r3, #4
 8003fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc6:	4b42      	ldr	r3, [pc, #264]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	613b      	str	r3, [r7, #16]
 8003fd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	4b3e      	ldr	r3, [pc, #248]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	4a3d      	ldr	r2, [pc, #244]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003fdc:	f043 0308 	orr.w	r3, r3, #8
 8003fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fe2:	4b3b      	ldr	r3, [pc, #236]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	4b37      	ldr	r3, [pc, #220]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	4a36      	ldr	r2, [pc, #216]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8003ff8:	f043 0320 	orr.w	r3, r3, #32
 8003ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ffe:	4b34      	ldr	r3, [pc, #208]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	60bb      	str	r3, [r7, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	4b30      	ldr	r3, [pc, #192]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	4a2f      	ldr	r2, [pc, #188]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 8004014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004018:	6313      	str	r3, [r2, #48]	; 0x30
 800401a:	4b2d      	ldr	r3, [pc, #180]	; (80040d0 <BSP_LCD_MspInit+0x190>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8004026:	f641 0358 	movw	r3, #6232	; 0x1858
 800402a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800402c:	2302      	movs	r3, #2
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004030:	2300      	movs	r3, #0
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004034:	2302      	movs	r3, #2
 8004036:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8004038:	230e      	movs	r3, #14
 800403a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800403c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004040:	4619      	mov	r1, r3
 8004042:	4824      	ldr	r0, [pc, #144]	; (80040d4 <BSP_LCD_MspInit+0x194>)
 8004044:	f002 f9fa 	bl	800643c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8004048:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800404e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004052:	4619      	mov	r1, r3
 8004054:	4820      	ldr	r0, [pc, #128]	; (80040d8 <BSP_LCD_MspInit+0x198>)
 8004056:	f002 f9f1 	bl	800643c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800405a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004064:	4619      	mov	r1, r3
 8004066:	481d      	ldr	r0, [pc, #116]	; (80040dc <BSP_LCD_MspInit+0x19c>)
 8004068:	f002 f9e8 	bl	800643c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800406c:	2348      	movs	r3, #72	; 0x48
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004074:	4619      	mov	r1, r3
 8004076:	481a      	ldr	r0, [pc, #104]	; (80040e0 <BSP_LCD_MspInit+0x1a0>)
 8004078:	f002 f9e0 	bl	800643c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800407c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004080:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8004082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004086:	4619      	mov	r1, r3
 8004088:	4816      	ldr	r0, [pc, #88]	; (80040e4 <BSP_LCD_MspInit+0x1a4>)
 800408a:	f002 f9d7 	bl	800643c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800408e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004098:	4619      	mov	r1, r3
 800409a:	4813      	ldr	r0, [pc, #76]	; (80040e8 <BSP_LCD_MspInit+0x1a8>)
 800409c:	f002 f9ce 	bl	800643c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80040a0:	2303      	movs	r3, #3
 80040a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80040a4:	2309      	movs	r3, #9
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80040a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ac:	4619      	mov	r1, r3
 80040ae:	480a      	ldr	r0, [pc, #40]	; (80040d8 <BSP_LCD_MspInit+0x198>)
 80040b0:	f002 f9c4 	bl	800643c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80040b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80040ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040be:	4619      	mov	r1, r3
 80040c0:	4809      	ldr	r0, [pc, #36]	; (80040e8 <BSP_LCD_MspInit+0x1a8>)
 80040c2:	f002 f9bb 	bl	800643c <HAL_GPIO_Init>
}
 80040c6:	bf00      	nop
 80040c8:	3738      	adds	r7, #56	; 0x38
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	40023800 	.word	0x40023800
 80040d4:	40020000 	.word	0x40020000
 80040d8:	40020400 	.word	0x40020400
 80040dc:	40020800 	.word	0x40020800
 80040e0:	40020c00 	.word	0x40020c00
 80040e4:	40021400 	.word	0x40021400
 80040e8:	40021800 	.word	0x40021800

080040ec <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80040ec:	b5b0      	push	{r4, r5, r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	603a      	str	r2, [r7, #0]
 80040f6:	80fb      	strh	r3, [r7, #6]
 80040f8:	460b      	mov	r3, r1
 80040fa:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80040fc:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <BSP_LCD_DrawPixel+0x44>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a0c      	ldr	r2, [pc, #48]	; (8004134 <BSP_LCD_DrawPixel+0x48>)
 8004102:	2134      	movs	r1, #52	; 0x34
 8004104:	fb01 f303 	mul.w	r3, r1, r3
 8004108:	4413      	add	r3, r2
 800410a:	335c      	adds	r3, #92	; 0x5c
 800410c:	681c      	ldr	r4, [r3, #0]
 800410e:	88bd      	ldrh	r5, [r7, #4]
 8004110:	f7ff fc56 	bl	80039c0 <BSP_LCD_GetXSize>
 8004114:	4603      	mov	r3, r0
 8004116:	fb03 f205 	mul.w	r2, r3, r5
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4423      	add	r3, r4
 8004122:	461a      	mov	r2, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	6013      	str	r3, [r2, #0]
}
 8004128:	bf00      	nop
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bdb0      	pop	{r4, r5, r7, pc}
 8004130:	200080e4 	.word	0x200080e4
 8004134:	20007fcc 	.word	0x20007fcc

08004138 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8004146:	4b16      	ldr	r3, [pc, #88]	; (80041a0 <FillBuffer+0x68>)
 8004148:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800414c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800414e:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <FillBuffer+0x68>)
 8004150:	2200      	movs	r2, #0
 8004152:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004154:	4a12      	ldr	r2, [pc, #72]	; (80041a0 <FillBuffer+0x68>)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800415a:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <FillBuffer+0x68>)
 800415c:	4a11      	ldr	r2, [pc, #68]	; (80041a4 <FillBuffer+0x6c>)
 800415e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004160:	480f      	ldr	r0, [pc, #60]	; (80041a0 <FillBuffer+0x68>)
 8004162:	f001 fdcf 	bl	8005d04 <HAL_DMA2D_Init>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d115      	bne.n	8004198 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800416c:	68f9      	ldr	r1, [r7, #12]
 800416e:	480c      	ldr	r0, [pc, #48]	; (80041a0 <FillBuffer+0x68>)
 8004170:	f002 f836 	bl	80061e0 <HAL_DMA2D_ConfigLayer>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10e      	bne.n	8004198 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	69f9      	ldr	r1, [r7, #28]
 8004184:	4806      	ldr	r0, [pc, #24]	; (80041a0 <FillBuffer+0x68>)
 8004186:	f001 fe06 	bl	8005d96 <HAL_DMA2D_Start>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d103      	bne.n	8004198 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004190:	210a      	movs	r1, #10
 8004192:	4803      	ldr	r0, [pc, #12]	; (80041a0 <FillBuffer+0x68>)
 8004194:	f001 fe2a 	bl	8005dec <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004198:	bf00      	nop
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20008074 	.word	0x20008074
 80041a4:	4002b000 	.word	0x4002b000

080041a8 <ConvertLineToARGB8888>:
  * @param  pDst: output color
  * @param  xSize: buffer width
  * @param  ColorMode: input color mode   
  */
static void ConvertLineToARGB8888(void * pSrc, void * pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af02      	add	r7, sp, #8
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  Dma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80041b6:	4b1c      	ldr	r3, [pc, #112]	; (8004228 <ConvertLineToARGB8888+0x80>)
 80041b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041bc:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80041be:	4b1a      	ldr	r3, [pc, #104]	; (8004228 <ConvertLineToARGB8888+0x80>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = 0;     
 80041c4:	4b18      	ldr	r3, [pc, #96]	; (8004228 <ConvertLineToARGB8888+0x80>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  Dma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80041ca:	4b17      	ldr	r3, [pc, #92]	; (8004228 <ConvertLineToARGB8888+0x80>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80041d0:	4b15      	ldr	r3, [pc, #84]	; (8004228 <ConvertLineToARGB8888+0x80>)
 80041d2:	22ff      	movs	r2, #255	; 0xff
 80041d4:	635a      	str	r2, [r3, #52]	; 0x34
  Dma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80041d6:	4a14      	ldr	r2, [pc, #80]	; (8004228 <ConvertLineToARGB8888+0x80>)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	62d3      	str	r3, [r2, #44]	; 0x2c
  Dma2dHandler.LayerCfg[1].InputOffset = 0;
 80041dc:	4b12      	ldr	r3, [pc, #72]	; (8004228 <ConvertLineToARGB8888+0x80>)
 80041de:	2200      	movs	r2, #0
 80041e0:	629a      	str	r2, [r3, #40]	; 0x28
  
  Dma2dHandler.Instance = DMA2D; 
 80041e2:	4b11      	ldr	r3, [pc, #68]	; (8004228 <ConvertLineToARGB8888+0x80>)
 80041e4:	4a11      	ldr	r2, [pc, #68]	; (800422c <ConvertLineToARGB8888+0x84>)
 80041e6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80041e8:	480f      	ldr	r0, [pc, #60]	; (8004228 <ConvertLineToARGB8888+0x80>)
 80041ea:	f001 fd8b 	bl	8005d04 <HAL_DMA2D_Init>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d115      	bne.n	8004220 <ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, 1) == HAL_OK) 
 80041f4:	2101      	movs	r1, #1
 80041f6:	480c      	ldr	r0, [pc, #48]	; (8004228 <ConvertLineToARGB8888+0x80>)
 80041f8:	f001 fff2 	bl	80061e0 <HAL_DMA2D_ConfigLayer>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10e      	bne.n	8004220 <ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8004202:	68f9      	ldr	r1, [r7, #12]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	2301      	movs	r3, #1
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4806      	ldr	r0, [pc, #24]	; (8004228 <ConvertLineToARGB8888+0x80>)
 800420e:	f001 fdc2 	bl	8005d96 <HAL_DMA2D_Start>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d103      	bne.n	8004220 <ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004218:	210a      	movs	r1, #10
 800421a:	4803      	ldr	r0, [pc, #12]	; (8004228 <ConvertLineToARGB8888+0x80>)
 800421c:	f001 fde6 	bl	8005dec <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20008074 	.word	0x20008074
 800422c:	4002b000 	.word	0x4002b000

08004230 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004234:	4b29      	ldr	r3, [pc, #164]	; (80042dc <BSP_SDRAM_Init+0xac>)
 8004236:	4a2a      	ldr	r2, [pc, #168]	; (80042e0 <BSP_SDRAM_Init+0xb0>)
 8004238:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800423a:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <BSP_SDRAM_Init+0xb4>)
 800423c:	2202      	movs	r2, #2
 800423e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004240:	4b28      	ldr	r3, [pc, #160]	; (80042e4 <BSP_SDRAM_Init+0xb4>)
 8004242:	2207      	movs	r2, #7
 8004244:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8004246:	4b27      	ldr	r3, [pc, #156]	; (80042e4 <BSP_SDRAM_Init+0xb4>)
 8004248:	2204      	movs	r2, #4
 800424a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800424c:	4b25      	ldr	r3, [pc, #148]	; (80042e4 <BSP_SDRAM_Init+0xb4>)
 800424e:	2207      	movs	r2, #7
 8004250:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004252:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <BSP_SDRAM_Init+0xb4>)
 8004254:	2202      	movs	r2, #2
 8004256:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004258:	4b22      	ldr	r3, [pc, #136]	; (80042e4 <BSP_SDRAM_Init+0xb4>)
 800425a:	2202      	movs	r2, #2
 800425c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800425e:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <BSP_SDRAM_Init+0xb4>)
 8004260:	2202      	movs	r2, #2
 8004262:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004264:	4b1d      	ldr	r3, [pc, #116]	; (80042dc <BSP_SDRAM_Init+0xac>)
 8004266:	2201      	movs	r2, #1
 8004268:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800426a:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <BSP_SDRAM_Init+0xac>)
 800426c:	2200      	movs	r2, #0
 800426e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004270:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <BSP_SDRAM_Init+0xac>)
 8004272:	2204      	movs	r2, #4
 8004274:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004276:	4b19      	ldr	r3, [pc, #100]	; (80042dc <BSP_SDRAM_Init+0xac>)
 8004278:	2210      	movs	r2, #16
 800427a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800427c:	4b17      	ldr	r3, [pc, #92]	; (80042dc <BSP_SDRAM_Init+0xac>)
 800427e:	2240      	movs	r2, #64	; 0x40
 8004280:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004282:	4b16      	ldr	r3, [pc, #88]	; (80042dc <BSP_SDRAM_Init+0xac>)
 8004284:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8004288:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800428a:	4b14      	ldr	r3, [pc, #80]	; (80042dc <BSP_SDRAM_Init+0xac>)
 800428c:	2200      	movs	r2, #0
 800428e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004290:	4b12      	ldr	r3, [pc, #72]	; (80042dc <BSP_SDRAM_Init+0xac>)
 8004292:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004296:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8004298:	4b10      	ldr	r3, [pc, #64]	; (80042dc <BSP_SDRAM_Init+0xac>)
 800429a:	2200      	movs	r2, #0
 800429c:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <BSP_SDRAM_Init+0xac>)
 80042a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042a4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80042a6:	2100      	movs	r1, #0
 80042a8:	480c      	ldr	r0, [pc, #48]	; (80042dc <BSP_SDRAM_Init+0xac>)
 80042aa:	f000 f87f 	bl	80043ac <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80042ae:	490d      	ldr	r1, [pc, #52]	; (80042e4 <BSP_SDRAM_Init+0xb4>)
 80042b0:	480a      	ldr	r0, [pc, #40]	; (80042dc <BSP_SDRAM_Init+0xac>)
 80042b2:	f005 fbc7 	bl	8009a44 <HAL_SDRAM_Init>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80042bc:	4b0a      	ldr	r3, [pc, #40]	; (80042e8 <BSP_SDRAM_Init+0xb8>)
 80042be:	2201      	movs	r2, #1
 80042c0:	701a      	strb	r2, [r3, #0]
 80042c2:	e002      	b.n	80042ca <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80042c4:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <BSP_SDRAM_Init+0xb8>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80042ca:	f240 506a 	movw	r0, #1386	; 0x56a
 80042ce:	f000 f80d 	bl	80042ec <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <BSP_SDRAM_Init+0xb8>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20008104 	.word	0x20008104
 80042e0:	a0000140 	.word	0xa0000140
 80042e4:	20008138 	.word	0x20008138
 80042e8:	20000048 	.word	0x20000048

080042ec <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80042f8:	4b2a      	ldr	r3, [pc, #168]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80042fe:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004300:	2208      	movs	r2, #8
 8004302:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004304:	4b27      	ldr	r3, [pc, #156]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004306:	2201      	movs	r2, #1
 8004308:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800430a:	4b26      	ldr	r3, [pc, #152]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800430c:	2200      	movs	r2, #0
 800430e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004314:	4923      	ldr	r1, [pc, #140]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004316:	4824      	ldr	r0, [pc, #144]	; (80043a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004318:	f005 fbc8 	bl	8009aac <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800431c:	2001      	movs	r0, #1
 800431e:	f000 f993 	bl	8004648 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004322:	4b20      	ldr	r3, [pc, #128]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004324:	2202      	movs	r2, #2
 8004326:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004328:	4b1e      	ldr	r3, [pc, #120]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800432a:	2208      	movs	r2, #8
 800432c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800432e:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004330:	2201      	movs	r2, #1
 8004332:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004334:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004336:	2200      	movs	r2, #0
 8004338:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800433a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800433e:	4919      	ldr	r1, [pc, #100]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004340:	4819      	ldr	r0, [pc, #100]	; (80043a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004342:	f005 fbb3 	bl	8009aac <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004346:	4b17      	ldr	r3, [pc, #92]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004348:	2203      	movs	r2, #3
 800434a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800434c:	4b15      	ldr	r3, [pc, #84]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800434e:	2208      	movs	r2, #8
 8004350:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004352:	4b14      	ldr	r3, [pc, #80]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004354:	2204      	movs	r2, #4
 8004356:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004358:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800435a:	2200      	movs	r2, #0
 800435c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800435e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004362:	4910      	ldr	r1, [pc, #64]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004364:	4810      	ldr	r0, [pc, #64]	; (80043a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004366:	f005 fba1 	bl	8009aac <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800436a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800436e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004370:	4b0c      	ldr	r3, [pc, #48]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004372:	2204      	movs	r2, #4
 8004374:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004376:	4b0b      	ldr	r3, [pc, #44]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004378:	2208      	movs	r2, #8
 800437a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800437e:	2201      	movs	r2, #1
 8004380:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4a07      	ldr	r2, [pc, #28]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004386:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800438c:	4905      	ldr	r1, [pc, #20]	; (80043a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800438e:	4806      	ldr	r0, [pc, #24]	; (80043a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004390:	f005 fb8c 	bl	8009aac <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4804      	ldr	r0, [pc, #16]	; (80043a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004398:	f005 fbbd 	bl	8009b16 <HAL_SDRAM_ProgramRefreshRate>
}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	20008154 	.word	0x20008154
 80043a8:	20008104 	.word	0x20008104

080043ac <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b090      	sub	sp, #64	; 0x40
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80ec 	beq.w	8004596 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043c2:	4b77      	ldr	r3, [pc, #476]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	4a76      	ldr	r2, [pc, #472]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 80043c8:	f043 0301 	orr.w	r3, r3, #1
 80043cc:	6393      	str	r3, [r2, #56]	; 0x38
 80043ce:	4b74      	ldr	r3, [pc, #464]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 80043d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
 80043de:	4b70      	ldr	r3, [pc, #448]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 80043e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e2:	4a6f      	ldr	r2, [pc, #444]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 80043e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043e8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ea:	4b6d      	ldr	r3, [pc, #436]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	623b      	str	r3, [r7, #32]
 80043fa:	4b69      	ldr	r3, [pc, #420]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	4a68      	ldr	r2, [pc, #416]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 8004400:	f043 0302 	orr.w	r3, r3, #2
 8004404:	6313      	str	r3, [r2, #48]	; 0x30
 8004406:	4b66      	ldr	r3, [pc, #408]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	623b      	str	r3, [r7, #32]
 8004410:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	4b62      	ldr	r3, [pc, #392]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 8004418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441a:	4a61      	ldr	r2, [pc, #388]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 800441c:	f043 0304 	orr.w	r3, r3, #4
 8004420:	6313      	str	r3, [r2, #48]	; 0x30
 8004422:	4b5f      	ldr	r3, [pc, #380]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800442e:	2300      	movs	r3, #0
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	4b5b      	ldr	r3, [pc, #364]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	4a5a      	ldr	r2, [pc, #360]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 8004438:	f043 0308 	orr.w	r3, r3, #8
 800443c:	6313      	str	r3, [r2, #48]	; 0x30
 800443e:	4b58      	ldr	r3, [pc, #352]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	61bb      	str	r3, [r7, #24]
 8004448:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	4b54      	ldr	r3, [pc, #336]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	4a53      	ldr	r2, [pc, #332]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 8004454:	f043 0310 	orr.w	r3, r3, #16
 8004458:	6313      	str	r3, [r2, #48]	; 0x30
 800445a:	4b51      	ldr	r3, [pc, #324]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	4b4d      	ldr	r3, [pc, #308]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	4a4c      	ldr	r2, [pc, #304]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 8004470:	f043 0320 	orr.w	r3, r3, #32
 8004474:	6313      	str	r3, [r2, #48]	; 0x30
 8004476:	4b4a      	ldr	r3, [pc, #296]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	f003 0320 	and.w	r3, r3, #32
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	4b46      	ldr	r3, [pc, #280]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	4a45      	ldr	r2, [pc, #276]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 800448c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004490:	6313      	str	r3, [r2, #48]	; 0x30
 8004492:	4b43      	ldr	r3, [pc, #268]	; (80045a0 <BSP_SDRAM_MspInit+0x1f4>)
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800449e:	2302      	movs	r3, #2
 80044a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80044a2:	2302      	movs	r3, #2
 80044a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80044aa:	230c      	movs	r3, #12
 80044ac:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80044ae:	2360      	movs	r3, #96	; 0x60
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80044b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044b6:	4619      	mov	r1, r3
 80044b8:	483a      	ldr	r0, [pc, #232]	; (80045a4 <BSP_SDRAM_MspInit+0x1f8>)
 80044ba:	f001 ffbf 	bl	800643c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80044be:	2301      	movs	r3, #1
 80044c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80044c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044c6:	4619      	mov	r1, r3
 80044c8:	4837      	ldr	r0, [pc, #220]	; (80045a8 <BSP_SDRAM_MspInit+0x1fc>)
 80044ca:	f001 ffb7 	bl	800643c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80044ce:	f24c 7303 	movw	r3, #50947	; 0xc703
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80044d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044d8:	4619      	mov	r1, r3
 80044da:	4834      	ldr	r0, [pc, #208]	; (80045ac <BSP_SDRAM_MspInit+0x200>)
 80044dc:	f001 ffae 	bl	800643c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80044e0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80044e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80044e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044ea:	4619      	mov	r1, r3
 80044ec:	4830      	ldr	r0, [pc, #192]	; (80045b0 <BSP_SDRAM_MspInit+0x204>)
 80044ee:	f001 ffa5 	bl	800643c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80044f2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80044f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80044f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044fc:	4619      	mov	r1, r3
 80044fe:	482d      	ldr	r0, [pc, #180]	; (80045b4 <BSP_SDRAM_MspInit+0x208>)
 8004500:	f001 ff9c 	bl	800643c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004504:	f248 1333 	movw	r3, #33075	; 0x8133
 8004508:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800450a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800450e:	4619      	mov	r1, r3
 8004510:	4829      	ldr	r0, [pc, #164]	; (80045b8 <BSP_SDRAM_MspInit+0x20c>)
 8004512:	f001 ff93 	bl	800643c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004516:	4b29      	ldr	r3, [pc, #164]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 8004518:	2200      	movs	r2, #0
 800451a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800451c:	4b27      	ldr	r3, [pc, #156]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 800451e:	2280      	movs	r2, #128	; 0x80
 8004520:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004522:	4b26      	ldr	r3, [pc, #152]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 8004524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004528:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800452a:	4b24      	ldr	r3, [pc, #144]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 800452c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004530:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004532:	4b22      	ldr	r3, [pc, #136]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 8004534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004538:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800453a:	4b20      	ldr	r3, [pc, #128]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 800453c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004540:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004542:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 8004544:	2200      	movs	r2, #0
 8004546:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004548:	4b1c      	ldr	r3, [pc, #112]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 800454a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800454e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004550:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 8004552:	2200      	movs	r2, #0
 8004554:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004556:	4b19      	ldr	r3, [pc, #100]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 8004558:	2203      	movs	r2, #3
 800455a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800455c:	4b17      	ldr	r3, [pc, #92]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 800455e:	2200      	movs	r2, #0
 8004560:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004562:	4b16      	ldr	r3, [pc, #88]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004568:	4b14      	ldr	r3, [pc, #80]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 800456a:	4a15      	ldr	r2, [pc, #84]	; (80045c0 <BSP_SDRAM_MspInit+0x214>)
 800456c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a12      	ldr	r2, [pc, #72]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
 8004574:	4a11      	ldr	r2, [pc, #68]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800457a:	4810      	ldr	r0, [pc, #64]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 800457c:	f001 f8a2 	bl	80056c4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004580:	480e      	ldr	r0, [pc, #56]	; (80045bc <BSP_SDRAM_MspInit+0x210>)
 8004582:	f000 fff1 	bl	8005568 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004586:	2200      	movs	r2, #0
 8004588:	210f      	movs	r1, #15
 800458a:	2038      	movs	r0, #56	; 0x38
 800458c:	f000 fd50 	bl	8005030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004590:	2038      	movs	r0, #56	; 0x38
 8004592:	f000 fd69 	bl	8005068 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004596:	bf00      	nop
 8004598:	3740      	adds	r7, #64	; 0x40
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800
 80045a4:	40020400 	.word	0x40020400
 80045a8:	40020800 	.word	0x40020800
 80045ac:	40020c00 	.word	0x40020c00
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40021400 	.word	0x40021400
 80045b8:	40021800 	.word	0x40021800
 80045bc:	20008164 	.word	0x20008164
 80045c0:	40026410 	.word	0x40026410

080045c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045c8:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <HAL_Init+0x40>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a0d      	ldr	r2, [pc, #52]	; (8004604 <HAL_Init+0x40>)
 80045ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <HAL_Init+0x40>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a0a      	ldr	r2, [pc, #40]	; (8004604 <HAL_Init+0x40>)
 80045da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045e0:	4b08      	ldr	r3, [pc, #32]	; (8004604 <HAL_Init+0x40>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a07      	ldr	r2, [pc, #28]	; (8004604 <HAL_Init+0x40>)
 80045e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045ec:	2003      	movs	r0, #3
 80045ee:	f000 fd14 	bl	800501a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045f2:	200f      	movs	r0, #15
 80045f4:	f7fe fcd8 	bl	8002fa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045f8:	f7fe f834 	bl	8002664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40023c00 	.word	0x40023c00

08004608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <HAL_IncTick+0x20>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	461a      	mov	r2, r3
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_IncTick+0x24>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4413      	add	r3, r2
 8004618:	4a04      	ldr	r2, [pc, #16]	; (800462c <HAL_IncTick+0x24>)
 800461a:	6013      	str	r3, [r2, #0]
}
 800461c:	bf00      	nop
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20000050 	.word	0x20000050
 800462c:	200081c4 	.word	0x200081c4

08004630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  return uwTick;
 8004634:	4b03      	ldr	r3, [pc, #12]	; (8004644 <HAL_GetTick+0x14>)
 8004636:	681b      	ldr	r3, [r3, #0]
}
 8004638:	4618      	mov	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	200081c4 	.word	0x200081c4

08004648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004650:	f7ff ffee 	bl	8004630 <HAL_GetTick>
 8004654:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004660:	d005      	beq.n	800466e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004662:	4b0a      	ldr	r3, [pc, #40]	; (800468c <HAL_Delay+0x44>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4413      	add	r3, r2
 800466c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800466e:	bf00      	nop
 8004670:	f7ff ffde 	bl	8004630 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	429a      	cmp	r2, r3
 800467e:	d8f7      	bhi.n	8004670 <HAL_Delay+0x28>
  {
  }
}
 8004680:	bf00      	nop
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000050 	.word	0x20000050

08004690 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e033      	b.n	800470e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fe f800 	bl	80026b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f003 0310 	and.w	r3, r3, #16
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d118      	bne.n	8004700 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80046d6:	f023 0302 	bic.w	r3, r3, #2
 80046da:	f043 0202 	orr.w	r2, r3, #2
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fa6e 	bl	8004bc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f023 0303 	bic.w	r3, r3, #3
 80046f6:	f043 0201 	orr.w	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	641a      	str	r2, [r3, #64]	; 0x40
 80046fe:	e001      	b.n	8004704 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800470c:	7bfb      	ldrb	r3, [r7, #15]
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
	...

08004718 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800472e:	2b01      	cmp	r3, #1
 8004730:	d101      	bne.n	8004736 <HAL_ADC_Start_DMA+0x1e>
 8004732:	2302      	movs	r3, #2
 8004734:	e0e9      	b.n	800490a <HAL_ADC_Start_DMA+0x1f2>
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b01      	cmp	r3, #1
 800474a:	d018      	beq.n	800477e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689a      	ldr	r2, [r3, #8]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800475c:	4b6d      	ldr	r3, [pc, #436]	; (8004914 <HAL_ADC_Start_DMA+0x1fc>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a6d      	ldr	r2, [pc, #436]	; (8004918 <HAL_ADC_Start_DMA+0x200>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	0c9a      	lsrs	r2, r3, #18
 8004768:	4613      	mov	r3, r2
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	4413      	add	r3, r2
 800476e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004770:	e002      	b.n	8004778 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	3b01      	subs	r3, #1
 8004776:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1f9      	bne.n	8004772 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800478c:	d107      	bne.n	800479e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800479c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	f040 80a1 	bne.w	80048f0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d007      	beq.n	80047e0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80047d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047ec:	d106      	bne.n	80047fc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f2:	f023 0206 	bic.w	r2, r3, #6
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	645a      	str	r2, [r3, #68]	; 0x44
 80047fa:	e002      	b.n	8004802 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800480a:	4b44      	ldr	r3, [pc, #272]	; (800491c <HAL_ADC_Start_DMA+0x204>)
 800480c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	4a43      	ldr	r2, [pc, #268]	; (8004920 <HAL_ADC_Start_DMA+0x208>)
 8004814:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	4a42      	ldr	r2, [pc, #264]	; (8004924 <HAL_ADC_Start_DMA+0x20c>)
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	4a41      	ldr	r2, [pc, #260]	; (8004928 <HAL_ADC_Start_DMA+0x210>)
 8004824:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800482e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800483e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800484e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	334c      	adds	r3, #76	; 0x4c
 800485a:	4619      	mov	r1, r3
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f000 ff8e 	bl	8005780 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 031f 	and.w	r3, r3, #31
 800486c:	2b00      	cmp	r3, #0
 800486e:	d12a      	bne.n	80048c6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a2d      	ldr	r2, [pc, #180]	; (800492c <HAL_ADC_Start_DMA+0x214>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d015      	beq.n	80048a6 <HAL_ADC_Start_DMA+0x18e>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2c      	ldr	r2, [pc, #176]	; (8004930 <HAL_ADC_Start_DMA+0x218>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d105      	bne.n	8004890 <HAL_ADC_Start_DMA+0x178>
 8004884:	4b25      	ldr	r3, [pc, #148]	; (800491c <HAL_ADC_Start_DMA+0x204>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00a      	beq.n	80048a6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a27      	ldr	r2, [pc, #156]	; (8004934 <HAL_ADC_Start_DMA+0x21c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d136      	bne.n	8004908 <HAL_ADC_Start_DMA+0x1f0>
 800489a:	4b20      	ldr	r3, [pc, #128]	; (800491c <HAL_ADC_Start_DMA+0x204>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d130      	bne.n	8004908 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d129      	bne.n	8004908 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048c2:	609a      	str	r2, [r3, #8]
 80048c4:	e020      	b.n	8004908 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a18      	ldr	r2, [pc, #96]	; (800492c <HAL_ADC_Start_DMA+0x214>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d11b      	bne.n	8004908 <HAL_ADC_Start_DMA+0x1f0>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d114      	bne.n	8004908 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048ec:	609a      	str	r2, [r3, #8]
 80048ee:	e00b      	b.n	8004908 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	f043 0210 	orr.w	r2, r3, #16
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004900:	f043 0201 	orr.w	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20000000 	.word	0x20000000
 8004918:	431bde83 	.word	0x431bde83
 800491c:	40012300 	.word	0x40012300
 8004920:	08004dbd 	.word	0x08004dbd
 8004924:	08004e77 	.word	0x08004e77
 8004928:	08004e93 	.word	0x08004e93
 800492c:	40012000 	.word	0x40012000
 8004930:	40012100 	.word	0x40012100
 8004934:	40012200 	.word	0x40012200

08004938 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_ADC_ConfigChannel+0x1c>
 8004978:	2302      	movs	r3, #2
 800497a:	e113      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x244>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b09      	cmp	r3, #9
 800498a:	d925      	bls.n	80049d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68d9      	ldr	r1, [r3, #12]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	461a      	mov	r2, r3
 800499a:	4613      	mov	r3, r2
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	4413      	add	r3, r2
 80049a0:	3b1e      	subs	r3, #30
 80049a2:	2207      	movs	r2, #7
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	43da      	mvns	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	400a      	ands	r2, r1
 80049b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68d9      	ldr	r1, [r3, #12]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	4618      	mov	r0, r3
 80049c4:	4603      	mov	r3, r0
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	4403      	add	r3, r0
 80049ca:	3b1e      	subs	r3, #30
 80049cc:	409a      	lsls	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	60da      	str	r2, [r3, #12]
 80049d6:	e022      	b.n	8004a1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6919      	ldr	r1, [r3, #16]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	461a      	mov	r2, r3
 80049e6:	4613      	mov	r3, r2
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4413      	add	r3, r2
 80049ec:	2207      	movs	r2, #7
 80049ee:	fa02 f303 	lsl.w	r3, r2, r3
 80049f2:	43da      	mvns	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	400a      	ands	r2, r1
 80049fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6919      	ldr	r1, [r3, #16]
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	689a      	ldr	r2, [r3, #8]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	4403      	add	r3, r0
 8004a14:	409a      	lsls	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d824      	bhi.n	8004a70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	3b05      	subs	r3, #5
 8004a38:	221f      	movs	r2, #31
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43da      	mvns	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	400a      	ands	r2, r1
 8004a46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	4618      	mov	r0, r3
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	3b05      	subs	r3, #5
 8004a62:	fa00 f203 	lsl.w	r2, r0, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	635a      	str	r2, [r3, #52]	; 0x34
 8004a6e:	e04c      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	d824      	bhi.n	8004ac2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	3b23      	subs	r3, #35	; 0x23
 8004a8a:	221f      	movs	r2, #31
 8004a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a90:	43da      	mvns	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	400a      	ands	r2, r1
 8004a98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3b23      	subs	r3, #35	; 0x23
 8004ab4:	fa00 f203 	lsl.w	r2, r0, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
 8004ac0:	e023      	b.n	8004b0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3b41      	subs	r3, #65	; 0x41
 8004ad4:	221f      	movs	r2, #31
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43da      	mvns	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	4618      	mov	r0, r3
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	3b41      	subs	r3, #65	; 0x41
 8004afe:	fa00 f203 	lsl.w	r2, r0, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b0a:	4b29      	ldr	r3, [pc, #164]	; (8004bb0 <HAL_ADC_ConfigChannel+0x250>)
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a28      	ldr	r2, [pc, #160]	; (8004bb4 <HAL_ADC_ConfigChannel+0x254>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d10f      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x1d8>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b12      	cmp	r3, #18
 8004b1e:	d10b      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a1d      	ldr	r2, [pc, #116]	; (8004bb4 <HAL_ADC_ConfigChannel+0x254>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d12b      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x23a>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <HAL_ADC_ConfigChannel+0x258>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d003      	beq.n	8004b54 <HAL_ADC_ConfigChannel+0x1f4>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b11      	cmp	r3, #17
 8004b52:	d122      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a11      	ldr	r2, [pc, #68]	; (8004bb8 <HAL_ADC_ConfigChannel+0x258>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d111      	bne.n	8004b9a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b76:	4b11      	ldr	r3, [pc, #68]	; (8004bbc <HAL_ADC_ConfigChannel+0x25c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a11      	ldr	r2, [pc, #68]	; (8004bc0 <HAL_ADC_ConfigChannel+0x260>)
 8004b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b80:	0c9a      	lsrs	r2, r3, #18
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	005b      	lsls	r3, r3, #1
 8004b8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b8c:	e002      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1f9      	bne.n	8004b8e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40012300 	.word	0x40012300
 8004bb4:	40012000 	.word	0x40012000
 8004bb8:	10000012 	.word	0x10000012
 8004bbc:	20000000 	.word	0x20000000
 8004bc0:	431bde83 	.word	0x431bde83

08004bc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004bcc:	4b79      	ldr	r3, [pc, #484]	; (8004db4 <ADC_Init+0x1f0>)
 8004bce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	431a      	orrs	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6859      	ldr	r1, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	021a      	lsls	r2, r3, #8
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004c1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6859      	ldr	r1, [r3, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6899      	ldr	r1, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	4a58      	ldr	r2, [pc, #352]	; (8004db8 <ADC_Init+0x1f4>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d022      	beq.n	8004ca2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6899      	ldr	r1, [r3, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6899      	ldr	r1, [r3, #8]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	609a      	str	r2, [r3, #8]
 8004ca0:	e00f      	b.n	8004cc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0202 	bic.w	r2, r2, #2
 8004cd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6899      	ldr	r1, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	7e1b      	ldrb	r3, [r3, #24]
 8004cdc:	005a      	lsls	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d01b      	beq.n	8004d28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6859      	ldr	r1, [r3, #4]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	035a      	lsls	r2, r3, #13
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	430a      	orrs	r2, r1
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	e007      	b.n	8004d38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	051a      	lsls	r2, r3, #20
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6899      	ldr	r1, [r3, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d7a:	025a      	lsls	r2, r3, #9
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6899      	ldr	r1, [r3, #8]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	029a      	lsls	r2, r3, #10
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	609a      	str	r2, [r3, #8]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	40012300 	.word	0x40012300
 8004db8:	0f000001 	.word	0x0f000001

08004dbc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d13c      	bne.n	8004e50 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d12b      	bne.n	8004e48 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d127      	bne.n	8004e48 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dfe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d006      	beq.n	8004e14 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d119      	bne.n	8004e48 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0220 	bic.w	r2, r2, #32
 8004e22:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d105      	bne.n	8004e48 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	f043 0201 	orr.w	r2, r3, #1
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f7fc fd4f 	bl	80018ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e4e:	e00e      	b.n	8004e6e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d003      	beq.n	8004e64 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f7ff fd75 	bl	800494c <HAL_ADC_ErrorCallback>
}
 8004e62:	e004      	b.n	8004e6e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4798      	blx	r3
}
 8004e6e:	bf00      	nop
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f7ff fd57 	bl	8004938 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2240      	movs	r2, #64	; 0x40
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	f043 0204 	orr.w	r2, r3, #4
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f7ff fd4a 	bl	800494c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <__NVIC_SetPriorityGrouping+0x44>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004edc:	4013      	ands	r3, r2
 8004ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ee8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ef2:	4a04      	ldr	r2, [pc, #16]	; (8004f04 <__NVIC_SetPriorityGrouping+0x44>)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	60d3      	str	r3, [r2, #12]
}
 8004ef8:	bf00      	nop
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr
 8004f04:	e000ed00 	.word	0xe000ed00

08004f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f0c:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <__NVIC_GetPriorityGrouping+0x18>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	0a1b      	lsrs	r3, r3, #8
 8004f12:	f003 0307 	and.w	r3, r3, #7
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	e000ed00 	.word	0xe000ed00

08004f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	db0b      	blt.n	8004f4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	f003 021f 	and.w	r2, r3, #31
 8004f3c:	4907      	ldr	r1, [pc, #28]	; (8004f5c <__NVIC_EnableIRQ+0x38>)
 8004f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f42:	095b      	lsrs	r3, r3, #5
 8004f44:	2001      	movs	r0, #1
 8004f46:	fa00 f202 	lsl.w	r2, r0, r2
 8004f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	e000e100 	.word	0xe000e100

08004f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	4603      	mov	r3, r0
 8004f68:	6039      	str	r1, [r7, #0]
 8004f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	db0a      	blt.n	8004f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	490c      	ldr	r1, [pc, #48]	; (8004fac <__NVIC_SetPriority+0x4c>)
 8004f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7e:	0112      	lsls	r2, r2, #4
 8004f80:	b2d2      	uxtb	r2, r2
 8004f82:	440b      	add	r3, r1
 8004f84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f88:	e00a      	b.n	8004fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	4908      	ldr	r1, [pc, #32]	; (8004fb0 <__NVIC_SetPriority+0x50>)
 8004f90:	79fb      	ldrb	r3, [r7, #7]
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	3b04      	subs	r3, #4
 8004f98:	0112      	lsls	r2, r2, #4
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	761a      	strb	r2, [r3, #24]
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	e000e100 	.word	0xe000e100
 8004fb0:	e000ed00 	.word	0xe000ed00

08004fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b089      	sub	sp, #36	; 0x24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f1c3 0307 	rsb	r3, r3, #7
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	bf28      	it	cs
 8004fd2:	2304      	movcs	r3, #4
 8004fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	2b06      	cmp	r3, #6
 8004fdc:	d902      	bls.n	8004fe4 <NVIC_EncodePriority+0x30>
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	3b03      	subs	r3, #3
 8004fe2:	e000      	b.n	8004fe6 <NVIC_EncodePriority+0x32>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff2:	43da      	mvns	r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	401a      	ands	r2, r3
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ffc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	fa01 f303 	lsl.w	r3, r1, r3
 8005006:	43d9      	mvns	r1, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800500c:	4313      	orrs	r3, r2
         );
}
 800500e:	4618      	mov	r0, r3
 8005010:	3724      	adds	r7, #36	; 0x24
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff ff4c 	bl	8004ec0 <__NVIC_SetPriorityGrouping>
}
 8005028:	bf00      	nop
 800502a:	3708      	adds	r7, #8
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005042:	f7ff ff61 	bl	8004f08 <__NVIC_GetPriorityGrouping>
 8005046:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	6978      	ldr	r0, [r7, #20]
 800504e:	f7ff ffb1 	bl	8004fb4 <NVIC_EncodePriority>
 8005052:	4602      	mov	r2, r0
 8005054:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005058:	4611      	mov	r1, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff ff80 	bl	8004f60 <__NVIC_SetPriority>
}
 8005060:	bf00      	nop
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	4603      	mov	r3, r0
 8005070:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff ff54 	bl	8004f24 <__NVIC_EnableIRQ>
}
 800507c:	bf00      	nop
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e00e      	b.n	80050b4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	795b      	ldrb	r3, [r3, #5]
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b00      	cmp	r3, #0
 800509e:	d105      	bne.n	80050ac <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fd fb7c 	bl	80027a4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e014      	b.n	80050f8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	791b      	ldrb	r3, [r3, #4]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d105      	bne.n	80050e4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fd fb82 	bl	80027e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800510e:	2300      	movs	r3, #0
 8005110:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	795b      	ldrb	r3, [r3, #5]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d101      	bne.n	8005122 <HAL_DAC_Start_DMA+0x22>
 800511e:	2302      	movs	r3, #2
 8005120:	e0ab      	b.n	800527a <HAL_DAC_Start_DMA+0x17a>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2201      	movs	r2, #1
 8005126:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2202      	movs	r2, #2
 800512c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d12f      	bne.n	8005194 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	4a52      	ldr	r2, [pc, #328]	; (8005284 <HAL_DAC_Start_DMA+0x184>)
 800513a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	4a51      	ldr	r2, [pc, #324]	; (8005288 <HAL_DAC_Start_DMA+0x188>)
 8005142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	4a50      	ldr	r2, [pc, #320]	; (800528c <HAL_DAC_Start_DMA+0x18c>)
 800514a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800515a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	2b08      	cmp	r3, #8
 8005160:	d013      	beq.n	800518a <HAL_DAC_Start_DMA+0x8a>
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	2b08      	cmp	r3, #8
 8005166:	d845      	bhi.n	80051f4 <HAL_DAC_Start_DMA+0xf4>
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_DAC_Start_DMA+0x76>
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	2b04      	cmp	r3, #4
 8005172:	d005      	beq.n	8005180 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8005174:	e03e      	b.n	80051f4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3308      	adds	r3, #8
 800517c:	613b      	str	r3, [r7, #16]
        break;
 800517e:	e03c      	b.n	80051fa <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	613b      	str	r3, [r7, #16]
        break;
 8005188:	e037      	b.n	80051fa <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3310      	adds	r3, #16
 8005190:	613b      	str	r3, [r7, #16]
        break;
 8005192:	e032      	b.n	80051fa <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	4a3d      	ldr	r2, [pc, #244]	; (8005290 <HAL_DAC_Start_DMA+0x190>)
 800519a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4a3c      	ldr	r2, [pc, #240]	; (8005294 <HAL_DAC_Start_DMA+0x194>)
 80051a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	4a3b      	ldr	r2, [pc, #236]	; (8005298 <HAL_DAC_Start_DMA+0x198>)
 80051aa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80051ba:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d013      	beq.n	80051ea <HAL_DAC_Start_DMA+0xea>
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d817      	bhi.n	80051f8 <HAL_DAC_Start_DMA+0xf8>
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <HAL_DAC_Start_DMA+0xd6>
 80051ce:	6a3b      	ldr	r3, [r7, #32]
 80051d0:	2b04      	cmp	r3, #4
 80051d2:	d005      	beq.n	80051e0 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80051d4:	e010      	b.n	80051f8 <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3314      	adds	r3, #20
 80051dc:	613b      	str	r3, [r7, #16]
        break;
 80051de:	e00c      	b.n	80051fa <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3318      	adds	r3, #24
 80051e6:	613b      	str	r3, [r7, #16]
        break;
 80051e8:	e007      	b.n	80051fa <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	331c      	adds	r3, #28
 80051f0:	613b      	str	r3, [r7, #16]
        break;
 80051f2:	e002      	b.n	80051fa <HAL_DAC_Start_DMA+0xfa>
        break;
 80051f4:	bf00      	nop
 80051f6:	e000      	b.n	80051fa <HAL_DAC_Start_DMA+0xfa>
        break;
 80051f8:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d111      	bne.n	8005224 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800520e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6898      	ldr	r0, [r3, #8]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	f000 fab1 	bl	8005780 <HAL_DMA_Start_IT>
 800521e:	4603      	mov	r3, r0
 8005220:	75fb      	strb	r3, [r7, #23]
 8005222:	e010      	b.n	8005246 <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005232:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	68d8      	ldr	r0, [r3, #12]
 8005238:	6879      	ldr	r1, [r7, #4]
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	f000 fa9f 	bl	8005780 <HAL_DMA_Start_IT>
 8005242:	4603      	mov	r3, r0
 8005244:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10c      	bne.n	800526c <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6819      	ldr	r1, [r3, #0]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 0310 	and.w	r3, r3, #16
 800525e:	2201      	movs	r2, #1
 8005260:	409a      	lsls	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	e005      	b.n	8005278 <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f043 0204 	orr.w	r2, r3, #4
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005278:	7dfb      	ldrb	r3, [r7, #23]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3718      	adds	r7, #24
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	0800543f 	.word	0x0800543f
 8005288:	08005461 	.word	0x08005461
 800528c:	0800547d 	.word	0x0800547d
 8005290:	080054fb 	.word	0x080054fb
 8005294:	0800551d 	.word	0x0800551d
 8005298:	08005539 	.word	0x08005539

0800529c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b2:	d120      	bne.n	80052f6 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052c2:	d118      	bne.n	80052f6 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2204      	movs	r2, #4
 80052c8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f043 0201 	orr.w	r2, r3, #1
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052ee:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f84b 	bl	800538c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005304:	d120      	bne.n	8005348 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005314:	d118      	bne.n	8005348 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2204      	movs	r2, #4
 800531a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f043 0202 	orr.w	r2, r3, #2
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005330:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005340:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f8cf 	bl	80054e6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8005348:	bf00      	nop
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b087      	sub	sp, #28
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	795b      	ldrb	r3, [r3, #5]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_DAC_ConfigChannel+0x18>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e03c      	b.n	8005432 <HAL_DAC_ConfigChannel+0x92>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2201      	movs	r2, #1
 80053bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2202      	movs	r2, #2
 80053c2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f003 0310 	and.w	r3, r3, #16
 80053d2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	43db      	mvns	r3, r3
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4013      	ands	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6819      	ldr	r1, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	22c0      	movs	r2, #192	; 0xc0
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43da      	mvns	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	400a      	ands	r2, r1
 8005422:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2201      	movs	r2, #1
 8005428:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f7ff ff7f 	bl	8005350 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2201      	movs	r2, #1
 8005456:	711a      	strb	r2, [r3, #4]
}
 8005458:	bf00      	nop
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7ff ff78 	bl	8005364 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005474:	bf00      	nop
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f043 0204 	orr.w	r2, r3, #4
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7ff ff6e 	bl	8005378 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	711a      	strb	r2, [r3, #4]
}
 80054a2:	bf00      	nop
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80054be:	b480      	push	{r7}
 80054c0:	b083      	sub	sp, #12
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr

080054d2 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80054d2:	b480      	push	{r7}
 80054d4:	b083      	sub	sp, #12
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80054da:	bf00      	nop
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b083      	sub	sp, #12
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b084      	sub	sp, #16
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7ff ffce 	bl	80054aa <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	711a      	strb	r2, [r3, #4]
}
 8005514:	bf00      	nop
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f7ff ffc7 	bl	80054be <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005530:	bf00      	nop
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f043 0204 	orr.w	r2, r3, #4
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f7ff ffbd 	bl	80054d2 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	711a      	strb	r2, [r3, #4]
}
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005574:	f7ff f85c 	bl	8004630 <HAL_GetTick>
 8005578:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e099      	b.n	80056b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2202      	movs	r2, #2
 8005588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0201 	bic.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055a4:	e00f      	b.n	80055c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055a6:	f7ff f843 	bl	8004630 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b05      	cmp	r3, #5
 80055b2:	d908      	bls.n	80055c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2203      	movs	r2, #3
 80055be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e078      	b.n	80056b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e8      	bne.n	80055a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4b38      	ldr	r3, [pc, #224]	; (80056c0 <HAL_DMA_Init+0x158>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800560a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	4313      	orrs	r3, r2
 8005616:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	2b04      	cmp	r3, #4
 800561e:	d107      	bne.n	8005630 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005628:	4313      	orrs	r3, r2
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f023 0307 	bic.w	r3, r3, #7
 8005646:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	2b04      	cmp	r3, #4
 8005658:	d117      	bne.n	800568a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	4313      	orrs	r3, r2
 8005662:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00e      	beq.n	800568a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 facd 	bl	8005c0c <DMA_CheckFifoParam>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2240      	movs	r2, #64	; 0x40
 800567c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005686:	2301      	movs	r3, #1
 8005688:	e016      	b.n	80056b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 fa84 	bl	8005ba0 <DMA_CalcBaseAndBitshift>
 8005698:	4603      	mov	r3, r0
 800569a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a0:	223f      	movs	r2, #63	; 0x3f
 80056a2:	409a      	lsls	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	f010803f 	.word	0xf010803f

080056c4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e050      	b.n	8005778 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d101      	bne.n	80056e6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80056e2:	2302      	movs	r3, #2
 80056e4:	e048      	b.n	8005778 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0201 	bic.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2200      	movs	r2, #0
 8005704:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2200      	movs	r2, #0
 800570c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2200      	movs	r2, #0
 8005714:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2200      	movs	r2, #0
 800571c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2221      	movs	r2, #33	; 0x21
 8005724:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fa3a 	bl	8005ba0 <DMA_CalcBaseAndBitshift>
 800572c:	4603      	mov	r3, r0
 800572e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005758:	223f      	movs	r2, #63	; 0x3f
 800575a:	409a      	lsls	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005796:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_DMA_Start_IT+0x26>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e040      	b.n	8005828 <HAL_DMA_Start_IT+0xa8>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d12f      	bne.n	800581a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2202      	movs	r2, #2
 80057be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 f9b8 	bl	8005b44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d8:	223f      	movs	r2, #63	; 0x3f
 80057da:	409a      	lsls	r2, r3
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0216 	orr.w	r2, r2, #22
 80057ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 0208 	orr.w	r2, r2, #8
 8005806:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e005      	b.n	8005826 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005822:	2302      	movs	r3, #2
 8005824:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005826:	7dfb      	ldrb	r3, [r7, #23]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800583c:	4b8e      	ldr	r3, [pc, #568]	; (8005a78 <HAL_DMA_IRQHandler+0x248>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a8e      	ldr	r2, [pc, #568]	; (8005a7c <HAL_DMA_IRQHandler+0x24c>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	0a9b      	lsrs	r3, r3, #10
 8005848:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585a:	2208      	movs	r2, #8
 800585c:	409a      	lsls	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	4013      	ands	r3, r2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d01a      	beq.n	800589c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 0304 	and.w	r3, r3, #4
 8005870:	2b00      	cmp	r3, #0
 8005872:	d013      	beq.n	800589c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0204 	bic.w	r2, r2, #4
 8005882:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005888:	2208      	movs	r2, #8
 800588a:	409a      	lsls	r2, r3
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005894:	f043 0201 	orr.w	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a0:	2201      	movs	r2, #1
 80058a2:	409a      	lsls	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4013      	ands	r3, r2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d012      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00b      	beq.n	80058d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058be:	2201      	movs	r2, #1
 80058c0:	409a      	lsls	r2, r3
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ca:	f043 0202 	orr.w	r2, r3, #2
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d6:	2204      	movs	r2, #4
 80058d8:	409a      	lsls	r2, r3
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4013      	ands	r3, r2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d012      	beq.n	8005908 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00b      	beq.n	8005908 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f4:	2204      	movs	r2, #4
 80058f6:	409a      	lsls	r2, r3
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005900:	f043 0204 	orr.w	r2, r3, #4
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800590c:	2210      	movs	r2, #16
 800590e:	409a      	lsls	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	4013      	ands	r3, r2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d043      	beq.n	80059a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d03c      	beq.n	80059a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592a:	2210      	movs	r2, #16
 800592c:	409a      	lsls	r2, r3
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d018      	beq.n	8005972 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d108      	bne.n	8005960 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d024      	beq.n	80059a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	4798      	blx	r3
 800595e:	e01f      	b.n	80059a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01b      	beq.n	80059a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	4798      	blx	r3
 8005970:	e016      	b.n	80059a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597c:	2b00      	cmp	r3, #0
 800597e:	d107      	bne.n	8005990 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0208 	bic.w	r2, r2, #8
 800598e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a4:	2220      	movs	r2, #32
 80059a6:	409a      	lsls	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4013      	ands	r3, r2
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 808f 	beq.w	8005ad0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0310 	and.w	r3, r3, #16
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 8087 	beq.w	8005ad0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c6:	2220      	movs	r2, #32
 80059c8:	409a      	lsls	r2, r3
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b05      	cmp	r3, #5
 80059d8:	d136      	bne.n	8005a48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0216 	bic.w	r2, r2, #22
 80059e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695a      	ldr	r2, [r3, #20]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d103      	bne.n	8005a0a <HAL_DMA_IRQHandler+0x1da>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0208 	bic.w	r2, r2, #8
 8005a18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1e:	223f      	movs	r2, #63	; 0x3f
 8005a20:	409a      	lsls	r2, r3
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d07e      	beq.n	8005b3c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	4798      	blx	r3
        }
        return;
 8005a46:	e079      	b.n	8005b3c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01d      	beq.n	8005a92 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10d      	bne.n	8005a80 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d031      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	4798      	blx	r3
 8005a74:	e02c      	b.n	8005ad0 <HAL_DMA_IRQHandler+0x2a0>
 8005a76:	bf00      	nop
 8005a78:	20000000 	.word	0x20000000
 8005a7c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d023      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	4798      	blx	r3
 8005a90:	e01e      	b.n	8005ad0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d10f      	bne.n	8005ac0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0210 	bic.w	r2, r2, #16
 8005aae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d003      	beq.n	8005ad0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d032      	beq.n	8005b3e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d022      	beq.n	8005b2a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2205      	movs	r2, #5
 8005ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f022 0201 	bic.w	r2, r2, #1
 8005afa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	3301      	adds	r3, #1
 8005b00:	60bb      	str	r3, [r7, #8]
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d307      	bcc.n	8005b18 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f2      	bne.n	8005afc <HAL_DMA_IRQHandler+0x2cc>
 8005b16:	e000      	b.n	8005b1a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005b18:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	4798      	blx	r3
 8005b3a:	e000      	b.n	8005b3e <HAL_DMA_IRQHandler+0x30e>
        return;
 8005b3c:	bf00      	nop
    }
  }
}
 8005b3e:	3718      	adds	r7, #24
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	2b40      	cmp	r3, #64	; 0x40
 8005b70:	d108      	bne.n	8005b84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005b82:	e007      	b.n	8005b94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	60da      	str	r2, [r3, #12]
}
 8005b94:	bf00      	nop
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	3b10      	subs	r3, #16
 8005bb0:	4a14      	ldr	r2, [pc, #80]	; (8005c04 <DMA_CalcBaseAndBitshift+0x64>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	091b      	lsrs	r3, r3, #4
 8005bb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005bba:	4a13      	ldr	r2, [pc, #76]	; (8005c08 <DMA_CalcBaseAndBitshift+0x68>)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d909      	bls.n	8005be2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	1d1a      	adds	r2, r3, #4
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	659a      	str	r2, [r3, #88]	; 0x58
 8005be0:	e007      	b.n	8005bf2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005bea:	f023 0303 	bic.w	r3, r3, #3
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	aaaaaaab 	.word	0xaaaaaaab
 8005c08:	08081aa4 	.word	0x08081aa4

08005c0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d11f      	bne.n	8005c66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d856      	bhi.n	8005cda <DMA_CheckFifoParam+0xce>
 8005c2c:	a201      	add	r2, pc, #4	; (adr r2, 8005c34 <DMA_CheckFifoParam+0x28>)
 8005c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c32:	bf00      	nop
 8005c34:	08005c45 	.word	0x08005c45
 8005c38:	08005c57 	.word	0x08005c57
 8005c3c:	08005c45 	.word	0x08005c45
 8005c40:	08005cdb 	.word	0x08005cdb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d046      	beq.n	8005cde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c54:	e043      	b.n	8005cde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c5e:	d140      	bne.n	8005ce2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c64:	e03d      	b.n	8005ce2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c6e:	d121      	bne.n	8005cb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d837      	bhi.n	8005ce6 <DMA_CheckFifoParam+0xda>
 8005c76:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <DMA_CheckFifoParam+0x70>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005c8d 	.word	0x08005c8d
 8005c80:	08005c93 	.word	0x08005c93
 8005c84:	08005c8d 	.word	0x08005c8d
 8005c88:	08005ca5 	.word	0x08005ca5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c90:	e030      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d025      	beq.n	8005cea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ca2:	e022      	b.n	8005cea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cac:	d11f      	bne.n	8005cee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005cb2:	e01c      	b.n	8005cee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d903      	bls.n	8005cc2 <DMA_CheckFifoParam+0xb6>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d003      	beq.n	8005cc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005cc0:	e018      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8005cc6:	e015      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00e      	beq.n	8005cf2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd8:	e00b      	b.n	8005cf2 <DMA_CheckFifoParam+0xe6>
      break;
 8005cda:	bf00      	nop
 8005cdc:	e00a      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8005cde:	bf00      	nop
 8005ce0:	e008      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ce2:	bf00      	nop
 8005ce4:	e006      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8005ce6:	bf00      	nop
 8005ce8:	e004      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8005cea:	bf00      	nop
 8005cec:	e002      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
      break;   
 8005cee:	bf00      	nop
 8005cf0:	e000      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
      break;
 8005cf2:	bf00      	nop
    }
  } 
  
  return status; 
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop

08005d04 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e03b      	b.n	8005d8e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fc fddc 	bl	80028e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d54:	f023 0107 	bic.w	r1, r3, #7
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005d6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	68d1      	ldr	r1, [r2, #12]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6812      	ldr	r2, [r2, #0]
 8005d7a:	430b      	orrs	r3, r1
 8005d7c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b086      	sub	sp, #24
 8005d9a:	af02      	add	r7, sp, #8
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
 8005da2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_DMA2D_Start+0x1c>
 8005dae:	2302      	movs	r3, #2
 8005db0:	e018      	b.n	8005de4 <HAL_DMA2D_Start+0x4e>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	68b9      	ldr	r1, [r7, #8]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f000 fa99 	bl	8006304 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0201 	orr.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d056      	beq.n	8005eb6 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e08:	f7fe fc12 	bl	8004630 <HAL_GetTick>
 8005e0c:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005e0e:	e04b      	b.n	8005ea8 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d023      	beq.n	8005e6a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e30:	f043 0202 	orr.w	r2, r3, #2
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d005      	beq.n	8005e4e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e46:	f043 0201 	orr.w	r2, r3, #1
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2221      	movs	r2, #33	; 0x21
 8005e54:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2204      	movs	r2, #4
 8005e5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	e0a5      	b.n	8005fb6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e70:	d01a      	beq.n	8005ea8 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e72:	f7fe fbdd 	bl	8004630 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d302      	bcc.n	8005e88 <HAL_DMA2D_PollForTransfer+0x9c>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10f      	bne.n	8005ea8 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8c:	f043 0220 	orr.w	r2, r3, #32
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2203      	movs	r2, #3
 8005e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e086      	b.n	8005fb6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0ac      	beq.n	8005e10 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	f003 0320 	and.w	r3, r3, #32
 8005ec0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d061      	beq.n	8005f9c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ed8:	f7fe fbaa 	bl	8004630 <HAL_GetTick>
 8005edc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005ede:	e056      	b.n	8005f8e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d02e      	beq.n	8005f50 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f00:	f043 0204 	orr.w	r2, r3, #4
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d005      	beq.n	8005f1e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f16:	f043 0202 	orr.w	r2, r3, #2
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2c:	f043 0201 	orr.w	r2, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2229      	movs	r2, #41	; 0x29
 8005f3a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2204      	movs	r2, #4
 8005f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e032      	b.n	8005fb6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f56:	d01a      	beq.n	8005f8e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f58:	f7fe fb6a 	bl	8004630 <HAL_GetTick>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d302      	bcc.n	8005f6e <HAL_DMA2D_PollForTransfer+0x182>
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10f      	bne.n	8005f8e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f72:	f043 0220 	orr.w	r2, r3, #32
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2203      	movs	r2, #3
 8005f7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e013      	b.n	8005fb6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f003 0310 	and.w	r3, r3, #16
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d0a1      	beq.n	8005ee0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2212      	movs	r2, #18
 8005fa2:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d026      	beq.n	800602e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d021      	beq.n	800602e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ff8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffe:	f043 0201 	orr.w	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2201      	movs	r2, #1
 800600c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2204      	movs	r2, #4
 8006012:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b00      	cmp	r3, #0
 8006036:	d026      	beq.n	8006086 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d021      	beq.n	8006086 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006050:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2220      	movs	r2, #32
 8006058:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605e:	f043 0202 	orr.w	r2, r3, #2
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2204      	movs	r2, #4
 800606a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	2b00      	cmp	r3, #0
 800608e:	d026      	beq.n	80060de <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006096:	2b00      	cmp	r3, #0
 8006098:	d021      	beq.n	80060de <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060a8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2208      	movs	r2, #8
 80060b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b6:	f043 0204 	orr.w	r2, r3, #4
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2204      	movs	r2, #4
 80060c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d013      	beq.n	8006110 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00e      	beq.n	8006110 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006100:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2204      	movs	r2, #4
 8006108:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f853 	bl	80061b6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d024      	beq.n	8006164 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006120:	2b00      	cmp	r3, #0
 8006122:	d01f      	beq.n	8006164 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006132:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2202      	movs	r2, #2
 800613a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f003 0310 	and.w	r3, r3, #16
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01f      	beq.n	80061ae <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01a      	beq.n	80061ae <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006186:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2210      	movs	r2, #16
 800618e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f80e 	bl	80061ca <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80061ae:	bf00      	nop
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
	...

080061e0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_DMA2D_ConfigLayer+0x20>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e079      	b.n	80062f4 <HAL_DMA2D_ConfigLayer+0x114>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	3318      	adds	r3, #24
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	4413      	add	r3, r2
 800621a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	041b      	lsls	r3, r3, #16
 8006226:	4313      	orrs	r3, r2
 8006228:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800622a:	4b35      	ldr	r3, [pc, #212]	; (8006300 <HAL_DMA2D_ConfigLayer+0x120>)
 800622c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	2b0a      	cmp	r3, #10
 8006234:	d003      	beq.n	800623e <HAL_DMA2D_ConfigLayer+0x5e>
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b09      	cmp	r3, #9
 800623c:	d107      	bne.n	800624e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	e005      	b.n	800625a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	061b      	lsls	r3, r3, #24
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d120      	bne.n	80062a2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	43db      	mvns	r3, r3
 800626a:	ea02 0103 	and.w	r1, r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	697a      	ldr	r2, [r7, #20]
 8006274:	430a      	orrs	r2, r1
 8006276:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	6812      	ldr	r2, [r2, #0]
 8006280:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	2b0a      	cmp	r3, #10
 8006288:	d003      	beq.n	8006292 <HAL_DMA2D_ConfigLayer+0xb2>
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b09      	cmp	r3, #9
 8006290:	d127      	bne.n	80062e2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800629e:	629a      	str	r2, [r3, #40]	; 0x28
 80062a0:	e01f      	b.n	80062e2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69da      	ldr	r2, [r3, #28]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	43db      	mvns	r3, r3
 80062ac:	ea02 0103 	and.w	r1, r2, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	6812      	ldr	r2, [r2, #0]
 80062c2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2b0a      	cmp	r3, #10
 80062ca:	d003      	beq.n	80062d4 <HAL_DMA2D_ConfigLayer+0xf4>
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	2b09      	cmp	r3, #9
 80062d2:	d106      	bne.n	80062e2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	68da      	ldr	r2, [r3, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80062e0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	ff03000f 	.word	0xff03000f

08006304 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006304:	b480      	push	{r7}
 8006306:	b08b      	sub	sp, #44	; 0x2c
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006318:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	041a      	lsls	r2, r3, #16
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	431a      	orrs	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800633c:	d174      	bne.n	8006428 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006344:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800634c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006354:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	b2db      	uxtb	r3, r3
 800635a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d108      	bne.n	8006376 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	431a      	orrs	r2, r3
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	4313      	orrs	r3, r2
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
 8006374:	e053      	b.n	800641e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d106      	bne.n	800638c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	4313      	orrs	r3, r2
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	627b      	str	r3, [r7, #36]	; 0x24
 800638a:	e048      	b.n	800641e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b02      	cmp	r3, #2
 8006392:	d111      	bne.n	80063b8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	0cdb      	lsrs	r3, r3, #19
 8006398:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	0a9b      	lsrs	r3, r3, #10
 800639e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	08db      	lsrs	r3, r3, #3
 80063a4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	02db      	lsls	r3, r3, #11
 80063ae:	4313      	orrs	r3, r2
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24
 80063b6:	e032      	b.n	800641e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d117      	bne.n	80063f0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	0fdb      	lsrs	r3, r3, #31
 80063c4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	0cdb      	lsrs	r3, r3, #19
 80063ca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	0adb      	lsrs	r3, r3, #11
 80063d0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	08db      	lsrs	r3, r3, #3
 80063d6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	015a      	lsls	r2, r3, #5
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	029b      	lsls	r3, r3, #10
 80063e0:	431a      	orrs	r2, r3
 80063e2:	6a3b      	ldr	r3, [r7, #32]
 80063e4:	03db      	lsls	r3, r3, #15
 80063e6:	4313      	orrs	r3, r2
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
 80063ee:	e016      	b.n	800641e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80063f0:	6a3b      	ldr	r3, [r7, #32]
 80063f2:	0f1b      	lsrs	r3, r3, #28
 80063f4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	0d1b      	lsrs	r3, r3, #20
 80063fa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	0b1b      	lsrs	r3, r3, #12
 8006400:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	091b      	lsrs	r3, r3, #4
 8006406:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006408:	69bb      	ldr	r3, [r7, #24]
 800640a:	011a      	lsls	r2, r3, #4
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	021b      	lsls	r3, r3, #8
 8006410:	431a      	orrs	r2, r3
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	031b      	lsls	r3, r3, #12
 8006416:	4313      	orrs	r3, r2
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006424:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006426:	e003      	b.n	8006430 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	60da      	str	r2, [r3, #12]
}
 8006430:	bf00      	nop
 8006432:	372c      	adds	r7, #44	; 0x2c
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800643c:	b480      	push	{r7}
 800643e:	b089      	sub	sp, #36	; 0x24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800644a:	2300      	movs	r3, #0
 800644c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800644e:	2300      	movs	r3, #0
 8006450:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006452:	2300      	movs	r3, #0
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	e177      	b.n	8006748 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006458:	2201      	movs	r2, #1
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	fa02 f303 	lsl.w	r3, r2, r3
 8006460:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4013      	ands	r3, r2
 800646a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	429a      	cmp	r2, r3
 8006472:	f040 8166 	bne.w	8006742 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b01      	cmp	r3, #1
 8006480:	d005      	beq.n	800648e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800648a:	2b02      	cmp	r3, #2
 800648c:	d130      	bne.n	80064f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	2203      	movs	r2, #3
 800649a:	fa02 f303 	lsl.w	r3, r2, r3
 800649e:	43db      	mvns	r3, r3
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	4013      	ands	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064c4:	2201      	movs	r2, #1
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	fa02 f303 	lsl.w	r3, r2, r3
 80064cc:	43db      	mvns	r3, r3
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	4013      	ands	r3, r2
 80064d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	091b      	lsrs	r3, r3, #4
 80064da:	f003 0201 	and.w	r2, r3, #1
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	fa02 f303 	lsl.w	r3, r2, r3
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f003 0303 	and.w	r3, r3, #3
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d017      	beq.n	800652c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	005b      	lsls	r3, r3, #1
 8006506:	2203      	movs	r2, #3
 8006508:	fa02 f303 	lsl.w	r3, r2, r3
 800650c:	43db      	mvns	r3, r3
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	4013      	ands	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	005b      	lsls	r3, r3, #1
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	69ba      	ldr	r2, [r7, #24]
 8006522:	4313      	orrs	r3, r2
 8006524:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d123      	bne.n	8006580 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	08da      	lsrs	r2, r3, #3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3208      	adds	r2, #8
 8006540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006544:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	f003 0307 	and.w	r3, r3, #7
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	220f      	movs	r2, #15
 8006550:	fa02 f303 	lsl.w	r3, r2, r3
 8006554:	43db      	mvns	r3, r3
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	4013      	ands	r3, r2
 800655a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	691a      	ldr	r2, [r3, #16]
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	4313      	orrs	r3, r2
 8006570:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	08da      	lsrs	r2, r3, #3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3208      	adds	r2, #8
 800657a:	69b9      	ldr	r1, [r7, #24]
 800657c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	005b      	lsls	r3, r3, #1
 800658a:	2203      	movs	r2, #3
 800658c:	fa02 f303 	lsl.w	r3, r2, r3
 8006590:	43db      	mvns	r3, r3
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	4013      	ands	r3, r2
 8006596:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f003 0203 	and.w	r2, r3, #3
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	fa02 f303 	lsl.w	r3, r2, r3
 80065a8:	69ba      	ldr	r2, [r7, #24]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 80c0 	beq.w	8006742 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065c2:	2300      	movs	r3, #0
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	4b66      	ldr	r3, [pc, #408]	; (8006760 <HAL_GPIO_Init+0x324>)
 80065c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ca:	4a65      	ldr	r2, [pc, #404]	; (8006760 <HAL_GPIO_Init+0x324>)
 80065cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065d0:	6453      	str	r3, [r2, #68]	; 0x44
 80065d2:	4b63      	ldr	r3, [pc, #396]	; (8006760 <HAL_GPIO_Init+0x324>)
 80065d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065de:	4a61      	ldr	r2, [pc, #388]	; (8006764 <HAL_GPIO_Init+0x328>)
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	089b      	lsrs	r3, r3, #2
 80065e4:	3302      	adds	r3, #2
 80065e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	220f      	movs	r2, #15
 80065f6:	fa02 f303 	lsl.w	r3, r2, r3
 80065fa:	43db      	mvns	r3, r3
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	4013      	ands	r3, r2
 8006600:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a58      	ldr	r2, [pc, #352]	; (8006768 <HAL_GPIO_Init+0x32c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d037      	beq.n	800667a <HAL_GPIO_Init+0x23e>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a57      	ldr	r2, [pc, #348]	; (800676c <HAL_GPIO_Init+0x330>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d031      	beq.n	8006676 <HAL_GPIO_Init+0x23a>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a56      	ldr	r2, [pc, #344]	; (8006770 <HAL_GPIO_Init+0x334>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d02b      	beq.n	8006672 <HAL_GPIO_Init+0x236>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a55      	ldr	r2, [pc, #340]	; (8006774 <HAL_GPIO_Init+0x338>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d025      	beq.n	800666e <HAL_GPIO_Init+0x232>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a54      	ldr	r2, [pc, #336]	; (8006778 <HAL_GPIO_Init+0x33c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d01f      	beq.n	800666a <HAL_GPIO_Init+0x22e>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a53      	ldr	r2, [pc, #332]	; (800677c <HAL_GPIO_Init+0x340>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d019      	beq.n	8006666 <HAL_GPIO_Init+0x22a>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a52      	ldr	r2, [pc, #328]	; (8006780 <HAL_GPIO_Init+0x344>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d013      	beq.n	8006662 <HAL_GPIO_Init+0x226>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a51      	ldr	r2, [pc, #324]	; (8006784 <HAL_GPIO_Init+0x348>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d00d      	beq.n	800665e <HAL_GPIO_Init+0x222>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a50      	ldr	r2, [pc, #320]	; (8006788 <HAL_GPIO_Init+0x34c>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d007      	beq.n	800665a <HAL_GPIO_Init+0x21e>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a4f      	ldr	r2, [pc, #316]	; (800678c <HAL_GPIO_Init+0x350>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d101      	bne.n	8006656 <HAL_GPIO_Init+0x21a>
 8006652:	2309      	movs	r3, #9
 8006654:	e012      	b.n	800667c <HAL_GPIO_Init+0x240>
 8006656:	230a      	movs	r3, #10
 8006658:	e010      	b.n	800667c <HAL_GPIO_Init+0x240>
 800665a:	2308      	movs	r3, #8
 800665c:	e00e      	b.n	800667c <HAL_GPIO_Init+0x240>
 800665e:	2307      	movs	r3, #7
 8006660:	e00c      	b.n	800667c <HAL_GPIO_Init+0x240>
 8006662:	2306      	movs	r3, #6
 8006664:	e00a      	b.n	800667c <HAL_GPIO_Init+0x240>
 8006666:	2305      	movs	r3, #5
 8006668:	e008      	b.n	800667c <HAL_GPIO_Init+0x240>
 800666a:	2304      	movs	r3, #4
 800666c:	e006      	b.n	800667c <HAL_GPIO_Init+0x240>
 800666e:	2303      	movs	r3, #3
 8006670:	e004      	b.n	800667c <HAL_GPIO_Init+0x240>
 8006672:	2302      	movs	r3, #2
 8006674:	e002      	b.n	800667c <HAL_GPIO_Init+0x240>
 8006676:	2301      	movs	r3, #1
 8006678:	e000      	b.n	800667c <HAL_GPIO_Init+0x240>
 800667a:	2300      	movs	r3, #0
 800667c:	69fa      	ldr	r2, [r7, #28]
 800667e:	f002 0203 	and.w	r2, r2, #3
 8006682:	0092      	lsls	r2, r2, #2
 8006684:	4093      	lsls	r3, r2
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	4313      	orrs	r3, r2
 800668a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800668c:	4935      	ldr	r1, [pc, #212]	; (8006764 <HAL_GPIO_Init+0x328>)
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	089b      	lsrs	r3, r3, #2
 8006692:	3302      	adds	r3, #2
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800669a:	4b3d      	ldr	r3, [pc, #244]	; (8006790 <HAL_GPIO_Init+0x354>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	43db      	mvns	r3, r3
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	4013      	ands	r3, r2
 80066a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066be:	4a34      	ldr	r2, [pc, #208]	; (8006790 <HAL_GPIO_Init+0x354>)
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066c4:	4b32      	ldr	r3, [pc, #200]	; (8006790 <HAL_GPIO_Init+0x354>)
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	43db      	mvns	r3, r3
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	4013      	ands	r3, r2
 80066d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066e8:	4a29      	ldr	r2, [pc, #164]	; (8006790 <HAL_GPIO_Init+0x354>)
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066ee:	4b28      	ldr	r3, [pc, #160]	; (8006790 <HAL_GPIO_Init+0x354>)
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	43db      	mvns	r3, r3
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	4013      	ands	r3, r2
 80066fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800670a:	69ba      	ldr	r2, [r7, #24]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	4313      	orrs	r3, r2
 8006710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006712:	4a1f      	ldr	r2, [pc, #124]	; (8006790 <HAL_GPIO_Init+0x354>)
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006718:	4b1d      	ldr	r3, [pc, #116]	; (8006790 <HAL_GPIO_Init+0x354>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	43db      	mvns	r3, r3
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	4013      	ands	r3, r2
 8006726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800673c:	4a14      	ldr	r2, [pc, #80]	; (8006790 <HAL_GPIO_Init+0x354>)
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	3301      	adds	r3, #1
 8006746:	61fb      	str	r3, [r7, #28]
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	2b0f      	cmp	r3, #15
 800674c:	f67f ae84 	bls.w	8006458 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006750:	bf00      	nop
 8006752:	bf00      	nop
 8006754:	3724      	adds	r7, #36	; 0x24
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	40023800 	.word	0x40023800
 8006764:	40013800 	.word	0x40013800
 8006768:	40020000 	.word	0x40020000
 800676c:	40020400 	.word	0x40020400
 8006770:	40020800 	.word	0x40020800
 8006774:	40020c00 	.word	0x40020c00
 8006778:	40021000 	.word	0x40021000
 800677c:	40021400 	.word	0x40021400
 8006780:	40021800 	.word	0x40021800
 8006784:	40021c00 	.word	0x40021c00
 8006788:	40022000 	.word	0x40022000
 800678c:	40022400 	.word	0x40022400
 8006790:	40013c00 	.word	0x40013c00

08006794 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800679e:	2300      	movs	r3, #0
 80067a0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067aa:	2300      	movs	r3, #0
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	e0d9      	b.n	8006964 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80067b0:	2201      	movs	r2, #1
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	fa02 f303 	lsl.w	r3, r2, r3
 80067b8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	4013      	ands	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	f040 80c9 	bne.w	800695e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80067cc:	4a6b      	ldr	r2, [pc, #428]	; (800697c <HAL_GPIO_DeInit+0x1e8>)
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	089b      	lsrs	r3, r3, #2
 80067d2:	3302      	adds	r3, #2
 80067d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067d8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f003 0303 	and.w	r3, r3, #3
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	220f      	movs	r2, #15
 80067e4:	fa02 f303 	lsl.w	r3, r2, r3
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	4013      	ands	r3, r2
 80067ec:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a63      	ldr	r2, [pc, #396]	; (8006980 <HAL_GPIO_DeInit+0x1ec>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d037      	beq.n	8006866 <HAL_GPIO_DeInit+0xd2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a62      	ldr	r2, [pc, #392]	; (8006984 <HAL_GPIO_DeInit+0x1f0>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d031      	beq.n	8006862 <HAL_GPIO_DeInit+0xce>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a61      	ldr	r2, [pc, #388]	; (8006988 <HAL_GPIO_DeInit+0x1f4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d02b      	beq.n	800685e <HAL_GPIO_DeInit+0xca>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a60      	ldr	r2, [pc, #384]	; (800698c <HAL_GPIO_DeInit+0x1f8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d025      	beq.n	800685a <HAL_GPIO_DeInit+0xc6>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a5f      	ldr	r2, [pc, #380]	; (8006990 <HAL_GPIO_DeInit+0x1fc>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d01f      	beq.n	8006856 <HAL_GPIO_DeInit+0xc2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a5e      	ldr	r2, [pc, #376]	; (8006994 <HAL_GPIO_DeInit+0x200>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d019      	beq.n	8006852 <HAL_GPIO_DeInit+0xbe>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a5d      	ldr	r2, [pc, #372]	; (8006998 <HAL_GPIO_DeInit+0x204>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d013      	beq.n	800684e <HAL_GPIO_DeInit+0xba>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a5c      	ldr	r2, [pc, #368]	; (800699c <HAL_GPIO_DeInit+0x208>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00d      	beq.n	800684a <HAL_GPIO_DeInit+0xb6>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a5b      	ldr	r2, [pc, #364]	; (80069a0 <HAL_GPIO_DeInit+0x20c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d007      	beq.n	8006846 <HAL_GPIO_DeInit+0xb2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a5a      	ldr	r2, [pc, #360]	; (80069a4 <HAL_GPIO_DeInit+0x210>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d101      	bne.n	8006842 <HAL_GPIO_DeInit+0xae>
 800683e:	2309      	movs	r3, #9
 8006840:	e012      	b.n	8006868 <HAL_GPIO_DeInit+0xd4>
 8006842:	230a      	movs	r3, #10
 8006844:	e010      	b.n	8006868 <HAL_GPIO_DeInit+0xd4>
 8006846:	2308      	movs	r3, #8
 8006848:	e00e      	b.n	8006868 <HAL_GPIO_DeInit+0xd4>
 800684a:	2307      	movs	r3, #7
 800684c:	e00c      	b.n	8006868 <HAL_GPIO_DeInit+0xd4>
 800684e:	2306      	movs	r3, #6
 8006850:	e00a      	b.n	8006868 <HAL_GPIO_DeInit+0xd4>
 8006852:	2305      	movs	r3, #5
 8006854:	e008      	b.n	8006868 <HAL_GPIO_DeInit+0xd4>
 8006856:	2304      	movs	r3, #4
 8006858:	e006      	b.n	8006868 <HAL_GPIO_DeInit+0xd4>
 800685a:	2303      	movs	r3, #3
 800685c:	e004      	b.n	8006868 <HAL_GPIO_DeInit+0xd4>
 800685e:	2302      	movs	r3, #2
 8006860:	e002      	b.n	8006868 <HAL_GPIO_DeInit+0xd4>
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <HAL_GPIO_DeInit+0xd4>
 8006866:	2300      	movs	r3, #0
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	f002 0203 	and.w	r2, r2, #3
 800686e:	0092      	lsls	r2, r2, #2
 8006870:	4093      	lsls	r3, r2
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	429a      	cmp	r2, r3
 8006876:	d132      	bne.n	80068de <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006878:	4b4b      	ldr	r3, [pc, #300]	; (80069a8 <HAL_GPIO_DeInit+0x214>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	43db      	mvns	r3, r3
 8006880:	4949      	ldr	r1, [pc, #292]	; (80069a8 <HAL_GPIO_DeInit+0x214>)
 8006882:	4013      	ands	r3, r2
 8006884:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006886:	4b48      	ldr	r3, [pc, #288]	; (80069a8 <HAL_GPIO_DeInit+0x214>)
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	43db      	mvns	r3, r3
 800688e:	4946      	ldr	r1, [pc, #280]	; (80069a8 <HAL_GPIO_DeInit+0x214>)
 8006890:	4013      	ands	r3, r2
 8006892:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006894:	4b44      	ldr	r3, [pc, #272]	; (80069a8 <HAL_GPIO_DeInit+0x214>)
 8006896:	68da      	ldr	r2, [r3, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	43db      	mvns	r3, r3
 800689c:	4942      	ldr	r1, [pc, #264]	; (80069a8 <HAL_GPIO_DeInit+0x214>)
 800689e:	4013      	ands	r3, r2
 80068a0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80068a2:	4b41      	ldr	r3, [pc, #260]	; (80069a8 <HAL_GPIO_DeInit+0x214>)
 80068a4:	689a      	ldr	r2, [r3, #8]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	43db      	mvns	r3, r3
 80068aa:	493f      	ldr	r1, [pc, #252]	; (80069a8 <HAL_GPIO_DeInit+0x214>)
 80068ac:	4013      	ands	r3, r2
 80068ae:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f003 0303 	and.w	r3, r3, #3
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	220f      	movs	r2, #15
 80068ba:	fa02 f303 	lsl.w	r3, r2, r3
 80068be:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80068c0:	4a2e      	ldr	r2, [pc, #184]	; (800697c <HAL_GPIO_DeInit+0x1e8>)
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	089b      	lsrs	r3, r3, #2
 80068c6:	3302      	adds	r3, #2
 80068c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	43da      	mvns	r2, r3
 80068d0:	482a      	ldr	r0, [pc, #168]	; (800697c <HAL_GPIO_DeInit+0x1e8>)
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	089b      	lsrs	r3, r3, #2
 80068d6:	400a      	ands	r2, r1
 80068d8:	3302      	adds	r3, #2
 80068da:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	2103      	movs	r1, #3
 80068e8:	fa01 f303 	lsl.w	r3, r1, r3
 80068ec:	43db      	mvns	r3, r3
 80068ee:	401a      	ands	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	08da      	lsrs	r2, r3, #3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3208      	adds	r2, #8
 80068fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f003 0307 	and.w	r3, r3, #7
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	220f      	movs	r2, #15
 800690a:	fa02 f303 	lsl.w	r3, r2, r3
 800690e:	43db      	mvns	r3, r3
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	08d2      	lsrs	r2, r2, #3
 8006914:	4019      	ands	r1, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3208      	adds	r2, #8
 800691a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	005b      	lsls	r3, r3, #1
 8006926:	2103      	movs	r1, #3
 8006928:	fa01 f303 	lsl.w	r3, r1, r3
 800692c:	43db      	mvns	r3, r3
 800692e:	401a      	ands	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	2101      	movs	r1, #1
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	fa01 f303 	lsl.w	r3, r1, r3
 8006940:	43db      	mvns	r3, r3
 8006942:	401a      	ands	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	005b      	lsls	r3, r3, #1
 8006950:	2103      	movs	r1, #3
 8006952:	fa01 f303 	lsl.w	r3, r1, r3
 8006956:	43db      	mvns	r3, r3
 8006958:	401a      	ands	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	3301      	adds	r3, #1
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2b0f      	cmp	r3, #15
 8006968:	f67f af22 	bls.w	80067b0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800696c:	bf00      	nop
 800696e:	bf00      	nop
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	40013800 	.word	0x40013800
 8006980:	40020000 	.word	0x40020000
 8006984:	40020400 	.word	0x40020400
 8006988:	40020800 	.word	0x40020800
 800698c:	40020c00 	.word	0x40020c00
 8006990:	40021000 	.word	0x40021000
 8006994:	40021400 	.word	0x40021400
 8006998:	40021800 	.word	0x40021800
 800699c:	40021c00 	.word	0x40021c00
 80069a0:	40022000 	.word	0x40022000
 80069a4:	40022400 	.word	0x40022400
 80069a8:	40013c00 	.word	0x40013c00

080069ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691a      	ldr	r2, [r3, #16]
 80069bc:	887b      	ldrh	r3, [r7, #2]
 80069be:	4013      	ands	r3, r2
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d002      	beq.n	80069ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80069c4:	2301      	movs	r3, #1
 80069c6:	73fb      	strb	r3, [r7, #15]
 80069c8:	e001      	b.n	80069ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3714      	adds	r7, #20
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	460b      	mov	r3, r1
 80069e6:	807b      	strh	r3, [r7, #2]
 80069e8:	4613      	mov	r3, r2
 80069ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80069ec:	787b      	ldrb	r3, [r7, #1]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069f2:	887a      	ldrh	r2, [r7, #2]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80069f8:	e003      	b.n	8006a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80069fa:	887b      	ldrh	r3, [r7, #2]
 80069fc:	041a      	lsls	r2, r3, #16
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	619a      	str	r2, [r3, #24]
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8006a0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a10:	b08f      	sub	sp, #60	; 0x3c
 8006a12:	af0a      	add	r7, sp, #40	; 0x28
 8006a14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e054      	b.n	8006aca <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d106      	bne.n	8006a40 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f006 ffa6 	bl	800d98c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2203      	movs	r2, #3
 8006a44:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d102      	bne.n	8006a5a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f004 ff98 	bl	800b994 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	603b      	str	r3, [r7, #0]
 8006a6a:	687e      	ldr	r6, [r7, #4]
 8006a6c:	466d      	mov	r5, sp
 8006a6e:	f106 0410 	add.w	r4, r6, #16
 8006a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006a82:	1d33      	adds	r3, r6, #4
 8006a84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a86:	6838      	ldr	r0, [r7, #0]
 8006a88:	f004 ff12 	bl	800b8b0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2101      	movs	r1, #1
 8006a92:	4618      	mov	r0, r3
 8006a94:	f004 ff8f 	bl	800b9b6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	603b      	str	r3, [r7, #0]
 8006a9e:	687e      	ldr	r6, [r7, #4]
 8006aa0:	466d      	mov	r5, sp
 8006aa2:	f106 0410 	add.w	r4, r6, #16
 8006aa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006aa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006aaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006aac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006aae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ab2:	e885 0003 	stmia.w	r5, {r0, r1}
 8006ab6:	1d33      	adds	r3, r6, #4
 8006ab8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006aba:	6838      	ldr	r0, [r7, #0]
 8006abc:	f005 f918 	bl	800bcf0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006ad2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8006ad2:	b590      	push	{r4, r7, lr}
 8006ad4:	b089      	sub	sp, #36	; 0x24
 8006ad6:	af04      	add	r7, sp, #16
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	4608      	mov	r0, r1
 8006adc:	4611      	mov	r1, r2
 8006ade:	461a      	mov	r2, r3
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	70fb      	strb	r3, [r7, #3]
 8006ae4:	460b      	mov	r3, r1
 8006ae6:	70bb      	strb	r3, [r7, #2]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d101      	bne.n	8006afa <HAL_HCD_HC_Init+0x28>
 8006af6:	2302      	movs	r3, #2
 8006af8:	e076      	b.n	8006be8 <HAL_HCD_HC_Init+0x116>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8006b02:	78fb      	ldrb	r3, [r7, #3]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	212c      	movs	r1, #44	; 0x2c
 8006b08:	fb01 f303 	mul.w	r3, r1, r3
 8006b0c:	4413      	add	r3, r2
 8006b0e:	333d      	adds	r3, #61	; 0x3d
 8006b10:	2200      	movs	r2, #0
 8006b12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	212c      	movs	r1, #44	; 0x2c
 8006b1a:	fb01 f303 	mul.w	r3, r1, r3
 8006b1e:	4413      	add	r3, r2
 8006b20:	3338      	adds	r3, #56	; 0x38
 8006b22:	787a      	ldrb	r2, [r7, #1]
 8006b24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	212c      	movs	r1, #44	; 0x2c
 8006b2c:	fb01 f303 	mul.w	r3, r1, r3
 8006b30:	4413      	add	r3, r2
 8006b32:	3340      	adds	r3, #64	; 0x40
 8006b34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006b36:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	212c      	movs	r1, #44	; 0x2c
 8006b3e:	fb01 f303 	mul.w	r3, r1, r3
 8006b42:	4413      	add	r3, r2
 8006b44:	3339      	adds	r3, #57	; 0x39
 8006b46:	78fa      	ldrb	r2, [r7, #3]
 8006b48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	212c      	movs	r1, #44	; 0x2c
 8006b50:	fb01 f303 	mul.w	r3, r1, r3
 8006b54:	4413      	add	r3, r2
 8006b56:	333f      	adds	r3, #63	; 0x3f
 8006b58:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006b5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	78ba      	ldrb	r2, [r7, #2]
 8006b62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b66:	b2d0      	uxtb	r0, r2
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	212c      	movs	r1, #44	; 0x2c
 8006b6c:	fb01 f303 	mul.w	r3, r1, r3
 8006b70:	4413      	add	r3, r2
 8006b72:	333a      	adds	r3, #58	; 0x3a
 8006b74:	4602      	mov	r2, r0
 8006b76:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006b78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	da09      	bge.n	8006b94 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006b80:	78fb      	ldrb	r3, [r7, #3]
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	212c      	movs	r1, #44	; 0x2c
 8006b86:	fb01 f303 	mul.w	r3, r1, r3
 8006b8a:	4413      	add	r3, r2
 8006b8c:	333b      	adds	r3, #59	; 0x3b
 8006b8e:	2201      	movs	r2, #1
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	e008      	b.n	8006ba6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	212c      	movs	r1, #44	; 0x2c
 8006b9a:	fb01 f303 	mul.w	r3, r1, r3
 8006b9e:	4413      	add	r3, r2
 8006ba0:	333b      	adds	r3, #59	; 0x3b
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8006ba6:	78fb      	ldrb	r3, [r7, #3]
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	212c      	movs	r1, #44	; 0x2c
 8006bac:	fb01 f303 	mul.w	r3, r1, r3
 8006bb0:	4413      	add	r3, r2
 8006bb2:	333c      	adds	r3, #60	; 0x3c
 8006bb4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006bb8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6818      	ldr	r0, [r3, #0]
 8006bbe:	787c      	ldrb	r4, [r7, #1]
 8006bc0:	78ba      	ldrb	r2, [r7, #2]
 8006bc2:	78f9      	ldrb	r1, [r7, #3]
 8006bc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006bc6:	9302      	str	r3, [sp, #8]
 8006bc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bcc:	9301      	str	r3, [sp, #4]
 8006bce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	4623      	mov	r3, r4
 8006bd6:	f005 f9e7 	bl	800bfa8 <USB_HC_Init>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd90      	pop	{r4, r7, pc}

08006bf0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d101      	bne.n	8006c0e <HAL_HCD_HC_Halt+0x1e>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	e00f      	b.n	8006c2e <HAL_HCD_HC_Halt+0x3e>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	78fa      	ldrb	r2, [r7, #3]
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f005 fc37 	bl	800c492 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
	...

08006c38 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	4608      	mov	r0, r1
 8006c42:	4611      	mov	r1, r2
 8006c44:	461a      	mov	r2, r3
 8006c46:	4603      	mov	r3, r0
 8006c48:	70fb      	strb	r3, [r7, #3]
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	70bb      	strb	r3, [r7, #2]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006c52:	78fb      	ldrb	r3, [r7, #3]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	212c      	movs	r1, #44	; 0x2c
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	4413      	add	r3, r2
 8006c5e:	333b      	adds	r3, #59	; 0x3b
 8006c60:	78ba      	ldrb	r2, [r7, #2]
 8006c62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	212c      	movs	r1, #44	; 0x2c
 8006c6a:	fb01 f303 	mul.w	r3, r1, r3
 8006c6e:	4413      	add	r3, r2
 8006c70:	333f      	adds	r3, #63	; 0x3f
 8006c72:	787a      	ldrb	r2, [r7, #1]
 8006c74:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8006c76:	7c3b      	ldrb	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d112      	bne.n	8006ca2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006c7c:	78fb      	ldrb	r3, [r7, #3]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	212c      	movs	r1, #44	; 0x2c
 8006c82:	fb01 f303 	mul.w	r3, r1, r3
 8006c86:	4413      	add	r3, r2
 8006c88:	3342      	adds	r3, #66	; 0x42
 8006c8a:	2203      	movs	r2, #3
 8006c8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006c8e:	78fb      	ldrb	r3, [r7, #3]
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	212c      	movs	r1, #44	; 0x2c
 8006c94:	fb01 f303 	mul.w	r3, r1, r3
 8006c98:	4413      	add	r3, r2
 8006c9a:	333d      	adds	r3, #61	; 0x3d
 8006c9c:	7f3a      	ldrb	r2, [r7, #28]
 8006c9e:	701a      	strb	r2, [r3, #0]
 8006ca0:	e008      	b.n	8006cb4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006ca2:	78fb      	ldrb	r3, [r7, #3]
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	212c      	movs	r1, #44	; 0x2c
 8006ca8:	fb01 f303 	mul.w	r3, r1, r3
 8006cac:	4413      	add	r3, r2
 8006cae:	3342      	adds	r3, #66	; 0x42
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8006cb4:	787b      	ldrb	r3, [r7, #1]
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	f200 80c6 	bhi.w	8006e48 <HAL_HCD_HC_SubmitRequest+0x210>
 8006cbc:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8006cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc2:	bf00      	nop
 8006cc4:	08006cd5 	.word	0x08006cd5
 8006cc8:	08006e35 	.word	0x08006e35
 8006ccc:	08006d39 	.word	0x08006d39
 8006cd0:	08006db7 	.word	0x08006db7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8006cd4:	7c3b      	ldrb	r3, [r7, #16]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	f040 80b8 	bne.w	8006e4c <HAL_HCD_HC_SubmitRequest+0x214>
 8006cdc:	78bb      	ldrb	r3, [r7, #2]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f040 80b4 	bne.w	8006e4c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8006ce4:	8b3b      	ldrh	r3, [r7, #24]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d108      	bne.n	8006cfc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	212c      	movs	r1, #44	; 0x2c
 8006cf0:	fb01 f303 	mul.w	r3, r1, r3
 8006cf4:	4413      	add	r3, r2
 8006cf6:	3355      	adds	r3, #85	; 0x55
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006cfc:	78fb      	ldrb	r3, [r7, #3]
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	212c      	movs	r1, #44	; 0x2c
 8006d02:	fb01 f303 	mul.w	r3, r1, r3
 8006d06:	4413      	add	r3, r2
 8006d08:	3355      	adds	r3, #85	; 0x55
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d109      	bne.n	8006d24 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	212c      	movs	r1, #44	; 0x2c
 8006d16:	fb01 f303 	mul.w	r3, r1, r3
 8006d1a:	4413      	add	r3, r2
 8006d1c:	3342      	adds	r3, #66	; 0x42
 8006d1e:	2200      	movs	r2, #0
 8006d20:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006d22:	e093      	b.n	8006e4c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006d24:	78fb      	ldrb	r3, [r7, #3]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	212c      	movs	r1, #44	; 0x2c
 8006d2a:	fb01 f303 	mul.w	r3, r1, r3
 8006d2e:	4413      	add	r3, r2
 8006d30:	3342      	adds	r3, #66	; 0x42
 8006d32:	2202      	movs	r2, #2
 8006d34:	701a      	strb	r2, [r3, #0]
      break;
 8006d36:	e089      	b.n	8006e4c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006d38:	78bb      	ldrb	r3, [r7, #2]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d11d      	bne.n	8006d7a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006d3e:	78fb      	ldrb	r3, [r7, #3]
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	212c      	movs	r1, #44	; 0x2c
 8006d44:	fb01 f303 	mul.w	r3, r1, r3
 8006d48:	4413      	add	r3, r2
 8006d4a:	3355      	adds	r3, #85	; 0x55
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d109      	bne.n	8006d66 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006d52:	78fb      	ldrb	r3, [r7, #3]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	212c      	movs	r1, #44	; 0x2c
 8006d58:	fb01 f303 	mul.w	r3, r1, r3
 8006d5c:	4413      	add	r3, r2
 8006d5e:	3342      	adds	r3, #66	; 0x42
 8006d60:	2200      	movs	r2, #0
 8006d62:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8006d64:	e073      	b.n	8006e4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006d66:	78fb      	ldrb	r3, [r7, #3]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	212c      	movs	r1, #44	; 0x2c
 8006d6c:	fb01 f303 	mul.w	r3, r1, r3
 8006d70:	4413      	add	r3, r2
 8006d72:	3342      	adds	r3, #66	; 0x42
 8006d74:	2202      	movs	r2, #2
 8006d76:	701a      	strb	r2, [r3, #0]
      break;
 8006d78:	e069      	b.n	8006e4e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006d7a:	78fb      	ldrb	r3, [r7, #3]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	212c      	movs	r1, #44	; 0x2c
 8006d80:	fb01 f303 	mul.w	r3, r1, r3
 8006d84:	4413      	add	r3, r2
 8006d86:	3354      	adds	r3, #84	; 0x54
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d109      	bne.n	8006da2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006d8e:	78fb      	ldrb	r3, [r7, #3]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	212c      	movs	r1, #44	; 0x2c
 8006d94:	fb01 f303 	mul.w	r3, r1, r3
 8006d98:	4413      	add	r3, r2
 8006d9a:	3342      	adds	r3, #66	; 0x42
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	701a      	strb	r2, [r3, #0]
      break;
 8006da0:	e055      	b.n	8006e4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006da2:	78fb      	ldrb	r3, [r7, #3]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	212c      	movs	r1, #44	; 0x2c
 8006da8:	fb01 f303 	mul.w	r3, r1, r3
 8006dac:	4413      	add	r3, r2
 8006dae:	3342      	adds	r3, #66	; 0x42
 8006db0:	2202      	movs	r2, #2
 8006db2:	701a      	strb	r2, [r3, #0]
      break;
 8006db4:	e04b      	b.n	8006e4e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8006db6:	78bb      	ldrb	r3, [r7, #2]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d11d      	bne.n	8006df8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	212c      	movs	r1, #44	; 0x2c
 8006dc2:	fb01 f303 	mul.w	r3, r1, r3
 8006dc6:	4413      	add	r3, r2
 8006dc8:	3355      	adds	r3, #85	; 0x55
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d109      	bne.n	8006de4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006dd0:	78fb      	ldrb	r3, [r7, #3]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	212c      	movs	r1, #44	; 0x2c
 8006dd6:	fb01 f303 	mul.w	r3, r1, r3
 8006dda:	4413      	add	r3, r2
 8006ddc:	3342      	adds	r3, #66	; 0x42
 8006dde:	2200      	movs	r2, #0
 8006de0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8006de2:	e034      	b.n	8006e4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	212c      	movs	r1, #44	; 0x2c
 8006dea:	fb01 f303 	mul.w	r3, r1, r3
 8006dee:	4413      	add	r3, r2
 8006df0:	3342      	adds	r3, #66	; 0x42
 8006df2:	2202      	movs	r2, #2
 8006df4:	701a      	strb	r2, [r3, #0]
      break;
 8006df6:	e02a      	b.n	8006e4e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006df8:	78fb      	ldrb	r3, [r7, #3]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	212c      	movs	r1, #44	; 0x2c
 8006dfe:	fb01 f303 	mul.w	r3, r1, r3
 8006e02:	4413      	add	r3, r2
 8006e04:	3354      	adds	r3, #84	; 0x54
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d109      	bne.n	8006e20 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006e0c:	78fb      	ldrb	r3, [r7, #3]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	212c      	movs	r1, #44	; 0x2c
 8006e12:	fb01 f303 	mul.w	r3, r1, r3
 8006e16:	4413      	add	r3, r2
 8006e18:	3342      	adds	r3, #66	; 0x42
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
      break;
 8006e1e:	e016      	b.n	8006e4e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	212c      	movs	r1, #44	; 0x2c
 8006e26:	fb01 f303 	mul.w	r3, r1, r3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	3342      	adds	r3, #66	; 0x42
 8006e2e:	2202      	movs	r2, #2
 8006e30:	701a      	strb	r2, [r3, #0]
      break;
 8006e32:	e00c      	b.n	8006e4e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006e34:	78fb      	ldrb	r3, [r7, #3]
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	212c      	movs	r1, #44	; 0x2c
 8006e3a:	fb01 f303 	mul.w	r3, r1, r3
 8006e3e:	4413      	add	r3, r2
 8006e40:	3342      	adds	r3, #66	; 0x42
 8006e42:	2200      	movs	r2, #0
 8006e44:	701a      	strb	r2, [r3, #0]
      break;
 8006e46:	e002      	b.n	8006e4e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006e48:	bf00      	nop
 8006e4a:	e000      	b.n	8006e4e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006e4c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	212c      	movs	r1, #44	; 0x2c
 8006e54:	fb01 f303 	mul.w	r3, r1, r3
 8006e58:	4413      	add	r3, r2
 8006e5a:	3344      	adds	r3, #68	; 0x44
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006e60:	78fb      	ldrb	r3, [r7, #3]
 8006e62:	8b3a      	ldrh	r2, [r7, #24]
 8006e64:	6879      	ldr	r1, [r7, #4]
 8006e66:	202c      	movs	r0, #44	; 0x2c
 8006e68:	fb00 f303 	mul.w	r3, r0, r3
 8006e6c:	440b      	add	r3, r1
 8006e6e:	334c      	adds	r3, #76	; 0x4c
 8006e70:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8006e72:	78fb      	ldrb	r3, [r7, #3]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	212c      	movs	r1, #44	; 0x2c
 8006e78:	fb01 f303 	mul.w	r3, r1, r3
 8006e7c:	4413      	add	r3, r2
 8006e7e:	3360      	adds	r3, #96	; 0x60
 8006e80:	2200      	movs	r2, #0
 8006e82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	212c      	movs	r1, #44	; 0x2c
 8006e8a:	fb01 f303 	mul.w	r3, r1, r3
 8006e8e:	4413      	add	r3, r2
 8006e90:	3350      	adds	r3, #80	; 0x50
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	212c      	movs	r1, #44	; 0x2c
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	4413      	add	r3, r2
 8006ea2:	3339      	adds	r3, #57	; 0x39
 8006ea4:	78fa      	ldrb	r2, [r7, #3]
 8006ea6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006ea8:	78fb      	ldrb	r3, [r7, #3]
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	212c      	movs	r1, #44	; 0x2c
 8006eae:	fb01 f303 	mul.w	r3, r1, r3
 8006eb2:	4413      	add	r3, r2
 8006eb4:	3361      	adds	r3, #97	; 0x61
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6818      	ldr	r0, [r3, #0]
 8006ebe:	78fb      	ldrb	r3, [r7, #3]
 8006ec0:	222c      	movs	r2, #44	; 0x2c
 8006ec2:	fb02 f303 	mul.w	r3, r2, r3
 8006ec6:	3338      	adds	r3, #56	; 0x38
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	18d1      	adds	r1, r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f005 f98a 	bl	800c1ec <USB_HC_StartXfer>
 8006ed8:	4603      	mov	r3, r0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop

08006ee4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f004 feb5 	bl	800bc6a <USB_GetMode>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	f040 80f6 	bne.w	80070f4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f004 fe99 	bl	800bc44 <USB_ReadInterrupts>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 80ec 	beq.w	80070f2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f004 fe90 	bl	800bc44 <USB_ReadInterrupts>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f2e:	d104      	bne.n	8006f3a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006f38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f004 fe80 	bl	800bc44 <USB_ReadInterrupts>
 8006f44:	4603      	mov	r3, r0
 8006f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f4e:	d104      	bne.n	8006f5a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006f58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f004 fe70 	bl	800bc44 <USB_ReadInterrupts>
 8006f64:	4603      	mov	r3, r0
 8006f66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f6e:	d104      	bne.n	8006f7a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006f78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f004 fe60 	bl	800bc44 <USB_ReadInterrupts>
 8006f84:	4603      	mov	r3, r0
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d103      	bne.n	8006f96 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2202      	movs	r2, #2
 8006f94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f004 fe52 	bl	800bc44 <USB_ReadInterrupts>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006faa:	d11c      	bne.n	8006fe6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006fb4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10f      	bne.n	8006fe6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8006fc6:	2110      	movs	r1, #16
 8006fc8:	6938      	ldr	r0, [r7, #16]
 8006fca:	f004 fd41 	bl	800ba50 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006fce:	6938      	ldr	r0, [r7, #16]
 8006fd0:	f004 fd72 	bl	800bab8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2101      	movs	r1, #1
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f004 ff48 	bl	800be70 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f006 fd4d 	bl	800da80 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f004 fe2a 	bl	800bc44 <USB_ReadInterrupts>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ff6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ffa:	d102      	bne.n	8007002 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f001 f882 	bl	8008106 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4618      	mov	r0, r3
 8007008:	f004 fe1c 	bl	800bc44 <USB_ReadInterrupts>
 800700c:	4603      	mov	r3, r0
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b08      	cmp	r3, #8
 8007014:	d106      	bne.n	8007024 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f006 fd16 	bl	800da48 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2208      	movs	r2, #8
 8007022:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f004 fe0b 	bl	800bc44 <USB_ReadInterrupts>
 800702e:	4603      	mov	r3, r0
 8007030:	f003 0310 	and.w	r3, r3, #16
 8007034:	2b10      	cmp	r3, #16
 8007036:	d101      	bne.n	800703c <HAL_HCD_IRQHandler+0x158>
 8007038:	2301      	movs	r3, #1
 800703a:	e000      	b.n	800703e <HAL_HCD_IRQHandler+0x15a>
 800703c:	2300      	movs	r3, #0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d012      	beq.n	8007068 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	699a      	ldr	r2, [r3, #24]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f022 0210 	bic.w	r2, r2, #16
 8007050:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 ff85 	bl	8007f62 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699a      	ldr	r2, [r3, #24]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0210 	orr.w	r2, r2, #16
 8007066:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4618      	mov	r0, r3
 800706e:	f004 fde9 	bl	800bc44 <USB_ReadInterrupts>
 8007072:	4603      	mov	r3, r0
 8007074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007078:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800707c:	d13a      	bne.n	80070f4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4618      	mov	r0, r3
 8007084:	f005 f9f4 	bl	800c470 <USB_HC_ReadInterrupt>
 8007088:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800708a:	2300      	movs	r3, #0
 800708c:	617b      	str	r3, [r7, #20]
 800708e:	e025      	b.n	80070dc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f003 030f 	and.w	r3, r3, #15
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	fa22 f303 	lsr.w	r3, r2, r3
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d018      	beq.n	80070d6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070ba:	d106      	bne.n	80070ca <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f88f 	bl	80071e6 <HCD_HC_IN_IRQHandler>
 80070c8:	e005      	b.n	80070d6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	4619      	mov	r1, r3
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fbdd 	bl	8007890 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	3301      	adds	r3, #1
 80070da:	617b      	str	r3, [r7, #20]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d3d4      	bcc.n	8007090 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80070ee:	615a      	str	r2, [r3, #20]
 80070f0:	e000      	b.n	80070f4 <HAL_HCD_IRQHandler+0x210>
      return;
 80070f2:	bf00      	nop
    }
  }
}
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b082      	sub	sp, #8
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8007108:	2b01      	cmp	r3, #1
 800710a:	d101      	bne.n	8007110 <HAL_HCD_Start+0x16>
 800710c:	2302      	movs	r3, #2
 800710e:	e013      	b.n	8007138 <HAL_HCD_Start+0x3e>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2101      	movs	r1, #1
 800711e:	4618      	mov	r0, r3
 8007120:	f004 fee0 	bl	800bee4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4618      	mov	r0, r3
 800712a:	f004 fc22 	bl	800b972 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3708      	adds	r7, #8
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800714e:	2b01      	cmp	r3, #1
 8007150:	d101      	bne.n	8007156 <HAL_HCD_Stop+0x16>
 8007152:	2302      	movs	r3, #2
 8007154:	e00d      	b.n	8007172 <HAL_HCD_Stop+0x32>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4618      	mov	r0, r3
 8007164:	f005 face 	bl	800c704 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800717a:	b480      	push	{r7}
 800717c:	b083      	sub	sp, #12
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	460b      	mov	r3, r1
 8007184:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8007186:	78fb      	ldrb	r3, [r7, #3]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	212c      	movs	r1, #44	; 0x2c
 800718c:	fb01 f303 	mul.w	r3, r1, r3
 8007190:	4413      	add	r3, r2
 8007192:	3360      	adds	r3, #96	; 0x60
 8007194:	781b      	ldrb	r3, [r3, #0]
}
 8007196:	4618      	mov	r0, r3
 8007198:	370c      	adds	r7, #12
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80071a2:	b480      	push	{r7}
 80071a4:	b083      	sub	sp, #12
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	460b      	mov	r3, r1
 80071ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80071ae:	78fb      	ldrb	r3, [r7, #3]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	212c      	movs	r1, #44	; 0x2c
 80071b4:	fb01 f303 	mul.w	r3, r1, r3
 80071b8:	4413      	add	r3, r2
 80071ba:	3350      	adds	r3, #80	; 0x50
 80071bc:	681b      	ldr	r3, [r3, #0]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b082      	sub	sp, #8
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f004 fed4 	bl	800bf84 <USB_GetCurrentFrame>
 80071dc:	4603      	mov	r3, r0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b086      	sub	sp, #24
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	4413      	add	r3, r2
 8007208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f003 0304 	and.w	r3, r3, #4
 8007212:	2b04      	cmp	r3, #4
 8007214:	d11a      	bne.n	800724c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	4413      	add	r3, r2
 800721e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007222:	461a      	mov	r2, r3
 8007224:	2304      	movs	r3, #4
 8007226:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	212c      	movs	r1, #44	; 0x2c
 800722e:	fb01 f303 	mul.w	r3, r1, r3
 8007232:	4413      	add	r3, r2
 8007234:	3361      	adds	r3, #97	; 0x61
 8007236:	2206      	movs	r2, #6
 8007238:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	b2d2      	uxtb	r2, r2
 8007242:	4611      	mov	r1, r2
 8007244:	4618      	mov	r0, r3
 8007246:	f005 f924 	bl	800c492 <USB_HC_Halt>
 800724a:	e0af      	b.n	80073ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	015a      	lsls	r2, r3, #5
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	4413      	add	r3, r2
 8007254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007262:	d11b      	bne.n	800729c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	4413      	add	r3, r2
 800726c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007270:	461a      	mov	r2, r3
 8007272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007276:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	212c      	movs	r1, #44	; 0x2c
 800727e:	fb01 f303 	mul.w	r3, r1, r3
 8007282:	4413      	add	r3, r2
 8007284:	3361      	adds	r3, #97	; 0x61
 8007286:	2207      	movs	r2, #7
 8007288:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	b2d2      	uxtb	r2, r2
 8007292:	4611      	mov	r1, r2
 8007294:	4618      	mov	r0, r3
 8007296:	f005 f8fc 	bl	800c492 <USB_HC_Halt>
 800729a:	e087      	b.n	80073ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 0320 	and.w	r3, r3, #32
 80072ae:	2b20      	cmp	r3, #32
 80072b0:	d109      	bne.n	80072c6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072be:	461a      	mov	r2, r3
 80072c0:	2320      	movs	r3, #32
 80072c2:	6093      	str	r3, [r2, #8]
 80072c4:	e072      	b.n	80073ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f003 0308 	and.w	r3, r3, #8
 80072d8:	2b08      	cmp	r3, #8
 80072da:	d11a      	bne.n	8007312 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e8:	461a      	mov	r2, r3
 80072ea:	2308      	movs	r3, #8
 80072ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	212c      	movs	r1, #44	; 0x2c
 80072f4:	fb01 f303 	mul.w	r3, r1, r3
 80072f8:	4413      	add	r3, r2
 80072fa:	3361      	adds	r3, #97	; 0x61
 80072fc:	2205      	movs	r2, #5
 80072fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	b2d2      	uxtb	r2, r2
 8007308:	4611      	mov	r1, r2
 800730a:	4618      	mov	r0, r3
 800730c:	f005 f8c1 	bl	800c492 <USB_HC_Halt>
 8007310:	e04c      	b.n	80073ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	4413      	add	r3, r2
 800731a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007328:	d11b      	bne.n	8007362 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	4413      	add	r3, r2
 8007332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007336:	461a      	mov	r2, r3
 8007338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800733c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	212c      	movs	r1, #44	; 0x2c
 8007344:	fb01 f303 	mul.w	r3, r1, r3
 8007348:	4413      	add	r3, r2
 800734a:	3361      	adds	r3, #97	; 0x61
 800734c:	2208      	movs	r2, #8
 800734e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	b2d2      	uxtb	r2, r2
 8007358:	4611      	mov	r1, r2
 800735a:	4618      	mov	r0, r3
 800735c:	f005 f899 	bl	800c492 <USB_HC_Halt>
 8007360:	e024      	b.n	80073ac <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	4413      	add	r3, r2
 800736a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007374:	2b80      	cmp	r3, #128	; 0x80
 8007376:	d119      	bne.n	80073ac <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	4413      	add	r3, r2
 8007380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007384:	461a      	mov	r2, r3
 8007386:	2380      	movs	r3, #128	; 0x80
 8007388:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	212c      	movs	r1, #44	; 0x2c
 8007390:	fb01 f303 	mul.w	r3, r1, r3
 8007394:	4413      	add	r3, r2
 8007396:	3361      	adds	r3, #97	; 0x61
 8007398:	2206      	movs	r2, #6
 800739a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	4611      	mov	r1, r2
 80073a6:	4618      	mov	r0, r3
 80073a8:	f005 f873 	bl	800c492 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073c2:	d112      	bne.n	80073ea <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	b2d2      	uxtb	r2, r2
 80073cc:	4611      	mov	r1, r2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f005 f85f 	bl	800c492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e0:	461a      	mov	r2, r3
 80073e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073e6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80073e8:	e24e      	b.n	8007888 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	f040 80df 	bne.w	80075c0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d019      	beq.n	800743e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	212c      	movs	r1, #44	; 0x2c
 8007410:	fb01 f303 	mul.w	r3, r1, r3
 8007414:	4413      	add	r3, r2
 8007416:	3348      	adds	r3, #72	; 0x48
 8007418:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	0159      	lsls	r1, r3, #5
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	440b      	add	r3, r1
 8007422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800742c:	1ad2      	subs	r2, r2, r3
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	202c      	movs	r0, #44	; 0x2c
 8007434:	fb00 f303 	mul.w	r3, r0, r3
 8007438:	440b      	add	r3, r1
 800743a:	3350      	adds	r3, #80	; 0x50
 800743c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	212c      	movs	r1, #44	; 0x2c
 8007444:	fb01 f303 	mul.w	r3, r1, r3
 8007448:	4413      	add	r3, r2
 800744a:	3361      	adds	r3, #97	; 0x61
 800744c:	2201      	movs	r2, #1
 800744e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	212c      	movs	r1, #44	; 0x2c
 8007456:	fb01 f303 	mul.w	r3, r1, r3
 800745a:	4413      	add	r3, r2
 800745c:	335c      	adds	r3, #92	; 0x5c
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	4413      	add	r3, r2
 800746a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746e:	461a      	mov	r2, r3
 8007470:	2301      	movs	r3, #1
 8007472:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	212c      	movs	r1, #44	; 0x2c
 800747a:	fb01 f303 	mul.w	r3, r1, r3
 800747e:	4413      	add	r3, r2
 8007480:	333f      	adds	r3, #63	; 0x3f
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d009      	beq.n	800749c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	212c      	movs	r1, #44	; 0x2c
 800748e:	fb01 f303 	mul.w	r3, r1, r3
 8007492:	4413      	add	r3, r2
 8007494:	333f      	adds	r3, #63	; 0x3f
 8007496:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007498:	2b02      	cmp	r3, #2
 800749a:	d111      	bne.n	80074c0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	4611      	mov	r1, r2
 80074a6:	4618      	mov	r0, r3
 80074a8:	f004 fff3 	bl	800c492 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074b8:	461a      	mov	r2, r3
 80074ba:	2310      	movs	r3, #16
 80074bc:	6093      	str	r3, [r2, #8]
 80074be:	e03a      	b.n	8007536 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	212c      	movs	r1, #44	; 0x2c
 80074c6:	fb01 f303 	mul.w	r3, r1, r3
 80074ca:	4413      	add	r3, r2
 80074cc:	333f      	adds	r3, #63	; 0x3f
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	d009      	beq.n	80074e8 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	212c      	movs	r1, #44	; 0x2c
 80074da:	fb01 f303 	mul.w	r3, r1, r3
 80074de:	4413      	add	r3, r2
 80074e0:	333f      	adds	r3, #63	; 0x3f
 80074e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d126      	bne.n	8007536 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	0151      	lsls	r1, r2, #5
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	440a      	add	r2, r1
 80074fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007502:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007506:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8007508:	687a      	ldr	r2, [r7, #4]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	212c      	movs	r1, #44	; 0x2c
 800750e:	fb01 f303 	mul.w	r3, r1, r3
 8007512:	4413      	add	r3, r2
 8007514:	3360      	adds	r3, #96	; 0x60
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	b2d9      	uxtb	r1, r3
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	202c      	movs	r0, #44	; 0x2c
 8007524:	fb00 f303 	mul.w	r3, r0, r3
 8007528:	4413      	add	r3, r2
 800752a:	3360      	adds	r3, #96	; 0x60
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f006 fab3 	bl	800da9c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d12b      	bne.n	8007596 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	212c      	movs	r1, #44	; 0x2c
 8007544:	fb01 f303 	mul.w	r3, r1, r3
 8007548:	4413      	add	r3, r2
 800754a:	3348      	adds	r3, #72	; 0x48
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6879      	ldr	r1, [r7, #4]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	202c      	movs	r0, #44	; 0x2c
 8007554:	fb00 f202 	mul.w	r2, r0, r2
 8007558:	440a      	add	r2, r1
 800755a:	3240      	adds	r2, #64	; 0x40
 800755c:	8812      	ldrh	r2, [r2, #0]
 800755e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 818e 	beq.w	8007888 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	212c      	movs	r1, #44	; 0x2c
 8007572:	fb01 f303 	mul.w	r3, r1, r3
 8007576:	4413      	add	r3, r2
 8007578:	3354      	adds	r3, #84	; 0x54
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	f083 0301 	eor.w	r3, r3, #1
 8007580:	b2d8      	uxtb	r0, r3
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	212c      	movs	r1, #44	; 0x2c
 8007588:	fb01 f303 	mul.w	r3, r1, r3
 800758c:	4413      	add	r3, r2
 800758e:	3354      	adds	r3, #84	; 0x54
 8007590:	4602      	mov	r2, r0
 8007592:	701a      	strb	r2, [r3, #0]
}
 8007594:	e178      	b.n	8007888 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	212c      	movs	r1, #44	; 0x2c
 800759c:	fb01 f303 	mul.w	r3, r1, r3
 80075a0:	4413      	add	r3, r2
 80075a2:	3354      	adds	r3, #84	; 0x54
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	f083 0301 	eor.w	r3, r3, #1
 80075aa:	b2d8      	uxtb	r0, r3
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	212c      	movs	r1, #44	; 0x2c
 80075b2:	fb01 f303 	mul.w	r3, r1, r3
 80075b6:	4413      	add	r3, r2
 80075b8:	3354      	adds	r3, #84	; 0x54
 80075ba:	4602      	mov	r2, r0
 80075bc:	701a      	strb	r2, [r3, #0]
}
 80075be:	e163      	b.n	8007888 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	f040 80f6 	bne.w	80077c4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	212c      	movs	r1, #44	; 0x2c
 80075de:	fb01 f303 	mul.w	r3, r1, r3
 80075e2:	4413      	add	r3, r2
 80075e4:	3361      	adds	r3, #97	; 0x61
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d109      	bne.n	8007600 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	212c      	movs	r1, #44	; 0x2c
 80075f2:	fb01 f303 	mul.w	r3, r1, r3
 80075f6:	4413      	add	r3, r2
 80075f8:	3360      	adds	r3, #96	; 0x60
 80075fa:	2201      	movs	r2, #1
 80075fc:	701a      	strb	r2, [r3, #0]
 80075fe:	e0c9      	b.n	8007794 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	212c      	movs	r1, #44	; 0x2c
 8007606:	fb01 f303 	mul.w	r3, r1, r3
 800760a:	4413      	add	r3, r2
 800760c:	3361      	adds	r3, #97	; 0x61
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b05      	cmp	r3, #5
 8007612:	d109      	bne.n	8007628 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	212c      	movs	r1, #44	; 0x2c
 800761a:	fb01 f303 	mul.w	r3, r1, r3
 800761e:	4413      	add	r3, r2
 8007620:	3360      	adds	r3, #96	; 0x60
 8007622:	2205      	movs	r2, #5
 8007624:	701a      	strb	r2, [r3, #0]
 8007626:	e0b5      	b.n	8007794 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	212c      	movs	r1, #44	; 0x2c
 800762e:	fb01 f303 	mul.w	r3, r1, r3
 8007632:	4413      	add	r3, r2
 8007634:	3361      	adds	r3, #97	; 0x61
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b06      	cmp	r3, #6
 800763a:	d009      	beq.n	8007650 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	212c      	movs	r1, #44	; 0x2c
 8007642:	fb01 f303 	mul.w	r3, r1, r3
 8007646:	4413      	add	r3, r2
 8007648:	3361      	adds	r3, #97	; 0x61
 800764a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800764c:	2b08      	cmp	r3, #8
 800764e:	d150      	bne.n	80076f2 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	212c      	movs	r1, #44	; 0x2c
 8007656:	fb01 f303 	mul.w	r3, r1, r3
 800765a:	4413      	add	r3, r2
 800765c:	335c      	adds	r3, #92	; 0x5c
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	1c5a      	adds	r2, r3, #1
 8007662:	6879      	ldr	r1, [r7, #4]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	202c      	movs	r0, #44	; 0x2c
 8007668:	fb00 f303 	mul.w	r3, r0, r3
 800766c:	440b      	add	r3, r1
 800766e:	335c      	adds	r3, #92	; 0x5c
 8007670:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	212c      	movs	r1, #44	; 0x2c
 8007678:	fb01 f303 	mul.w	r3, r1, r3
 800767c:	4413      	add	r3, r2
 800767e:	335c      	adds	r3, #92	; 0x5c
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b02      	cmp	r3, #2
 8007684:	d912      	bls.n	80076ac <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	212c      	movs	r1, #44	; 0x2c
 800768c:	fb01 f303 	mul.w	r3, r1, r3
 8007690:	4413      	add	r3, r2
 8007692:	335c      	adds	r3, #92	; 0x5c
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	212c      	movs	r1, #44	; 0x2c
 800769e:	fb01 f303 	mul.w	r3, r1, r3
 80076a2:	4413      	add	r3, r2
 80076a4:	3360      	adds	r3, #96	; 0x60
 80076a6:	2204      	movs	r2, #4
 80076a8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80076aa:	e073      	b.n	8007794 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	212c      	movs	r1, #44	; 0x2c
 80076b2:	fb01 f303 	mul.w	r3, r1, r3
 80076b6:	4413      	add	r3, r2
 80076b8:	3360      	adds	r3, #96	; 0x60
 80076ba:	2202      	movs	r2, #2
 80076bc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80076d4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80076dc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ea:	461a      	mov	r2, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80076f0:	e050      	b.n	8007794 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	212c      	movs	r1, #44	; 0x2c
 80076f8:	fb01 f303 	mul.w	r3, r1, r3
 80076fc:	4413      	add	r3, r2
 80076fe:	3361      	adds	r3, #97	; 0x61
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b03      	cmp	r3, #3
 8007704:	d122      	bne.n	800774c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	212c      	movs	r1, #44	; 0x2c
 800770c:	fb01 f303 	mul.w	r3, r1, r3
 8007710:	4413      	add	r3, r2
 8007712:	3360      	adds	r3, #96	; 0x60
 8007714:	2202      	movs	r2, #2
 8007716:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	4413      	add	r3, r2
 8007720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800772e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007736:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	015a      	lsls	r2, r3, #5
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	4413      	add	r3, r2
 8007740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007744:	461a      	mov	r2, r3
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	e023      	b.n	8007794 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	212c      	movs	r1, #44	; 0x2c
 8007752:	fb01 f303 	mul.w	r3, r1, r3
 8007756:	4413      	add	r3, r2
 8007758:	3361      	adds	r3, #97	; 0x61
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	2b07      	cmp	r3, #7
 800775e:	d119      	bne.n	8007794 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	212c      	movs	r1, #44	; 0x2c
 8007766:	fb01 f303 	mul.w	r3, r1, r3
 800776a:	4413      	add	r3, r2
 800776c:	335c      	adds	r3, #92	; 0x5c
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	6879      	ldr	r1, [r7, #4]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	202c      	movs	r0, #44	; 0x2c
 8007778:	fb00 f303 	mul.w	r3, r0, r3
 800777c:	440b      	add	r3, r1
 800777e:	335c      	adds	r3, #92	; 0x5c
 8007780:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	212c      	movs	r1, #44	; 0x2c
 8007788:	fb01 f303 	mul.w	r3, r1, r3
 800778c:	4413      	add	r3, r2
 800778e:	3360      	adds	r3, #96	; 0x60
 8007790:	2204      	movs	r2, #4
 8007792:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	4413      	add	r3, r2
 800779c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a0:	461a      	mov	r2, r3
 80077a2:	2302      	movs	r3, #2
 80077a4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	b2d9      	uxtb	r1, r3
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	202c      	movs	r0, #44	; 0x2c
 80077b0:	fb00 f303 	mul.w	r3, r0, r3
 80077b4:	4413      	add	r3, r2
 80077b6:	3360      	adds	r3, #96	; 0x60
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f006 f96d 	bl	800da9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80077c2:	e061      	b.n	8007888 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	015a      	lsls	r2, r3, #5
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 0310 	and.w	r3, r3, #16
 80077d6:	2b10      	cmp	r3, #16
 80077d8:	d156      	bne.n	8007888 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	212c      	movs	r1, #44	; 0x2c
 80077e0:	fb01 f303 	mul.w	r3, r1, r3
 80077e4:	4413      	add	r3, r2
 80077e6:	333f      	adds	r3, #63	; 0x3f
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b03      	cmp	r3, #3
 80077ec:	d111      	bne.n	8007812 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	212c      	movs	r1, #44	; 0x2c
 80077f4:	fb01 f303 	mul.w	r3, r1, r3
 80077f8:	4413      	add	r3, r2
 80077fa:	335c      	adds	r3, #92	; 0x5c
 80077fc:	2200      	movs	r2, #0
 80077fe:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	b2d2      	uxtb	r2, r2
 8007808:	4611      	mov	r1, r2
 800780a:	4618      	mov	r0, r3
 800780c:	f004 fe41 	bl	800c492 <USB_HC_Halt>
 8007810:	e031      	b.n	8007876 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007812:	687a      	ldr	r2, [r7, #4]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	212c      	movs	r1, #44	; 0x2c
 8007818:	fb01 f303 	mul.w	r3, r1, r3
 800781c:	4413      	add	r3, r2
 800781e:	333f      	adds	r3, #63	; 0x3f
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d009      	beq.n	800783a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	212c      	movs	r1, #44	; 0x2c
 800782c:	fb01 f303 	mul.w	r3, r1, r3
 8007830:	4413      	add	r3, r2
 8007832:	333f      	adds	r3, #63	; 0x3f
 8007834:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007836:	2b02      	cmp	r3, #2
 8007838:	d11d      	bne.n	8007876 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	212c      	movs	r1, #44	; 0x2c
 8007840:	fb01 f303 	mul.w	r3, r1, r3
 8007844:	4413      	add	r3, r2
 8007846:	335c      	adds	r3, #92	; 0x5c
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d110      	bne.n	8007876 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	212c      	movs	r1, #44	; 0x2c
 800785a:	fb01 f303 	mul.w	r3, r1, r3
 800785e:	4413      	add	r3, r2
 8007860:	3361      	adds	r3, #97	; 0x61
 8007862:	2203      	movs	r2, #3
 8007864:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	b2d2      	uxtb	r2, r2
 800786e:	4611      	mov	r1, r2
 8007870:	4618      	mov	r0, r3
 8007872:	f004 fe0e 	bl	800c492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	015a      	lsls	r2, r3, #5
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	4413      	add	r3, r2
 800787e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007882:	461a      	mov	r2, r3
 8007884:	2310      	movs	r3, #16
 8007886:	6093      	str	r3, [r2, #8]
}
 8007888:	bf00      	nop
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80078a6:	78fb      	ldrb	r3, [r7, #3]
 80078a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f003 0304 	and.w	r3, r3, #4
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d11a      	bne.n	80078f6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078cc:	461a      	mov	r2, r3
 80078ce:	2304      	movs	r3, #4
 80078d0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	212c      	movs	r1, #44	; 0x2c
 80078d8:	fb01 f303 	mul.w	r3, r1, r3
 80078dc:	4413      	add	r3, r2
 80078de:	3361      	adds	r3, #97	; 0x61
 80078e0:	2206      	movs	r2, #6
 80078e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	4611      	mov	r1, r2
 80078ee:	4618      	mov	r0, r3
 80078f0:	f004 fdcf 	bl	800c492 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80078f4:	e331      	b.n	8007f5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f003 0320 	and.w	r3, r3, #32
 8007908:	2b20      	cmp	r3, #32
 800790a:	d12e      	bne.n	800796a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	4413      	add	r3, r2
 8007914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007918:	461a      	mov	r2, r3
 800791a:	2320      	movs	r3, #32
 800791c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	212c      	movs	r1, #44	; 0x2c
 8007924:	fb01 f303 	mul.w	r3, r1, r3
 8007928:	4413      	add	r3, r2
 800792a:	333d      	adds	r3, #61	; 0x3d
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b01      	cmp	r3, #1
 8007930:	f040 8313 	bne.w	8007f5a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	212c      	movs	r1, #44	; 0x2c
 800793a:	fb01 f303 	mul.w	r3, r1, r3
 800793e:	4413      	add	r3, r2
 8007940:	333d      	adds	r3, #61	; 0x3d
 8007942:	2200      	movs	r2, #0
 8007944:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	212c      	movs	r1, #44	; 0x2c
 800794c:	fb01 f303 	mul.w	r3, r1, r3
 8007950:	4413      	add	r3, r2
 8007952:	3360      	adds	r3, #96	; 0x60
 8007954:	2202      	movs	r2, #2
 8007956:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	b2d2      	uxtb	r2, r2
 8007960:	4611      	mov	r1, r2
 8007962:	4618      	mov	r0, r3
 8007964:	f004 fd95 	bl	800c492 <USB_HC_Halt>
}
 8007968:	e2f7      	b.n	8007f5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	4413      	add	r3, r2
 8007972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800797c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007980:	d112      	bne.n	80079a8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	4413      	add	r3, r2
 800798a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800798e:	461a      	mov	r2, r3
 8007990:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007994:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	b2d2      	uxtb	r2, r2
 800799e:	4611      	mov	r1, r2
 80079a0:	4618      	mov	r0, r3
 80079a2:	f004 fd76 	bl	800c492 <USB_HC_Halt>
}
 80079a6:	e2d8      	b.n	8007f5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d140      	bne.n	8007a40 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	212c      	movs	r1, #44	; 0x2c
 80079c4:	fb01 f303 	mul.w	r3, r1, r3
 80079c8:	4413      	add	r3, r2
 80079ca:	335c      	adds	r3, #92	; 0x5c
 80079cc:	2200      	movs	r2, #0
 80079ce:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d111      	bne.n	8007a0a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	212c      	movs	r1, #44	; 0x2c
 80079ec:	fb01 f303 	mul.w	r3, r1, r3
 80079f0:	4413      	add	r3, r2
 80079f2:	333d      	adds	r3, #61	; 0x3d
 80079f4:	2201      	movs	r2, #1
 80079f6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	015a      	lsls	r2, r3, #5
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	4413      	add	r3, r2
 8007a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a04:	461a      	mov	r2, r3
 8007a06:	2340      	movs	r3, #64	; 0x40
 8007a08:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a16:	461a      	mov	r2, r3
 8007a18:	2301      	movs	r3, #1
 8007a1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	212c      	movs	r1, #44	; 0x2c
 8007a22:	fb01 f303 	mul.w	r3, r1, r3
 8007a26:	4413      	add	r3, r2
 8007a28:	3361      	adds	r3, #97	; 0x61
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	697a      	ldr	r2, [r7, #20]
 8007a34:	b2d2      	uxtb	r2, r2
 8007a36:	4611      	mov	r1, r2
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f004 fd2a 	bl	800c492 <USB_HC_Halt>
}
 8007a3e:	e28c      	b.n	8007f5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a52:	2b40      	cmp	r3, #64	; 0x40
 8007a54:	d12c      	bne.n	8007ab0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	212c      	movs	r1, #44	; 0x2c
 8007a5c:	fb01 f303 	mul.w	r3, r1, r3
 8007a60:	4413      	add	r3, r2
 8007a62:	3361      	adds	r3, #97	; 0x61
 8007a64:	2204      	movs	r2, #4
 8007a66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	212c      	movs	r1, #44	; 0x2c
 8007a6e:	fb01 f303 	mul.w	r3, r1, r3
 8007a72:	4413      	add	r3, r2
 8007a74:	333d      	adds	r3, #61	; 0x3d
 8007a76:	2201      	movs	r2, #1
 8007a78:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	212c      	movs	r1, #44	; 0x2c
 8007a80:	fb01 f303 	mul.w	r3, r1, r3
 8007a84:	4413      	add	r3, r2
 8007a86:	335c      	adds	r3, #92	; 0x5c
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	b2d2      	uxtb	r2, r2
 8007a94:	4611      	mov	r1, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f004 fcfb 	bl	800c492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	2340      	movs	r3, #64	; 0x40
 8007aac:	6093      	str	r3, [r2, #8]
}
 8007aae:	e254      	b.n	8007f5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	015a      	lsls	r2, r3, #5
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	4413      	add	r3, r2
 8007ab8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f003 0308 	and.w	r3, r3, #8
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d11a      	bne.n	8007afc <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	2308      	movs	r3, #8
 8007ad6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	212c      	movs	r1, #44	; 0x2c
 8007ade:	fb01 f303 	mul.w	r3, r1, r3
 8007ae2:	4413      	add	r3, r2
 8007ae4:	3361      	adds	r3, #97	; 0x61
 8007ae6:	2205      	movs	r2, #5
 8007ae8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	b2d2      	uxtb	r2, r2
 8007af2:	4611      	mov	r1, r2
 8007af4:	4618      	mov	r0, r3
 8007af6:	f004 fccc 	bl	800c492 <USB_HC_Halt>
}
 8007afa:	e22e      	b.n	8007f5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f003 0310 	and.w	r3, r3, #16
 8007b0e:	2b10      	cmp	r3, #16
 8007b10:	d140      	bne.n	8007b94 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	212c      	movs	r1, #44	; 0x2c
 8007b18:	fb01 f303 	mul.w	r3, r1, r3
 8007b1c:	4413      	add	r3, r2
 8007b1e:	335c      	adds	r3, #92	; 0x5c
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	212c      	movs	r1, #44	; 0x2c
 8007b2a:	fb01 f303 	mul.w	r3, r1, r3
 8007b2e:	4413      	add	r3, r2
 8007b30:	3361      	adds	r3, #97	; 0x61
 8007b32:	2203      	movs	r2, #3
 8007b34:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	212c      	movs	r1, #44	; 0x2c
 8007b3c:	fb01 f303 	mul.w	r3, r1, r3
 8007b40:	4413      	add	r3, r2
 8007b42:	333d      	adds	r3, #61	; 0x3d
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d112      	bne.n	8007b70 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	212c      	movs	r1, #44	; 0x2c
 8007b50:	fb01 f303 	mul.w	r3, r1, r3
 8007b54:	4413      	add	r3, r2
 8007b56:	333c      	adds	r3, #60	; 0x3c
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d108      	bne.n	8007b70 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	212c      	movs	r1, #44	; 0x2c
 8007b64:	fb01 f303 	mul.w	r3, r1, r3
 8007b68:	4413      	add	r3, r2
 8007b6a:	333d      	adds	r3, #61	; 0x3d
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	4611      	mov	r1, r2
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f004 fc89 	bl	800c492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	69bb      	ldr	r3, [r7, #24]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	2310      	movs	r3, #16
 8007b90:	6093      	str	r3, [r2, #8]
}
 8007b92:	e1e2      	b.n	8007f5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba6:	2b80      	cmp	r3, #128	; 0x80
 8007ba8:	d164      	bne.n	8007c74 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d111      	bne.n	8007bd6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	212c      	movs	r1, #44	; 0x2c
 8007bb8:	fb01 f303 	mul.w	r3, r1, r3
 8007bbc:	4413      	add	r3, r2
 8007bbe:	3361      	adds	r3, #97	; 0x61
 8007bc0:	2206      	movs	r2, #6
 8007bc2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	b2d2      	uxtb	r2, r2
 8007bcc:	4611      	mov	r1, r2
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f004 fc5f 	bl	800c492 <USB_HC_Halt>
 8007bd4:	e044      	b.n	8007c60 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	212c      	movs	r1, #44	; 0x2c
 8007bdc:	fb01 f303 	mul.w	r3, r1, r3
 8007be0:	4413      	add	r3, r2
 8007be2:	335c      	adds	r3, #92	; 0x5c
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	6879      	ldr	r1, [r7, #4]
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	202c      	movs	r0, #44	; 0x2c
 8007bee:	fb00 f303 	mul.w	r3, r0, r3
 8007bf2:	440b      	add	r3, r1
 8007bf4:	335c      	adds	r3, #92	; 0x5c
 8007bf6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	212c      	movs	r1, #44	; 0x2c
 8007bfe:	fb01 f303 	mul.w	r3, r1, r3
 8007c02:	4413      	add	r3, r2
 8007c04:	335c      	adds	r3, #92	; 0x5c
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d920      	bls.n	8007c4e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	212c      	movs	r1, #44	; 0x2c
 8007c12:	fb01 f303 	mul.w	r3, r1, r3
 8007c16:	4413      	add	r3, r2
 8007c18:	335c      	adds	r3, #92	; 0x5c
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	212c      	movs	r1, #44	; 0x2c
 8007c24:	fb01 f303 	mul.w	r3, r1, r3
 8007c28:	4413      	add	r3, r2
 8007c2a:	3360      	adds	r3, #96	; 0x60
 8007c2c:	2204      	movs	r2, #4
 8007c2e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	b2d9      	uxtb	r1, r3
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	202c      	movs	r0, #44	; 0x2c
 8007c3a:	fb00 f303 	mul.w	r3, r0, r3
 8007c3e:	4413      	add	r3, r2
 8007c40:	3360      	adds	r3, #96	; 0x60
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	461a      	mov	r2, r3
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f005 ff28 	bl	800da9c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007c4c:	e008      	b.n	8007c60 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	212c      	movs	r1, #44	; 0x2c
 8007c54:	fb01 f303 	mul.w	r3, r1, r3
 8007c58:	4413      	add	r3, r2
 8007c5a:	3360      	adds	r3, #96	; 0x60
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c6c:	461a      	mov	r2, r3
 8007c6e:	2380      	movs	r3, #128	; 0x80
 8007c70:	6093      	str	r3, [r2, #8]
}
 8007c72:	e172      	b.n	8007f5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c8a:	d11b      	bne.n	8007cc4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	212c      	movs	r1, #44	; 0x2c
 8007c92:	fb01 f303 	mul.w	r3, r1, r3
 8007c96:	4413      	add	r3, r2
 8007c98:	3361      	adds	r3, #97	; 0x61
 8007c9a:	2208      	movs	r2, #8
 8007c9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	b2d2      	uxtb	r2, r2
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f004 fbf2 	bl	800c492 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cc0:	6093      	str	r3, [r2, #8]
}
 8007cc2:	e14a      	b.n	8007f5a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	015a      	lsls	r2, r3, #5
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f003 0302 	and.w	r3, r3, #2
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	f040 813f 	bne.w	8007f5a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	212c      	movs	r1, #44	; 0x2c
 8007ce2:	fb01 f303 	mul.w	r3, r1, r3
 8007ce6:	4413      	add	r3, r2
 8007ce8:	3361      	adds	r3, #97	; 0x61
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d17d      	bne.n	8007dec <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	212c      	movs	r1, #44	; 0x2c
 8007cf6:	fb01 f303 	mul.w	r3, r1, r3
 8007cfa:	4413      	add	r3, r2
 8007cfc:	3360      	adds	r3, #96	; 0x60
 8007cfe:	2201      	movs	r2, #1
 8007d00:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	212c      	movs	r1, #44	; 0x2c
 8007d08:	fb01 f303 	mul.w	r3, r1, r3
 8007d0c:	4413      	add	r3, r2
 8007d0e:	333f      	adds	r3, #63	; 0x3f
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	2b02      	cmp	r3, #2
 8007d14:	d00a      	beq.n	8007d2c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	212c      	movs	r1, #44	; 0x2c
 8007d1c:	fb01 f303 	mul.w	r3, r1, r3
 8007d20:	4413      	add	r3, r2
 8007d22:	333f      	adds	r3, #63	; 0x3f
 8007d24:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	f040 8100 	bne.w	8007f2c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d113      	bne.n	8007d5c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	212c      	movs	r1, #44	; 0x2c
 8007d3a:	fb01 f303 	mul.w	r3, r1, r3
 8007d3e:	4413      	add	r3, r2
 8007d40:	3355      	adds	r3, #85	; 0x55
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	f083 0301 	eor.w	r3, r3, #1
 8007d48:	b2d8      	uxtb	r0, r3
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	212c      	movs	r1, #44	; 0x2c
 8007d50:	fb01 f303 	mul.w	r3, r1, r3
 8007d54:	4413      	add	r3, r2
 8007d56:	3355      	adds	r3, #85	; 0x55
 8007d58:	4602      	mov	r2, r0
 8007d5a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691b      	ldr	r3, [r3, #16]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	f040 80e3 	bne.w	8007f2c <HCD_HC_OUT_IRQHandler+0x69c>
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	212c      	movs	r1, #44	; 0x2c
 8007d6c:	fb01 f303 	mul.w	r3, r1, r3
 8007d70:	4413      	add	r3, r2
 8007d72:	334c      	adds	r3, #76	; 0x4c
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 80d8 	beq.w	8007f2c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	212c      	movs	r1, #44	; 0x2c
 8007d82:	fb01 f303 	mul.w	r3, r1, r3
 8007d86:	4413      	add	r3, r2
 8007d88:	334c      	adds	r3, #76	; 0x4c
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6879      	ldr	r1, [r7, #4]
 8007d8e:	697a      	ldr	r2, [r7, #20]
 8007d90:	202c      	movs	r0, #44	; 0x2c
 8007d92:	fb00 f202 	mul.w	r2, r0, r2
 8007d96:	440a      	add	r2, r1
 8007d98:	3240      	adds	r2, #64	; 0x40
 8007d9a:	8812      	ldrh	r2, [r2, #0]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	697a      	ldr	r2, [r7, #20]
 8007da4:	202c      	movs	r0, #44	; 0x2c
 8007da6:	fb00 f202 	mul.w	r2, r0, r2
 8007daa:	440a      	add	r2, r1
 8007dac:	3240      	adds	r2, #64	; 0x40
 8007dae:	8812      	ldrh	r2, [r2, #0]
 8007db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f003 0301 	and.w	r3, r3, #1
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 80b5 	beq.w	8007f2c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	212c      	movs	r1, #44	; 0x2c
 8007dc8:	fb01 f303 	mul.w	r3, r1, r3
 8007dcc:	4413      	add	r3, r2
 8007dce:	3355      	adds	r3, #85	; 0x55
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	f083 0301 	eor.w	r3, r3, #1
 8007dd6:	b2d8      	uxtb	r0, r3
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	212c      	movs	r1, #44	; 0x2c
 8007dde:	fb01 f303 	mul.w	r3, r1, r3
 8007de2:	4413      	add	r3, r2
 8007de4:	3355      	adds	r3, #85	; 0x55
 8007de6:	4602      	mov	r2, r0
 8007de8:	701a      	strb	r2, [r3, #0]
 8007dea:	e09f      	b.n	8007f2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	212c      	movs	r1, #44	; 0x2c
 8007df2:	fb01 f303 	mul.w	r3, r1, r3
 8007df6:	4413      	add	r3, r2
 8007df8:	3361      	adds	r3, #97	; 0x61
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d109      	bne.n	8007e14 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	212c      	movs	r1, #44	; 0x2c
 8007e06:	fb01 f303 	mul.w	r3, r1, r3
 8007e0a:	4413      	add	r3, r2
 8007e0c:	3360      	adds	r3, #96	; 0x60
 8007e0e:	2202      	movs	r2, #2
 8007e10:	701a      	strb	r2, [r3, #0]
 8007e12:	e08b      	b.n	8007f2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	697b      	ldr	r3, [r7, #20]
 8007e18:	212c      	movs	r1, #44	; 0x2c
 8007e1a:	fb01 f303 	mul.w	r3, r1, r3
 8007e1e:	4413      	add	r3, r2
 8007e20:	3361      	adds	r3, #97	; 0x61
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	2b04      	cmp	r3, #4
 8007e26:	d109      	bne.n	8007e3c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	212c      	movs	r1, #44	; 0x2c
 8007e2e:	fb01 f303 	mul.w	r3, r1, r3
 8007e32:	4413      	add	r3, r2
 8007e34:	3360      	adds	r3, #96	; 0x60
 8007e36:	2202      	movs	r2, #2
 8007e38:	701a      	strb	r2, [r3, #0]
 8007e3a:	e077      	b.n	8007f2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	212c      	movs	r1, #44	; 0x2c
 8007e42:	fb01 f303 	mul.w	r3, r1, r3
 8007e46:	4413      	add	r3, r2
 8007e48:	3361      	adds	r3, #97	; 0x61
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b05      	cmp	r3, #5
 8007e4e:	d109      	bne.n	8007e64 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	212c      	movs	r1, #44	; 0x2c
 8007e56:	fb01 f303 	mul.w	r3, r1, r3
 8007e5a:	4413      	add	r3, r2
 8007e5c:	3360      	adds	r3, #96	; 0x60
 8007e5e:	2205      	movs	r2, #5
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	e063      	b.n	8007f2c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	212c      	movs	r1, #44	; 0x2c
 8007e6a:	fb01 f303 	mul.w	r3, r1, r3
 8007e6e:	4413      	add	r3, r2
 8007e70:	3361      	adds	r3, #97	; 0x61
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2b06      	cmp	r3, #6
 8007e76:	d009      	beq.n	8007e8c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	212c      	movs	r1, #44	; 0x2c
 8007e7e:	fb01 f303 	mul.w	r3, r1, r3
 8007e82:	4413      	add	r3, r2
 8007e84:	3361      	adds	r3, #97	; 0x61
 8007e86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	d14f      	bne.n	8007f2c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	212c      	movs	r1, #44	; 0x2c
 8007e92:	fb01 f303 	mul.w	r3, r1, r3
 8007e96:	4413      	add	r3, r2
 8007e98:	335c      	adds	r3, #92	; 0x5c
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	6879      	ldr	r1, [r7, #4]
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	202c      	movs	r0, #44	; 0x2c
 8007ea4:	fb00 f303 	mul.w	r3, r0, r3
 8007ea8:	440b      	add	r3, r1
 8007eaa:	335c      	adds	r3, #92	; 0x5c
 8007eac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	212c      	movs	r1, #44	; 0x2c
 8007eb4:	fb01 f303 	mul.w	r3, r1, r3
 8007eb8:	4413      	add	r3, r2
 8007eba:	335c      	adds	r3, #92	; 0x5c
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d912      	bls.n	8007ee8 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	212c      	movs	r1, #44	; 0x2c
 8007ec8:	fb01 f303 	mul.w	r3, r1, r3
 8007ecc:	4413      	add	r3, r2
 8007ece:	335c      	adds	r3, #92	; 0x5c
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	212c      	movs	r1, #44	; 0x2c
 8007eda:	fb01 f303 	mul.w	r3, r1, r3
 8007ede:	4413      	add	r3, r2
 8007ee0:	3360      	adds	r3, #96	; 0x60
 8007ee2:	2204      	movs	r2, #4
 8007ee4:	701a      	strb	r2, [r3, #0]
 8007ee6:	e021      	b.n	8007f2c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	212c      	movs	r1, #44	; 0x2c
 8007eee:	fb01 f303 	mul.w	r3, r1, r3
 8007ef2:	4413      	add	r3, r2
 8007ef4:	3360      	adds	r3, #96	; 0x60
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007f10:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007f18:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	015a      	lsls	r2, r3, #5
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	4413      	add	r3, r2
 8007f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f26:	461a      	mov	r2, r3
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f38:	461a      	mov	r2, r3
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	b2d9      	uxtb	r1, r3
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	202c      	movs	r0, #44	; 0x2c
 8007f48:	fb00 f303 	mul.w	r3, r0, r3
 8007f4c:	4413      	add	r3, r2
 8007f4e:	3360      	adds	r3, #96	; 0x60
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f005 fda1 	bl	800da9c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8007f5a:	bf00      	nop
 8007f5c:	3720      	adds	r7, #32
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b08a      	sub	sp, #40	; 0x28
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	f003 030f 	and.w	r3, r3, #15
 8007f82:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	0c5b      	lsrs	r3, r3, #17
 8007f88:	f003 030f 	and.w	r3, r3, #15
 8007f8c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	091b      	lsrs	r3, r3, #4
 8007f92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f96:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d004      	beq.n	8007fa8 <HCD_RXQLVL_IRQHandler+0x46>
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2b05      	cmp	r3, #5
 8007fa2:	f000 80a9 	beq.w	80080f8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007fa6:	e0aa      	b.n	80080fe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 80a6 	beq.w	80080fc <HCD_RXQLVL_IRQHandler+0x19a>
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	212c      	movs	r1, #44	; 0x2c
 8007fb6:	fb01 f303 	mul.w	r3, r1, r3
 8007fba:	4413      	add	r3, r2
 8007fbc:	3344      	adds	r3, #68	; 0x44
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 809b 	beq.w	80080fc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	212c      	movs	r1, #44	; 0x2c
 8007fcc:	fb01 f303 	mul.w	r3, r1, r3
 8007fd0:	4413      	add	r3, r2
 8007fd2:	3350      	adds	r3, #80	; 0x50
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	441a      	add	r2, r3
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	202c      	movs	r0, #44	; 0x2c
 8007fe0:	fb00 f303 	mul.w	r3, r0, r3
 8007fe4:	440b      	add	r3, r1
 8007fe6:	334c      	adds	r3, #76	; 0x4c
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d87a      	bhi.n	80080e4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	212c      	movs	r1, #44	; 0x2c
 8007ff8:	fb01 f303 	mul.w	r3, r1, r3
 8007ffc:	4413      	add	r3, r2
 8007ffe:	3344      	adds	r3, #68	; 0x44
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	b292      	uxth	r2, r2
 8008006:	4619      	mov	r1, r3
 8008008:	f003 fdc4 	bl	800bb94 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	212c      	movs	r1, #44	; 0x2c
 8008012:	fb01 f303 	mul.w	r3, r1, r3
 8008016:	4413      	add	r3, r2
 8008018:	3344      	adds	r3, #68	; 0x44
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	441a      	add	r2, r3
 8008020:	6879      	ldr	r1, [r7, #4]
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	202c      	movs	r0, #44	; 0x2c
 8008026:	fb00 f303 	mul.w	r3, r0, r3
 800802a:	440b      	add	r3, r1
 800802c:	3344      	adds	r3, #68	; 0x44
 800802e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	212c      	movs	r1, #44	; 0x2c
 8008036:	fb01 f303 	mul.w	r3, r1, r3
 800803a:	4413      	add	r3, r2
 800803c:	3350      	adds	r3, #80	; 0x50
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	441a      	add	r2, r3
 8008044:	6879      	ldr	r1, [r7, #4]
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	202c      	movs	r0, #44	; 0x2c
 800804a:	fb00 f303 	mul.w	r3, r0, r3
 800804e:	440b      	add	r3, r1
 8008050:	3350      	adds	r3, #80	; 0x50
 8008052:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	015a      	lsls	r2, r3, #5
 8008058:	6a3b      	ldr	r3, [r7, #32]
 800805a:	4413      	add	r3, r2
 800805c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	0cdb      	lsrs	r3, r3, #19
 8008064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008068:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	212c      	movs	r1, #44	; 0x2c
 8008070:	fb01 f303 	mul.w	r3, r1, r3
 8008074:	4413      	add	r3, r2
 8008076:	3340      	adds	r3, #64	; 0x40
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	4293      	cmp	r3, r2
 8008080:	d13c      	bne.n	80080fc <HCD_RXQLVL_IRQHandler+0x19a>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d039      	beq.n	80080fc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008088:	69bb      	ldr	r3, [r7, #24]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	4413      	add	r3, r2
 8008090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800809e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	015a      	lsls	r2, r3, #5
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	4413      	add	r3, r2
 80080b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b4:	461a      	mov	r2, r3
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	212c      	movs	r1, #44	; 0x2c
 80080c0:	fb01 f303 	mul.w	r3, r1, r3
 80080c4:	4413      	add	r3, r2
 80080c6:	3354      	adds	r3, #84	; 0x54
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	f083 0301 	eor.w	r3, r3, #1
 80080ce:	b2d8      	uxtb	r0, r3
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	212c      	movs	r1, #44	; 0x2c
 80080d6:	fb01 f303 	mul.w	r3, r1, r3
 80080da:	4413      	add	r3, r2
 80080dc:	3354      	adds	r3, #84	; 0x54
 80080de:	4602      	mov	r2, r0
 80080e0:	701a      	strb	r2, [r3, #0]
      break;
 80080e2:	e00b      	b.n	80080fc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	212c      	movs	r1, #44	; 0x2c
 80080ea:	fb01 f303 	mul.w	r3, r1, r3
 80080ee:	4413      	add	r3, r2
 80080f0:	3360      	adds	r3, #96	; 0x60
 80080f2:	2204      	movs	r2, #4
 80080f4:	701a      	strb	r2, [r3, #0]
      break;
 80080f6:	e001      	b.n	80080fc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80080f8:	bf00      	nop
 80080fa:	e000      	b.n	80080fe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80080fc:	bf00      	nop
  }
}
 80080fe:	bf00      	nop
 8008100:	3728      	adds	r7, #40	; 0x28
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b086      	sub	sp, #24
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008132:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f003 0302 	and.w	r3, r3, #2
 800813a:	2b02      	cmp	r3, #2
 800813c:	d10b      	bne.n	8008156 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	2b01      	cmp	r3, #1
 8008146:	d102      	bne.n	800814e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f005 fc8b 	bl	800da64 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	f043 0302 	orr.w	r3, r3, #2
 8008154:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f003 0308 	and.w	r3, r3, #8
 800815c:	2b08      	cmp	r3, #8
 800815e:	d132      	bne.n	80081c6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f043 0308 	orr.w	r3, r3, #8
 8008166:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f003 0304 	and.w	r3, r3, #4
 800816e:	2b04      	cmp	r3, #4
 8008170:	d126      	bne.n	80081c0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d113      	bne.n	80081a2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8008180:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008184:	d106      	bne.n	8008194 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2102      	movs	r1, #2
 800818c:	4618      	mov	r0, r3
 800818e:	f003 fe6f 	bl	800be70 <USB_InitFSLSPClkSel>
 8008192:	e011      	b.n	80081b8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2101      	movs	r1, #1
 800819a:	4618      	mov	r0, r3
 800819c:	f003 fe68 	bl	800be70 <USB_InitFSLSPClkSel>
 80081a0:	e00a      	b.n	80081b8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d106      	bne.n	80081b8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081b0:	461a      	mov	r2, r3
 80081b2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80081b6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f005 fc7d 	bl	800dab8 <HAL_HCD_PortEnabled_Callback>
 80081be:	e002      	b.n	80081c6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f005 fc87 	bl	800dad4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f003 0320 	and.w	r3, r3, #32
 80081cc:	2b20      	cmp	r3, #32
 80081ce:	d103      	bne.n	80081d8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f043 0320 	orr.w	r3, r3, #32
 80081d6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80081de:	461a      	mov	r2, r3
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	6013      	str	r3, [r2, #0]
}
 80081e4:	bf00      	nop
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e12b      	b.n	8008456 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d106      	bne.n	8008218 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7fa fb90 	bl	8002938 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2224      	movs	r2, #36	; 0x24
 800821c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0201 	bic.w	r2, r2, #1
 800822e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800823e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800824e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008250:	f001 f9de 	bl	8009610 <HAL_RCC_GetPCLK1Freq>
 8008254:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	4a81      	ldr	r2, [pc, #516]	; (8008460 <HAL_I2C_Init+0x274>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d807      	bhi.n	8008270 <HAL_I2C_Init+0x84>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4a80      	ldr	r2, [pc, #512]	; (8008464 <HAL_I2C_Init+0x278>)
 8008264:	4293      	cmp	r3, r2
 8008266:	bf94      	ite	ls
 8008268:	2301      	movls	r3, #1
 800826a:	2300      	movhi	r3, #0
 800826c:	b2db      	uxtb	r3, r3
 800826e:	e006      	b.n	800827e <HAL_I2C_Init+0x92>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4a7d      	ldr	r2, [pc, #500]	; (8008468 <HAL_I2C_Init+0x27c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	bf94      	ite	ls
 8008278:	2301      	movls	r3, #1
 800827a:	2300      	movhi	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e0e7      	b.n	8008456 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4a78      	ldr	r2, [pc, #480]	; (800846c <HAL_I2C_Init+0x280>)
 800828a:	fba2 2303 	umull	r2, r3, r2, r3
 800828e:	0c9b      	lsrs	r3, r3, #18
 8008290:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	430a      	orrs	r2, r1
 80082a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6a1b      	ldr	r3, [r3, #32]
 80082ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	4a6a      	ldr	r2, [pc, #424]	; (8008460 <HAL_I2C_Init+0x274>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d802      	bhi.n	80082c0 <HAL_I2C_Init+0xd4>
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	3301      	adds	r3, #1
 80082be:	e009      	b.n	80082d4 <HAL_I2C_Init+0xe8>
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80082c6:	fb02 f303 	mul.w	r3, r2, r3
 80082ca:	4a69      	ldr	r2, [pc, #420]	; (8008470 <HAL_I2C_Init+0x284>)
 80082cc:	fba2 2303 	umull	r2, r3, r2, r3
 80082d0:	099b      	lsrs	r3, r3, #6
 80082d2:	3301      	adds	r3, #1
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	6812      	ldr	r2, [r2, #0]
 80082d8:	430b      	orrs	r3, r1
 80082da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	69db      	ldr	r3, [r3, #28]
 80082e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80082e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	495c      	ldr	r1, [pc, #368]	; (8008460 <HAL_I2C_Init+0x274>)
 80082f0:	428b      	cmp	r3, r1
 80082f2:	d819      	bhi.n	8008328 <HAL_I2C_Init+0x13c>
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	1e59      	subs	r1, r3, #1
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8008302:	1c59      	adds	r1, r3, #1
 8008304:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008308:	400b      	ands	r3, r1
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00a      	beq.n	8008324 <HAL_I2C_Init+0x138>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	1e59      	subs	r1, r3, #1
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	fbb1 f3f3 	udiv	r3, r1, r3
 800831c:	3301      	adds	r3, #1
 800831e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008322:	e051      	b.n	80083c8 <HAL_I2C_Init+0x1dc>
 8008324:	2304      	movs	r3, #4
 8008326:	e04f      	b.n	80083c8 <HAL_I2C_Init+0x1dc>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d111      	bne.n	8008354 <HAL_I2C_Init+0x168>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	1e58      	subs	r0, r3, #1
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6859      	ldr	r1, [r3, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	005b      	lsls	r3, r3, #1
 800833c:	440b      	add	r3, r1
 800833e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008342:	3301      	adds	r3, #1
 8008344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008348:	2b00      	cmp	r3, #0
 800834a:	bf0c      	ite	eq
 800834c:	2301      	moveq	r3, #1
 800834e:	2300      	movne	r3, #0
 8008350:	b2db      	uxtb	r3, r3
 8008352:	e012      	b.n	800837a <HAL_I2C_Init+0x18e>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	1e58      	subs	r0, r3, #1
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6859      	ldr	r1, [r3, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	440b      	add	r3, r1
 8008362:	0099      	lsls	r1, r3, #2
 8008364:	440b      	add	r3, r1
 8008366:	fbb0 f3f3 	udiv	r3, r0, r3
 800836a:	3301      	adds	r3, #1
 800836c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008370:	2b00      	cmp	r3, #0
 8008372:	bf0c      	ite	eq
 8008374:	2301      	moveq	r3, #1
 8008376:	2300      	movne	r3, #0
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <HAL_I2C_Init+0x196>
 800837e:	2301      	movs	r3, #1
 8008380:	e022      	b.n	80083c8 <HAL_I2C_Init+0x1dc>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10e      	bne.n	80083a8 <HAL_I2C_Init+0x1bc>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	1e58      	subs	r0, r3, #1
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6859      	ldr	r1, [r3, #4]
 8008392:	460b      	mov	r3, r1
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	440b      	add	r3, r1
 8008398:	fbb0 f3f3 	udiv	r3, r0, r3
 800839c:	3301      	adds	r3, #1
 800839e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083a6:	e00f      	b.n	80083c8 <HAL_I2C_Init+0x1dc>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	1e58      	subs	r0, r3, #1
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6859      	ldr	r1, [r3, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	440b      	add	r3, r1
 80083b6:	0099      	lsls	r1, r3, #2
 80083b8:	440b      	add	r3, r1
 80083ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80083be:	3301      	adds	r3, #1
 80083c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083c8:	6879      	ldr	r1, [r7, #4]
 80083ca:	6809      	ldr	r1, [r1, #0]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	69da      	ldr	r2, [r3, #28]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	431a      	orrs	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80083f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	6911      	ldr	r1, [r2, #16]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	68d2      	ldr	r2, [r2, #12]
 8008402:	4311      	orrs	r1, r2
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	6812      	ldr	r2, [r2, #0]
 8008408:	430b      	orrs	r3, r1
 800840a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	68db      	ldr	r3, [r3, #12]
 8008412:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	695a      	ldr	r2, [r3, #20]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	431a      	orrs	r2, r3
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	430a      	orrs	r2, r1
 8008426:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0201 	orr.w	r2, r2, #1
 8008436:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2220      	movs	r2, #32
 8008442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	000186a0 	.word	0x000186a0
 8008464:	001e847f 	.word	0x001e847f
 8008468:	003d08ff 	.word	0x003d08ff
 800846c:	431bde83 	.word	0x431bde83
 8008470:	10624dd3 	.word	0x10624dd3

08008474 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
 800847c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b20      	cmp	r3, #32
 8008488:	d129      	bne.n	80084de <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2224      	movs	r2, #36	; 0x24
 800848e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 0201 	bic.w	r2, r2, #1
 80084a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f022 0210 	bic.w	r2, r2, #16
 80084b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	683a      	ldr	r2, [r7, #0]
 80084be:	430a      	orrs	r2, r1
 80084c0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f042 0201 	orr.w	r2, r2, #1
 80084d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2220      	movs	r2, #32
 80084d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	e000      	b.n	80084e0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80084de:	2302      	movs	r3, #2
  }
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80084f6:	2300      	movs	r3, #0
 80084f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b20      	cmp	r3, #32
 8008504:	d12a      	bne.n	800855c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2224      	movs	r2, #36	; 0x24
 800850a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 0201 	bic.w	r2, r2, #1
 800851c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008524:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8008526:	89fb      	ldrh	r3, [r7, #14]
 8008528:	f023 030f 	bic.w	r3, r3, #15
 800852c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	b29a      	uxth	r2, r3
 8008532:	89fb      	ldrh	r3, [r7, #14]
 8008534:	4313      	orrs	r3, r2
 8008536:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	89fa      	ldrh	r2, [r7, #14]
 800853e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f042 0201 	orr.w	r2, r2, #1
 800854e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2220      	movs	r2, #32
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	e000      	b.n	800855e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800855c:	2302      	movs	r3, #2
  }
}
 800855e:	4618      	mov	r0, r3
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
	...

0800856c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800857a:	2301      	movs	r3, #1
 800857c:	e0bf      	b.n	80086fe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d106      	bne.n	8008598 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7fa fa3a 	bl	8002a0c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2202      	movs	r2, #2
 800859c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	699a      	ldr	r2, [r3, #24]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80085ae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6999      	ldr	r1, [r3, #24]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085c4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6899      	ldr	r1, [r3, #8]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	4b4a      	ldr	r3, [pc, #296]	; (8008708 <HAL_LTDC_Init+0x19c>)
 80085e0:	400b      	ands	r3, r1
 80085e2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	695b      	ldr	r3, [r3, #20]
 80085e8:	041b      	lsls	r3, r3, #16
 80085ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6899      	ldr	r1, [r3, #8]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	699a      	ldr	r2, [r3, #24]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	431a      	orrs	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	430a      	orrs	r2, r1
 8008600:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68d9      	ldr	r1, [r3, #12]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	4b3e      	ldr	r3, [pc, #248]	; (8008708 <HAL_LTDC_Init+0x19c>)
 800860e:	400b      	ands	r3, r1
 8008610:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	041b      	lsls	r3, r3, #16
 8008618:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68d9      	ldr	r1, [r3, #12]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a1a      	ldr	r2, [r3, #32]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	431a      	orrs	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	430a      	orrs	r2, r1
 800862e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6919      	ldr	r1, [r3, #16]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	4b33      	ldr	r3, [pc, #204]	; (8008708 <HAL_LTDC_Init+0x19c>)
 800863c:	400b      	ands	r3, r1
 800863e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	041b      	lsls	r3, r3, #16
 8008646:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6919      	ldr	r1, [r3, #16]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	431a      	orrs	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6959      	ldr	r1, [r3, #20]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	4b27      	ldr	r3, [pc, #156]	; (8008708 <HAL_LTDC_Init+0x19c>)
 800866a:	400b      	ands	r3, r1
 800866c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	041b      	lsls	r3, r3, #16
 8008674:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6959      	ldr	r1, [r3, #20]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	431a      	orrs	r2, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	430a      	orrs	r2, r1
 800868a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008692:	021b      	lsls	r3, r3, #8
 8008694:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800869c:	041b      	lsls	r3, r3, #16
 800869e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80086ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80086c2:	431a      	orrs	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	430a      	orrs	r2, r1
 80086ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0206 	orr.w	r2, r2, #6
 80086da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	699a      	ldr	r2, [r3, #24]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 0201 	orr.w	r2, r2, #1
 80086ea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	f000f800 	.word	0xf000f800

0800870c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008722:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f003 0304 	and.w	r3, r3, #4
 800872a:	2b00      	cmp	r3, #0
 800872c:	d023      	beq.n	8008776 <HAL_LTDC_IRQHandler+0x6a>
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	d01e      	beq.n	8008776 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 0204 	bic.w	r2, r2, #4
 8008746:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2204      	movs	r2, #4
 800874e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008756:	f043 0201 	orr.w	r2, r3, #1
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2204      	movs	r2, #4
 8008764:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f86f 	bl	8008854 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f003 0302 	and.w	r3, r3, #2
 800877c:	2b00      	cmp	r3, #0
 800877e:	d023      	beq.n	80087c8 <HAL_LTDC_IRQHandler+0xbc>
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d01e      	beq.n	80087c8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 0202 	bic.w	r2, r2, #2
 8008798:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2202      	movs	r2, #2
 80087a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087a8:	f043 0202 	orr.w	r2, r3, #2
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2204      	movs	r2, #4
 80087b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f846 	bl	8008854 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d01b      	beq.n	800880a <HAL_LTDC_IRQHandler+0xfe>
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	f003 0301 	and.w	r3, r3, #1
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d016      	beq.n	800880a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 0201 	bic.w	r2, r2, #1
 80087ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2201      	movs	r2, #1
 80087f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f82f 	bl	8008868 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f003 0308 	and.w	r3, r3, #8
 8008810:	2b00      	cmp	r3, #0
 8008812:	d01b      	beq.n	800884c <HAL_LTDC_IRQHandler+0x140>
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	f003 0308 	and.w	r3, r3, #8
 800881a:	2b00      	cmp	r3, #0
 800881c:	d016      	beq.n	800884c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f022 0208 	bic.w	r2, r2, #8
 800882c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2208      	movs	r2, #8
 8008834:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f818 	bl	800887c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800884c:	bf00      	nop
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008890:	b5b0      	push	{r4, r5, r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d101      	bne.n	80088aa <HAL_LTDC_ConfigLayer+0x1a>
 80088a6:	2302      	movs	r3, #2
 80088a8:	e02c      	b.n	8008904 <HAL_LTDC_ConfigLayer+0x74>
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2202      	movs	r2, #2
 80088b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2134      	movs	r1, #52	; 0x34
 80088c0:	fb01 f303 	mul.w	r3, r1, r3
 80088c4:	4413      	add	r3, r2
 80088c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	4614      	mov	r4, r2
 80088ce:	461d      	mov	r5, r3
 80088d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80088da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80088dc:	682b      	ldr	r3, [r5, #0]
 80088de:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	68b9      	ldr	r1, [r7, #8]
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 f83b 	bl	8008960 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	2201      	movs	r2, #1
 80088f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bdb0      	pop	{r4, r5, r7, pc}

0800890c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800891a:	2b01      	cmp	r3, #1
 800891c:	d101      	bne.n	8008922 <HAL_LTDC_EnableDither+0x16>
 800891e:	2302      	movs	r3, #2
 8008920:	e016      	b.n	8008950 <HAL_LTDC_EnableDither+0x44>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2202      	movs	r2, #2
 800892e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8008932:	4b0a      	ldr	r3, [pc, #40]	; (800895c <HAL_LTDC_EnableDither+0x50>)
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	4a09      	ldr	r2, [pc, #36]	; (800895c <HAL_LTDC_EnableDither+0x50>)
 8008938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800893c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2201      	movs	r2, #1
 8008942:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	40016800 	.word	0x40016800

08008960 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008960:	b480      	push	{r7}
 8008962:	b089      	sub	sp, #36	; 0x24
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	0c1b      	lsrs	r3, r3, #16
 8008978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800897c:	4413      	add	r3, r2
 800897e:	041b      	lsls	r3, r3, #16
 8008980:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	461a      	mov	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	01db      	lsls	r3, r3, #7
 800898c:	4413      	add	r3, r2
 800898e:	3384      	adds	r3, #132	; 0x84
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	6812      	ldr	r2, [r2, #0]
 8008996:	4611      	mov	r1, r2
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	01d2      	lsls	r2, r2, #7
 800899c:	440a      	add	r2, r1
 800899e:	3284      	adds	r2, #132	; 0x84
 80089a0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80089a4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	0c1b      	lsrs	r3, r3, #16
 80089b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80089b6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80089b8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4619      	mov	r1, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	01db      	lsls	r3, r3, #7
 80089c4:	440b      	add	r3, r1
 80089c6:	3384      	adds	r3, #132	; 0x84
 80089c8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80089ce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	68da      	ldr	r2, [r3, #12]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80089de:	4413      	add	r3, r2
 80089e0:	041b      	lsls	r3, r3, #16
 80089e2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	461a      	mov	r2, r3
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	01db      	lsls	r3, r3, #7
 80089ee:	4413      	add	r3, r2
 80089f0:	3384      	adds	r3, #132	; 0x84
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	6812      	ldr	r2, [r2, #0]
 80089f8:	4611      	mov	r1, r2
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	01d2      	lsls	r2, r2, #7
 80089fe:	440a      	add	r2, r1
 8008a00:	3284      	adds	r2, #132	; 0x84
 8008a02:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008a06:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a16:	4413      	add	r3, r2
 8008a18:	1c5a      	adds	r2, r3, #1
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4619      	mov	r1, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	01db      	lsls	r3, r3, #7
 8008a24:	440b      	add	r3, r1
 8008a26:	3384      	adds	r3, #132	; 0x84
 8008a28:	4619      	mov	r1, r3
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	461a      	mov	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	01db      	lsls	r3, r3, #7
 8008a3a:	4413      	add	r3, r2
 8008a3c:	3384      	adds	r3, #132	; 0x84
 8008a3e:	691b      	ldr	r3, [r3, #16]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	6812      	ldr	r2, [r2, #0]
 8008a44:	4611      	mov	r1, r2
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	01d2      	lsls	r2, r2, #7
 8008a4a:	440a      	add	r2, r1
 8008a4c:	3284      	adds	r2, #132	; 0x84
 8008a4e:	f023 0307 	bic.w	r3, r3, #7
 8008a52:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	01db      	lsls	r3, r3, #7
 8008a5e:	4413      	add	r3, r2
 8008a60:	3384      	adds	r3, #132	; 0x84
 8008a62:	461a      	mov	r2, r3
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008a70:	021b      	lsls	r3, r3, #8
 8008a72:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008a7a:	041b      	lsls	r3, r3, #16
 8008a7c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	061b      	lsls	r3, r3, #24
 8008a84:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	01db      	lsls	r3, r3, #7
 8008a90:	4413      	add	r3, r2
 8008a92:	3384      	adds	r3, #132	; 0x84
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	01db      	lsls	r3, r3, #7
 8008aa0:	4413      	add	r3, r2
 8008aa2:	3384      	adds	r3, #132	; 0x84
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	431a      	orrs	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4619      	mov	r1, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	01db      	lsls	r3, r3, #7
 8008ac4:	440b      	add	r3, r1
 8008ac6:	3384      	adds	r3, #132	; 0x84
 8008ac8:	4619      	mov	r1, r3
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	01db      	lsls	r3, r3, #7
 8008ada:	4413      	add	r3, r2
 8008adc:	3384      	adds	r3, #132	; 0x84
 8008ade:	695b      	ldr	r3, [r3, #20]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	6812      	ldr	r2, [r2, #0]
 8008ae4:	4611      	mov	r1, r2
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	01d2      	lsls	r2, r2, #7
 8008aea:	440a      	add	r2, r1
 8008aec:	3284      	adds	r2, #132	; 0x84
 8008aee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008af2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	01db      	lsls	r3, r3, #7
 8008afe:	4413      	add	r3, r2
 8008b00:	3384      	adds	r3, #132	; 0x84
 8008b02:	461a      	mov	r2, r3
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	01db      	lsls	r3, r3, #7
 8008b14:	4413      	add	r3, r2
 8008b16:	3384      	adds	r3, #132	; 0x84
 8008b18:	69db      	ldr	r3, [r3, #28]
 8008b1a:	68fa      	ldr	r2, [r7, #12]
 8008b1c:	6812      	ldr	r2, [r2, #0]
 8008b1e:	4611      	mov	r1, r2
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	01d2      	lsls	r2, r2, #7
 8008b24:	440a      	add	r2, r1
 8008b26:	3284      	adds	r2, #132	; 0x84
 8008b28:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008b2c:	f023 0307 	bic.w	r3, r3, #7
 8008b30:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	69da      	ldr	r2, [r3, #28]
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	6a1b      	ldr	r3, [r3, #32]
 8008b3a:	68f9      	ldr	r1, [r7, #12]
 8008b3c:	6809      	ldr	r1, [r1, #0]
 8008b3e:	4608      	mov	r0, r1
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	01c9      	lsls	r1, r1, #7
 8008b44:	4401      	add	r1, r0
 8008b46:	3184      	adds	r1, #132	; 0x84
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	461a      	mov	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	01db      	lsls	r3, r3, #7
 8008b56:	4413      	add	r3, r2
 8008b58:	3384      	adds	r3, #132	; 0x84
 8008b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	461a      	mov	r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	01db      	lsls	r3, r3, #7
 8008b66:	4413      	add	r3, r2
 8008b68:	3384      	adds	r3, #132	; 0x84
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	461a      	mov	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	01db      	lsls	r3, r3, #7
 8008b7a:	4413      	add	r3, r2
 8008b7c:	3384      	adds	r3, #132	; 0x84
 8008b7e:	461a      	mov	r2, r3
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d102      	bne.n	8008b94 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8008b8e:	2304      	movs	r3, #4
 8008b90:	61fb      	str	r3, [r7, #28]
 8008b92:	e01b      	b.n	8008bcc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d102      	bne.n	8008ba2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	61fb      	str	r3, [r7, #28]
 8008ba0:	e014      	b.n	8008bcc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	2b04      	cmp	r3, #4
 8008ba8:	d00b      	beq.n	8008bc2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d007      	beq.n	8008bc2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d003      	beq.n	8008bc2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008bbe:	2b07      	cmp	r3, #7
 8008bc0:	d102      	bne.n	8008bc8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8008bc2:	2302      	movs	r3, #2
 8008bc4:	61fb      	str	r3, [r7, #28]
 8008bc6:	e001      	b.n	8008bcc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	01db      	lsls	r3, r3, #7
 8008bd6:	4413      	add	r3, r2
 8008bd8:	3384      	adds	r3, #132	; 0x84
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	6812      	ldr	r2, [r2, #0]
 8008be0:	4611      	mov	r1, r2
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	01d2      	lsls	r2, r2, #7
 8008be6:	440a      	add	r2, r1
 8008be8:	3284      	adds	r2, #132	; 0x84
 8008bea:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008bee:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf4:	69fa      	ldr	r2, [r7, #28]
 8008bf6:	fb02 f303 	mul.w	r3, r2, r3
 8008bfa:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	6859      	ldr	r1, [r3, #4]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	1acb      	subs	r3, r1, r3
 8008c06:	69f9      	ldr	r1, [r7, #28]
 8008c08:	fb01 f303 	mul.w	r3, r1, r3
 8008c0c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008c0e:	68f9      	ldr	r1, [r7, #12]
 8008c10:	6809      	ldr	r1, [r1, #0]
 8008c12:	4608      	mov	r0, r1
 8008c14:	6879      	ldr	r1, [r7, #4]
 8008c16:	01c9      	lsls	r1, r1, #7
 8008c18:	4401      	add	r1, r0
 8008c1a:	3184      	adds	r1, #132	; 0x84
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	01db      	lsls	r3, r3, #7
 8008c2a:	4413      	add	r3, r2
 8008c2c:	3384      	adds	r3, #132	; 0x84
 8008c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	6812      	ldr	r2, [r2, #0]
 8008c34:	4611      	mov	r1, r2
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	01d2      	lsls	r2, r2, #7
 8008c3a:	440a      	add	r2, r1
 8008c3c:	3284      	adds	r2, #132	; 0x84
 8008c3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008c42:	f023 0307 	bic.w	r3, r3, #7
 8008c46:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	01db      	lsls	r3, r3, #7
 8008c52:	4413      	add	r3, r2
 8008c54:	3384      	adds	r3, #132	; 0x84
 8008c56:	461a      	mov	r2, r3
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	01db      	lsls	r3, r3, #7
 8008c68:	4413      	add	r3, r2
 8008c6a:	3384      	adds	r3, #132	; 0x84
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	6812      	ldr	r2, [r2, #0]
 8008c72:	4611      	mov	r1, r2
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	01d2      	lsls	r2, r2, #7
 8008c78:	440a      	add	r2, r1
 8008c7a:	3284      	adds	r2, #132	; 0x84
 8008c7c:	f043 0301 	orr.w	r3, r3, #1
 8008c80:	6013      	str	r3, [r2, #0]
}
 8008c82:	bf00      	nop
 8008c84:	3724      	adds	r7, #36	; 0x24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr
	...

08008c90 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008c96:	2300      	movs	r3, #0
 8008c98:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	603b      	str	r3, [r7, #0]
 8008c9e:	4b20      	ldr	r3, [pc, #128]	; (8008d20 <HAL_PWREx_EnableOverDrive+0x90>)
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca2:	4a1f      	ldr	r2, [pc, #124]	; (8008d20 <HAL_PWREx_EnableOverDrive+0x90>)
 8008ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8008caa:	4b1d      	ldr	r3, [pc, #116]	; (8008d20 <HAL_PWREx_EnableOverDrive+0x90>)
 8008cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008cb6:	4b1b      	ldr	r3, [pc, #108]	; (8008d24 <HAL_PWREx_EnableOverDrive+0x94>)
 8008cb8:	2201      	movs	r2, #1
 8008cba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008cbc:	f7fb fcb8 	bl	8004630 <HAL_GetTick>
 8008cc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008cc2:	e009      	b.n	8008cd8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008cc4:	f7fb fcb4 	bl	8004630 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cd2:	d901      	bls.n	8008cd8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e01f      	b.n	8008d18 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008cd8:	4b13      	ldr	r3, [pc, #76]	; (8008d28 <HAL_PWREx_EnableOverDrive+0x98>)
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce4:	d1ee      	bne.n	8008cc4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008ce6:	4b11      	ldr	r3, [pc, #68]	; (8008d2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ce8:	2201      	movs	r2, #1
 8008cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008cec:	f7fb fca0 	bl	8004630 <HAL_GetTick>
 8008cf0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008cf2:	e009      	b.n	8008d08 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008cf4:	f7fb fc9c 	bl	8004630 <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d02:	d901      	bls.n	8008d08 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e007      	b.n	8008d18 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008d08:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <HAL_PWREx_EnableOverDrive+0x98>)
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d14:	d1ee      	bne.n	8008cf4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	40023800 	.word	0x40023800
 8008d24:	420e0040 	.word	0x420e0040
 8008d28:	40007000 	.word	0x40007000
 8008d2c:	420e0044 	.word	0x420e0044

08008d30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d101      	bne.n	8008d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e267      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0301 	and.w	r3, r3, #1
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d075      	beq.n	8008e3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008d4e:	4b88      	ldr	r3, [pc, #544]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	f003 030c 	and.w	r3, r3, #12
 8008d56:	2b04      	cmp	r3, #4
 8008d58:	d00c      	beq.n	8008d74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d5a:	4b85      	ldr	r3, [pc, #532]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008d62:	2b08      	cmp	r3, #8
 8008d64:	d112      	bne.n	8008d8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d66:	4b82      	ldr	r3, [pc, #520]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d72:	d10b      	bne.n	8008d8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d74:	4b7e      	ldr	r3, [pc, #504]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d05b      	beq.n	8008e38 <HAL_RCC_OscConfig+0x108>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d157      	bne.n	8008e38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e242      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d94:	d106      	bne.n	8008da4 <HAL_RCC_OscConfig+0x74>
 8008d96:	4b76      	ldr	r3, [pc, #472]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a75      	ldr	r2, [pc, #468]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008da0:	6013      	str	r3, [r2, #0]
 8008da2:	e01d      	b.n	8008de0 <HAL_RCC_OscConfig+0xb0>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dac:	d10c      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x98>
 8008dae:	4b70      	ldr	r3, [pc, #448]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a6f      	ldr	r2, [pc, #444]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	4b6d      	ldr	r3, [pc, #436]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a6c      	ldr	r2, [pc, #432]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008dc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dc4:	6013      	str	r3, [r2, #0]
 8008dc6:	e00b      	b.n	8008de0 <HAL_RCC_OscConfig+0xb0>
 8008dc8:	4b69      	ldr	r3, [pc, #420]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a68      	ldr	r2, [pc, #416]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dd2:	6013      	str	r3, [r2, #0]
 8008dd4:	4b66      	ldr	r3, [pc, #408]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a65      	ldr	r2, [pc, #404]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d013      	beq.n	8008e10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008de8:	f7fb fc22 	bl	8004630 <HAL_GetTick>
 8008dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dee:	e008      	b.n	8008e02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008df0:	f7fb fc1e 	bl	8004630 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b64      	cmp	r3, #100	; 0x64
 8008dfc:	d901      	bls.n	8008e02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e207      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e02:	4b5b      	ldr	r3, [pc, #364]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d0f0      	beq.n	8008df0 <HAL_RCC_OscConfig+0xc0>
 8008e0e:	e014      	b.n	8008e3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e10:	f7fb fc0e 	bl	8004630 <HAL_GetTick>
 8008e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e16:	e008      	b.n	8008e2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e18:	f7fb fc0a 	bl	8004630 <HAL_GetTick>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	2b64      	cmp	r3, #100	; 0x64
 8008e24:	d901      	bls.n	8008e2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008e26:	2303      	movs	r3, #3
 8008e28:	e1f3      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e2a:	4b51      	ldr	r3, [pc, #324]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d1f0      	bne.n	8008e18 <HAL_RCC_OscConfig+0xe8>
 8008e36:	e000      	b.n	8008e3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d063      	beq.n	8008f0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008e46:	4b4a      	ldr	r3, [pc, #296]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f003 030c 	and.w	r3, r3, #12
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00b      	beq.n	8008e6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e52:	4b47      	ldr	r3, [pc, #284]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008e5a:	2b08      	cmp	r3, #8
 8008e5c:	d11c      	bne.n	8008e98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e5e:	4b44      	ldr	r3, [pc, #272]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d116      	bne.n	8008e98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e6a:	4b41      	ldr	r3, [pc, #260]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0302 	and.w	r3, r3, #2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d005      	beq.n	8008e82 <HAL_RCC_OscConfig+0x152>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d001      	beq.n	8008e82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e1c7      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e82:	4b3b      	ldr	r3, [pc, #236]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	4937      	ldr	r1, [pc, #220]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e96:	e03a      	b.n	8008f0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d020      	beq.n	8008ee2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ea0:	4b34      	ldr	r3, [pc, #208]	; (8008f74 <HAL_RCC_OscConfig+0x244>)
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea6:	f7fb fbc3 	bl	8004630 <HAL_GetTick>
 8008eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008eac:	e008      	b.n	8008ec0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008eae:	f7fb fbbf 	bl	8004630 <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	2b02      	cmp	r3, #2
 8008eba:	d901      	bls.n	8008ec0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e1a8      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ec0:	4b2b      	ldr	r3, [pc, #172]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0302 	and.w	r3, r3, #2
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0f0      	beq.n	8008eae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ecc:	4b28      	ldr	r3, [pc, #160]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	00db      	lsls	r3, r3, #3
 8008eda:	4925      	ldr	r1, [pc, #148]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	600b      	str	r3, [r1, #0]
 8008ee0:	e015      	b.n	8008f0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ee2:	4b24      	ldr	r3, [pc, #144]	; (8008f74 <HAL_RCC_OscConfig+0x244>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee8:	f7fb fba2 	bl	8004630 <HAL_GetTick>
 8008eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008eee:	e008      	b.n	8008f02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ef0:	f7fb fb9e 	bl	8004630 <HAL_GetTick>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	1ad3      	subs	r3, r2, r3
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d901      	bls.n	8008f02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008efe:	2303      	movs	r3, #3
 8008f00:	e187      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f02:	4b1b      	ldr	r3, [pc, #108]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0302 	and.w	r3, r3, #2
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1f0      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0308 	and.w	r3, r3, #8
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d036      	beq.n	8008f88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d016      	beq.n	8008f50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f22:	4b15      	ldr	r3, [pc, #84]	; (8008f78 <HAL_RCC_OscConfig+0x248>)
 8008f24:	2201      	movs	r2, #1
 8008f26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f28:	f7fb fb82 	bl	8004630 <HAL_GetTick>
 8008f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f2e:	e008      	b.n	8008f42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f30:	f7fb fb7e 	bl	8004630 <HAL_GetTick>
 8008f34:	4602      	mov	r2, r0
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d901      	bls.n	8008f42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008f3e:	2303      	movs	r3, #3
 8008f40:	e167      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f42:	4b0b      	ldr	r3, [pc, #44]	; (8008f70 <HAL_RCC_OscConfig+0x240>)
 8008f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f46:	f003 0302 	and.w	r3, r3, #2
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d0f0      	beq.n	8008f30 <HAL_RCC_OscConfig+0x200>
 8008f4e:	e01b      	b.n	8008f88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f50:	4b09      	ldr	r3, [pc, #36]	; (8008f78 <HAL_RCC_OscConfig+0x248>)
 8008f52:	2200      	movs	r2, #0
 8008f54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f56:	f7fb fb6b 	bl	8004630 <HAL_GetTick>
 8008f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f5c:	e00e      	b.n	8008f7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f5e:	f7fb fb67 	bl	8004630 <HAL_GetTick>
 8008f62:	4602      	mov	r2, r0
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d907      	bls.n	8008f7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e150      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
 8008f70:	40023800 	.word	0x40023800
 8008f74:	42470000 	.word	0x42470000
 8008f78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f7c:	4b88      	ldr	r3, [pc, #544]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 8008f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1ea      	bne.n	8008f5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f003 0304 	and.w	r3, r3, #4
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f000 8097 	beq.w	80090c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f96:	2300      	movs	r3, #0
 8008f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f9a:	4b81      	ldr	r3, [pc, #516]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10f      	bne.n	8008fc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	60bb      	str	r3, [r7, #8]
 8008faa:	4b7d      	ldr	r3, [pc, #500]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	4a7c      	ldr	r2, [pc, #496]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 8008fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8008fb6:	4b7a      	ldr	r3, [pc, #488]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 8008fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fbe:	60bb      	str	r3, [r7, #8]
 8008fc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fc6:	4b77      	ldr	r3, [pc, #476]	; (80091a4 <HAL_RCC_OscConfig+0x474>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d118      	bne.n	8009004 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008fd2:	4b74      	ldr	r3, [pc, #464]	; (80091a4 <HAL_RCC_OscConfig+0x474>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a73      	ldr	r2, [pc, #460]	; (80091a4 <HAL_RCC_OscConfig+0x474>)
 8008fd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fde:	f7fb fb27 	bl	8004630 <HAL_GetTick>
 8008fe2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008fe4:	e008      	b.n	8008ff8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fe6:	f7fb fb23 	bl	8004630 <HAL_GetTick>
 8008fea:	4602      	mov	r2, r0
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d901      	bls.n	8008ff8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e10c      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ff8:	4b6a      	ldr	r3, [pc, #424]	; (80091a4 <HAL_RCC_OscConfig+0x474>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009000:	2b00      	cmp	r3, #0
 8009002:	d0f0      	beq.n	8008fe6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d106      	bne.n	800901a <HAL_RCC_OscConfig+0x2ea>
 800900c:	4b64      	ldr	r3, [pc, #400]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 800900e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009010:	4a63      	ldr	r2, [pc, #396]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 8009012:	f043 0301 	orr.w	r3, r3, #1
 8009016:	6713      	str	r3, [r2, #112]	; 0x70
 8009018:	e01c      	b.n	8009054 <HAL_RCC_OscConfig+0x324>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	2b05      	cmp	r3, #5
 8009020:	d10c      	bne.n	800903c <HAL_RCC_OscConfig+0x30c>
 8009022:	4b5f      	ldr	r3, [pc, #380]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 8009024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009026:	4a5e      	ldr	r2, [pc, #376]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 8009028:	f043 0304 	orr.w	r3, r3, #4
 800902c:	6713      	str	r3, [r2, #112]	; 0x70
 800902e:	4b5c      	ldr	r3, [pc, #368]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 8009030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009032:	4a5b      	ldr	r2, [pc, #364]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 8009034:	f043 0301 	orr.w	r3, r3, #1
 8009038:	6713      	str	r3, [r2, #112]	; 0x70
 800903a:	e00b      	b.n	8009054 <HAL_RCC_OscConfig+0x324>
 800903c:	4b58      	ldr	r3, [pc, #352]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 800903e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009040:	4a57      	ldr	r2, [pc, #348]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 8009042:	f023 0301 	bic.w	r3, r3, #1
 8009046:	6713      	str	r3, [r2, #112]	; 0x70
 8009048:	4b55      	ldr	r3, [pc, #340]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 800904a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800904c:	4a54      	ldr	r2, [pc, #336]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 800904e:	f023 0304 	bic.w	r3, r3, #4
 8009052:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d015      	beq.n	8009088 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800905c:	f7fb fae8 	bl	8004630 <HAL_GetTick>
 8009060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009062:	e00a      	b.n	800907a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009064:	f7fb fae4 	bl	8004630 <HAL_GetTick>
 8009068:	4602      	mov	r2, r0
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009072:	4293      	cmp	r3, r2
 8009074:	d901      	bls.n	800907a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009076:	2303      	movs	r3, #3
 8009078:	e0cb      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800907a:	4b49      	ldr	r3, [pc, #292]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 800907c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907e:	f003 0302 	and.w	r3, r3, #2
 8009082:	2b00      	cmp	r3, #0
 8009084:	d0ee      	beq.n	8009064 <HAL_RCC_OscConfig+0x334>
 8009086:	e014      	b.n	80090b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009088:	f7fb fad2 	bl	8004630 <HAL_GetTick>
 800908c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800908e:	e00a      	b.n	80090a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009090:	f7fb face 	bl	8004630 <HAL_GetTick>
 8009094:	4602      	mov	r2, r0
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	1ad3      	subs	r3, r2, r3
 800909a:	f241 3288 	movw	r2, #5000	; 0x1388
 800909e:	4293      	cmp	r3, r2
 80090a0:	d901      	bls.n	80090a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e0b5      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090a6:	4b3e      	ldr	r3, [pc, #248]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 80090a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1ee      	bne.n	8009090 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80090b2:	7dfb      	ldrb	r3, [r7, #23]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d105      	bne.n	80090c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090b8:	4b39      	ldr	r3, [pc, #228]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 80090ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090bc:	4a38      	ldr	r2, [pc, #224]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 80090be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 80a1 	beq.w	8009210 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80090ce:	4b34      	ldr	r3, [pc, #208]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f003 030c 	and.w	r3, r3, #12
 80090d6:	2b08      	cmp	r3, #8
 80090d8:	d05c      	beq.n	8009194 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d141      	bne.n	8009166 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090e2:	4b31      	ldr	r3, [pc, #196]	; (80091a8 <HAL_RCC_OscConfig+0x478>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090e8:	f7fb faa2 	bl	8004630 <HAL_GetTick>
 80090ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090ee:	e008      	b.n	8009102 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090f0:	f7fb fa9e 	bl	8004630 <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d901      	bls.n	8009102 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e087      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009102:	4b27      	ldr	r3, [pc, #156]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1f0      	bne.n	80090f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	69da      	ldr	r2, [r3, #28]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a1b      	ldr	r3, [r3, #32]
 8009116:	431a      	orrs	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911c:	019b      	lsls	r3, r3, #6
 800911e:	431a      	orrs	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009124:	085b      	lsrs	r3, r3, #1
 8009126:	3b01      	subs	r3, #1
 8009128:	041b      	lsls	r3, r3, #16
 800912a:	431a      	orrs	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009130:	061b      	lsls	r3, r3, #24
 8009132:	491b      	ldr	r1, [pc, #108]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 8009134:	4313      	orrs	r3, r2
 8009136:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009138:	4b1b      	ldr	r3, [pc, #108]	; (80091a8 <HAL_RCC_OscConfig+0x478>)
 800913a:	2201      	movs	r2, #1
 800913c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800913e:	f7fb fa77 	bl	8004630 <HAL_GetTick>
 8009142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009144:	e008      	b.n	8009158 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009146:	f7fb fa73 	bl	8004630 <HAL_GetTick>
 800914a:	4602      	mov	r2, r0
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	2b02      	cmp	r3, #2
 8009152:	d901      	bls.n	8009158 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009154:	2303      	movs	r3, #3
 8009156:	e05c      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009158:	4b11      	ldr	r3, [pc, #68]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009160:	2b00      	cmp	r3, #0
 8009162:	d0f0      	beq.n	8009146 <HAL_RCC_OscConfig+0x416>
 8009164:	e054      	b.n	8009210 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009166:	4b10      	ldr	r3, [pc, #64]	; (80091a8 <HAL_RCC_OscConfig+0x478>)
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800916c:	f7fb fa60 	bl	8004630 <HAL_GetTick>
 8009170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009172:	e008      	b.n	8009186 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009174:	f7fb fa5c 	bl	8004630 <HAL_GetTick>
 8009178:	4602      	mov	r2, r0
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	1ad3      	subs	r3, r2, r3
 800917e:	2b02      	cmp	r3, #2
 8009180:	d901      	bls.n	8009186 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e045      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009186:	4b06      	ldr	r3, [pc, #24]	; (80091a0 <HAL_RCC_OscConfig+0x470>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1f0      	bne.n	8009174 <HAL_RCC_OscConfig+0x444>
 8009192:	e03d      	b.n	8009210 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d107      	bne.n	80091ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e038      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
 80091a0:	40023800 	.word	0x40023800
 80091a4:	40007000 	.word	0x40007000
 80091a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80091ac:	4b1b      	ldr	r3, [pc, #108]	; (800921c <HAL_RCC_OscConfig+0x4ec>)
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	699b      	ldr	r3, [r3, #24]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d028      	beq.n	800920c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d121      	bne.n	800920c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d11a      	bne.n	800920c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80091dc:	4013      	ands	r3, r2
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80091e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d111      	bne.n	800920c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f2:	085b      	lsrs	r3, r3, #1
 80091f4:	3b01      	subs	r3, #1
 80091f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d107      	bne.n	800920c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009206:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009208:	429a      	cmp	r2, r3
 800920a:	d001      	beq.n	8009210 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e000      	b.n	8009212 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3718      	adds	r7, #24
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
 800921a:	bf00      	nop
 800921c:	40023800 	.word	0x40023800

08009220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	e0cc      	b.n	80093ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009234:	4b68      	ldr	r3, [pc, #416]	; (80093d8 <HAL_RCC_ClockConfig+0x1b8>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 030f 	and.w	r3, r3, #15
 800923c:	683a      	ldr	r2, [r7, #0]
 800923e:	429a      	cmp	r2, r3
 8009240:	d90c      	bls.n	800925c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009242:	4b65      	ldr	r3, [pc, #404]	; (80093d8 <HAL_RCC_ClockConfig+0x1b8>)
 8009244:	683a      	ldr	r2, [r7, #0]
 8009246:	b2d2      	uxtb	r2, r2
 8009248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800924a:	4b63      	ldr	r3, [pc, #396]	; (80093d8 <HAL_RCC_ClockConfig+0x1b8>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f003 030f 	and.w	r3, r3, #15
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	429a      	cmp	r2, r3
 8009256:	d001      	beq.n	800925c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	e0b8      	b.n	80093ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f003 0302 	and.w	r3, r3, #2
 8009264:	2b00      	cmp	r3, #0
 8009266:	d020      	beq.n	80092aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b00      	cmp	r3, #0
 8009272:	d005      	beq.n	8009280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009274:	4b59      	ldr	r3, [pc, #356]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	4a58      	ldr	r2, [pc, #352]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 800927a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800927e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0308 	and.w	r3, r3, #8
 8009288:	2b00      	cmp	r3, #0
 800928a:	d005      	beq.n	8009298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800928c:	4b53      	ldr	r3, [pc, #332]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	4a52      	ldr	r2, [pc, #328]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 8009292:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009298:	4b50      	ldr	r3, [pc, #320]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	494d      	ldr	r1, [pc, #308]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0301 	and.w	r3, r3, #1
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d044      	beq.n	8009340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d107      	bne.n	80092ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092be:	4b47      	ldr	r3, [pc, #284]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d119      	bne.n	80092fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e07f      	b.n	80093ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	d003      	beq.n	80092de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d107      	bne.n	80092ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092de:	4b3f      	ldr	r3, [pc, #252]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d109      	bne.n	80092fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e06f      	b.n	80093ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092ee:	4b3b      	ldr	r3, [pc, #236]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 0302 	and.w	r3, r3, #2
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e067      	b.n	80093ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80092fe:	4b37      	ldr	r3, [pc, #220]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 8009300:	689b      	ldr	r3, [r3, #8]
 8009302:	f023 0203 	bic.w	r2, r3, #3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	4934      	ldr	r1, [pc, #208]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 800930c:	4313      	orrs	r3, r2
 800930e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009310:	f7fb f98e 	bl	8004630 <HAL_GetTick>
 8009314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009316:	e00a      	b.n	800932e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009318:	f7fb f98a 	bl	8004630 <HAL_GetTick>
 800931c:	4602      	mov	r2, r0
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	f241 3288 	movw	r2, #5000	; 0x1388
 8009326:	4293      	cmp	r3, r2
 8009328:	d901      	bls.n	800932e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e04f      	b.n	80093ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800932e:	4b2b      	ldr	r3, [pc, #172]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f003 020c 	and.w	r2, r3, #12
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	429a      	cmp	r2, r3
 800933e:	d1eb      	bne.n	8009318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009340:	4b25      	ldr	r3, [pc, #148]	; (80093d8 <HAL_RCC_ClockConfig+0x1b8>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 030f 	and.w	r3, r3, #15
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	429a      	cmp	r2, r3
 800934c:	d20c      	bcs.n	8009368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800934e:	4b22      	ldr	r3, [pc, #136]	; (80093d8 <HAL_RCC_ClockConfig+0x1b8>)
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	b2d2      	uxtb	r2, r2
 8009354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009356:	4b20      	ldr	r3, [pc, #128]	; (80093d8 <HAL_RCC_ClockConfig+0x1b8>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 030f 	and.w	r3, r3, #15
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	429a      	cmp	r2, r3
 8009362:	d001      	beq.n	8009368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	e032      	b.n	80093ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 0304 	and.w	r3, r3, #4
 8009370:	2b00      	cmp	r3, #0
 8009372:	d008      	beq.n	8009386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009374:	4b19      	ldr	r3, [pc, #100]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 8009376:	689b      	ldr	r3, [r3, #8]
 8009378:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	4916      	ldr	r1, [pc, #88]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 8009382:	4313      	orrs	r3, r2
 8009384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0308 	and.w	r3, r3, #8
 800938e:	2b00      	cmp	r3, #0
 8009390:	d009      	beq.n	80093a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009392:	4b12      	ldr	r3, [pc, #72]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 8009394:	689b      	ldr	r3, [r3, #8]
 8009396:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	00db      	lsls	r3, r3, #3
 80093a0:	490e      	ldr	r1, [pc, #56]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80093a6:	f000 f821 	bl	80093ec <HAL_RCC_GetSysClockFreq>
 80093aa:	4602      	mov	r2, r0
 80093ac:	4b0b      	ldr	r3, [pc, #44]	; (80093dc <HAL_RCC_ClockConfig+0x1bc>)
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	091b      	lsrs	r3, r3, #4
 80093b2:	f003 030f 	and.w	r3, r3, #15
 80093b6:	490a      	ldr	r1, [pc, #40]	; (80093e0 <HAL_RCC_ClockConfig+0x1c0>)
 80093b8:	5ccb      	ldrb	r3, [r1, r3]
 80093ba:	fa22 f303 	lsr.w	r3, r2, r3
 80093be:	4a09      	ldr	r2, [pc, #36]	; (80093e4 <HAL_RCC_ClockConfig+0x1c4>)
 80093c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80093c2:	4b09      	ldr	r3, [pc, #36]	; (80093e8 <HAL_RCC_ClockConfig+0x1c8>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7f9 fdee 	bl	8002fa8 <HAL_InitTick>

  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	40023c00 	.word	0x40023c00
 80093dc:	40023800 	.word	0x40023800
 80093e0:	0807ffd4 	.word	0x0807ffd4
 80093e4:	20000000 	.word	0x20000000
 80093e8:	2000004c 	.word	0x2000004c

080093ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80093ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093f0:	b094      	sub	sp, #80	; 0x50
 80093f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	647b      	str	r3, [r7, #68]	; 0x44
 80093f8:	2300      	movs	r3, #0
 80093fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093fc:	2300      	movs	r3, #0
 80093fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009404:	4b79      	ldr	r3, [pc, #484]	; (80095ec <HAL_RCC_GetSysClockFreq+0x200>)
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	f003 030c 	and.w	r3, r3, #12
 800940c:	2b08      	cmp	r3, #8
 800940e:	d00d      	beq.n	800942c <HAL_RCC_GetSysClockFreq+0x40>
 8009410:	2b08      	cmp	r3, #8
 8009412:	f200 80e1 	bhi.w	80095d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009416:	2b00      	cmp	r3, #0
 8009418:	d002      	beq.n	8009420 <HAL_RCC_GetSysClockFreq+0x34>
 800941a:	2b04      	cmp	r3, #4
 800941c:	d003      	beq.n	8009426 <HAL_RCC_GetSysClockFreq+0x3a>
 800941e:	e0db      	b.n	80095d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009420:	4b73      	ldr	r3, [pc, #460]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8009422:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009424:	e0db      	b.n	80095de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009426:	4b73      	ldr	r3, [pc, #460]	; (80095f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8009428:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800942a:	e0d8      	b.n	80095de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800942c:	4b6f      	ldr	r3, [pc, #444]	; (80095ec <HAL_RCC_GetSysClockFreq+0x200>)
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009434:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009436:	4b6d      	ldr	r3, [pc, #436]	; (80095ec <HAL_RCC_GetSysClockFreq+0x200>)
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800943e:	2b00      	cmp	r3, #0
 8009440:	d063      	beq.n	800950a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009442:	4b6a      	ldr	r3, [pc, #424]	; (80095ec <HAL_RCC_GetSysClockFreq+0x200>)
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	099b      	lsrs	r3, r3, #6
 8009448:	2200      	movs	r2, #0
 800944a:	63bb      	str	r3, [r7, #56]	; 0x38
 800944c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009454:	633b      	str	r3, [r7, #48]	; 0x30
 8009456:	2300      	movs	r3, #0
 8009458:	637b      	str	r3, [r7, #52]	; 0x34
 800945a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800945e:	4622      	mov	r2, r4
 8009460:	462b      	mov	r3, r5
 8009462:	f04f 0000 	mov.w	r0, #0
 8009466:	f04f 0100 	mov.w	r1, #0
 800946a:	0159      	lsls	r1, r3, #5
 800946c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009470:	0150      	lsls	r0, r2, #5
 8009472:	4602      	mov	r2, r0
 8009474:	460b      	mov	r3, r1
 8009476:	4621      	mov	r1, r4
 8009478:	1a51      	subs	r1, r2, r1
 800947a:	6139      	str	r1, [r7, #16]
 800947c:	4629      	mov	r1, r5
 800947e:	eb63 0301 	sbc.w	r3, r3, r1
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	f04f 0200 	mov.w	r2, #0
 8009488:	f04f 0300 	mov.w	r3, #0
 800948c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009490:	4659      	mov	r1, fp
 8009492:	018b      	lsls	r3, r1, #6
 8009494:	4651      	mov	r1, sl
 8009496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800949a:	4651      	mov	r1, sl
 800949c:	018a      	lsls	r2, r1, #6
 800949e:	4651      	mov	r1, sl
 80094a0:	ebb2 0801 	subs.w	r8, r2, r1
 80094a4:	4659      	mov	r1, fp
 80094a6:	eb63 0901 	sbc.w	r9, r3, r1
 80094aa:	f04f 0200 	mov.w	r2, #0
 80094ae:	f04f 0300 	mov.w	r3, #0
 80094b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80094b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80094ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80094be:	4690      	mov	r8, r2
 80094c0:	4699      	mov	r9, r3
 80094c2:	4623      	mov	r3, r4
 80094c4:	eb18 0303 	adds.w	r3, r8, r3
 80094c8:	60bb      	str	r3, [r7, #8]
 80094ca:	462b      	mov	r3, r5
 80094cc:	eb49 0303 	adc.w	r3, r9, r3
 80094d0:	60fb      	str	r3, [r7, #12]
 80094d2:	f04f 0200 	mov.w	r2, #0
 80094d6:	f04f 0300 	mov.w	r3, #0
 80094da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80094de:	4629      	mov	r1, r5
 80094e0:	024b      	lsls	r3, r1, #9
 80094e2:	4621      	mov	r1, r4
 80094e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80094e8:	4621      	mov	r1, r4
 80094ea:	024a      	lsls	r2, r1, #9
 80094ec:	4610      	mov	r0, r2
 80094ee:	4619      	mov	r1, r3
 80094f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094f2:	2200      	movs	r2, #0
 80094f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80094f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094fc:	f7f7 fb1e 	bl	8000b3c <__aeabi_uldivmod>
 8009500:	4602      	mov	r2, r0
 8009502:	460b      	mov	r3, r1
 8009504:	4613      	mov	r3, r2
 8009506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009508:	e058      	b.n	80095bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800950a:	4b38      	ldr	r3, [pc, #224]	; (80095ec <HAL_RCC_GetSysClockFreq+0x200>)
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	099b      	lsrs	r3, r3, #6
 8009510:	2200      	movs	r2, #0
 8009512:	4618      	mov	r0, r3
 8009514:	4611      	mov	r1, r2
 8009516:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800951a:	623b      	str	r3, [r7, #32]
 800951c:	2300      	movs	r3, #0
 800951e:	627b      	str	r3, [r7, #36]	; 0x24
 8009520:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009524:	4642      	mov	r2, r8
 8009526:	464b      	mov	r3, r9
 8009528:	f04f 0000 	mov.w	r0, #0
 800952c:	f04f 0100 	mov.w	r1, #0
 8009530:	0159      	lsls	r1, r3, #5
 8009532:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009536:	0150      	lsls	r0, r2, #5
 8009538:	4602      	mov	r2, r0
 800953a:	460b      	mov	r3, r1
 800953c:	4641      	mov	r1, r8
 800953e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009542:	4649      	mov	r1, r9
 8009544:	eb63 0b01 	sbc.w	fp, r3, r1
 8009548:	f04f 0200 	mov.w	r2, #0
 800954c:	f04f 0300 	mov.w	r3, #0
 8009550:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009554:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009558:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800955c:	ebb2 040a 	subs.w	r4, r2, sl
 8009560:	eb63 050b 	sbc.w	r5, r3, fp
 8009564:	f04f 0200 	mov.w	r2, #0
 8009568:	f04f 0300 	mov.w	r3, #0
 800956c:	00eb      	lsls	r3, r5, #3
 800956e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009572:	00e2      	lsls	r2, r4, #3
 8009574:	4614      	mov	r4, r2
 8009576:	461d      	mov	r5, r3
 8009578:	4643      	mov	r3, r8
 800957a:	18e3      	adds	r3, r4, r3
 800957c:	603b      	str	r3, [r7, #0]
 800957e:	464b      	mov	r3, r9
 8009580:	eb45 0303 	adc.w	r3, r5, r3
 8009584:	607b      	str	r3, [r7, #4]
 8009586:	f04f 0200 	mov.w	r2, #0
 800958a:	f04f 0300 	mov.w	r3, #0
 800958e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009592:	4629      	mov	r1, r5
 8009594:	028b      	lsls	r3, r1, #10
 8009596:	4621      	mov	r1, r4
 8009598:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800959c:	4621      	mov	r1, r4
 800959e:	028a      	lsls	r2, r1, #10
 80095a0:	4610      	mov	r0, r2
 80095a2:	4619      	mov	r1, r3
 80095a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095a6:	2200      	movs	r2, #0
 80095a8:	61bb      	str	r3, [r7, #24]
 80095aa:	61fa      	str	r2, [r7, #28]
 80095ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095b0:	f7f7 fac4 	bl	8000b3c <__aeabi_uldivmod>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	4613      	mov	r3, r2
 80095ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80095bc:	4b0b      	ldr	r3, [pc, #44]	; (80095ec <HAL_RCC_GetSysClockFreq+0x200>)
 80095be:	685b      	ldr	r3, [r3, #4]
 80095c0:	0c1b      	lsrs	r3, r3, #16
 80095c2:	f003 0303 	and.w	r3, r3, #3
 80095c6:	3301      	adds	r3, #1
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80095cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80095d6:	e002      	b.n	80095de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80095d8:	4b05      	ldr	r3, [pc, #20]	; (80095f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80095da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80095dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80095de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3750      	adds	r7, #80	; 0x50
 80095e4:	46bd      	mov	sp, r7
 80095e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095ea:	bf00      	nop
 80095ec:	40023800 	.word	0x40023800
 80095f0:	00f42400 	.word	0x00f42400
 80095f4:	007a1200 	.word	0x007a1200

080095f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095f8:	b480      	push	{r7}
 80095fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80095fc:	4b03      	ldr	r3, [pc, #12]	; (800960c <HAL_RCC_GetHCLKFreq+0x14>)
 80095fe:	681b      	ldr	r3, [r3, #0]
}
 8009600:	4618      	mov	r0, r3
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	20000000 	.word	0x20000000

08009610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009614:	f7ff fff0 	bl	80095f8 <HAL_RCC_GetHCLKFreq>
 8009618:	4602      	mov	r2, r0
 800961a:	4b05      	ldr	r3, [pc, #20]	; (8009630 <HAL_RCC_GetPCLK1Freq+0x20>)
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	0a9b      	lsrs	r3, r3, #10
 8009620:	f003 0307 	and.w	r3, r3, #7
 8009624:	4903      	ldr	r1, [pc, #12]	; (8009634 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009626:	5ccb      	ldrb	r3, [r1, r3]
 8009628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800962c:	4618      	mov	r0, r3
 800962e:	bd80      	pop	{r7, pc}
 8009630:	40023800 	.word	0x40023800
 8009634:	0807ffe4 	.word	0x0807ffe4

08009638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800963c:	f7ff ffdc 	bl	80095f8 <HAL_RCC_GetHCLKFreq>
 8009640:	4602      	mov	r2, r0
 8009642:	4b05      	ldr	r3, [pc, #20]	; (8009658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	0b5b      	lsrs	r3, r3, #13
 8009648:	f003 0307 	and.w	r3, r3, #7
 800964c:	4903      	ldr	r1, [pc, #12]	; (800965c <HAL_RCC_GetPCLK2Freq+0x24>)
 800964e:	5ccb      	ldrb	r3, [r1, r3]
 8009650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009654:	4618      	mov	r0, r3
 8009656:	bd80      	pop	{r7, pc}
 8009658:	40023800 	.word	0x40023800
 800965c:	0807ffe4 	.word	0x0807ffe4

08009660 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009660:	b480      	push	{r7}
 8009662:	b083      	sub	sp, #12
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	220f      	movs	r2, #15
 800966e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009670:	4b12      	ldr	r3, [pc, #72]	; (80096bc <HAL_RCC_GetClockConfig+0x5c>)
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	f003 0203 	and.w	r2, r3, #3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800967c:	4b0f      	ldr	r3, [pc, #60]	; (80096bc <HAL_RCC_GetClockConfig+0x5c>)
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009688:	4b0c      	ldr	r3, [pc, #48]	; (80096bc <HAL_RCC_GetClockConfig+0x5c>)
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009694:	4b09      	ldr	r3, [pc, #36]	; (80096bc <HAL_RCC_GetClockConfig+0x5c>)
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	08db      	lsrs	r3, r3, #3
 800969a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096a2:	4b07      	ldr	r3, [pc, #28]	; (80096c0 <HAL_RCC_GetClockConfig+0x60>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 020f 	and.w	r2, r3, #15
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	601a      	str	r2, [r3, #0]
}
 80096ae:	bf00      	nop
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	40023800 	.word	0x40023800
 80096c0:	40023c00 	.word	0x40023c00

080096c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80096cc:	2300      	movs	r3, #0
 80096ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80096d0:	2300      	movs	r3, #0
 80096d2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d10b      	bne.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d105      	bne.n	80096f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d075      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80096f8:	4b91      	ldr	r3, [pc, #580]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80096fa:	2200      	movs	r2, #0
 80096fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80096fe:	f7fa ff97 	bl	8004630 <HAL_GetTick>
 8009702:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009704:	e008      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009706:	f7fa ff93 	bl	8004630 <HAL_GetTick>
 800970a:	4602      	mov	r2, r0
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	2b02      	cmp	r3, #2
 8009712:	d901      	bls.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009714:	2303      	movs	r3, #3
 8009716:	e189      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009718:	4b8a      	ldr	r3, [pc, #552]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1f0      	bne.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 0301 	and.w	r3, r3, #1
 800972c:	2b00      	cmp	r3, #0
 800972e:	d009      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	019a      	lsls	r2, r3, #6
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	071b      	lsls	r3, r3, #28
 800973c:	4981      	ldr	r1, [pc, #516]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800973e:	4313      	orrs	r3, r2
 8009740:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0302 	and.w	r3, r3, #2
 800974c:	2b00      	cmp	r3, #0
 800974e:	d01f      	beq.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009750:	4b7c      	ldr	r3, [pc, #496]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009756:	0f1b      	lsrs	r3, r3, #28
 8009758:	f003 0307 	and.w	r3, r3, #7
 800975c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	019a      	lsls	r2, r3, #6
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	061b      	lsls	r3, r3, #24
 800976a:	431a      	orrs	r2, r3
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	071b      	lsls	r3, r3, #28
 8009770:	4974      	ldr	r1, [pc, #464]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009772:	4313      	orrs	r3, r2
 8009774:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009778:	4b72      	ldr	r3, [pc, #456]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800977a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800977e:	f023 021f 	bic.w	r2, r3, #31
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	3b01      	subs	r3, #1
 8009788:	496e      	ldr	r1, [pc, #440]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800978a:	4313      	orrs	r3, r2
 800978c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00d      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	019a      	lsls	r2, r3, #6
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	68db      	ldr	r3, [r3, #12]
 80097a6:	061b      	lsls	r3, r3, #24
 80097a8:	431a      	orrs	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	071b      	lsls	r3, r3, #28
 80097b0:	4964      	ldr	r1, [pc, #400]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097b2:	4313      	orrs	r3, r2
 80097b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80097b8:	4b61      	ldr	r3, [pc, #388]	; (8009940 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80097ba:	2201      	movs	r2, #1
 80097bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80097be:	f7fa ff37 	bl	8004630 <HAL_GetTick>
 80097c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80097c4:	e008      	b.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80097c6:	f7fa ff33 	bl	8004630 <HAL_GetTick>
 80097ca:	4602      	mov	r2, r0
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	1ad3      	subs	r3, r2, r3
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d901      	bls.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097d4:	2303      	movs	r3, #3
 80097d6:	e129      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80097d8:	4b5a      	ldr	r3, [pc, #360]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0f0      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 0304 	and.w	r3, r3, #4
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d105      	bne.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d079      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80097fc:	4b52      	ldr	r3, [pc, #328]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009802:	f7fa ff15 	bl	8004630 <HAL_GetTick>
 8009806:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009808:	e008      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800980a:	f7fa ff11 	bl	8004630 <HAL_GetTick>
 800980e:	4602      	mov	r2, r0
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	2b02      	cmp	r3, #2
 8009816:	d901      	bls.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e107      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800981c:	4b49      	ldr	r3, [pc, #292]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009828:	d0ef      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f003 0304 	and.w	r3, r3, #4
 8009832:	2b00      	cmp	r3, #0
 8009834:	d020      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009836:	4b43      	ldr	r3, [pc, #268]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800983c:	0f1b      	lsrs	r3, r3, #28
 800983e:	f003 0307 	and.w	r3, r3, #7
 8009842:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	019a      	lsls	r2, r3, #6
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	061b      	lsls	r3, r3, #24
 8009850:	431a      	orrs	r2, r3
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	071b      	lsls	r3, r3, #28
 8009856:	493b      	ldr	r1, [pc, #236]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009858:	4313      	orrs	r3, r2
 800985a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800985e:	4b39      	ldr	r3, [pc, #228]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009864:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a1b      	ldr	r3, [r3, #32]
 800986c:	3b01      	subs	r3, #1
 800986e:	021b      	lsls	r3, r3, #8
 8009870:	4934      	ldr	r1, [pc, #208]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009872:	4313      	orrs	r3, r2
 8009874:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 0308 	and.w	r3, r3, #8
 8009880:	2b00      	cmp	r3, #0
 8009882:	d01e      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009884:	4b2f      	ldr	r3, [pc, #188]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800988a:	0e1b      	lsrs	r3, r3, #24
 800988c:	f003 030f 	and.w	r3, r3, #15
 8009890:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	019a      	lsls	r2, r3, #6
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	061b      	lsls	r3, r3, #24
 800989c:	431a      	orrs	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	071b      	lsls	r3, r3, #28
 80098a4:	4927      	ldr	r1, [pc, #156]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80098ac:	4b25      	ldr	r3, [pc, #148]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ba:	4922      	ldr	r1, [pc, #136]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098bc:	4313      	orrs	r3, r2
 80098be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80098c2:	4b21      	ldr	r3, [pc, #132]	; (8009948 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80098c4:	2201      	movs	r2, #1
 80098c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80098c8:	f7fa feb2 	bl	8004630 <HAL_GetTick>
 80098cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80098ce:	e008      	b.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80098d0:	f7fa feae 	bl	8004630 <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	2b02      	cmp	r3, #2
 80098dc:	d901      	bls.n	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098de:	2303      	movs	r3, #3
 80098e0:	e0a4      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80098e2:	4b18      	ldr	r3, [pc, #96]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098ee:	d1ef      	bne.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 0320 	and.w	r3, r3, #32
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 808b 	beq.w	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80098fe:	2300      	movs	r3, #0
 8009900:	60fb      	str	r3, [r7, #12]
 8009902:	4b10      	ldr	r3, [pc, #64]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009906:	4a0f      	ldr	r2, [pc, #60]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800990c:	6413      	str	r3, [r2, #64]	; 0x40
 800990e:	4b0d      	ldr	r3, [pc, #52]	; (8009944 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800991a:	4b0c      	ldr	r3, [pc, #48]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a0b      	ldr	r2, [pc, #44]	; (800994c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009924:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009926:	f7fa fe83 	bl	8004630 <HAL_GetTick>
 800992a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800992c:	e010      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800992e:	f7fa fe7f 	bl	8004630 <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	2b02      	cmp	r3, #2
 800993a:	d909      	bls.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800993c:	2303      	movs	r3, #3
 800993e:	e075      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8009940:	42470068 	.word	0x42470068
 8009944:	40023800 	.word	0x40023800
 8009948:	42470070 	.word	0x42470070
 800994c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009950:	4b38      	ldr	r3, [pc, #224]	; (8009a34 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009958:	2b00      	cmp	r3, #0
 800995a:	d0e8      	beq.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800995c:	4b36      	ldr	r3, [pc, #216]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800995e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009964:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d02f      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	429a      	cmp	r2, r3
 8009978:	d028      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800997a:	4b2f      	ldr	r3, [pc, #188]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800997c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009982:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009984:	4b2d      	ldr	r3, [pc, #180]	; (8009a3c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009986:	2201      	movs	r2, #1
 8009988:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800998a:	4b2c      	ldr	r3, [pc, #176]	; (8009a3c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009990:	4a29      	ldr	r2, [pc, #164]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009996:	4b28      	ldr	r3, [pc, #160]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d114      	bne.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80099a2:	f7fa fe45 	bl	8004630 <HAL_GetTick>
 80099a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099a8:	e00a      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80099aa:	f7fa fe41 	bl	8004630 <HAL_GetTick>
 80099ae:	4602      	mov	r2, r0
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d901      	bls.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e035      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80099c0:	4b1d      	ldr	r3, [pc, #116]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80099c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c4:	f003 0302 	and.w	r3, r3, #2
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d0ee      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099d8:	d10d      	bne.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80099da:	4b17      	ldr	r3, [pc, #92]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80099ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099ee:	4912      	ldr	r1, [pc, #72]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	608b      	str	r3, [r1, #8]
 80099f4:	e005      	b.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80099f6:	4b10      	ldr	r3, [pc, #64]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	4a0f      	ldr	r2, [pc, #60]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80099fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009a00:	6093      	str	r3, [r2, #8]
 8009a02:	4b0d      	ldr	r3, [pc, #52]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009a04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a0e:	490a      	ldr	r1, [pc, #40]	; (8009a38 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0310 	and.w	r3, r3, #16
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d004      	beq.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009a26:	4b06      	ldr	r3, [pc, #24]	; (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8009a28:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	40007000 	.word	0x40007000
 8009a38:	40023800 	.word	0x40023800
 8009a3c:	42470e40 	.word	0x42470e40
 8009a40:	424711e0 	.word	0x424711e0

08009a44 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d101      	bne.n	8009a58 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e025      	b.n	8009aa4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d106      	bne.n	8009a72 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7f9 fa91 	bl	8002f94 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2202      	movs	r2, #2
 8009a76:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	3304      	adds	r3, #4
 8009a82:	4619      	mov	r1, r3
 8009a84:	4610      	mov	r0, r2
 8009a86:	f001 fdf9 	bl	800b67c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6818      	ldr	r0, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	461a      	mov	r2, r3
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	f001 fe4e 	bl	800b736 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009abe:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d101      	bne.n	8009aca <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	e021      	b.n	8009b0e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009aca:	7dfb      	ldrb	r3, [r7, #23]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d002      	beq.n	8009ad6 <HAL_SDRAM_SendCommand+0x2a>
 8009ad0:	7dfb      	ldrb	r3, [r7, #23]
 8009ad2:	2b05      	cmp	r3, #5
 8009ad4:	d118      	bne.n	8009b08 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2202      	movs	r2, #2
 8009ada:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	68b9      	ldr	r1, [r7, #8]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f001 fe8e 	bl	800b808 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d104      	bne.n	8009afe <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2205      	movs	r2, #5
 8009af8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009afc:	e006      	b.n	8009b0c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009b06:	e001      	b.n	8009b0c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009b08:	2301      	movs	r3, #1
 8009b0a:	e000      	b.n	8009b0e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3718      	adds	r7, #24
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b082      	sub	sp, #8
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d101      	bne.n	8009b30 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009b2c:	2302      	movs	r3, #2
 8009b2e:	e016      	b.n	8009b5e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d10f      	bne.n	8009b5c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2202      	movs	r2, #2
 8009b40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f001 fe99 	bl	800b882 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	e000      	b.n	8009b5e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b082      	sub	sp, #8
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d101      	bne.n	8009b78 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e07b      	b.n	8009c70 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d108      	bne.n	8009b92 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b88:	d009      	beq.n	8009b9e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	61da      	str	r2, [r3, #28]
 8009b90:	e005      	b.n	8009b9e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d106      	bne.n	8009bbe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7f9 f85f 	bl	8002c7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bd4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009be6:	431a      	orrs	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bf0:	431a      	orrs	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	f003 0302 	and.w	r3, r3, #2
 8009bfa:	431a      	orrs	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	431a      	orrs	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c0e:	431a      	orrs	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	69db      	ldr	r3, [r3, #28]
 8009c14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c22:	ea42 0103 	orr.w	r1, r2, r3
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	430a      	orrs	r2, r1
 8009c34:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	699b      	ldr	r3, [r3, #24]
 8009c3a:	0c1b      	lsrs	r3, r3, #16
 8009c3c:	f003 0104 	and.w	r1, r3, #4
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c44:	f003 0210 	and.w	r2, r3, #16
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	430a      	orrs	r2, r1
 8009c4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	69da      	ldr	r2, [r3, #28]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d101      	bne.n	8009c8a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e01a      	b.n	8009cc0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2202      	movs	r2, #2
 8009c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ca0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f7f9 f832 	bl	8002d0c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2200      	movs	r2, #0
 8009cac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b088      	sub	sp, #32
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	603b      	str	r3, [r7, #0]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d101      	bne.n	8009cea <HAL_SPI_Transmit+0x22>
 8009ce6:	2302      	movs	r3, #2
 8009ce8:	e126      	b.n	8009f38 <HAL_SPI_Transmit+0x270>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009cf2:	f7fa fc9d 	bl	8004630 <HAL_GetTick>
 8009cf6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009cf8:	88fb      	ldrh	r3, [r7, #6]
 8009cfa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d002      	beq.n	8009d0e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009d08:	2302      	movs	r3, #2
 8009d0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009d0c:	e10b      	b.n	8009f26 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <HAL_SPI_Transmit+0x52>
 8009d14:	88fb      	ldrh	r3, [r7, #6]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d102      	bne.n	8009d20 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009d1e:	e102      	b.n	8009f26 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2203      	movs	r2, #3
 8009d24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	68ba      	ldr	r2, [r7, #8]
 8009d32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	88fa      	ldrh	r2, [r7, #6]
 8009d38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	88fa      	ldrh	r2, [r7, #6]
 8009d3e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	689b      	ldr	r3, [r3, #8]
 8009d62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d66:	d10f      	bne.n	8009d88 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d92:	2b40      	cmp	r3, #64	; 0x40
 8009d94:	d007      	beq.n	8009da6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009da4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dae:	d14b      	bne.n	8009e48 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <HAL_SPI_Transmit+0xf6>
 8009db8:	8afb      	ldrh	r3, [r7, #22]
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d13e      	bne.n	8009e3c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc2:	881a      	ldrh	r2, [r3, #0]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dce:	1c9a      	adds	r2, r3, #2
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009de2:	e02b      	b.n	8009e3c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f003 0302 	and.w	r3, r3, #2
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d112      	bne.n	8009e18 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df6:	881a      	ldrh	r2, [r3, #0]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e02:	1c9a      	adds	r2, r3, #2
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	b29a      	uxth	r2, r3
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	86da      	strh	r2, [r3, #54]	; 0x36
 8009e16:	e011      	b.n	8009e3c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e18:	f7fa fc0a 	bl	8004630 <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d803      	bhi.n	8009e30 <HAL_SPI_Transmit+0x168>
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e2e:	d102      	bne.n	8009e36 <HAL_SPI_Transmit+0x16e>
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d102      	bne.n	8009e3c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009e36:	2303      	movs	r3, #3
 8009e38:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009e3a:	e074      	b.n	8009f26 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1ce      	bne.n	8009de4 <HAL_SPI_Transmit+0x11c>
 8009e46:	e04c      	b.n	8009ee2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d002      	beq.n	8009e56 <HAL_SPI_Transmit+0x18e>
 8009e50:	8afb      	ldrh	r3, [r7, #22]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d140      	bne.n	8009ed8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	330c      	adds	r3, #12
 8009e60:	7812      	ldrb	r2, [r2, #0]
 8009e62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e68:	1c5a      	adds	r2, r3, #1
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	3b01      	subs	r3, #1
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009e7c:	e02c      	b.n	8009ed8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	f003 0302 	and.w	r3, r3, #2
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d113      	bne.n	8009eb4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	330c      	adds	r3, #12
 8009e96:	7812      	ldrb	r2, [r2, #0]
 8009e98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	86da      	strh	r2, [r3, #54]	; 0x36
 8009eb2:	e011      	b.n	8009ed8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009eb4:	f7fa fbbc 	bl	8004630 <HAL_GetTick>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	69bb      	ldr	r3, [r7, #24]
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d803      	bhi.n	8009ecc <HAL_SPI_Transmit+0x204>
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009eca:	d102      	bne.n	8009ed2 <HAL_SPI_Transmit+0x20a>
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d102      	bne.n	8009ed8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009ed6:	e026      	b.n	8009f26 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1cd      	bne.n	8009e7e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ee2:	69ba      	ldr	r2, [r7, #24]
 8009ee4:	6839      	ldr	r1, [r7, #0]
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f000 fbda 	bl	800a6a0 <SPI_EndRxTxTransaction>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2220      	movs	r2, #32
 8009ef6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10a      	bne.n	8009f16 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f00:	2300      	movs	r3, #0
 8009f02:	613b      	str	r3, [r7, #16]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	613b      	str	r3, [r7, #16]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	613b      	str	r3, [r7, #16]
 8009f14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	77fb      	strb	r3, [r7, #31]
 8009f22:	e000      	b.n	8009f26 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009f24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009f36:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3720      	adds	r7, #32
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b088      	sub	sp, #32
 8009f44:	af02      	add	r7, sp, #8
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f5c:	d112      	bne.n	8009f84 <HAL_SPI_Receive+0x44>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10e      	bne.n	8009f84 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2204      	movs	r2, #4
 8009f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009f6e:	88fa      	ldrh	r2, [r7, #6]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	4613      	mov	r3, r2
 8009f76:	68ba      	ldr	r2, [r7, #8]
 8009f78:	68b9      	ldr	r1, [r7, #8]
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 f8f1 	bl	800a162 <HAL_SPI_TransmitReceive>
 8009f80:	4603      	mov	r3, r0
 8009f82:	e0ea      	b.n	800a15a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d101      	bne.n	8009f92 <HAL_SPI_Receive+0x52>
 8009f8e:	2302      	movs	r3, #2
 8009f90:	e0e3      	b.n	800a15a <HAL_SPI_Receive+0x21a>
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f9a:	f7fa fb49 	bl	8004630 <HAL_GetTick>
 8009f9e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d002      	beq.n	8009fb2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8009fac:	2302      	movs	r3, #2
 8009fae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009fb0:	e0ca      	b.n	800a148 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d002      	beq.n	8009fbe <HAL_SPI_Receive+0x7e>
 8009fb8:	88fb      	ldrh	r3, [r7, #6]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d102      	bne.n	8009fc4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009fc2:	e0c1      	b.n	800a148 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2204      	movs	r2, #4
 8009fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	88fa      	ldrh	r2, [r7, #6]
 8009fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	88fa      	ldrh	r2, [r7, #6]
 8009fe2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2200      	movs	r2, #0
 8009fee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a00a:	d10f      	bne.n	800a02c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a01a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a02a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a036:	2b40      	cmp	r3, #64	; 0x40
 800a038:	d007      	beq.n	800a04a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a048:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d162      	bne.n	800a118 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a052:	e02e      	b.n	800a0b2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	2b01      	cmp	r3, #1
 800a060:	d115      	bne.n	800a08e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f103 020c 	add.w	r2, r3, #12
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06e:	7812      	ldrb	r2, [r2, #0]
 800a070:	b2d2      	uxtb	r2, r2
 800a072:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a078:	1c5a      	adds	r2, r3, #1
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a082:	b29b      	uxth	r3, r3
 800a084:	3b01      	subs	r3, #1
 800a086:	b29a      	uxth	r2, r3
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a08c:	e011      	b.n	800a0b2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a08e:	f7fa facf 	bl	8004630 <HAL_GetTick>
 800a092:	4602      	mov	r2, r0
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d803      	bhi.n	800a0a6 <HAL_SPI_Receive+0x166>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0a4:	d102      	bne.n	800a0ac <HAL_SPI_Receive+0x16c>
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d102      	bne.n	800a0b2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a0b0:	e04a      	b.n	800a148 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d1cb      	bne.n	800a054 <HAL_SPI_Receive+0x114>
 800a0bc:	e031      	b.n	800a122 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	f003 0301 	and.w	r3, r3, #1
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d113      	bne.n	800a0f4 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68da      	ldr	r2, [r3, #12]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d6:	b292      	uxth	r2, r2
 800a0d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0de:	1c9a      	adds	r2, r3, #2
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a0f2:	e011      	b.n	800a118 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0f4:	f7fa fa9c 	bl	8004630 <HAL_GetTick>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	683a      	ldr	r2, [r7, #0]
 800a100:	429a      	cmp	r2, r3
 800a102:	d803      	bhi.n	800a10c <HAL_SPI_Receive+0x1cc>
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a10a:	d102      	bne.n	800a112 <HAL_SPI_Receive+0x1d2>
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d102      	bne.n	800a118 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800a112:	2303      	movs	r3, #3
 800a114:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a116:	e017      	b.n	800a148 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1cd      	bne.n	800a0be <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	68f8      	ldr	r0, [r7, #12]
 800a128:	f000 fa54 	bl	800a5d4 <SPI_EndRxTransaction>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d002      	beq.n	800a138 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2220      	movs	r2, #32
 800a136:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d002      	beq.n	800a146 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	75fb      	strb	r3, [r7, #23]
 800a144:	e000      	b.n	800a148 <HAL_SPI_Receive+0x208>
  }

error :
 800a146:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a158:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3718      	adds	r7, #24
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b08c      	sub	sp, #48	; 0x30
 800a166:	af00      	add	r7, sp, #0
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	60b9      	str	r1, [r7, #8]
 800a16c:	607a      	str	r2, [r7, #4]
 800a16e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a170:	2301      	movs	r3, #1
 800a172:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a180:	2b01      	cmp	r3, #1
 800a182:	d101      	bne.n	800a188 <HAL_SPI_TransmitReceive+0x26>
 800a184:	2302      	movs	r3, #2
 800a186:	e18a      	b.n	800a49e <HAL_SPI_TransmitReceive+0x33c>
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2201      	movs	r2, #1
 800a18c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a190:	f7fa fa4e 	bl	8004630 <HAL_GetTick>
 800a194:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a19c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a1a6:	887b      	ldrh	r3, [r7, #2]
 800a1a8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a1aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d00f      	beq.n	800a1d2 <HAL_SPI_TransmitReceive+0x70>
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1b8:	d107      	bne.n	800a1ca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d103      	bne.n	800a1ca <HAL_SPI_TransmitReceive+0x68>
 800a1c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	d003      	beq.n	800a1d2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a1ca:	2302      	movs	r3, #2
 800a1cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a1d0:	e15b      	b.n	800a48a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d005      	beq.n	800a1e4 <HAL_SPI_TransmitReceive+0x82>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d002      	beq.n	800a1e4 <HAL_SPI_TransmitReceive+0x82>
 800a1de:	887b      	ldrh	r3, [r7, #2]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d103      	bne.n	800a1ec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a1ea:	e14e      	b.n	800a48a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	2b04      	cmp	r3, #4
 800a1f6:	d003      	beq.n	800a200 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2205      	movs	r2, #5
 800a1fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	887a      	ldrh	r2, [r7, #2]
 800a210:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	887a      	ldrh	r2, [r7, #2]
 800a216:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	887a      	ldrh	r2, [r7, #2]
 800a222:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	887a      	ldrh	r2, [r7, #2]
 800a228:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2200      	movs	r2, #0
 800a22e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a240:	2b40      	cmp	r3, #64	; 0x40
 800a242:	d007      	beq.n	800a254 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a252:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a25c:	d178      	bne.n	800a350 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <HAL_SPI_TransmitReceive+0x10a>
 800a266:	8b7b      	ldrh	r3, [r7, #26]
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d166      	bne.n	800a33a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a270:	881a      	ldrh	r2, [r3, #0]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a27c:	1c9a      	adds	r2, r3, #2
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a286:	b29b      	uxth	r3, r3
 800a288:	3b01      	subs	r3, #1
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a290:	e053      	b.n	800a33a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	f003 0302 	and.w	r3, r3, #2
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d11b      	bne.n	800a2d8 <HAL_SPI_TransmitReceive+0x176>
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d016      	beq.n	800a2d8 <HAL_SPI_TransmitReceive+0x176>
 800a2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	d113      	bne.n	800a2d8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2b4:	881a      	ldrh	r2, [r3, #0]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c0:	1c9a      	adds	r2, r3, #2
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	689b      	ldr	r3, [r3, #8]
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d119      	bne.n	800a31a <HAL_SPI_TransmitReceive+0x1b8>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d014      	beq.n	800a31a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	68da      	ldr	r2, [r3, #12]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fa:	b292      	uxth	r2, r2
 800a2fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a302:	1c9a      	adds	r2, r3, #2
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	3b01      	subs	r3, #1
 800a310:	b29a      	uxth	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a316:	2301      	movs	r3, #1
 800a318:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a31a:	f7fa f989 	bl	8004630 <HAL_GetTick>
 800a31e:	4602      	mov	r2, r0
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	1ad3      	subs	r3, r2, r3
 800a324:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a326:	429a      	cmp	r2, r3
 800a328:	d807      	bhi.n	800a33a <HAL_SPI_TransmitReceive+0x1d8>
 800a32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a330:	d003      	beq.n	800a33a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a332:	2303      	movs	r3, #3
 800a334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a338:	e0a7      	b.n	800a48a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a33e:	b29b      	uxth	r3, r3
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1a6      	bne.n	800a292 <HAL_SPI_TransmitReceive+0x130>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a348:	b29b      	uxth	r3, r3
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1a1      	bne.n	800a292 <HAL_SPI_TransmitReceive+0x130>
 800a34e:	e07c      	b.n	800a44a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d002      	beq.n	800a35e <HAL_SPI_TransmitReceive+0x1fc>
 800a358:	8b7b      	ldrh	r3, [r7, #26]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d16b      	bne.n	800a436 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	330c      	adds	r3, #12
 800a368:	7812      	ldrb	r2, [r2, #0]
 800a36a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	3b01      	subs	r3, #1
 800a37e:	b29a      	uxth	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a384:	e057      	b.n	800a436 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	f003 0302 	and.w	r3, r3, #2
 800a390:	2b02      	cmp	r3, #2
 800a392:	d11c      	bne.n	800a3ce <HAL_SPI_TransmitReceive+0x26c>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a398:	b29b      	uxth	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d017      	beq.n	800a3ce <HAL_SPI_TransmitReceive+0x26c>
 800a39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d114      	bne.n	800a3ce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	330c      	adds	r3, #12
 800a3ae:	7812      	ldrb	r2, [r2, #0]
 800a3b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b6:	1c5a      	adds	r2, r3, #1
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	f003 0301 	and.w	r3, r3, #1
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	d119      	bne.n	800a410 <HAL_SPI_TransmitReceive+0x2ae>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d014      	beq.n	800a410 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68da      	ldr	r2, [r3, #12]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f0:	b2d2      	uxtb	r2, r2
 800a3f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f8:	1c5a      	adds	r2, r3, #1
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a402:	b29b      	uxth	r3, r3
 800a404:	3b01      	subs	r3, #1
 800a406:	b29a      	uxth	r2, r3
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a40c:	2301      	movs	r3, #1
 800a40e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a410:	f7fa f90e 	bl	8004630 <HAL_GetTick>
 800a414:	4602      	mov	r2, r0
 800a416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d803      	bhi.n	800a428 <HAL_SPI_TransmitReceive+0x2c6>
 800a420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a426:	d102      	bne.n	800a42e <HAL_SPI_TransmitReceive+0x2cc>
 800a428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d103      	bne.n	800a436 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a434:	e029      	b.n	800a48a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1a2      	bne.n	800a386 <HAL_SPI_TransmitReceive+0x224>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a444:	b29b      	uxth	r3, r3
 800a446:	2b00      	cmp	r3, #0
 800a448:	d19d      	bne.n	800a386 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a44a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a44c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	f000 f926 	bl	800a6a0 <SPI_EndRxTxTransaction>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d006      	beq.n	800a468 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2220      	movs	r2, #32
 800a464:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a466:	e010      	b.n	800a48a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d10b      	bne.n	800a488 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a470:	2300      	movs	r3, #0
 800a472:	617b      	str	r3, [r7, #20]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	68db      	ldr	r3, [r3, #12]
 800a47a:	617b      	str	r3, [r7, #20]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	617b      	str	r3, [r7, #20]
 800a484:	697b      	ldr	r3, [r7, #20]
 800a486:	e000      	b.n	800a48a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a488:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2201      	movs	r2, #1
 800a48e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a49a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3730      	adds	r7, #48	; 0x30
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b083      	sub	sp, #12
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a4b4:	b2db      	uxtb	r3, r3
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	370c      	adds	r7, #12
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
	...

0800a4c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b088      	sub	sp, #32
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	603b      	str	r3, [r7, #0]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a4d4:	f7fa f8ac 	bl	8004630 <HAL_GetTick>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4dc:	1a9b      	subs	r3, r3, r2
 800a4de:	683a      	ldr	r2, [r7, #0]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a4e4:	f7fa f8a4 	bl	8004630 <HAL_GetTick>
 800a4e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a4ea:	4b39      	ldr	r3, [pc, #228]	; (800a5d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	015b      	lsls	r3, r3, #5
 800a4f0:	0d1b      	lsrs	r3, r3, #20
 800a4f2:	69fa      	ldr	r2, [r7, #28]
 800a4f4:	fb02 f303 	mul.w	r3, r2, r3
 800a4f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4fa:	e054      	b.n	800a5a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a502:	d050      	beq.n	800a5a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a504:	f7fa f894 	bl	8004630 <HAL_GetTick>
 800a508:	4602      	mov	r2, r0
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	69fa      	ldr	r2, [r7, #28]
 800a510:	429a      	cmp	r2, r3
 800a512:	d902      	bls.n	800a51a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d13d      	bne.n	800a596 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	685a      	ldr	r2, [r3, #4]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a528:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a532:	d111      	bne.n	800a558 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a53c:	d004      	beq.n	800a548 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a546:	d107      	bne.n	800a558 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a556:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a55c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a560:	d10f      	bne.n	800a582 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a580:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a592:	2303      	movs	r3, #3
 800a594:	e017      	b.n	800a5c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d101      	bne.n	800a5a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a59c:	2300      	movs	r3, #0
 800a59e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689a      	ldr	r2, [r3, #8]
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	bf0c      	ite	eq
 800a5b6:	2301      	moveq	r3, #1
 800a5b8:	2300      	movne	r3, #0
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	461a      	mov	r2, r3
 800a5be:	79fb      	ldrb	r3, [r7, #7]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d19b      	bne.n	800a4fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3720      	adds	r7, #32
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	20000000 	.word	0x20000000

0800a5d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af02      	add	r7, sp, #8
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5e8:	d111      	bne.n	800a60e <SPI_EndRxTransaction+0x3a>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5f2:	d004      	beq.n	800a5fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5fc:	d107      	bne.n	800a60e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a60c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a616:	d12a      	bne.n	800a66e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a620:	d012      	beq.n	800a648 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	9300      	str	r3, [sp, #0]
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	2200      	movs	r2, #0
 800a62a:	2180      	movs	r1, #128	; 0x80
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f7ff ff49 	bl	800a4c4 <SPI_WaitFlagStateUntilTimeout>
 800a632:	4603      	mov	r3, r0
 800a634:	2b00      	cmp	r3, #0
 800a636:	d02d      	beq.n	800a694 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a63c:	f043 0220 	orr.w	r2, r3, #32
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a644:	2303      	movs	r3, #3
 800a646:	e026      	b.n	800a696 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	2200      	movs	r2, #0
 800a650:	2101      	movs	r1, #1
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f7ff ff36 	bl	800a4c4 <SPI_WaitFlagStateUntilTimeout>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d01a      	beq.n	800a694 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a662:	f043 0220 	orr.w	r2, r3, #32
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a66a:	2303      	movs	r3, #3
 800a66c:	e013      	b.n	800a696 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	2200      	movs	r2, #0
 800a676:	2101      	movs	r1, #1
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f7ff ff23 	bl	800a4c4 <SPI_WaitFlagStateUntilTimeout>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d007      	beq.n	800a694 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a688:	f043 0220 	orr.w	r2, r3, #32
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a690:	2303      	movs	r3, #3
 800a692:	e000      	b.n	800a696 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
	...

0800a6a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b088      	sub	sp, #32
 800a6a4:	af02      	add	r7, sp, #8
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a6ac:	4b1b      	ldr	r3, [pc, #108]	; (800a71c <SPI_EndRxTxTransaction+0x7c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a1b      	ldr	r2, [pc, #108]	; (800a720 <SPI_EndRxTxTransaction+0x80>)
 800a6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6b6:	0d5b      	lsrs	r3, r3, #21
 800a6b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a6bc:	fb02 f303 	mul.w	r3, r2, r3
 800a6c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6ca:	d112      	bne.n	800a6f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	2180      	movs	r1, #128	; 0x80
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f7ff fef4 	bl	800a4c4 <SPI_WaitFlagStateUntilTimeout>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d016      	beq.n	800a710 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6e6:	f043 0220 	orr.w	r2, r3, #32
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e00f      	b.n	800a712 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00a      	beq.n	800a70e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a708:	2b80      	cmp	r3, #128	; 0x80
 800a70a:	d0f2      	beq.n	800a6f2 <SPI_EndRxTxTransaction+0x52>
 800a70c:	e000      	b.n	800a710 <SPI_EndRxTxTransaction+0x70>
        break;
 800a70e:	bf00      	nop
  }

  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20000000 	.word	0x20000000
 800a720:	165e9f81 	.word	0x165e9f81

0800a724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d101      	bne.n	800a736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e041      	b.n	800a7ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d106      	bne.n	800a750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f7f8 fafc 	bl	8002d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2202      	movs	r2, #2
 800a754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	3304      	adds	r3, #4
 800a760:	4619      	mov	r1, r3
 800a762:	4610      	mov	r0, r2
 800a764:	f000 fafe 	bl	800ad64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2201      	movs	r2, #1
 800a77c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2201      	movs	r2, #1
 800a794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2201      	movs	r2, #1
 800a7a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7b8:	2300      	movs	r3, #0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
	...

0800a7c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d001      	beq.n	800a7dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e046      	b.n	800a86a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2202      	movs	r2, #2
 800a7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a23      	ldr	r2, [pc, #140]	; (800a878 <HAL_TIM_Base_Start+0xb4>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d022      	beq.n	800a834 <HAL_TIM_Base_Start+0x70>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7f6:	d01d      	beq.n	800a834 <HAL_TIM_Base_Start+0x70>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a1f      	ldr	r2, [pc, #124]	; (800a87c <HAL_TIM_Base_Start+0xb8>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d018      	beq.n	800a834 <HAL_TIM_Base_Start+0x70>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a1e      	ldr	r2, [pc, #120]	; (800a880 <HAL_TIM_Base_Start+0xbc>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d013      	beq.n	800a834 <HAL_TIM_Base_Start+0x70>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a1c      	ldr	r2, [pc, #112]	; (800a884 <HAL_TIM_Base_Start+0xc0>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d00e      	beq.n	800a834 <HAL_TIM_Base_Start+0x70>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a1b      	ldr	r2, [pc, #108]	; (800a888 <HAL_TIM_Base_Start+0xc4>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d009      	beq.n	800a834 <HAL_TIM_Base_Start+0x70>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a19      	ldr	r2, [pc, #100]	; (800a88c <HAL_TIM_Base_Start+0xc8>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d004      	beq.n	800a834 <HAL_TIM_Base_Start+0x70>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a18      	ldr	r2, [pc, #96]	; (800a890 <HAL_TIM_Base_Start+0xcc>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d111      	bne.n	800a858 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	f003 0307 	and.w	r3, r3, #7
 800a83e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2b06      	cmp	r3, #6
 800a844:	d010      	beq.n	800a868 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f042 0201 	orr.w	r2, r2, #1
 800a854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a856:	e007      	b.n	800a868 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f042 0201 	orr.w	r2, r2, #1
 800a866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	40010000 	.word	0x40010000
 800a87c:	40000400 	.word	0x40000400
 800a880:	40000800 	.word	0x40000800
 800a884:	40000c00 	.word	0x40000c00
 800a888:	40010400 	.word	0x40010400
 800a88c:	40014000 	.word	0x40014000
 800a890:	40001800 	.word	0x40001800

0800a894 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a894:	b480      	push	{r7}
 800a896:	b085      	sub	sp, #20
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d001      	beq.n	800a8ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e04e      	b.n	800a94a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2202      	movs	r2, #2
 800a8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68da      	ldr	r2, [r3, #12]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f042 0201 	orr.w	r2, r2, #1
 800a8c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a23      	ldr	r2, [pc, #140]	; (800a958 <HAL_TIM_Base_Start_IT+0xc4>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d022      	beq.n	800a914 <HAL_TIM_Base_Start_IT+0x80>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8d6:	d01d      	beq.n	800a914 <HAL_TIM_Base_Start_IT+0x80>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a1f      	ldr	r2, [pc, #124]	; (800a95c <HAL_TIM_Base_Start_IT+0xc8>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d018      	beq.n	800a914 <HAL_TIM_Base_Start_IT+0x80>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a1e      	ldr	r2, [pc, #120]	; (800a960 <HAL_TIM_Base_Start_IT+0xcc>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d013      	beq.n	800a914 <HAL_TIM_Base_Start_IT+0x80>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a1c      	ldr	r2, [pc, #112]	; (800a964 <HAL_TIM_Base_Start_IT+0xd0>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d00e      	beq.n	800a914 <HAL_TIM_Base_Start_IT+0x80>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a1b      	ldr	r2, [pc, #108]	; (800a968 <HAL_TIM_Base_Start_IT+0xd4>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d009      	beq.n	800a914 <HAL_TIM_Base_Start_IT+0x80>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a19      	ldr	r2, [pc, #100]	; (800a96c <HAL_TIM_Base_Start_IT+0xd8>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d004      	beq.n	800a914 <HAL_TIM_Base_Start_IT+0x80>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a18      	ldr	r2, [pc, #96]	; (800a970 <HAL_TIM_Base_Start_IT+0xdc>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d111      	bne.n	800a938 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	f003 0307 	and.w	r3, r3, #7
 800a91e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2b06      	cmp	r3, #6
 800a924:	d010      	beq.n	800a948 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f042 0201 	orr.w	r2, r2, #1
 800a934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a936:	e007      	b.n	800a948 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f042 0201 	orr.w	r2, r2, #1
 800a946:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	40010000 	.word	0x40010000
 800a95c:	40000400 	.word	0x40000400
 800a960:	40000800 	.word	0x40000800
 800a964:	40000c00 	.word	0x40000c00
 800a968:	40010400 	.word	0x40010400
 800a96c:	40014000 	.word	0x40014000
 800a970:	40001800 	.word	0x40001800

0800a974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	f003 0302 	and.w	r3, r3, #2
 800a986:	2b02      	cmp	r3, #2
 800a988:	d122      	bne.n	800a9d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	f003 0302 	and.w	r3, r3, #2
 800a994:	2b02      	cmp	r3, #2
 800a996:	d11b      	bne.n	800a9d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f06f 0202 	mvn.w	r2, #2
 800a9a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	699b      	ldr	r3, [r3, #24]
 800a9ae:	f003 0303 	and.w	r3, r3, #3
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d003      	beq.n	800a9be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f9b5 	bl	800ad26 <HAL_TIM_IC_CaptureCallback>
 800a9bc:	e005      	b.n	800a9ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f9a7 	bl	800ad12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 f9b8 	bl	800ad3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	f003 0304 	and.w	r3, r3, #4
 800a9da:	2b04      	cmp	r3, #4
 800a9dc:	d122      	bne.n	800aa24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f003 0304 	and.w	r3, r3, #4
 800a9e8:	2b04      	cmp	r3, #4
 800a9ea:	d11b      	bne.n	800aa24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f06f 0204 	mvn.w	r2, #4
 800a9f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d003      	beq.n	800aa12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f98b 	bl	800ad26 <HAL_TIM_IC_CaptureCallback>
 800aa10:	e005      	b.n	800aa1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f97d 	bl	800ad12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f98e 	bl	800ad3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2200      	movs	r2, #0
 800aa22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	f003 0308 	and.w	r3, r3, #8
 800aa2e:	2b08      	cmp	r3, #8
 800aa30:	d122      	bne.n	800aa78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	f003 0308 	and.w	r3, r3, #8
 800aa3c:	2b08      	cmp	r3, #8
 800aa3e:	d11b      	bne.n	800aa78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f06f 0208 	mvn.w	r2, #8
 800aa48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2204      	movs	r2, #4
 800aa4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	69db      	ldr	r3, [r3, #28]
 800aa56:	f003 0303 	and.w	r3, r3, #3
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d003      	beq.n	800aa66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f961 	bl	800ad26 <HAL_TIM_IC_CaptureCallback>
 800aa64:	e005      	b.n	800aa72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 f953 	bl	800ad12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 f964 	bl	800ad3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	f003 0310 	and.w	r3, r3, #16
 800aa82:	2b10      	cmp	r3, #16
 800aa84:	d122      	bne.n	800aacc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	f003 0310 	and.w	r3, r3, #16
 800aa90:	2b10      	cmp	r3, #16
 800aa92:	d11b      	bne.n	800aacc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f06f 0210 	mvn.w	r2, #16
 800aa9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2208      	movs	r2, #8
 800aaa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d003      	beq.n	800aaba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 f937 	bl	800ad26 <HAL_TIM_IC_CaptureCallback>
 800aab8:	e005      	b.n	800aac6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 f929 	bl	800ad12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 f93a 	bl	800ad3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	f003 0301 	and.w	r3, r3, #1
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d10e      	bne.n	800aaf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d107      	bne.n	800aaf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f06f 0201 	mvn.w	r2, #1
 800aaf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f7f7 fd9e 	bl	8002634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab02:	2b80      	cmp	r3, #128	; 0x80
 800ab04:	d10e      	bne.n	800ab24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab10:	2b80      	cmp	r3, #128	; 0x80
 800ab12:	d107      	bne.n	800ab24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ab1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 fae0 	bl	800b0e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab2e:	2b40      	cmp	r3, #64	; 0x40
 800ab30:	d10e      	bne.n	800ab50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab3c:	2b40      	cmp	r3, #64	; 0x40
 800ab3e:	d107      	bne.n	800ab50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 f8ff 	bl	800ad4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	f003 0320 	and.w	r3, r3, #32
 800ab5a:	2b20      	cmp	r3, #32
 800ab5c:	d10e      	bne.n	800ab7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	68db      	ldr	r3, [r3, #12]
 800ab64:	f003 0320 	and.w	r3, r3, #32
 800ab68:	2b20      	cmp	r3, #32
 800ab6a:	d107      	bne.n	800ab7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f06f 0220 	mvn.w	r2, #32
 800ab74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 faaa 	bl	800b0d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab7c:	bf00      	nop
 800ab7e:	3708      	adds	r7, #8
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d101      	bne.n	800aba0 <HAL_TIM_ConfigClockSource+0x1c>
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	e0b4      	b.n	800ad0a <HAL_TIM_ConfigClockSource+0x186>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2202      	movs	r2, #2
 800abac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800abbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800abc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abd8:	d03e      	beq.n	800ac58 <HAL_TIM_ConfigClockSource+0xd4>
 800abda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abde:	f200 8087 	bhi.w	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800abe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abe6:	f000 8086 	beq.w	800acf6 <HAL_TIM_ConfigClockSource+0x172>
 800abea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abee:	d87f      	bhi.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800abf0:	2b70      	cmp	r3, #112	; 0x70
 800abf2:	d01a      	beq.n	800ac2a <HAL_TIM_ConfigClockSource+0xa6>
 800abf4:	2b70      	cmp	r3, #112	; 0x70
 800abf6:	d87b      	bhi.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800abf8:	2b60      	cmp	r3, #96	; 0x60
 800abfa:	d050      	beq.n	800ac9e <HAL_TIM_ConfigClockSource+0x11a>
 800abfc:	2b60      	cmp	r3, #96	; 0x60
 800abfe:	d877      	bhi.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800ac00:	2b50      	cmp	r3, #80	; 0x50
 800ac02:	d03c      	beq.n	800ac7e <HAL_TIM_ConfigClockSource+0xfa>
 800ac04:	2b50      	cmp	r3, #80	; 0x50
 800ac06:	d873      	bhi.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800ac08:	2b40      	cmp	r3, #64	; 0x40
 800ac0a:	d058      	beq.n	800acbe <HAL_TIM_ConfigClockSource+0x13a>
 800ac0c:	2b40      	cmp	r3, #64	; 0x40
 800ac0e:	d86f      	bhi.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800ac10:	2b30      	cmp	r3, #48	; 0x30
 800ac12:	d064      	beq.n	800acde <HAL_TIM_ConfigClockSource+0x15a>
 800ac14:	2b30      	cmp	r3, #48	; 0x30
 800ac16:	d86b      	bhi.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800ac18:	2b20      	cmp	r3, #32
 800ac1a:	d060      	beq.n	800acde <HAL_TIM_ConfigClockSource+0x15a>
 800ac1c:	2b20      	cmp	r3, #32
 800ac1e:	d867      	bhi.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d05c      	beq.n	800acde <HAL_TIM_ConfigClockSource+0x15a>
 800ac24:	2b10      	cmp	r3, #16
 800ac26:	d05a      	beq.n	800acde <HAL_TIM_ConfigClockSource+0x15a>
 800ac28:	e062      	b.n	800acf0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6818      	ldr	r0, [r3, #0]
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	6899      	ldr	r1, [r3, #8]
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	685a      	ldr	r2, [r3, #4]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	f000 f9ad 	bl	800af98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ac4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68ba      	ldr	r2, [r7, #8]
 800ac54:	609a      	str	r2, [r3, #8]
      break;
 800ac56:	e04f      	b.n	800acf8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6818      	ldr	r0, [r3, #0]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	6899      	ldr	r1, [r3, #8]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	f000 f996 	bl	800af98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	689a      	ldr	r2, [r3, #8]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac7a:	609a      	str	r2, [r3, #8]
      break;
 800ac7c:	e03c      	b.n	800acf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6818      	ldr	r0, [r3, #0]
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	6859      	ldr	r1, [r3, #4]
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	f000 f90a 	bl	800aea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2150      	movs	r1, #80	; 0x50
 800ac96:	4618      	mov	r0, r3
 800ac98:	f000 f963 	bl	800af62 <TIM_ITRx_SetConfig>
      break;
 800ac9c:	e02c      	b.n	800acf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6818      	ldr	r0, [r3, #0]
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	6859      	ldr	r1, [r3, #4]
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	461a      	mov	r2, r3
 800acac:	f000 f929 	bl	800af02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2160      	movs	r1, #96	; 0x60
 800acb6:	4618      	mov	r0, r3
 800acb8:	f000 f953 	bl	800af62 <TIM_ITRx_SetConfig>
      break;
 800acbc:	e01c      	b.n	800acf8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6818      	ldr	r0, [r3, #0]
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	6859      	ldr	r1, [r3, #4]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	461a      	mov	r2, r3
 800accc:	f000 f8ea 	bl	800aea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	2140      	movs	r1, #64	; 0x40
 800acd6:	4618      	mov	r0, r3
 800acd8:	f000 f943 	bl	800af62 <TIM_ITRx_SetConfig>
      break;
 800acdc:	e00c      	b.n	800acf8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4619      	mov	r1, r3
 800ace8:	4610      	mov	r0, r2
 800acea:	f000 f93a 	bl	800af62 <TIM_ITRx_SetConfig>
      break;
 800acee:	e003      	b.n	800acf8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	73fb      	strb	r3, [r7, #15]
      break;
 800acf4:	e000      	b.n	800acf8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800acf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ad08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b083      	sub	sp, #12
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ad1a:	bf00      	nop
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b083      	sub	sp, #12
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ad2e:	bf00      	nop
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b083      	sub	sp, #12
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ad42:	bf00      	nop
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b083      	sub	sp, #12
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ad56:	bf00      	nop
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
	...

0800ad64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b085      	sub	sp, #20
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a40      	ldr	r2, [pc, #256]	; (800ae78 <TIM_Base_SetConfig+0x114>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d013      	beq.n	800ada4 <TIM_Base_SetConfig+0x40>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad82:	d00f      	beq.n	800ada4 <TIM_Base_SetConfig+0x40>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4a3d      	ldr	r2, [pc, #244]	; (800ae7c <TIM_Base_SetConfig+0x118>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d00b      	beq.n	800ada4 <TIM_Base_SetConfig+0x40>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4a3c      	ldr	r2, [pc, #240]	; (800ae80 <TIM_Base_SetConfig+0x11c>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d007      	beq.n	800ada4 <TIM_Base_SetConfig+0x40>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	4a3b      	ldr	r2, [pc, #236]	; (800ae84 <TIM_Base_SetConfig+0x120>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d003      	beq.n	800ada4 <TIM_Base_SetConfig+0x40>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	4a3a      	ldr	r2, [pc, #232]	; (800ae88 <TIM_Base_SetConfig+0x124>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d108      	bne.n	800adb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	4a2f      	ldr	r2, [pc, #188]	; (800ae78 <TIM_Base_SetConfig+0x114>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d02b      	beq.n	800ae16 <TIM_Base_SetConfig+0xb2>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adc4:	d027      	beq.n	800ae16 <TIM_Base_SetConfig+0xb2>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4a2c      	ldr	r2, [pc, #176]	; (800ae7c <TIM_Base_SetConfig+0x118>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d023      	beq.n	800ae16 <TIM_Base_SetConfig+0xb2>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	4a2b      	ldr	r2, [pc, #172]	; (800ae80 <TIM_Base_SetConfig+0x11c>)
 800add2:	4293      	cmp	r3, r2
 800add4:	d01f      	beq.n	800ae16 <TIM_Base_SetConfig+0xb2>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4a2a      	ldr	r2, [pc, #168]	; (800ae84 <TIM_Base_SetConfig+0x120>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d01b      	beq.n	800ae16 <TIM_Base_SetConfig+0xb2>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4a29      	ldr	r2, [pc, #164]	; (800ae88 <TIM_Base_SetConfig+0x124>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d017      	beq.n	800ae16 <TIM_Base_SetConfig+0xb2>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	4a28      	ldr	r2, [pc, #160]	; (800ae8c <TIM_Base_SetConfig+0x128>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d013      	beq.n	800ae16 <TIM_Base_SetConfig+0xb2>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4a27      	ldr	r2, [pc, #156]	; (800ae90 <TIM_Base_SetConfig+0x12c>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d00f      	beq.n	800ae16 <TIM_Base_SetConfig+0xb2>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4a26      	ldr	r2, [pc, #152]	; (800ae94 <TIM_Base_SetConfig+0x130>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d00b      	beq.n	800ae16 <TIM_Base_SetConfig+0xb2>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4a25      	ldr	r2, [pc, #148]	; (800ae98 <TIM_Base_SetConfig+0x134>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d007      	beq.n	800ae16 <TIM_Base_SetConfig+0xb2>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4a24      	ldr	r2, [pc, #144]	; (800ae9c <TIM_Base_SetConfig+0x138>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d003      	beq.n	800ae16 <TIM_Base_SetConfig+0xb2>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	4a23      	ldr	r2, [pc, #140]	; (800aea0 <TIM_Base_SetConfig+0x13c>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d108      	bne.n	800ae28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	695b      	ldr	r3, [r3, #20]
 800ae32:	4313      	orrs	r3, r2
 800ae34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	68fa      	ldr	r2, [r7, #12]
 800ae3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	689a      	ldr	r2, [r3, #8]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a0a      	ldr	r2, [pc, #40]	; (800ae78 <TIM_Base_SetConfig+0x114>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d003      	beq.n	800ae5c <TIM_Base_SetConfig+0xf8>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a0c      	ldr	r2, [pc, #48]	; (800ae88 <TIM_Base_SetConfig+0x124>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d103      	bne.n	800ae64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	691a      	ldr	r2, [r3, #16]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2201      	movs	r2, #1
 800ae68:	615a      	str	r2, [r3, #20]
}
 800ae6a:	bf00      	nop
 800ae6c:	3714      	adds	r7, #20
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	40010000 	.word	0x40010000
 800ae7c:	40000400 	.word	0x40000400
 800ae80:	40000800 	.word	0x40000800
 800ae84:	40000c00 	.word	0x40000c00
 800ae88:	40010400 	.word	0x40010400
 800ae8c:	40014000 	.word	0x40014000
 800ae90:	40014400 	.word	0x40014400
 800ae94:	40014800 	.word	0x40014800
 800ae98:	40001800 	.word	0x40001800
 800ae9c:	40001c00 	.word	0x40001c00
 800aea0:	40002000 	.word	0x40002000

0800aea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b087      	sub	sp, #28
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6a1b      	ldr	r3, [r3, #32]
 800aeb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	f023 0201 	bic.w	r2, r3, #1
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	011b      	lsls	r3, r3, #4
 800aed4:	693a      	ldr	r2, [r7, #16]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	f023 030a 	bic.w	r3, r3, #10
 800aee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aee2:	697a      	ldr	r2, [r7, #20]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	693a      	ldr	r2, [r7, #16]
 800aeee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	697a      	ldr	r2, [r7, #20]
 800aef4:	621a      	str	r2, [r3, #32]
}
 800aef6:	bf00      	nop
 800aef8:	371c      	adds	r7, #28
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr

0800af02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af02:	b480      	push	{r7}
 800af04:	b087      	sub	sp, #28
 800af06:	af00      	add	r7, sp, #0
 800af08:	60f8      	str	r0, [r7, #12]
 800af0a:	60b9      	str	r1, [r7, #8]
 800af0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	f023 0210 	bic.w	r2, r3, #16
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	699b      	ldr	r3, [r3, #24]
 800af1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6a1b      	ldr	r3, [r3, #32]
 800af24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	031b      	lsls	r3, r3, #12
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	4313      	orrs	r3, r2
 800af36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af38:	693b      	ldr	r3, [r7, #16]
 800af3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	011b      	lsls	r3, r3, #4
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	4313      	orrs	r3, r2
 800af48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	697a      	ldr	r2, [r7, #20]
 800af4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	693a      	ldr	r2, [r7, #16]
 800af54:	621a      	str	r2, [r3, #32]
}
 800af56:	bf00      	nop
 800af58:	371c      	adds	r7, #28
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr

0800af62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af62:	b480      	push	{r7}
 800af64:	b085      	sub	sp, #20
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
 800af6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af7a:	683a      	ldr	r2, [r7, #0]
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	4313      	orrs	r3, r2
 800af80:	f043 0307 	orr.w	r3, r3, #7
 800af84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	609a      	str	r2, [r3, #8]
}
 800af8c:	bf00      	nop
 800af8e:	3714      	adds	r7, #20
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af98:	b480      	push	{r7}
 800af9a:	b087      	sub	sp, #28
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	021a      	lsls	r2, r3, #8
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	431a      	orrs	r2, r3
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	697a      	ldr	r2, [r7, #20]
 800afc2:	4313      	orrs	r3, r2
 800afc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	609a      	str	r2, [r3, #8]
}
 800afcc:	bf00      	nop
 800afce:	371c      	adds	r7, #28
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800afd8:	b480      	push	{r7}
 800afda:	b085      	sub	sp, #20
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d101      	bne.n	800aff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800afec:	2302      	movs	r3, #2
 800afee:	e05a      	b.n	800b0a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2202      	movs	r2, #2
 800affc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68fa      	ldr	r2, [r7, #12]
 800b01e:	4313      	orrs	r3, r2
 800b020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a21      	ldr	r2, [pc, #132]	; (800b0b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d022      	beq.n	800b07a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b03c:	d01d      	beq.n	800b07a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a1d      	ldr	r2, [pc, #116]	; (800b0b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d018      	beq.n	800b07a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a1b      	ldr	r2, [pc, #108]	; (800b0bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d013      	beq.n	800b07a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a1a      	ldr	r2, [pc, #104]	; (800b0c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d00e      	beq.n	800b07a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a18      	ldr	r2, [pc, #96]	; (800b0c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d009      	beq.n	800b07a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a17      	ldr	r2, [pc, #92]	; (800b0c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d004      	beq.n	800b07a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a15      	ldr	r2, [pc, #84]	; (800b0cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d10c      	bne.n	800b094 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	68ba      	ldr	r2, [r7, #8]
 800b088:	4313      	orrs	r3, r2
 800b08a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	68ba      	ldr	r2, [r7, #8]
 800b092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	40010000 	.word	0x40010000
 800b0b8:	40000400 	.word	0x40000400
 800b0bc:	40000800 	.word	0x40000800
 800b0c0:	40000c00 	.word	0x40000c00
 800b0c4:	40010400 	.word	0x40010400
 800b0c8:	40014000 	.word	0x40014000
 800b0cc:	40001800 	.word	0x40001800

0800b0d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b0ec:	bf00      	nop
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d101      	bne.n	800b10a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	e03f      	b.n	800b18a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b110:	b2db      	uxtb	r3, r3
 800b112:	2b00      	cmp	r3, #0
 800b114:	d106      	bne.n	800b124 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7f7 fe5e 	bl	8002de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2224      	movs	r2, #36	; 0x24
 800b128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	68da      	ldr	r2, [r3, #12]
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b13a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 f829 	bl	800b194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	691a      	ldr	r2, [r3, #16]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b150:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	695a      	ldr	r2, [r3, #20]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b160:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	68da      	ldr	r2, [r3, #12]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b170:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2220      	movs	r2, #32
 800b17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2220      	movs	r2, #32
 800b184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
	...

0800b194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b198:	b0c0      	sub	sp, #256	; 0x100
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b1ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1b0:	68d9      	ldr	r1, [r3, #12]
 800b1b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	ea40 0301 	orr.w	r3, r0, r1
 800b1bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b1be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c2:	689a      	ldr	r2, [r3, #8]
 800b1c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c8:	691b      	ldr	r3, [r3, #16]
 800b1ca:	431a      	orrs	r2, r3
 800b1cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	431a      	orrs	r2, r3
 800b1d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1d8:	69db      	ldr	r3, [r3, #28]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b1e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68db      	ldr	r3, [r3, #12]
 800b1e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b1ec:	f021 010c 	bic.w	r1, r1, #12
 800b1f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b1fa:	430b      	orrs	r3, r1
 800b1fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b1fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	695b      	ldr	r3, [r3, #20]
 800b206:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b20a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b20e:	6999      	ldr	r1, [r3, #24]
 800b210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	ea40 0301 	orr.w	r3, r0, r1
 800b21a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b21c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	4b8f      	ldr	r3, [pc, #572]	; (800b460 <UART_SetConfig+0x2cc>)
 800b224:	429a      	cmp	r2, r3
 800b226:	d005      	beq.n	800b234 <UART_SetConfig+0xa0>
 800b228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	4b8d      	ldr	r3, [pc, #564]	; (800b464 <UART_SetConfig+0x2d0>)
 800b230:	429a      	cmp	r2, r3
 800b232:	d104      	bne.n	800b23e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b234:	f7fe fa00 	bl	8009638 <HAL_RCC_GetPCLK2Freq>
 800b238:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b23c:	e003      	b.n	800b246 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b23e:	f7fe f9e7 	bl	8009610 <HAL_RCC_GetPCLK1Freq>
 800b242:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b24a:	69db      	ldr	r3, [r3, #28]
 800b24c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b250:	f040 810c 	bne.w	800b46c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b258:	2200      	movs	r2, #0
 800b25a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b25e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b262:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b266:	4622      	mov	r2, r4
 800b268:	462b      	mov	r3, r5
 800b26a:	1891      	adds	r1, r2, r2
 800b26c:	65b9      	str	r1, [r7, #88]	; 0x58
 800b26e:	415b      	adcs	r3, r3
 800b270:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b272:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b276:	4621      	mov	r1, r4
 800b278:	eb12 0801 	adds.w	r8, r2, r1
 800b27c:	4629      	mov	r1, r5
 800b27e:	eb43 0901 	adc.w	r9, r3, r1
 800b282:	f04f 0200 	mov.w	r2, #0
 800b286:	f04f 0300 	mov.w	r3, #0
 800b28a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b28e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b296:	4690      	mov	r8, r2
 800b298:	4699      	mov	r9, r3
 800b29a:	4623      	mov	r3, r4
 800b29c:	eb18 0303 	adds.w	r3, r8, r3
 800b2a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2a4:	462b      	mov	r3, r5
 800b2a6:	eb49 0303 	adc.w	r3, r9, r3
 800b2aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b2ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b2be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	18db      	adds	r3, r3, r3
 800b2c6:	653b      	str	r3, [r7, #80]	; 0x50
 800b2c8:	4613      	mov	r3, r2
 800b2ca:	eb42 0303 	adc.w	r3, r2, r3
 800b2ce:	657b      	str	r3, [r7, #84]	; 0x54
 800b2d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b2d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b2d8:	f7f5 fc30 	bl	8000b3c <__aeabi_uldivmod>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4b61      	ldr	r3, [pc, #388]	; (800b468 <UART_SetConfig+0x2d4>)
 800b2e2:	fba3 2302 	umull	r2, r3, r3, r2
 800b2e6:	095b      	lsrs	r3, r3, #5
 800b2e8:	011c      	lsls	r4, r3, #4
 800b2ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b2f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b2fc:	4642      	mov	r2, r8
 800b2fe:	464b      	mov	r3, r9
 800b300:	1891      	adds	r1, r2, r2
 800b302:	64b9      	str	r1, [r7, #72]	; 0x48
 800b304:	415b      	adcs	r3, r3
 800b306:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b308:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b30c:	4641      	mov	r1, r8
 800b30e:	eb12 0a01 	adds.w	sl, r2, r1
 800b312:	4649      	mov	r1, r9
 800b314:	eb43 0b01 	adc.w	fp, r3, r1
 800b318:	f04f 0200 	mov.w	r2, #0
 800b31c:	f04f 0300 	mov.w	r3, #0
 800b320:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b324:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b328:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b32c:	4692      	mov	sl, r2
 800b32e:	469b      	mov	fp, r3
 800b330:	4643      	mov	r3, r8
 800b332:	eb1a 0303 	adds.w	r3, sl, r3
 800b336:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b33a:	464b      	mov	r3, r9
 800b33c:	eb4b 0303 	adc.w	r3, fp, r3
 800b340:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b350:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b354:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b358:	460b      	mov	r3, r1
 800b35a:	18db      	adds	r3, r3, r3
 800b35c:	643b      	str	r3, [r7, #64]	; 0x40
 800b35e:	4613      	mov	r3, r2
 800b360:	eb42 0303 	adc.w	r3, r2, r3
 800b364:	647b      	str	r3, [r7, #68]	; 0x44
 800b366:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b36a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b36e:	f7f5 fbe5 	bl	8000b3c <__aeabi_uldivmod>
 800b372:	4602      	mov	r2, r0
 800b374:	460b      	mov	r3, r1
 800b376:	4611      	mov	r1, r2
 800b378:	4b3b      	ldr	r3, [pc, #236]	; (800b468 <UART_SetConfig+0x2d4>)
 800b37a:	fba3 2301 	umull	r2, r3, r3, r1
 800b37e:	095b      	lsrs	r3, r3, #5
 800b380:	2264      	movs	r2, #100	; 0x64
 800b382:	fb02 f303 	mul.w	r3, r2, r3
 800b386:	1acb      	subs	r3, r1, r3
 800b388:	00db      	lsls	r3, r3, #3
 800b38a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b38e:	4b36      	ldr	r3, [pc, #216]	; (800b468 <UART_SetConfig+0x2d4>)
 800b390:	fba3 2302 	umull	r2, r3, r3, r2
 800b394:	095b      	lsrs	r3, r3, #5
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b39c:	441c      	add	r4, r3
 800b39e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b3a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b3ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b3b0:	4642      	mov	r2, r8
 800b3b2:	464b      	mov	r3, r9
 800b3b4:	1891      	adds	r1, r2, r2
 800b3b6:	63b9      	str	r1, [r7, #56]	; 0x38
 800b3b8:	415b      	adcs	r3, r3
 800b3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b3c0:	4641      	mov	r1, r8
 800b3c2:	1851      	adds	r1, r2, r1
 800b3c4:	6339      	str	r1, [r7, #48]	; 0x30
 800b3c6:	4649      	mov	r1, r9
 800b3c8:	414b      	adcs	r3, r1
 800b3ca:	637b      	str	r3, [r7, #52]	; 0x34
 800b3cc:	f04f 0200 	mov.w	r2, #0
 800b3d0:	f04f 0300 	mov.w	r3, #0
 800b3d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b3d8:	4659      	mov	r1, fp
 800b3da:	00cb      	lsls	r3, r1, #3
 800b3dc:	4651      	mov	r1, sl
 800b3de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3e2:	4651      	mov	r1, sl
 800b3e4:	00ca      	lsls	r2, r1, #3
 800b3e6:	4610      	mov	r0, r2
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	4642      	mov	r2, r8
 800b3ee:	189b      	adds	r3, r3, r2
 800b3f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b3f4:	464b      	mov	r3, r9
 800b3f6:	460a      	mov	r2, r1
 800b3f8:	eb42 0303 	adc.w	r3, r2, r3
 800b3fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b40c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b410:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b414:	460b      	mov	r3, r1
 800b416:	18db      	adds	r3, r3, r3
 800b418:	62bb      	str	r3, [r7, #40]	; 0x28
 800b41a:	4613      	mov	r3, r2
 800b41c:	eb42 0303 	adc.w	r3, r2, r3
 800b420:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b426:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b42a:	f7f5 fb87 	bl	8000b3c <__aeabi_uldivmod>
 800b42e:	4602      	mov	r2, r0
 800b430:	460b      	mov	r3, r1
 800b432:	4b0d      	ldr	r3, [pc, #52]	; (800b468 <UART_SetConfig+0x2d4>)
 800b434:	fba3 1302 	umull	r1, r3, r3, r2
 800b438:	095b      	lsrs	r3, r3, #5
 800b43a:	2164      	movs	r1, #100	; 0x64
 800b43c:	fb01 f303 	mul.w	r3, r1, r3
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	00db      	lsls	r3, r3, #3
 800b444:	3332      	adds	r3, #50	; 0x32
 800b446:	4a08      	ldr	r2, [pc, #32]	; (800b468 <UART_SetConfig+0x2d4>)
 800b448:	fba2 2303 	umull	r2, r3, r2, r3
 800b44c:	095b      	lsrs	r3, r3, #5
 800b44e:	f003 0207 	and.w	r2, r3, #7
 800b452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4422      	add	r2, r4
 800b45a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b45c:	e105      	b.n	800b66a <UART_SetConfig+0x4d6>
 800b45e:	bf00      	nop
 800b460:	40011000 	.word	0x40011000
 800b464:	40011400 	.word	0x40011400
 800b468:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b46c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b470:	2200      	movs	r2, #0
 800b472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b476:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b47a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b47e:	4642      	mov	r2, r8
 800b480:	464b      	mov	r3, r9
 800b482:	1891      	adds	r1, r2, r2
 800b484:	6239      	str	r1, [r7, #32]
 800b486:	415b      	adcs	r3, r3
 800b488:	627b      	str	r3, [r7, #36]	; 0x24
 800b48a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b48e:	4641      	mov	r1, r8
 800b490:	1854      	adds	r4, r2, r1
 800b492:	4649      	mov	r1, r9
 800b494:	eb43 0501 	adc.w	r5, r3, r1
 800b498:	f04f 0200 	mov.w	r2, #0
 800b49c:	f04f 0300 	mov.w	r3, #0
 800b4a0:	00eb      	lsls	r3, r5, #3
 800b4a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b4a6:	00e2      	lsls	r2, r4, #3
 800b4a8:	4614      	mov	r4, r2
 800b4aa:	461d      	mov	r5, r3
 800b4ac:	4643      	mov	r3, r8
 800b4ae:	18e3      	adds	r3, r4, r3
 800b4b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b4b4:	464b      	mov	r3, r9
 800b4b6:	eb45 0303 	adc.w	r3, r5, r3
 800b4ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b4be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b4ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b4ce:	f04f 0200 	mov.w	r2, #0
 800b4d2:	f04f 0300 	mov.w	r3, #0
 800b4d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b4da:	4629      	mov	r1, r5
 800b4dc:	008b      	lsls	r3, r1, #2
 800b4de:	4621      	mov	r1, r4
 800b4e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4e4:	4621      	mov	r1, r4
 800b4e6:	008a      	lsls	r2, r1, #2
 800b4e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b4ec:	f7f5 fb26 	bl	8000b3c <__aeabi_uldivmod>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4b60      	ldr	r3, [pc, #384]	; (800b678 <UART_SetConfig+0x4e4>)
 800b4f6:	fba3 2302 	umull	r2, r3, r3, r2
 800b4fa:	095b      	lsrs	r3, r3, #5
 800b4fc:	011c      	lsls	r4, r3, #4
 800b4fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b502:	2200      	movs	r2, #0
 800b504:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b508:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b50c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b510:	4642      	mov	r2, r8
 800b512:	464b      	mov	r3, r9
 800b514:	1891      	adds	r1, r2, r2
 800b516:	61b9      	str	r1, [r7, #24]
 800b518:	415b      	adcs	r3, r3
 800b51a:	61fb      	str	r3, [r7, #28]
 800b51c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b520:	4641      	mov	r1, r8
 800b522:	1851      	adds	r1, r2, r1
 800b524:	6139      	str	r1, [r7, #16]
 800b526:	4649      	mov	r1, r9
 800b528:	414b      	adcs	r3, r1
 800b52a:	617b      	str	r3, [r7, #20]
 800b52c:	f04f 0200 	mov.w	r2, #0
 800b530:	f04f 0300 	mov.w	r3, #0
 800b534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b538:	4659      	mov	r1, fp
 800b53a:	00cb      	lsls	r3, r1, #3
 800b53c:	4651      	mov	r1, sl
 800b53e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b542:	4651      	mov	r1, sl
 800b544:	00ca      	lsls	r2, r1, #3
 800b546:	4610      	mov	r0, r2
 800b548:	4619      	mov	r1, r3
 800b54a:	4603      	mov	r3, r0
 800b54c:	4642      	mov	r2, r8
 800b54e:	189b      	adds	r3, r3, r2
 800b550:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b554:	464b      	mov	r3, r9
 800b556:	460a      	mov	r2, r1
 800b558:	eb42 0303 	adc.w	r3, r2, r3
 800b55c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b564:	685b      	ldr	r3, [r3, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	67bb      	str	r3, [r7, #120]	; 0x78
 800b56a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b56c:	f04f 0200 	mov.w	r2, #0
 800b570:	f04f 0300 	mov.w	r3, #0
 800b574:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b578:	4649      	mov	r1, r9
 800b57a:	008b      	lsls	r3, r1, #2
 800b57c:	4641      	mov	r1, r8
 800b57e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b582:	4641      	mov	r1, r8
 800b584:	008a      	lsls	r2, r1, #2
 800b586:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b58a:	f7f5 fad7 	bl	8000b3c <__aeabi_uldivmod>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	4b39      	ldr	r3, [pc, #228]	; (800b678 <UART_SetConfig+0x4e4>)
 800b594:	fba3 1302 	umull	r1, r3, r3, r2
 800b598:	095b      	lsrs	r3, r3, #5
 800b59a:	2164      	movs	r1, #100	; 0x64
 800b59c:	fb01 f303 	mul.w	r3, r1, r3
 800b5a0:	1ad3      	subs	r3, r2, r3
 800b5a2:	011b      	lsls	r3, r3, #4
 800b5a4:	3332      	adds	r3, #50	; 0x32
 800b5a6:	4a34      	ldr	r2, [pc, #208]	; (800b678 <UART_SetConfig+0x4e4>)
 800b5a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ac:	095b      	lsrs	r3, r3, #5
 800b5ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5b2:	441c      	add	r4, r3
 800b5b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	673b      	str	r3, [r7, #112]	; 0x70
 800b5bc:	677a      	str	r2, [r7, #116]	; 0x74
 800b5be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b5c2:	4642      	mov	r2, r8
 800b5c4:	464b      	mov	r3, r9
 800b5c6:	1891      	adds	r1, r2, r2
 800b5c8:	60b9      	str	r1, [r7, #8]
 800b5ca:	415b      	adcs	r3, r3
 800b5cc:	60fb      	str	r3, [r7, #12]
 800b5ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b5d2:	4641      	mov	r1, r8
 800b5d4:	1851      	adds	r1, r2, r1
 800b5d6:	6039      	str	r1, [r7, #0]
 800b5d8:	4649      	mov	r1, r9
 800b5da:	414b      	adcs	r3, r1
 800b5dc:	607b      	str	r3, [r7, #4]
 800b5de:	f04f 0200 	mov.w	r2, #0
 800b5e2:	f04f 0300 	mov.w	r3, #0
 800b5e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b5ea:	4659      	mov	r1, fp
 800b5ec:	00cb      	lsls	r3, r1, #3
 800b5ee:	4651      	mov	r1, sl
 800b5f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5f4:	4651      	mov	r1, sl
 800b5f6:	00ca      	lsls	r2, r1, #3
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	4642      	mov	r2, r8
 800b600:	189b      	adds	r3, r3, r2
 800b602:	66bb      	str	r3, [r7, #104]	; 0x68
 800b604:	464b      	mov	r3, r9
 800b606:	460a      	mov	r2, r1
 800b608:	eb42 0303 	adc.w	r3, r2, r3
 800b60c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b60e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	663b      	str	r3, [r7, #96]	; 0x60
 800b618:	667a      	str	r2, [r7, #100]	; 0x64
 800b61a:	f04f 0200 	mov.w	r2, #0
 800b61e:	f04f 0300 	mov.w	r3, #0
 800b622:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b626:	4649      	mov	r1, r9
 800b628:	008b      	lsls	r3, r1, #2
 800b62a:	4641      	mov	r1, r8
 800b62c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b630:	4641      	mov	r1, r8
 800b632:	008a      	lsls	r2, r1, #2
 800b634:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b638:	f7f5 fa80 	bl	8000b3c <__aeabi_uldivmod>
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	4b0d      	ldr	r3, [pc, #52]	; (800b678 <UART_SetConfig+0x4e4>)
 800b642:	fba3 1302 	umull	r1, r3, r3, r2
 800b646:	095b      	lsrs	r3, r3, #5
 800b648:	2164      	movs	r1, #100	; 0x64
 800b64a:	fb01 f303 	mul.w	r3, r1, r3
 800b64e:	1ad3      	subs	r3, r2, r3
 800b650:	011b      	lsls	r3, r3, #4
 800b652:	3332      	adds	r3, #50	; 0x32
 800b654:	4a08      	ldr	r2, [pc, #32]	; (800b678 <UART_SetConfig+0x4e4>)
 800b656:	fba2 2303 	umull	r2, r3, r2, r3
 800b65a:	095b      	lsrs	r3, r3, #5
 800b65c:	f003 020f 	and.w	r2, r3, #15
 800b660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4422      	add	r2, r4
 800b668:	609a      	str	r2, [r3, #8]
}
 800b66a:	bf00      	nop
 800b66c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b670:	46bd      	mov	sp, r7
 800b672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b676:	bf00      	nop
 800b678:	51eb851f 	.word	0x51eb851f

0800b67c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d123      	bne.n	800b6d6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b696:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	6851      	ldr	r1, [r2, #4]
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	6892      	ldr	r2, [r2, #8]
 800b6a2:	4311      	orrs	r1, r2
 800b6a4:	683a      	ldr	r2, [r7, #0]
 800b6a6:	68d2      	ldr	r2, [r2, #12]
 800b6a8:	4311      	orrs	r1, r2
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	6912      	ldr	r2, [r2, #16]
 800b6ae:	4311      	orrs	r1, r2
 800b6b0:	683a      	ldr	r2, [r7, #0]
 800b6b2:	6952      	ldr	r2, [r2, #20]
 800b6b4:	4311      	orrs	r1, r2
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	6992      	ldr	r2, [r2, #24]
 800b6ba:	4311      	orrs	r1, r2
 800b6bc:	683a      	ldr	r2, [r7, #0]
 800b6be:	69d2      	ldr	r2, [r2, #28]
 800b6c0:	4311      	orrs	r1, r2
 800b6c2:	683a      	ldr	r2, [r7, #0]
 800b6c4:	6a12      	ldr	r2, [r2, #32]
 800b6c6:	4311      	orrs	r1, r2
 800b6c8:	683a      	ldr	r2, [r7, #0]
 800b6ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b6cc:	430a      	orrs	r2, r1
 800b6ce:	431a      	orrs	r2, r3
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	601a      	str	r2, [r3, #0]
 800b6d4:	e028      	b.n	800b728 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	69d9      	ldr	r1, [r3, #28]
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	6a1b      	ldr	r3, [r3, #32]
 800b6e6:	4319      	orrs	r1, r3
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ec:	430b      	orrs	r3, r1
 800b6ee:	431a      	orrs	r2, r3
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b6fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b700:	683a      	ldr	r2, [r7, #0]
 800b702:	6851      	ldr	r1, [r2, #4]
 800b704:	683a      	ldr	r2, [r7, #0]
 800b706:	6892      	ldr	r2, [r2, #8]
 800b708:	4311      	orrs	r1, r2
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	68d2      	ldr	r2, [r2, #12]
 800b70e:	4311      	orrs	r1, r2
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	6912      	ldr	r2, [r2, #16]
 800b714:	4311      	orrs	r1, r2
 800b716:	683a      	ldr	r2, [r7, #0]
 800b718:	6952      	ldr	r2, [r2, #20]
 800b71a:	4311      	orrs	r1, r2
 800b71c:	683a      	ldr	r2, [r7, #0]
 800b71e:	6992      	ldr	r2, [r2, #24]
 800b720:	430a      	orrs	r2, r1
 800b722:	431a      	orrs	r2, r3
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b728:	2300      	movs	r3, #0
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	370c      	adds	r7, #12
 800b72e:	46bd      	mov	sp, r7
 800b730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b734:	4770      	bx	lr

0800b736 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b736:	b480      	push	{r7}
 800b738:	b085      	sub	sp, #20
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	60f8      	str	r0, [r7, #12]
 800b73e:	60b9      	str	r1, [r7, #8]
 800b740:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d128      	bne.n	800b79a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	1e59      	subs	r1, r3, #1
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	3b01      	subs	r3, #1
 800b75c:	011b      	lsls	r3, r3, #4
 800b75e:	4319      	orrs	r1, r3
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	3b01      	subs	r3, #1
 800b766:	021b      	lsls	r3, r3, #8
 800b768:	4319      	orrs	r1, r3
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	3b01      	subs	r3, #1
 800b770:	031b      	lsls	r3, r3, #12
 800b772:	4319      	orrs	r1, r3
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	3b01      	subs	r3, #1
 800b77a:	041b      	lsls	r3, r3, #16
 800b77c:	4319      	orrs	r1, r3
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	695b      	ldr	r3, [r3, #20]
 800b782:	3b01      	subs	r3, #1
 800b784:	051b      	lsls	r3, r3, #20
 800b786:	4319      	orrs	r1, r3
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	699b      	ldr	r3, [r3, #24]
 800b78c:	3b01      	subs	r3, #1
 800b78e:	061b      	lsls	r3, r3, #24
 800b790:	430b      	orrs	r3, r1
 800b792:	431a      	orrs	r2, r3
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	609a      	str	r2, [r3, #8]
 800b798:	e02f      	b.n	800b7fa <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	689b      	ldr	r3, [r3, #8]
 800b79e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b7a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7a6:	68ba      	ldr	r2, [r7, #8]
 800b7a8:	68d2      	ldr	r2, [r2, #12]
 800b7aa:	3a01      	subs	r2, #1
 800b7ac:	0311      	lsls	r1, r2, #12
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	6952      	ldr	r2, [r2, #20]
 800b7b2:	3a01      	subs	r2, #1
 800b7b4:	0512      	lsls	r2, r2, #20
 800b7b6:	430a      	orrs	r2, r1
 800b7b8:	431a      	orrs	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	1e59      	subs	r1, r3, #1
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	011b      	lsls	r3, r3, #4
 800b7d4:	4319      	orrs	r1, r3
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	021b      	lsls	r3, r3, #8
 800b7de:	4319      	orrs	r1, r3
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	041b      	lsls	r3, r3, #16
 800b7e8:	4319      	orrs	r1, r3
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	699b      	ldr	r3, [r3, #24]
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	061b      	lsls	r3, r3, #24
 800b7f2:	430b      	orrs	r3, r1
 800b7f4:	431a      	orrs	r2, r3
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3714      	adds	r7, #20
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b086      	sub	sp, #24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800b814:	2300      	movs	r3, #0
 800b816:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	0d9b      	lsrs	r3, r3, #22
 800b81e:	059b      	lsls	r3, r3, #22
 800b820:	68ba      	ldr	r2, [r7, #8]
 800b822:	6811      	ldr	r1, [r2, #0]
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	6852      	ldr	r2, [r2, #4]
 800b828:	4311      	orrs	r1, r2
 800b82a:	68ba      	ldr	r2, [r7, #8]
 800b82c:	6892      	ldr	r2, [r2, #8]
 800b82e:	3a01      	subs	r2, #1
 800b830:	0152      	lsls	r2, r2, #5
 800b832:	4311      	orrs	r1, r2
 800b834:	68ba      	ldr	r2, [r7, #8]
 800b836:	68d2      	ldr	r2, [r2, #12]
 800b838:	0252      	lsls	r2, r2, #9
 800b83a:	430a      	orrs	r2, r1
 800b83c:	431a      	orrs	r2, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800b842:	f7f8 fef5 	bl	8004630 <HAL_GetTick>
 800b846:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b848:	e010      	b.n	800b86c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b850:	d00c      	beq.n	800b86c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d007      	beq.n	800b868 <FMC_SDRAM_SendCommand+0x60>
 800b858:	f7f8 feea 	bl	8004630 <HAL_GetTick>
 800b85c:	4602      	mov	r2, r0
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	687a      	ldr	r2, [r7, #4]
 800b864:	429a      	cmp	r2, r3
 800b866:	d201      	bcs.n	800b86c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800b868:	2303      	movs	r3, #3
 800b86a:	e006      	b.n	800b87a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	699b      	ldr	r3, [r3, #24]
 800b870:	f003 0320 	and.w	r3, r3, #32
 800b874:	2b20      	cmp	r3, #32
 800b876:	d0e8      	beq.n	800b84a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800b878:	2300      	movs	r3, #0
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3718      	adds	r7, #24
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b882:	b480      	push	{r7}
 800b884:	b083      	sub	sp, #12
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
 800b88a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	695b      	ldr	r3, [r3, #20]
 800b890:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b894:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800b898:	683a      	ldr	r2, [r7, #0]
 800b89a:	0052      	lsls	r2, r2, #1
 800b89c:	431a      	orrs	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8b0:	b084      	sub	sp, #16
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b084      	sub	sp, #16
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
 800b8ba:	f107 001c 	add.w	r0, r7, #28
 800b8be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	d122      	bne.n	800b90e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b8dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	68db      	ldr	r3, [r3, #12]
 800b8e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b8f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8f2:	2b01      	cmp	r3, #1
 800b8f4:	d105      	bne.n	800b902 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f9c0 	bl	800bc88 <USB_CoreReset>
 800b908:	4603      	mov	r3, r0
 800b90a:	73fb      	strb	r3, [r7, #15]
 800b90c:	e01a      	b.n	800b944 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 f9b4 	bl	800bc88 <USB_CoreReset>
 800b920:	4603      	mov	r3, r0
 800b922:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b926:	2b00      	cmp	r3, #0
 800b928:	d106      	bne.n	800b938 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b92e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	639a      	str	r2, [r3, #56]	; 0x38
 800b936:	e005      	b.n	800b944 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b93c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b946:	2b01      	cmp	r3, #1
 800b948:	d10b      	bne.n	800b962 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	f043 0206 	orr.w	r2, r3, #6
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	689b      	ldr	r3, [r3, #8]
 800b95a:	f043 0220 	orr.w	r2, r3, #32
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b962:	7bfb      	ldrb	r3, [r7, #15]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3710      	adds	r7, #16
 800b968:	46bd      	mov	sp, r7
 800b96a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b96e:	b004      	add	sp, #16
 800b970:	4770      	bx	lr

0800b972 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b972:	b480      	push	{r7}
 800b974:	b083      	sub	sp, #12
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	f043 0201 	orr.w	r2, r3, #1
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr

0800b994 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	f023 0201 	bic.w	r2, r3, #1
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9a8:	2300      	movs	r3, #0
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	370c      	adds	r7, #12
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr

0800b9b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b084      	sub	sp, #16
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	460b      	mov	r3, r1
 800b9c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b9d2:	78fb      	ldrb	r3, [r7, #3]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d115      	bne.n	800ba04 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b9e4:	2001      	movs	r0, #1
 800b9e6:	f7f8 fe2f 	bl	8004648 <HAL_Delay>
      ms++;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f93a 	bl	800bc6a <USB_GetMode>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d01e      	beq.n	800ba3a <USB_SetCurrentMode+0x84>
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	2b31      	cmp	r3, #49	; 0x31
 800ba00:	d9f0      	bls.n	800b9e4 <USB_SetCurrentMode+0x2e>
 800ba02:	e01a      	b.n	800ba3a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ba04:	78fb      	ldrb	r3, [r7, #3]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d115      	bne.n	800ba36 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	68db      	ldr	r3, [r3, #12]
 800ba0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba16:	2001      	movs	r0, #1
 800ba18:	f7f8 fe16 	bl	8004648 <HAL_Delay>
      ms++;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f921 	bl	800bc6a <USB_GetMode>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d005      	beq.n	800ba3a <USB_SetCurrentMode+0x84>
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2b31      	cmp	r3, #49	; 0x31
 800ba32:	d9f0      	bls.n	800ba16 <USB_SetCurrentMode+0x60>
 800ba34:	e001      	b.n	800ba3a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ba36:	2301      	movs	r3, #1
 800ba38:	e005      	b.n	800ba46 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2b32      	cmp	r3, #50	; 0x32
 800ba3e:	d101      	bne.n	800ba44 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	e000      	b.n	800ba46 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
	...

0800ba50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	3301      	adds	r3, #1
 800ba62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	4a13      	ldr	r2, [pc, #76]	; (800bab4 <USB_FlushTxFifo+0x64>)
 800ba68:	4293      	cmp	r3, r2
 800ba6a:	d901      	bls.n	800ba70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	e01b      	b.n	800baa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	daf2      	bge.n	800ba5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	019b      	lsls	r3, r3, #6
 800ba80:	f043 0220 	orr.w	r2, r3, #32
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	4a08      	ldr	r2, [pc, #32]	; (800bab4 <USB_FlushTxFifo+0x64>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d901      	bls.n	800ba9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ba96:	2303      	movs	r3, #3
 800ba98:	e006      	b.n	800baa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	f003 0320 	and.w	r3, r3, #32
 800baa2:	2b20      	cmp	r3, #32
 800baa4:	d0f0      	beq.n	800ba88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3714      	adds	r7, #20
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	00030d40 	.word	0x00030d40

0800bab8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bac0:	2300      	movs	r3, #0
 800bac2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	3301      	adds	r3, #1
 800bac8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	4a11      	ldr	r2, [pc, #68]	; (800bb14 <USB_FlushRxFifo+0x5c>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d901      	bls.n	800bad6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bad2:	2303      	movs	r3, #3
 800bad4:	e018      	b.n	800bb08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	2b00      	cmp	r3, #0
 800badc:	daf2      	bge.n	800bac4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bade:	2300      	movs	r3, #0
 800bae0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2210      	movs	r2, #16
 800bae6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	3301      	adds	r3, #1
 800baec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	4a08      	ldr	r2, [pc, #32]	; (800bb14 <USB_FlushRxFifo+0x5c>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d901      	bls.n	800bafa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800baf6:	2303      	movs	r3, #3
 800baf8:	e006      	b.n	800bb08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	f003 0310 	and.w	r3, r3, #16
 800bb02:	2b10      	cmp	r3, #16
 800bb04:	d0f0      	beq.n	800bae8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bb06:	2300      	movs	r3, #0
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3714      	adds	r7, #20
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr
 800bb14:	00030d40 	.word	0x00030d40

0800bb18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b089      	sub	sp, #36	; 0x24
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	60b9      	str	r1, [r7, #8]
 800bb22:	4611      	mov	r1, r2
 800bb24:	461a      	mov	r2, r3
 800bb26:	460b      	mov	r3, r1
 800bb28:	71fb      	strb	r3, [r7, #7]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bb36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d123      	bne.n	800bb86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bb3e:	88bb      	ldrh	r3, [r7, #4]
 800bb40:	3303      	adds	r3, #3
 800bb42:	089b      	lsrs	r3, r3, #2
 800bb44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bb46:	2300      	movs	r3, #0
 800bb48:	61bb      	str	r3, [r7, #24]
 800bb4a:	e018      	b.n	800bb7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bb4c:	79fb      	ldrb	r3, [r7, #7]
 800bb4e:	031a      	lsls	r2, r3, #12
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	4413      	add	r3, r2
 800bb54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb58:	461a      	mov	r2, r3
 800bb5a:	69fb      	ldr	r3, [r7, #28]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	3301      	adds	r3, #1
 800bb64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb66:	69fb      	ldr	r3, [r7, #28]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb6c:	69fb      	ldr	r3, [r7, #28]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	3301      	adds	r3, #1
 800bb76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	61bb      	str	r3, [r7, #24]
 800bb7e:	69ba      	ldr	r2, [r7, #24]
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d3e2      	bcc.n	800bb4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3724      	adds	r7, #36	; 0x24
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b08b      	sub	sp, #44	; 0x2c
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	60f8      	str	r0, [r7, #12]
 800bb9c:	60b9      	str	r1, [r7, #8]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bbaa:	88fb      	ldrh	r3, [r7, #6]
 800bbac:	089b      	lsrs	r3, r3, #2
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bbb2:	88fb      	ldrh	r3, [r7, #6]
 800bbb4:	f003 0303 	and.w	r3, r3, #3
 800bbb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bbba:	2300      	movs	r3, #0
 800bbbc:	623b      	str	r3, [r7, #32]
 800bbbe:	e014      	b.n	800bbea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbca:	601a      	str	r2, [r3, #0]
    pDest++;
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbce:	3301      	adds	r3, #1
 800bbd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbda:	3301      	adds	r3, #1
 800bbdc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bbe4:	6a3b      	ldr	r3, [r7, #32]
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	623b      	str	r3, [r7, #32]
 800bbea:	6a3a      	ldr	r2, [r7, #32]
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d3e6      	bcc.n	800bbc0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bbf2:	8bfb      	ldrh	r3, [r7, #30]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d01e      	beq.n	800bc36 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc02:	461a      	mov	r2, r3
 800bc04:	f107 0310 	add.w	r3, r7, #16
 800bc08:	6812      	ldr	r2, [r2, #0]
 800bc0a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bc0c:	693a      	ldr	r2, [r7, #16]
 800bc0e:	6a3b      	ldr	r3, [r7, #32]
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	00db      	lsls	r3, r3, #3
 800bc14:	fa22 f303 	lsr.w	r3, r2, r3
 800bc18:	b2da      	uxtb	r2, r3
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc1c:	701a      	strb	r2, [r3, #0]
      i++;
 800bc1e:	6a3b      	ldr	r3, [r7, #32]
 800bc20:	3301      	adds	r3, #1
 800bc22:	623b      	str	r3, [r7, #32]
      pDest++;
 800bc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc26:	3301      	adds	r3, #1
 800bc28:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bc2a:	8bfb      	ldrh	r3, [r7, #30]
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bc30:	8bfb      	ldrh	r3, [r7, #30]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1ea      	bne.n	800bc0c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	372c      	adds	r7, #44	; 0x2c
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b085      	sub	sp, #20
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	699b      	ldr	r3, [r3, #24]
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	4013      	ands	r3, r2
 800bc5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3714      	adds	r7, #20
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr

0800bc6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b083      	sub	sp, #12
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	695b      	ldr	r3, [r3, #20]
 800bc76:	f003 0301 	and.w	r3, r3, #1
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	370c      	adds	r7, #12
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr
	...

0800bc88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc90:	2300      	movs	r3, #0
 800bc92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	3301      	adds	r3, #1
 800bc98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	4a13      	ldr	r2, [pc, #76]	; (800bcec <USB_CoreReset+0x64>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d901      	bls.n	800bca6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bca2:	2303      	movs	r3, #3
 800bca4:	e01b      	b.n	800bcde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	691b      	ldr	r3, [r3, #16]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	daf2      	bge.n	800bc94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	f043 0201 	orr.w	r2, r3, #1
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	4a09      	ldr	r2, [pc, #36]	; (800bcec <USB_CoreReset+0x64>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d901      	bls.n	800bcd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bccc:	2303      	movs	r3, #3
 800bcce:	e006      	b.n	800bcde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	f003 0301 	and.w	r3, r3, #1
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d0f0      	beq.n	800bcbe <USB_CoreReset+0x36>

  return HAL_OK;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	00030d40 	.word	0x00030d40

0800bcf0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b086      	sub	sp, #24
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bcfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bd02:	2300      	movs	r3, #0
 800bd04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd10:	461a      	mov	r2, r3
 800bd12:	2300      	movs	r3, #0
 800bd14:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd26:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd32:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d018      	beq.n	800bd78 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d10a      	bne.n	800bd62 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd5a:	f043 0304 	orr.w	r3, r3, #4
 800bd5e:	6013      	str	r3, [r2, #0]
 800bd60:	e014      	b.n	800bd8c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd70:	f023 0304 	bic.w	r3, r3, #4
 800bd74:	6013      	str	r3, [r2, #0]
 800bd76:	e009      	b.n	800bd8c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd86:	f023 0304 	bic.w	r3, r3, #4
 800bd8a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bd8c:	2110      	movs	r1, #16
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f7ff fe5e 	bl	800ba50 <USB_FlushTxFifo>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d001      	beq.n	800bd9e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f7ff fe8a 	bl	800bab8 <USB_FlushRxFifo>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d001      	beq.n	800bdae <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800bdaa:	2301      	movs	r3, #1
 800bdac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800bdae:	2300      	movs	r3, #0
 800bdb0:	613b      	str	r3, [r7, #16]
 800bdb2:	e015      	b.n	800bde0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	015a      	lsls	r2, r3, #5
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	4413      	add	r3, r2
 800bdbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdc6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	015a      	lsls	r2, r3, #5
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	4413      	add	r3, r2
 800bdd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdd4:	461a      	mov	r2, r3
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	3301      	adds	r3, #1
 800bdde:	613b      	str	r3, [r7, #16]
 800bde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	429a      	cmp	r2, r3
 800bde6:	d3e5      	bcc.n	800bdb4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bdf4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d00b      	beq.n	800be1a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be08:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	4a13      	ldr	r2, [pc, #76]	; (800be5c <USB_HostInit+0x16c>)
 800be0e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	4a13      	ldr	r2, [pc, #76]	; (800be60 <USB_HostInit+0x170>)
 800be14:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800be18:	e009      	b.n	800be2e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2280      	movs	r2, #128	; 0x80
 800be1e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	4a10      	ldr	r2, [pc, #64]	; (800be64 <USB_HostInit+0x174>)
 800be24:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4a0f      	ldr	r2, [pc, #60]	; (800be68 <USB_HostInit+0x178>)
 800be2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800be2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be30:	2b00      	cmp	r3, #0
 800be32:	d105      	bne.n	800be40 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	699b      	ldr	r3, [r3, #24]
 800be38:	f043 0210 	orr.w	r2, r3, #16
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	699a      	ldr	r2, [r3, #24]
 800be44:	4b09      	ldr	r3, [pc, #36]	; (800be6c <USB_HostInit+0x17c>)
 800be46:	4313      	orrs	r3, r2
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800be4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3718      	adds	r7, #24
 800be52:	46bd      	mov	sp, r7
 800be54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be58:	b004      	add	sp, #16
 800be5a:	4770      	bx	lr
 800be5c:	01000200 	.word	0x01000200
 800be60:	00e00300 	.word	0x00e00300
 800be64:	00600080 	.word	0x00600080
 800be68:	004000e0 	.word	0x004000e0
 800be6c:	a3200008 	.word	0xa3200008

0800be70 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800be70:	b480      	push	{r7}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be8e:	f023 0303 	bic.w	r3, r3, #3
 800be92:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	78fb      	ldrb	r3, [r7, #3]
 800be9e:	f003 0303 	and.w	r3, r3, #3
 800bea2:	68f9      	ldr	r1, [r7, #12]
 800bea4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bea8:	4313      	orrs	r3, r2
 800beaa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800beac:	78fb      	ldrb	r3, [r7, #3]
 800beae:	2b01      	cmp	r3, #1
 800beb0:	d107      	bne.n	800bec2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800beb8:	461a      	mov	r2, r3
 800beba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bebe:	6053      	str	r3, [r2, #4]
 800bec0:	e009      	b.n	800bed6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800bec2:	78fb      	ldrb	r3, [r7, #3]
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d106      	bne.n	800bed6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bece:	461a      	mov	r2, r3
 800bed0:	f241 7370 	movw	r3, #6000	; 0x1770
 800bed4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3714      	adds	r7, #20
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	460b      	mov	r3, r1
 800beee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bef4:	2300      	movs	r3, #0
 800bef6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bf08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d109      	bne.n	800bf28 <USB_DriveVbus+0x44>
 800bf14:	78fb      	ldrb	r3, [r7, #3]
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d106      	bne.n	800bf28 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bf26:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf32:	d109      	bne.n	800bf48 <USB_DriveVbus+0x64>
 800bf34:	78fb      	ldrb	r3, [r7, #3]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d106      	bne.n	800bf48 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf46:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800bf48:	2300      	movs	r3, #0
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3714      	adds	r7, #20
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr

0800bf56 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bf56:	b480      	push	{r7}
 800bf58:	b085      	sub	sp, #20
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bf62:	2300      	movs	r3, #0
 800bf64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	0c5b      	lsrs	r3, r3, #17
 800bf74:	f003 0303 	and.w	r3, r3, #3
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	b29b      	uxth	r3, r3
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3714      	adds	r7, #20
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
	...

0800bfa8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b088      	sub	sp, #32
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	4608      	mov	r0, r1
 800bfb2:	4611      	mov	r1, r2
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	70fb      	strb	r3, [r7, #3]
 800bfba:	460b      	mov	r3, r1
 800bfbc:	70bb      	strb	r3, [r7, #2]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800bfca:	78fb      	ldrb	r3, [r7, #3]
 800bfcc:	015a      	lsls	r2, r3, #5
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfdc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800bfde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bfe2:	2b03      	cmp	r3, #3
 800bfe4:	d87e      	bhi.n	800c0e4 <USB_HC_Init+0x13c>
 800bfe6:	a201      	add	r2, pc, #4	; (adr r2, 800bfec <USB_HC_Init+0x44>)
 800bfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfec:	0800bffd 	.word	0x0800bffd
 800bff0:	0800c0a7 	.word	0x0800c0a7
 800bff4:	0800bffd 	.word	0x0800bffd
 800bff8:	0800c069 	.word	0x0800c069
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bffc:	78fb      	ldrb	r3, [r7, #3]
 800bffe:	015a      	lsls	r2, r3, #5
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	4413      	add	r3, r2
 800c004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c008:	461a      	mov	r2, r3
 800c00a:	f240 439d 	movw	r3, #1181	; 0x49d
 800c00e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c010:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c014:	2b00      	cmp	r3, #0
 800c016:	da10      	bge.n	800c03a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c018:	78fb      	ldrb	r3, [r7, #3]
 800c01a:	015a      	lsls	r2, r3, #5
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	4413      	add	r3, r2
 800c020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	78fa      	ldrb	r2, [r7, #3]
 800c028:	0151      	lsls	r1, r2, #5
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	440a      	add	r2, r1
 800c02e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c036:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c038:	e057      	b.n	800c0ea <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c042:	2b00      	cmp	r3, #0
 800c044:	d051      	beq.n	800c0ea <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c046:	78fb      	ldrb	r3, [r7, #3]
 800c048:	015a      	lsls	r2, r3, #5
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	4413      	add	r3, r2
 800c04e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	78fa      	ldrb	r2, [r7, #3]
 800c056:	0151      	lsls	r1, r2, #5
 800c058:	693a      	ldr	r2, [r7, #16]
 800c05a:	440a      	add	r2, r1
 800c05c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c060:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c064:	60d3      	str	r3, [r2, #12]
      break;
 800c066:	e040      	b.n	800c0ea <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c068:	78fb      	ldrb	r3, [r7, #3]
 800c06a:	015a      	lsls	r2, r3, #5
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	4413      	add	r3, r2
 800c070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c074:	461a      	mov	r2, r3
 800c076:	f240 639d 	movw	r3, #1693	; 0x69d
 800c07a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c07c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c080:	2b00      	cmp	r3, #0
 800c082:	da34      	bge.n	800c0ee <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c084:	78fb      	ldrb	r3, [r7, #3]
 800c086:	015a      	lsls	r2, r3, #5
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	4413      	add	r3, r2
 800c08c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	78fa      	ldrb	r2, [r7, #3]
 800c094:	0151      	lsls	r1, r2, #5
 800c096:	693a      	ldr	r2, [r7, #16]
 800c098:	440a      	add	r2, r1
 800c09a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c09e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0a2:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c0a4:	e023      	b.n	800c0ee <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c0a6:	78fb      	ldrb	r3, [r7, #3]
 800c0a8:	015a      	lsls	r2, r3, #5
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	4413      	add	r3, r2
 800c0ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	f240 2325 	movw	r3, #549	; 0x225
 800c0b8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c0ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	da17      	bge.n	800c0f2 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c0c2:	78fb      	ldrb	r3, [r7, #3]
 800c0c4:	015a      	lsls	r2, r3, #5
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	4413      	add	r3, r2
 800c0ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	78fa      	ldrb	r2, [r7, #3]
 800c0d2:	0151      	lsls	r1, r2, #5
 800c0d4:	693a      	ldr	r2, [r7, #16]
 800c0d6:	440a      	add	r2, r1
 800c0d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0dc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c0e0:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c0e2:	e006      	b.n	800c0f2 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	77fb      	strb	r3, [r7, #31]
      break;
 800c0e8:	e004      	b.n	800c0f4 <USB_HC_Init+0x14c>
      break;
 800c0ea:	bf00      	nop
 800c0ec:	e002      	b.n	800c0f4 <USB_HC_Init+0x14c>
      break;
 800c0ee:	bf00      	nop
 800c0f0:	e000      	b.n	800c0f4 <USB_HC_Init+0x14c>
      break;
 800c0f2:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c0f4:	78fb      	ldrb	r3, [r7, #3]
 800c0f6:	015a      	lsls	r2, r3, #5
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c100:	68db      	ldr	r3, [r3, #12]
 800c102:	78fa      	ldrb	r2, [r7, #3]
 800c104:	0151      	lsls	r1, r2, #5
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	440a      	add	r2, r1
 800c10a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c10e:	f043 0302 	orr.w	r3, r3, #2
 800c112:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c11a:	699a      	ldr	r2, [r3, #24]
 800c11c:	78fb      	ldrb	r3, [r7, #3]
 800c11e:	f003 030f 	and.w	r3, r3, #15
 800c122:	2101      	movs	r1, #1
 800c124:	fa01 f303 	lsl.w	r3, r1, r3
 800c128:	6939      	ldr	r1, [r7, #16]
 800c12a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c12e:	4313      	orrs	r3, r2
 800c130:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	699b      	ldr	r3, [r3, #24]
 800c136:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c13e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c142:	2b00      	cmp	r3, #0
 800c144:	da03      	bge.n	800c14e <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c14a:	61bb      	str	r3, [r7, #24]
 800c14c:	e001      	b.n	800c152 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800c14e:	2300      	movs	r3, #0
 800c150:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f7ff feff 	bl	800bf56 <USB_GetHostSpeed>
 800c158:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c15a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c15e:	2b02      	cmp	r3, #2
 800c160:	d106      	bne.n	800c170 <USB_HC_Init+0x1c8>
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2b02      	cmp	r3, #2
 800c166:	d003      	beq.n	800c170 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c168:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c16c:	617b      	str	r3, [r7, #20]
 800c16e:	e001      	b.n	800c174 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c170:	2300      	movs	r3, #0
 800c172:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c174:	787b      	ldrb	r3, [r7, #1]
 800c176:	059b      	lsls	r3, r3, #22
 800c178:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c17c:	78bb      	ldrb	r3, [r7, #2]
 800c17e:	02db      	lsls	r3, r3, #11
 800c180:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c184:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c186:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c18a:	049b      	lsls	r3, r3, #18
 800c18c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c190:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c192:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c194:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c198:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c19a:	69bb      	ldr	r3, [r7, #24]
 800c19c:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c19e:	78fb      	ldrb	r3, [r7, #3]
 800c1a0:	0159      	lsls	r1, r3, #5
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	440b      	add	r3, r1
 800c1a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1aa:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c1b0:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c1b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c1b6:	2b03      	cmp	r3, #3
 800c1b8:	d003      	beq.n	800c1c2 <USB_HC_Init+0x21a>
 800c1ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d10f      	bne.n	800c1e2 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c1c2:	78fb      	ldrb	r3, [r7, #3]
 800c1c4:	015a      	lsls	r2, r3, #5
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	78fa      	ldrb	r2, [r7, #3]
 800c1d2:	0151      	lsls	r1, r2, #5
 800c1d4:	693a      	ldr	r2, [r7, #16]
 800c1d6:	440a      	add	r2, r1
 800c1d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c1e0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c1e2:	7ffb      	ldrb	r3, [r7, #31]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3720      	adds	r7, #32
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b08c      	sub	sp, #48	; 0x30
 800c1f0:	af02      	add	r7, sp, #8
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	4613      	mov	r3, r2
 800c1f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	785b      	ldrb	r3, [r3, #1]
 800c202:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c204:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c208:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c20e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c212:	2b00      	cmp	r3, #0
 800c214:	d02d      	beq.n	800c272 <USB_HC_StartXfer+0x86>
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	791b      	ldrb	r3, [r3, #4]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d129      	bne.n	800c272 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c21e:	79fb      	ldrb	r3, [r7, #7]
 800c220:	2b01      	cmp	r3, #1
 800c222:	d117      	bne.n	800c254 <USB_HC_StartXfer+0x68>
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	79db      	ldrb	r3, [r3, #7]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d003      	beq.n	800c234 <USB_HC_StartXfer+0x48>
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	79db      	ldrb	r3, [r3, #7]
 800c230:	2b02      	cmp	r3, #2
 800c232:	d10f      	bne.n	800c254 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	015a      	lsls	r2, r3, #5
 800c238:	6a3b      	ldr	r3, [r7, #32]
 800c23a:	4413      	add	r3, r2
 800c23c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	69fa      	ldr	r2, [r7, #28]
 800c244:	0151      	lsls	r1, r2, #5
 800c246:	6a3a      	ldr	r2, [r7, #32]
 800c248:	440a      	add	r2, r1
 800c24a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c24e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c252:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c254:	79fb      	ldrb	r3, [r7, #7]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d10b      	bne.n	800c272 <USB_HC_StartXfer+0x86>
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	795b      	ldrb	r3, [r3, #5]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d107      	bne.n	800c272 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	785b      	ldrb	r3, [r3, #1]
 800c266:	4619      	mov	r1, r3
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f000 fa0f 	bl	800c68c <USB_DoPing>
      return HAL_OK;
 800c26e:	2300      	movs	r3, #0
 800c270:	e0f8      	b.n	800c464 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	695b      	ldr	r3, [r3, #20]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d018      	beq.n	800c2ac <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	695b      	ldr	r3, [r3, #20]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	8912      	ldrh	r2, [r2, #8]
 800c282:	4413      	add	r3, r2
 800c284:	3b01      	subs	r3, #1
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	8912      	ldrh	r2, [r2, #8]
 800c28a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c28e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c290:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c292:	8b7b      	ldrh	r3, [r7, #26]
 800c294:	429a      	cmp	r2, r3
 800c296:	d90b      	bls.n	800c2b0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c298:	8b7b      	ldrh	r3, [r7, #26]
 800c29a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c29c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c29e:	68ba      	ldr	r2, [r7, #8]
 800c2a0:	8912      	ldrh	r2, [r2, #8]
 800c2a2:	fb03 f202 	mul.w	r2, r3, r2
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	611a      	str	r2, [r3, #16]
 800c2aa:	e001      	b.n	800c2b0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	78db      	ldrb	r3, [r3, #3]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d007      	beq.n	800c2c8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c2b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	8912      	ldrh	r2, [r2, #8]
 800c2be:	fb03 f202 	mul.w	r2, r3, r2
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	611a      	str	r2, [r3, #16]
 800c2c6:	e003      	b.n	800c2d0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	695a      	ldr	r2, [r3, #20]
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c2d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c2da:	04d9      	lsls	r1, r3, #19
 800c2dc:	4b63      	ldr	r3, [pc, #396]	; (800c46c <USB_HC_StartXfer+0x280>)
 800c2de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c2e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	7a9b      	ldrb	r3, [r3, #10]
 800c2e6:	075b      	lsls	r3, r3, #29
 800c2e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c2ec:	69f9      	ldr	r1, [r7, #28]
 800c2ee:	0148      	lsls	r0, r1, #5
 800c2f0:	6a39      	ldr	r1, [r7, #32]
 800c2f2:	4401      	add	r1, r0
 800c2f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c2f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c2fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c2fc:	79fb      	ldrb	r3, [r7, #7]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d009      	beq.n	800c316 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	68d9      	ldr	r1, [r3, #12]
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	015a      	lsls	r2, r3, #5
 800c30a:	6a3b      	ldr	r3, [r7, #32]
 800c30c:	4413      	add	r3, r2
 800c30e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c312:	460a      	mov	r2, r1
 800c314:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c316:	6a3b      	ldr	r3, [r7, #32]
 800c318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	f003 0301 	and.w	r3, r3, #1
 800c322:	2b00      	cmp	r3, #0
 800c324:	bf0c      	ite	eq
 800c326:	2301      	moveq	r3, #1
 800c328:	2300      	movne	r3, #0
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	015a      	lsls	r2, r3, #5
 800c332:	6a3b      	ldr	r3, [r7, #32]
 800c334:	4413      	add	r3, r2
 800c336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	69fa      	ldr	r2, [r7, #28]
 800c33e:	0151      	lsls	r1, r2, #5
 800c340:	6a3a      	ldr	r2, [r7, #32]
 800c342:	440a      	add	r2, r1
 800c344:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c348:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c34c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	015a      	lsls	r2, r3, #5
 800c352:	6a3b      	ldr	r3, [r7, #32]
 800c354:	4413      	add	r3, r2
 800c356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c35a:	681a      	ldr	r2, [r3, #0]
 800c35c:	7e7b      	ldrb	r3, [r7, #25]
 800c35e:	075b      	lsls	r3, r3, #29
 800c360:	69f9      	ldr	r1, [r7, #28]
 800c362:	0148      	lsls	r0, r1, #5
 800c364:	6a39      	ldr	r1, [r7, #32]
 800c366:	4401      	add	r1, r0
 800c368:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c36c:	4313      	orrs	r3, r2
 800c36e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	015a      	lsls	r2, r3, #5
 800c374:	6a3b      	ldr	r3, [r7, #32]
 800c376:	4413      	add	r3, r2
 800c378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c386:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	78db      	ldrb	r3, [r3, #3]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d004      	beq.n	800c39a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c390:	693b      	ldr	r3, [r7, #16]
 800c392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c396:	613b      	str	r3, [r7, #16]
 800c398:	e003      	b.n	800c3a2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c3a0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c3a8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c3aa:	69fb      	ldr	r3, [r7, #28]
 800c3ac:	015a      	lsls	r2, r3, #5
 800c3ae:	6a3b      	ldr	r3, [r7, #32]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c3bc:	79fb      	ldrb	r3, [r7, #7]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d001      	beq.n	800c3c6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	e04e      	b.n	800c464 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	78db      	ldrb	r3, [r3, #3]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d149      	bne.n	800c462 <USB_HC_StartXfer+0x276>
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	695b      	ldr	r3, [r3, #20]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d045      	beq.n	800c462 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c3d6:	68bb      	ldr	r3, [r7, #8]
 800c3d8:	79db      	ldrb	r3, [r3, #7]
 800c3da:	2b03      	cmp	r3, #3
 800c3dc:	d830      	bhi.n	800c440 <USB_HC_StartXfer+0x254>
 800c3de:	a201      	add	r2, pc, #4	; (adr r2, 800c3e4 <USB_HC_StartXfer+0x1f8>)
 800c3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3e4:	0800c3f5 	.word	0x0800c3f5
 800c3e8:	0800c419 	.word	0x0800c419
 800c3ec:	0800c3f5 	.word	0x0800c3f5
 800c3f0:	0800c419 	.word	0x0800c419
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	695b      	ldr	r3, [r3, #20]
 800c3f8:	3303      	adds	r3, #3
 800c3fa:	089b      	lsrs	r3, r3, #2
 800c3fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c3fe:	8afa      	ldrh	r2, [r7, #22]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	b29b      	uxth	r3, r3
 800c406:	429a      	cmp	r2, r3
 800c408:	d91c      	bls.n	800c444 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	699b      	ldr	r3, [r3, #24]
 800c40e:	f043 0220 	orr.w	r2, r3, #32
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	619a      	str	r2, [r3, #24]
        }
        break;
 800c416:	e015      	b.n	800c444 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	695b      	ldr	r3, [r3, #20]
 800c41c:	3303      	adds	r3, #3
 800c41e:	089b      	lsrs	r3, r3, #2
 800c420:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c422:	8afa      	ldrh	r2, [r7, #22]
 800c424:	6a3b      	ldr	r3, [r7, #32]
 800c426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c42a:	691b      	ldr	r3, [r3, #16]
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	429a      	cmp	r2, r3
 800c430:	d90a      	bls.n	800c448 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	699b      	ldr	r3, [r3, #24]
 800c436:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	619a      	str	r2, [r3, #24]
        }
        break;
 800c43e:	e003      	b.n	800c448 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c440:	bf00      	nop
 800c442:	e002      	b.n	800c44a <USB_HC_StartXfer+0x25e>
        break;
 800c444:	bf00      	nop
 800c446:	e000      	b.n	800c44a <USB_HC_StartXfer+0x25e>
        break;
 800c448:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	68d9      	ldr	r1, [r3, #12]
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	785a      	ldrb	r2, [r3, #1]
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	695b      	ldr	r3, [r3, #20]
 800c456:	b29b      	uxth	r3, r3
 800c458:	2000      	movs	r0, #0
 800c45a:	9000      	str	r0, [sp, #0]
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f7ff fb5b 	bl	800bb18 <USB_WritePacket>
  }

  return HAL_OK;
 800c462:	2300      	movs	r3, #0
}
 800c464:	4618      	mov	r0, r3
 800c466:	3728      	adds	r7, #40	; 0x28
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	1ff80000 	.word	0x1ff80000

0800c470 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c470:	b480      	push	{r7}
 800c472:	b085      	sub	sp, #20
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c482:	695b      	ldr	r3, [r3, #20]
 800c484:	b29b      	uxth	r3, r3
}
 800c486:	4618      	mov	r0, r3
 800c488:	3714      	adds	r7, #20
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr

0800c492 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c492:	b480      	push	{r7}
 800c494:	b089      	sub	sp, #36	; 0x24
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	460b      	mov	r3, r1
 800c49c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800c4a2:	78fb      	ldrb	r3, [r7, #3]
 800c4a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	015a      	lsls	r2, r3, #5
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	0c9b      	lsrs	r3, r3, #18
 800c4ba:	f003 0303 	and.w	r3, r3, #3
 800c4be:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c4c0:	69bb      	ldr	r3, [r7, #24]
 800c4c2:	015a      	lsls	r2, r3, #5
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	0fdb      	lsrs	r3, r3, #31
 800c4d0:	f003 0301 	and.w	r3, r3, #1
 800c4d4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	f003 0320 	and.w	r3, r3, #32
 800c4de:	2b20      	cmp	r3, #32
 800c4e0:	d104      	bne.n	800c4ec <USB_HC_Halt+0x5a>
 800c4e2:	693b      	ldr	r3, [r7, #16]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d101      	bne.n	800c4ec <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	e0c8      	b.n	800c67e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d002      	beq.n	800c4f8 <USB_HC_Halt+0x66>
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d163      	bne.n	800c5c0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	015a      	lsls	r2, r3, #5
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	4413      	add	r3, r2
 800c500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	69ba      	ldr	r2, [r7, #24]
 800c508:	0151      	lsls	r1, r2, #5
 800c50a:	69fa      	ldr	r2, [r7, #28]
 800c50c:	440a      	add	r2, r1
 800c50e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c512:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c516:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	f003 0320 	and.w	r3, r3, #32
 800c520:	2b00      	cmp	r3, #0
 800c522:	f040 80ab 	bne.w	800c67c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c52a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d133      	bne.n	800c59a <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	015a      	lsls	r2, r3, #5
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	4413      	add	r3, r2
 800c53a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	69ba      	ldr	r2, [r7, #24]
 800c542:	0151      	lsls	r1, r2, #5
 800c544:	69fa      	ldr	r2, [r7, #28]
 800c546:	440a      	add	r2, r1
 800c548:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c54c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c550:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	015a      	lsls	r2, r3, #5
 800c556:	69fb      	ldr	r3, [r7, #28]
 800c558:	4413      	add	r3, r2
 800c55a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	69ba      	ldr	r2, [r7, #24]
 800c562:	0151      	lsls	r1, r2, #5
 800c564:	69fa      	ldr	r2, [r7, #28]
 800c566:	440a      	add	r2, r1
 800c568:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c56c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c570:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	3301      	adds	r3, #1
 800c576:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c57e:	d81d      	bhi.n	800c5bc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	015a      	lsls	r2, r3, #5
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	4413      	add	r3, r2
 800c588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c596:	d0ec      	beq.n	800c572 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c598:	e070      	b.n	800c67c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c59a:	69bb      	ldr	r3, [r7, #24]
 800c59c:	015a      	lsls	r2, r3, #5
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	69ba      	ldr	r2, [r7, #24]
 800c5aa:	0151      	lsls	r1, r2, #5
 800c5ac:	69fa      	ldr	r2, [r7, #28]
 800c5ae:	440a      	add	r2, r1
 800c5b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c5b8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c5ba:	e05f      	b.n	800c67c <USB_HC_Halt+0x1ea>
            break;
 800c5bc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c5be:	e05d      	b.n	800c67c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c5c0:	69bb      	ldr	r3, [r7, #24]
 800c5c2:	015a      	lsls	r2, r3, #5
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	4413      	add	r3, r2
 800c5c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	69ba      	ldr	r2, [r7, #24]
 800c5d0:	0151      	lsls	r1, r2, #5
 800c5d2:	69fa      	ldr	r2, [r7, #28]
 800c5d4:	440a      	add	r2, r1
 800c5d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c5de:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5e6:	691b      	ldr	r3, [r3, #16]
 800c5e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d133      	bne.n	800c658 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	015a      	lsls	r2, r3, #5
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	4413      	add	r3, r2
 800c5f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	69ba      	ldr	r2, [r7, #24]
 800c600:	0151      	lsls	r1, r2, #5
 800c602:	69fa      	ldr	r2, [r7, #28]
 800c604:	440a      	add	r2, r1
 800c606:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c60a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c60e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	015a      	lsls	r2, r3, #5
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	4413      	add	r3, r2
 800c618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	69ba      	ldr	r2, [r7, #24]
 800c620:	0151      	lsls	r1, r2, #5
 800c622:	69fa      	ldr	r2, [r7, #28]
 800c624:	440a      	add	r2, r1
 800c626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c62a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c62e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	3301      	adds	r3, #1
 800c634:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c63c:	d81d      	bhi.n	800c67a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	015a      	lsls	r2, r3, #5
 800c642:	69fb      	ldr	r3, [r7, #28]
 800c644:	4413      	add	r3, r2
 800c646:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c654:	d0ec      	beq.n	800c630 <USB_HC_Halt+0x19e>
 800c656:	e011      	b.n	800c67c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c658:	69bb      	ldr	r3, [r7, #24]
 800c65a:	015a      	lsls	r2, r3, #5
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	4413      	add	r3, r2
 800c660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	69ba      	ldr	r2, [r7, #24]
 800c668:	0151      	lsls	r1, r2, #5
 800c66a:	69fa      	ldr	r2, [r7, #28]
 800c66c:	440a      	add	r2, r1
 800c66e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c672:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c676:	6013      	str	r3, [r2, #0]
 800c678:	e000      	b.n	800c67c <USB_HC_Halt+0x1ea>
          break;
 800c67a:	bf00      	nop
    }
  }

  return HAL_OK;
 800c67c:	2300      	movs	r3, #0
}
 800c67e:	4618      	mov	r0, r3
 800c680:	3724      	adds	r7, #36	; 0x24
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr
	...

0800c68c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b087      	sub	sp, #28
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	460b      	mov	r3, r1
 800c696:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c69c:	78fb      	ldrb	r3, [r7, #3]
 800c69e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	04da      	lsls	r2, r3, #19
 800c6a8:	4b15      	ldr	r3, [pc, #84]	; (800c700 <USB_DoPing+0x74>)
 800c6aa:	4013      	ands	r3, r2
 800c6ac:	693a      	ldr	r2, [r7, #16]
 800c6ae:	0151      	lsls	r1, r2, #5
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	440a      	add	r2, r1
 800c6b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c6bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	015a      	lsls	r2, r3, #5
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c6d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c6dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	015a      	lsls	r2, r3, #5
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	371c      	adds	r7, #28
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	1ff80000 	.word	0x1ff80000

0800c704 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b088      	sub	sp, #32
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c70c:	2300      	movs	r3, #0
 800c70e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800c714:	2300      	movs	r3, #0
 800c716:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7ff f93b 	bl	800b994 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c71e:	2110      	movs	r1, #16
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7ff f995 	bl	800ba50 <USB_FlushTxFifo>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d001      	beq.n	800c730 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800c72c:	2301      	movs	r3, #1
 800c72e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f7ff f9c1 	bl	800bab8 <USB_FlushRxFifo>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d001      	beq.n	800c740 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800c73c:	2301      	movs	r3, #1
 800c73e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c740:	2300      	movs	r3, #0
 800c742:	61bb      	str	r3, [r7, #24]
 800c744:	e01f      	b.n	800c786 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800c746:	69bb      	ldr	r3, [r7, #24]
 800c748:	015a      	lsls	r2, r3, #5
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	4413      	add	r3, r2
 800c74e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c75c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c764:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c76c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c76e:	69bb      	ldr	r3, [r7, #24]
 800c770:	015a      	lsls	r2, r3, #5
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	4413      	add	r3, r2
 800c776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c77a:	461a      	mov	r2, r3
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	3301      	adds	r3, #1
 800c784:	61bb      	str	r3, [r7, #24]
 800c786:	69bb      	ldr	r3, [r7, #24]
 800c788:	2b0f      	cmp	r3, #15
 800c78a:	d9dc      	bls.n	800c746 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c78c:	2300      	movs	r3, #0
 800c78e:	61bb      	str	r3, [r7, #24]
 800c790:	e034      	b.n	800c7fc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	015a      	lsls	r2, r3, #5
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	4413      	add	r3, r2
 800c79a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c7b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c7b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	015a      	lsls	r2, r3, #5
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c7d8:	d80c      	bhi.n	800c7f4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	015a      	lsls	r2, r3, #5
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7f0:	d0ec      	beq.n	800c7cc <USB_StopHost+0xc8>
 800c7f2:	e000      	b.n	800c7f6 <USB_StopHost+0xf2>
        break;
 800c7f4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	61bb      	str	r3, [r7, #24]
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	2b0f      	cmp	r3, #15
 800c800:	d9c7      	bls.n	800c792 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c808:	461a      	mov	r2, r3
 800c80a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c80e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c816:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f7ff f8aa 	bl	800b972 <USB_EnableGlobalInt>

  return ret;
 800c81e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3720      	adds	r7, #32
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c828:	b590      	push	{r4, r7, lr}
 800c82a:	b089      	sub	sp, #36	; 0x24
 800c82c:	af04      	add	r7, sp, #16
 800c82e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c830:	2301      	movs	r3, #1
 800c832:	2202      	movs	r2, #2
 800c834:	2102      	movs	r1, #2
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 fc66 	bl	800d108 <USBH_FindInterface>
 800c83c:	4603      	mov	r3, r0
 800c83e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c840:	7bfb      	ldrb	r3, [r7, #15]
 800c842:	2bff      	cmp	r3, #255	; 0xff
 800c844:	d002      	beq.n	800c84c <USBH_CDC_InterfaceInit+0x24>
 800c846:	7bfb      	ldrb	r3, [r7, #15]
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d901      	bls.n	800c850 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c84c:	2302      	movs	r3, #2
 800c84e:	e13d      	b.n	800cacc <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c850:	7bfb      	ldrb	r3, [r7, #15]
 800c852:	4619      	mov	r1, r3
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 fc3b 	bl	800d0d0 <USBH_SelectInterface>
 800c85a:	4603      	mov	r3, r0
 800c85c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c85e:	7bbb      	ldrb	r3, [r7, #14]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d001      	beq.n	800c868 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c864:	2302      	movs	r3, #2
 800c866:	e131      	b.n	800cacc <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800c86e:	2050      	movs	r0, #80	; 0x50
 800c870:	f002 fbe0 	bl	800f034 <malloc>
 800c874:	4603      	mov	r3, r0
 800c876:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c87e:	69db      	ldr	r3, [r3, #28]
 800c880:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d101      	bne.n	800c88c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c888:	2302      	movs	r3, #2
 800c88a:	e11f      	b.n	800cacc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c88c:	2250      	movs	r2, #80	; 0x50
 800c88e:	2100      	movs	r1, #0
 800c890:	68b8      	ldr	r0, [r7, #8]
 800c892:	f002 fbdf 	bl	800f054 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c896:	7bfb      	ldrb	r3, [r7, #15]
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	211a      	movs	r1, #26
 800c89c:	fb01 f303 	mul.w	r3, r1, r3
 800c8a0:	4413      	add	r3, r2
 800c8a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	b25b      	sxtb	r3, r3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	da15      	bge.n	800c8da <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c8ae:	7bfb      	ldrb	r3, [r7, #15]
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	211a      	movs	r1, #26
 800c8b4:	fb01 f303 	mul.w	r3, r1, r3
 800c8b8:	4413      	add	r3, r2
 800c8ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c8be:	781a      	ldrb	r2, [r3, #0]
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c8c4:	7bfb      	ldrb	r3, [r7, #15]
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	211a      	movs	r1, #26
 800c8ca:	fb01 f303 	mul.w	r3, r1, r3
 800c8ce:	4413      	add	r3, r2
 800c8d0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c8d4:	881a      	ldrh	r2, [r3, #0]
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	785b      	ldrb	r3, [r3, #1]
 800c8de:	4619      	mov	r1, r3
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 ff9c 	bl	800d81e <USBH_AllocPipe>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	7819      	ldrb	r1, [r3, #0]
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	7858      	ldrb	r0, [r3, #1]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c902:	68ba      	ldr	r2, [r7, #8]
 800c904:	8952      	ldrh	r2, [r2, #10]
 800c906:	9202      	str	r2, [sp, #8]
 800c908:	2203      	movs	r2, #3
 800c90a:	9201      	str	r2, [sp, #4]
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	4623      	mov	r3, r4
 800c910:	4602      	mov	r2, r0
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 ff54 	bl	800d7c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	2200      	movs	r2, #0
 800c91e:	4619      	mov	r1, r3
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f001 fa1d 	bl	800dd60 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c926:	2300      	movs	r3, #0
 800c928:	2200      	movs	r2, #0
 800c92a:	210a      	movs	r1, #10
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 fbeb 	bl	800d108 <USBH_FindInterface>
 800c932:	4603      	mov	r3, r0
 800c934:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c936:	7bfb      	ldrb	r3, [r7, #15]
 800c938:	2bff      	cmp	r3, #255	; 0xff
 800c93a:	d002      	beq.n	800c942 <USBH_CDC_InterfaceInit+0x11a>
 800c93c:	7bfb      	ldrb	r3, [r7, #15]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d901      	bls.n	800c946 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c942:	2302      	movs	r3, #2
 800c944:	e0c2      	b.n	800cacc <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c946:	7bfb      	ldrb	r3, [r7, #15]
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	211a      	movs	r1, #26
 800c94c:	fb01 f303 	mul.w	r3, r1, r3
 800c950:	4413      	add	r3, r2
 800c952:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	b25b      	sxtb	r3, r3
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	da16      	bge.n	800c98c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c95e:	7bfb      	ldrb	r3, [r7, #15]
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	211a      	movs	r1, #26
 800c964:	fb01 f303 	mul.w	r3, r1, r3
 800c968:	4413      	add	r3, r2
 800c96a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c96e:	781a      	ldrb	r2, [r3, #0]
 800c970:	68bb      	ldr	r3, [r7, #8]
 800c972:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c974:	7bfb      	ldrb	r3, [r7, #15]
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	211a      	movs	r1, #26
 800c97a:	fb01 f303 	mul.w	r3, r1, r3
 800c97e:	4413      	add	r3, r2
 800c980:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c984:	881a      	ldrh	r2, [r3, #0]
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	835a      	strh	r2, [r3, #26]
 800c98a:	e015      	b.n	800c9b8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c98c:	7bfb      	ldrb	r3, [r7, #15]
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	211a      	movs	r1, #26
 800c992:	fb01 f303 	mul.w	r3, r1, r3
 800c996:	4413      	add	r3, r2
 800c998:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c99c:	781a      	ldrb	r2, [r3, #0]
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c9a2:	7bfb      	ldrb	r3, [r7, #15]
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	211a      	movs	r1, #26
 800c9a8:	fb01 f303 	mul.w	r3, r1, r3
 800c9ac:	4413      	add	r3, r2
 800c9ae:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c9b2:	881a      	ldrh	r2, [r3, #0]
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800c9b8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	211a      	movs	r1, #26
 800c9be:	fb01 f303 	mul.w	r3, r1, r3
 800c9c2:	4413      	add	r3, r2
 800c9c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	b25b      	sxtb	r3, r3
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	da16      	bge.n	800c9fe <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c9d0:	7bfb      	ldrb	r3, [r7, #15]
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	211a      	movs	r1, #26
 800c9d6:	fb01 f303 	mul.w	r3, r1, r3
 800c9da:	4413      	add	r3, r2
 800c9dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c9e0:	781a      	ldrb	r2, [r3, #0]
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c9e6:	7bfb      	ldrb	r3, [r7, #15]
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	211a      	movs	r1, #26
 800c9ec:	fb01 f303 	mul.w	r3, r1, r3
 800c9f0:	4413      	add	r3, r2
 800c9f2:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c9f6:	881a      	ldrh	r2, [r3, #0]
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	835a      	strh	r2, [r3, #26]
 800c9fc:	e015      	b.n	800ca2a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	211a      	movs	r1, #26
 800ca04:	fb01 f303 	mul.w	r3, r1, r3
 800ca08:	4413      	add	r3, r2
 800ca0a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ca0e:	781a      	ldrb	r2, [r3, #0]
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ca14:	7bfb      	ldrb	r3, [r7, #15]
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	211a      	movs	r1, #26
 800ca1a:	fb01 f303 	mul.w	r3, r1, r3
 800ca1e:	4413      	add	r3, r2
 800ca20:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ca24:	881a      	ldrh	r2, [r3, #0]
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	7b9b      	ldrb	r3, [r3, #14]
 800ca2e:	4619      	mov	r1, r3
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f000 fef4 	bl	800d81e <USBH_AllocPipe>
 800ca36:	4603      	mov	r3, r0
 800ca38:	461a      	mov	r2, r3
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	7bdb      	ldrb	r3, [r3, #15]
 800ca42:	4619      	mov	r1, r3
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f000 feea 	bl	800d81e <USBH_AllocPipe>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	7b59      	ldrb	r1, [r3, #13]
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	7b98      	ldrb	r0, [r3, #14]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ca66:	68ba      	ldr	r2, [r7, #8]
 800ca68:	8b12      	ldrh	r2, [r2, #24]
 800ca6a:	9202      	str	r2, [sp, #8]
 800ca6c:	2202      	movs	r2, #2
 800ca6e:	9201      	str	r2, [sp, #4]
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	4623      	mov	r3, r4
 800ca74:	4602      	mov	r2, r0
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f000 fea2 	bl	800d7c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	7b19      	ldrb	r1, [r3, #12]
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	7bd8      	ldrb	r0, [r3, #15]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	8b52      	ldrh	r2, [r2, #26]
 800ca94:	9202      	str	r2, [sp, #8]
 800ca96:	2202      	movs	r2, #2
 800ca98:	9201      	str	r2, [sp, #4]
 800ca9a:	9300      	str	r3, [sp, #0]
 800ca9c:	4623      	mov	r3, r4
 800ca9e:	4602      	mov	r2, r0
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fe8d 	bl	800d7c0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	7b5b      	ldrb	r3, [r3, #13]
 800cab2:	2200      	movs	r2, #0
 800cab4:	4619      	mov	r1, r3
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f001 f952 	bl	800dd60 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	7b1b      	ldrb	r3, [r3, #12]
 800cac0:	2200      	movs	r2, #0
 800cac2:	4619      	mov	r1, r3
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f001 f94b 	bl	800dd60 <USBH_LL_SetToggle>

  return USBH_OK;
 800caca:	2300      	movs	r3, #0
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3714      	adds	r7, #20
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd90      	pop	{r4, r7, pc}

0800cad4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cae2:	69db      	ldr	r3, [r3, #28]
 800cae4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	781b      	ldrb	r3, [r3, #0]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00e      	beq.n	800cb0c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	4619      	mov	r1, r3
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fe82 	bl	800d7fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	4619      	mov	r1, r3
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 fead 	bl	800d860 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	7b1b      	ldrb	r3, [r3, #12]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d00e      	beq.n	800cb32 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	7b1b      	ldrb	r3, [r3, #12]
 800cb18:	4619      	mov	r1, r3
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 fe6f 	bl	800d7fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	7b1b      	ldrb	r3, [r3, #12]
 800cb24:	4619      	mov	r1, r3
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f000 fe9a 	bl	800d860 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	7b5b      	ldrb	r3, [r3, #13]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00e      	beq.n	800cb58 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	7b5b      	ldrb	r3, [r3, #13]
 800cb3e:	4619      	mov	r1, r3
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f000 fe5c 	bl	800d7fe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	7b5b      	ldrb	r3, [r3, #13]
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f000 fe87 	bl	800d860 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2200      	movs	r2, #0
 800cb56:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb5e:	69db      	ldr	r3, [r3, #28]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00b      	beq.n	800cb7c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb6a:	69db      	ldr	r3, [r3, #28]
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f002 fa69 	bl	800f044 <free>
    phost->pActiveClass->pData = 0U;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb78:	2200      	movs	r2, #0
 800cb7a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3710      	adds	r7, #16
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b084      	sub	sp, #16
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb94:	69db      	ldr	r3, [r3, #28]
 800cb96:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	3340      	adds	r3, #64	; 0x40
 800cb9c:	4619      	mov	r1, r3
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 f8b1 	bl	800cd06 <GetLineCoding>
 800cba4:	4603      	mov	r3, r0
 800cba6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800cba8:	7afb      	ldrb	r3, [r7, #11]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d105      	bne.n	800cbba <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cbb4:	2102      	movs	r1, #2
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800cbba:	7afb      	ldrb	r3, [r7, #11]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800cbcc:	2301      	movs	r3, #1
 800cbce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbda:	69db      	ldr	r3, [r3, #28]
 800cbdc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800cbde:	68bb      	ldr	r3, [r7, #8]
 800cbe0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800cbe4:	2b04      	cmp	r3, #4
 800cbe6:	d877      	bhi.n	800ccd8 <USBH_CDC_Process+0x114>
 800cbe8:	a201      	add	r2, pc, #4	; (adr r2, 800cbf0 <USBH_CDC_Process+0x2c>)
 800cbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbee:	bf00      	nop
 800cbf0:	0800cc05 	.word	0x0800cc05
 800cbf4:	0800cc0b 	.word	0x0800cc0b
 800cbf8:	0800cc3b 	.word	0x0800cc3b
 800cbfc:	0800ccaf 	.word	0x0800ccaf
 800cc00:	0800ccbd 	.word	0x0800ccbd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800cc04:	2300      	movs	r3, #0
 800cc06:	73fb      	strb	r3, [r7, #15]
      break;
 800cc08:	e06d      	b.n	800cce6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc0e:	4619      	mov	r1, r3
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f000 f897 	bl	800cd44 <SetLineCoding>
 800cc16:	4603      	mov	r3, r0
 800cc18:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cc1a:	7bbb      	ldrb	r3, [r7, #14]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d104      	bne.n	800cc2a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	2202      	movs	r2, #2
 800cc24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cc28:	e058      	b.n	800ccdc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800cc2a:	7bbb      	ldrb	r3, [r7, #14]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d055      	beq.n	800ccdc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	2204      	movs	r2, #4
 800cc34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cc38:	e050      	b.n	800ccdc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	3340      	adds	r3, #64	; 0x40
 800cc3e:	4619      	mov	r1, r3
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 f860 	bl	800cd06 <GetLineCoding>
 800cc46:	4603      	mov	r3, r0
 800cc48:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cc4a:	7bbb      	ldrb	r3, [r7, #14]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d126      	bne.n	800cc9e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	2200      	movs	r2, #0
 800cc54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc62:	791b      	ldrb	r3, [r3, #4]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d13b      	bne.n	800cce0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc72:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cc74:	429a      	cmp	r2, r3
 800cc76:	d133      	bne.n	800cce0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800cc7e:	68bb      	ldr	r3, [r7, #8]
 800cc80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc82:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d12b      	bne.n	800cce0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc90:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d124      	bne.n	800cce0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 f958 	bl	800cf4c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cc9c:	e020      	b.n	800cce0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800cc9e:	7bbb      	ldrb	r3, [r7, #14]
 800cca0:	2b01      	cmp	r3, #1
 800cca2:	d01d      	beq.n	800cce0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	2204      	movs	r2, #4
 800cca8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ccac:	e018      	b.n	800cce0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 f867 	bl	800cd82 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ccb4:	6878      	ldr	r0, [r7, #4]
 800ccb6:	f000 f8da 	bl	800ce6e <CDC_ProcessReception>
      break;
 800ccba:	e014      	b.n	800cce6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fb08 	bl	800d2d4 <USBH_ClrFeature>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ccc8:	7bbb      	ldrb	r3, [r7, #14]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d10a      	bne.n	800cce4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800ccd6:	e005      	b.n	800cce4 <USBH_CDC_Process+0x120>

    default:
      break;
 800ccd8:	bf00      	nop
 800ccda:	e004      	b.n	800cce6 <USBH_CDC_Process+0x122>
      break;
 800ccdc:	bf00      	nop
 800ccde:	e002      	b.n	800cce6 <USBH_CDC_Process+0x122>
      break;
 800cce0:	bf00      	nop
 800cce2:	e000      	b.n	800cce6 <USBH_CDC_Process+0x122>
      break;
 800cce4:	bf00      	nop

  }

  return status;
 800cce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b083      	sub	sp, #12
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ccf8:	2300      	movs	r3, #0
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	370c      	adds	r7, #12
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr

0800cd06 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b082      	sub	sp, #8
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
 800cd0e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	22a1      	movs	r2, #161	; 0xa1
 800cd14:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2221      	movs	r2, #33	; 0x21
 800cd1a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2207      	movs	r2, #7
 800cd2c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	2207      	movs	r2, #7
 800cd32:	4619      	mov	r1, r3
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 faf1 	bl	800d31c <USBH_CtlReq>
 800cd3a:	4603      	mov	r3, r0
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3708      	adds	r7, #8
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}

0800cd44 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2221      	movs	r2, #33	; 0x21
 800cd52:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2220      	movs	r2, #32
 800cd58:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2207      	movs	r2, #7
 800cd6a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	2207      	movs	r2, #7
 800cd70:	4619      	mov	r1, r3
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 fad2 	bl	800d31c <USBH_CtlReq>
 800cd78:	4603      	mov	r3, r0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b086      	sub	sp, #24
 800cd86:	af02      	add	r7, sp, #8
 800cd88:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd90:	69db      	ldr	r3, [r3, #28]
 800cd92:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cd94:	2300      	movs	r3, #0
 800cd96:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800cd9e:	2b01      	cmp	r3, #1
 800cda0:	d002      	beq.n	800cda8 <CDC_ProcessTransmission+0x26>
 800cda2:	2b02      	cmp	r3, #2
 800cda4:	d023      	beq.n	800cdee <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800cda6:	e05e      	b.n	800ce66 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	8b12      	ldrh	r2, [r2, #24]
 800cdb0:	4293      	cmp	r3, r2
 800cdb2:	d90b      	bls.n	800cdcc <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	69d9      	ldr	r1, [r3, #28]
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	8b1a      	ldrh	r2, [r3, #24]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	7b5b      	ldrb	r3, [r3, #13]
 800cdc0:	2001      	movs	r0, #1
 800cdc2:	9000      	str	r0, [sp, #0]
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 fcb8 	bl	800d73a <USBH_BulkSendData>
 800cdca:	e00b      	b.n	800cde4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800cdd4:	b29a      	uxth	r2, r3
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	7b5b      	ldrb	r3, [r3, #13]
 800cdda:	2001      	movs	r0, #1
 800cddc:	9000      	str	r0, [sp, #0]
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f000 fcab 	bl	800d73a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	2202      	movs	r2, #2
 800cde8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800cdec:	e03b      	b.n	800ce66 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	7b5b      	ldrb	r3, [r3, #13]
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 ff89 	bl	800dd0c <USBH_LL_GetURBState>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800cdfe:	7afb      	ldrb	r3, [r7, #11]
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d128      	bne.n	800ce56 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce08:	68fa      	ldr	r2, [r7, #12]
 800ce0a:	8b12      	ldrh	r2, [r2, #24]
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d90e      	bls.n	800ce2e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	8b12      	ldrh	r2, [r2, #24]
 800ce18:	1a9a      	subs	r2, r3, r2
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	69db      	ldr	r3, [r3, #28]
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	8b12      	ldrh	r2, [r2, #24]
 800ce26:	441a      	add	r2, r3
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	61da      	str	r2, [r3, #28]
 800ce2c:	e002      	b.n	800ce34 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2200      	movs	r2, #0
 800ce32:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d004      	beq.n	800ce46 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ce44:	e00e      	b.n	800ce64 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 f868 	bl	800cf24 <USBH_CDC_TransmitCallback>
      break;
 800ce54:	e006      	b.n	800ce64 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ce56:	7afb      	ldrb	r3, [r7, #11]
 800ce58:	2b02      	cmp	r3, #2
 800ce5a:	d103      	bne.n	800ce64 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2201      	movs	r2, #1
 800ce60:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ce64:	bf00      	nop
  }
}
 800ce66:	bf00      	nop
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b086      	sub	sp, #24
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce7c:	69db      	ldr	r3, [r3, #28]
 800ce7e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ce80:	2300      	movs	r3, #0
 800ce82:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ce8a:	2b03      	cmp	r3, #3
 800ce8c:	d002      	beq.n	800ce94 <CDC_ProcessReception+0x26>
 800ce8e:	2b04      	cmp	r3, #4
 800ce90:	d00e      	beq.n	800ceb0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ce92:	e043      	b.n	800cf1c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	6a19      	ldr	r1, [r3, #32]
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	8b5a      	ldrh	r2, [r3, #26]
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	7b1b      	ldrb	r3, [r3, #12]
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f000 fc6f 	bl	800d784 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	2204      	movs	r2, #4
 800ceaa:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ceae:	e035      	b.n	800cf1c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	7b1b      	ldrb	r3, [r3, #12]
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 ff28 	bl	800dd0c <USBH_LL_GetURBState>
 800cebc:	4603      	mov	r3, r0
 800cebe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800cec0:	7cfb      	ldrb	r3, [r7, #19]
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	d129      	bne.n	800cf1a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	7b1b      	ldrb	r3, [r3, #12]
 800ceca:	4619      	mov	r1, r3
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 fe8b 	bl	800dbe8 <USBH_LL_GetLastXferSize>
 800ced2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced8:	68fa      	ldr	r2, [r7, #12]
 800ceda:	429a      	cmp	r2, r3
 800cedc:	d016      	beq.n	800cf0c <CDC_ProcessReception+0x9e>
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	8b5b      	ldrh	r3, [r3, #26]
 800cee2:	461a      	mov	r2, r3
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d910      	bls.n	800cf0c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	1ad2      	subs	r2, r2, r3
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	6a1a      	ldr	r2, [r3, #32]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	441a      	add	r2, r3
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	2203      	movs	r2, #3
 800cf06:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800cf0a:	e006      	b.n	800cf1a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 f80f 	bl	800cf38 <USBH_CDC_ReceiveCallback>
      break;
 800cf1a:	bf00      	nop
  }
}
 800cf1c:	bf00      	nop
 800cf1e:	3718      	adds	r7, #24
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b083      	sub	sp, #12
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cf2c:	bf00      	nop
 800cf2e:	370c      	adds	r7, #12
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cf40:	bf00      	nop
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cf54:	bf00      	nop
 800cf56:	370c      	adds	r7, #12
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b084      	sub	sp, #16
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	60b9      	str	r1, [r7, #8]
 800cf6a:	4613      	mov	r3, r2
 800cf6c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d101      	bne.n	800cf78 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800cf74:	2302      	movs	r3, #2
 800cf76:	e029      	b.n	800cfcc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	79fa      	ldrb	r2, [r7, #7]
 800cf7c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	2200      	movs	r2, #0
 800cf84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800cf90:	68f8      	ldr	r0, [r7, #12]
 800cf92:	f000 f81f 	bl	800cfd4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d003      	beq.n	800cfc4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f000 fd93 	bl	800daf0 <USBH_LL_Init>

  return USBH_OK;
 800cfca:	2300      	movs	r3, #0
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3710      	adds	r7, #16
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	60fb      	str	r3, [r7, #12]
 800cfe4:	e009      	b.n	800cffa <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	33e0      	adds	r3, #224	; 0xe0
 800cfec:	009b      	lsls	r3, r3, #2
 800cfee:	4413      	add	r3, r2
 800cff0:	2200      	movs	r2, #0
 800cff2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	3301      	adds	r3, #1
 800cff8:	60fb      	str	r3, [r7, #12]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2b0f      	cmp	r3, #15
 800cffe:	d9f2      	bls.n	800cfe6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d000:	2300      	movs	r3, #0
 800d002:	60fb      	str	r3, [r7, #12]
 800d004:	e009      	b.n	800d01a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	4413      	add	r3, r2
 800d00c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d010:	2200      	movs	r2, #0
 800d012:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	3301      	adds	r3, #1
 800d018:	60fb      	str	r3, [r7, #12]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d020:	d3f1      	bcc.n	800d006 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2200      	movs	r2, #0
 800d026:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	2201      	movs	r2, #1
 800d032:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2201      	movs	r2, #1
 800d040:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2240      	movs	r2, #64	; 0x40
 800d046:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2200      	movs	r2, #0
 800d04c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2200      	movs	r2, #0
 800d052:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2201      	movs	r2, #1
 800d05a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2200      	movs	r2, #0
 800d062:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2200      	movs	r2, #0
 800d06a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3714      	adds	r7, #20
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b085      	sub	sp, #20
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d086:	2300      	movs	r3, #0
 800d088:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d016      	beq.n	800d0be <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d096:	2b00      	cmp	r3, #0
 800d098:	d10e      	bne.n	800d0b8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d0a0:	1c59      	adds	r1, r3, #1
 800d0a2:	687a      	ldr	r2, [r7, #4]
 800d0a4:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	33de      	adds	r3, #222	; 0xde
 800d0ac:	6839      	ldr	r1, [r7, #0]
 800d0ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	73fb      	strb	r3, [r7, #15]
 800d0b6:	e004      	b.n	800d0c2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d0b8:	2302      	movs	r3, #2
 800d0ba:	73fb      	strb	r3, [r7, #15]
 800d0bc:	e001      	b.n	800d0c2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d0be:	2302      	movs	r3, #2
 800d0c0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3714      	adds	r7, #20
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
 800d0d8:	460b      	mov	r3, r1
 800d0da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d0e6:	78fa      	ldrb	r2, [r7, #3]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d204      	bcs.n	800d0f6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	78fa      	ldrb	r2, [r7, #3]
 800d0f0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d0f4:	e001      	b.n	800d0fa <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d0f6:	2302      	movs	r3, #2
 800d0f8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d0fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3714      	adds	r7, #20
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d108:	b480      	push	{r7}
 800d10a:	b087      	sub	sp, #28
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	4608      	mov	r0, r1
 800d112:	4611      	mov	r1, r2
 800d114:	461a      	mov	r2, r3
 800d116:	4603      	mov	r3, r0
 800d118:	70fb      	strb	r3, [r7, #3]
 800d11a:	460b      	mov	r3, r1
 800d11c:	70bb      	strb	r3, [r7, #2]
 800d11e:	4613      	mov	r3, r2
 800d120:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d122:	2300      	movs	r3, #0
 800d124:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d126:	2300      	movs	r3, #0
 800d128:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d130:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d132:	e025      	b.n	800d180 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d134:	7dfb      	ldrb	r3, [r7, #23]
 800d136:	221a      	movs	r2, #26
 800d138:	fb02 f303 	mul.w	r3, r2, r3
 800d13c:	3308      	adds	r3, #8
 800d13e:	68fa      	ldr	r2, [r7, #12]
 800d140:	4413      	add	r3, r2
 800d142:	3302      	adds	r3, #2
 800d144:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	795b      	ldrb	r3, [r3, #5]
 800d14a:	78fa      	ldrb	r2, [r7, #3]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d002      	beq.n	800d156 <USBH_FindInterface+0x4e>
 800d150:	78fb      	ldrb	r3, [r7, #3]
 800d152:	2bff      	cmp	r3, #255	; 0xff
 800d154:	d111      	bne.n	800d17a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d15a:	78ba      	ldrb	r2, [r7, #2]
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d002      	beq.n	800d166 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d160:	78bb      	ldrb	r3, [r7, #2]
 800d162:	2bff      	cmp	r3, #255	; 0xff
 800d164:	d109      	bne.n	800d17a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d16a:	787a      	ldrb	r2, [r7, #1]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d002      	beq.n	800d176 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d170:	787b      	ldrb	r3, [r7, #1]
 800d172:	2bff      	cmp	r3, #255	; 0xff
 800d174:	d101      	bne.n	800d17a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d176:	7dfb      	ldrb	r3, [r7, #23]
 800d178:	e006      	b.n	800d188 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d17a:	7dfb      	ldrb	r3, [r7, #23]
 800d17c:	3301      	adds	r3, #1
 800d17e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d180:	7dfb      	ldrb	r3, [r7, #23]
 800d182:	2b01      	cmp	r3, #1
 800d184:	d9d6      	bls.n	800d134 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d186:	23ff      	movs	r3, #255	; 0xff
}
 800d188:	4618      	mov	r0, r3
 800d18a:	371c      	adds	r7, #28
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 fced 	bl	800db7c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800d1a2:	2101      	movs	r1, #1
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 fdc4 	bl	800dd32 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d1aa:	2300      	movs	r3, #0
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3708      	adds	r7, #8
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	b083      	sub	sp, #12
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	683a      	ldr	r2, [r7, #0]
 800d1c2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d1c6:	bf00      	nop
 800d1c8:	370c      	adds	r7, #12
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr

0800d1d2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d1d2:	b580      	push	{r7, lr}
 800d1d4:	b082      	sub	sp, #8
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d1e0:	1c5a      	adds	r2, r3, #1
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 f804 	bl	800d1f6 <USBH_HandleSof>
}
 800d1ee:	bf00      	nop
 800d1f0:	3708      	adds	r7, #8
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b082      	sub	sp, #8
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	b2db      	uxtb	r3, r3
 800d204:	2b0b      	cmp	r3, #11
 800d206:	d10a      	bne.n	800d21e <USBH_HandleSof+0x28>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d005      	beq.n	800d21e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d218:	699b      	ldr	r3, [r3, #24]
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	4798      	blx	r3
  }
}
 800d21e:	bf00      	nop
 800d220:	3708      	adds	r7, #8
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d226:	b480      	push	{r7}
 800d228:	b083      	sub	sp, #12
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2201      	movs	r2, #1
 800d232:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d236:	bf00      	nop
}
 800d238:	370c      	adds	r7, #12
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr

0800d242 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d242:	b480      	push	{r7}
 800d244:	b083      	sub	sp, #12
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	2200      	movs	r2, #0
 800d24e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d252:	bf00      	nop
}
 800d254:	370c      	adds	r7, #12
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr

0800d25e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d25e:	b480      	push	{r7}
 800d260:	b083      	sub	sp, #12
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2201      	movs	r2, #1
 800d26a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d27e:	2300      	movs	r3, #0
}
 800d280:	4618      	mov	r0, r3
 800d282:	370c      	adds	r7, #12
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b082      	sub	sp, #8
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2201      	movs	r2, #1
 800d298:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f000 fc80 	bl	800dbb2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	791b      	ldrb	r3, [r3, #4]
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 fad1 	bl	800d860 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	795b      	ldrb	r3, [r3, #5]
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 facb 	bl	800d860 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	789b      	ldrb	r3, [r3, #2]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d10f      	bne.n	800d308 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2202      	movs	r2, #2
 800d2ec:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2201      	movs	r2, #1
 800d2f2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d2fa:	78fb      	ldrb	r3, [r7, #3]
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2200      	movs	r2, #0
 800d306:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800d308:	2200      	movs	r2, #0
 800d30a:	2100      	movs	r1, #0
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 f805 	bl	800d31c <USBH_CtlReq>
 800d312:	4603      	mov	r3, r0
}
 800d314:	4618      	mov	r0, r3
 800d316:	3708      	adds	r7, #8
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}

0800d31c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b086      	sub	sp, #24
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	4613      	mov	r3, r2
 800d328:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d32a:	2301      	movs	r3, #1
 800d32c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	789b      	ldrb	r3, [r3, #2]
 800d332:	2b01      	cmp	r3, #1
 800d334:	d002      	beq.n	800d33c <USBH_CtlReq+0x20>
 800d336:	2b02      	cmp	r3, #2
 800d338:	d00f      	beq.n	800d35a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800d33a:	e027      	b.n	800d38c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	68ba      	ldr	r2, [r7, #8]
 800d340:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	88fa      	ldrh	r2, [r7, #6]
 800d346:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	2201      	movs	r2, #1
 800d34c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2202      	movs	r2, #2
 800d352:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d354:	2301      	movs	r3, #1
 800d356:	75fb      	strb	r3, [r7, #23]
      break;
 800d358:	e018      	b.n	800d38c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f000 f81c 	bl	800d398 <USBH_HandleControl>
 800d360:	4603      	mov	r3, r0
 800d362:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d364:	7dfb      	ldrb	r3, [r7, #23]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d002      	beq.n	800d370 <USBH_CtlReq+0x54>
 800d36a:	7dfb      	ldrb	r3, [r7, #23]
 800d36c:	2b03      	cmp	r3, #3
 800d36e:	d106      	bne.n	800d37e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2201      	movs	r2, #1
 800d374:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2200      	movs	r2, #0
 800d37a:	761a      	strb	r2, [r3, #24]
      break;
 800d37c:	e005      	b.n	800d38a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800d37e:	7dfb      	ldrb	r3, [r7, #23]
 800d380:	2b02      	cmp	r3, #2
 800d382:	d102      	bne.n	800d38a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	2201      	movs	r2, #1
 800d388:	709a      	strb	r2, [r3, #2]
      break;
 800d38a:	bf00      	nop
  }
  return status;
 800d38c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3718      	adds	r7, #24
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}
	...

0800d398 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b086      	sub	sp, #24
 800d39c:	af02      	add	r7, sp, #8
 800d39e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	7e1b      	ldrb	r3, [r3, #24]
 800d3ac:	3b01      	subs	r3, #1
 800d3ae:	2b0a      	cmp	r3, #10
 800d3b0:	f200 8156 	bhi.w	800d660 <USBH_HandleControl+0x2c8>
 800d3b4:	a201      	add	r2, pc, #4	; (adr r2, 800d3bc <USBH_HandleControl+0x24>)
 800d3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ba:	bf00      	nop
 800d3bc:	0800d3e9 	.word	0x0800d3e9
 800d3c0:	0800d403 	.word	0x0800d403
 800d3c4:	0800d46d 	.word	0x0800d46d
 800d3c8:	0800d493 	.word	0x0800d493
 800d3cc:	0800d4cb 	.word	0x0800d4cb
 800d3d0:	0800d4f5 	.word	0x0800d4f5
 800d3d4:	0800d547 	.word	0x0800d547
 800d3d8:	0800d569 	.word	0x0800d569
 800d3dc:	0800d5a5 	.word	0x0800d5a5
 800d3e0:	0800d5cb 	.word	0x0800d5cb
 800d3e4:	0800d609 	.word	0x0800d609
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f103 0110 	add.w	r1, r3, #16
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	795b      	ldrb	r3, [r3, #5]
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 f943 	bl	800d680 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2202      	movs	r2, #2
 800d3fe:	761a      	strb	r2, [r3, #24]
      break;
 800d400:	e139      	b.n	800d676 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	795b      	ldrb	r3, [r3, #5]
 800d406:	4619      	mov	r1, r3
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f000 fc7f 	bl	800dd0c <USBH_LL_GetURBState>
 800d40e:	4603      	mov	r3, r0
 800d410:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d412:	7bbb      	ldrb	r3, [r7, #14]
 800d414:	2b01      	cmp	r3, #1
 800d416:	d11e      	bne.n	800d456 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	7c1b      	ldrb	r3, [r3, #16]
 800d41c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d420:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	8adb      	ldrh	r3, [r3, #22]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00a      	beq.n	800d440 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d42a:	7b7b      	ldrb	r3, [r7, #13]
 800d42c:	2b80      	cmp	r3, #128	; 0x80
 800d42e:	d103      	bne.n	800d438 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2203      	movs	r2, #3
 800d434:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d436:	e115      	b.n	800d664 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2205      	movs	r2, #5
 800d43c:	761a      	strb	r2, [r3, #24]
      break;
 800d43e:	e111      	b.n	800d664 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800d440:	7b7b      	ldrb	r3, [r7, #13]
 800d442:	2b80      	cmp	r3, #128	; 0x80
 800d444:	d103      	bne.n	800d44e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2209      	movs	r2, #9
 800d44a:	761a      	strb	r2, [r3, #24]
      break;
 800d44c:	e10a      	b.n	800d664 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2207      	movs	r2, #7
 800d452:	761a      	strb	r2, [r3, #24]
      break;
 800d454:	e106      	b.n	800d664 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d456:	7bbb      	ldrb	r3, [r7, #14]
 800d458:	2b04      	cmp	r3, #4
 800d45a:	d003      	beq.n	800d464 <USBH_HandleControl+0xcc>
 800d45c:	7bbb      	ldrb	r3, [r7, #14]
 800d45e:	2b02      	cmp	r3, #2
 800d460:	f040 8100 	bne.w	800d664 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	220b      	movs	r2, #11
 800d468:	761a      	strb	r2, [r3, #24]
      break;
 800d46a:	e0fb      	b.n	800d664 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d472:	b29a      	uxth	r2, r3
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6899      	ldr	r1, [r3, #8]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	899a      	ldrh	r2, [r3, #12]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	791b      	ldrb	r3, [r3, #4]
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 f93a 	bl	800d6fe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2204      	movs	r2, #4
 800d48e:	761a      	strb	r2, [r3, #24]
      break;
 800d490:	e0f1      	b.n	800d676 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	791b      	ldrb	r3, [r3, #4]
 800d496:	4619      	mov	r1, r3
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 fc37 	bl	800dd0c <USBH_LL_GetURBState>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d4a2:	7bbb      	ldrb	r3, [r7, #14]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d102      	bne.n	800d4ae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	2209      	movs	r2, #9
 800d4ac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d4ae:	7bbb      	ldrb	r3, [r7, #14]
 800d4b0:	2b05      	cmp	r3, #5
 800d4b2:	d102      	bne.n	800d4ba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d4b4:	2303      	movs	r3, #3
 800d4b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d4b8:	e0d6      	b.n	800d668 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800d4ba:	7bbb      	ldrb	r3, [r7, #14]
 800d4bc:	2b04      	cmp	r3, #4
 800d4be:	f040 80d3 	bne.w	800d668 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	220b      	movs	r2, #11
 800d4c6:	761a      	strb	r2, [r3, #24]
      break;
 800d4c8:	e0ce      	b.n	800d668 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6899      	ldr	r1, [r3, #8]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	899a      	ldrh	r2, [r3, #12]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	795b      	ldrb	r3, [r3, #5]
 800d4d6:	2001      	movs	r0, #1
 800d4d8:	9000      	str	r0, [sp, #0]
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f8ea 	bl	800d6b4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2206      	movs	r2, #6
 800d4f0:	761a      	strb	r2, [r3, #24]
      break;
 800d4f2:	e0c0      	b.n	800d676 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	795b      	ldrb	r3, [r3, #5]
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 fc06 	bl	800dd0c <USBH_LL_GetURBState>
 800d500:	4603      	mov	r3, r0
 800d502:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d504:	7bbb      	ldrb	r3, [r7, #14]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d103      	bne.n	800d512 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2207      	movs	r2, #7
 800d50e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d510:	e0ac      	b.n	800d66c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800d512:	7bbb      	ldrb	r3, [r7, #14]
 800d514:	2b05      	cmp	r3, #5
 800d516:	d105      	bne.n	800d524 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	220c      	movs	r2, #12
 800d51c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d51e:	2303      	movs	r3, #3
 800d520:	73fb      	strb	r3, [r7, #15]
      break;
 800d522:	e0a3      	b.n	800d66c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d524:	7bbb      	ldrb	r3, [r7, #14]
 800d526:	2b02      	cmp	r3, #2
 800d528:	d103      	bne.n	800d532 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2205      	movs	r2, #5
 800d52e:	761a      	strb	r2, [r3, #24]
      break;
 800d530:	e09c      	b.n	800d66c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800d532:	7bbb      	ldrb	r3, [r7, #14]
 800d534:	2b04      	cmp	r3, #4
 800d536:	f040 8099 	bne.w	800d66c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	220b      	movs	r2, #11
 800d53e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d540:	2302      	movs	r3, #2
 800d542:	73fb      	strb	r3, [r7, #15]
      break;
 800d544:	e092      	b.n	800d66c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	791b      	ldrb	r3, [r3, #4]
 800d54a:	2200      	movs	r2, #0
 800d54c:	2100      	movs	r1, #0
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 f8d5 	bl	800d6fe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d55a:	b29a      	uxth	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2208      	movs	r2, #8
 800d564:	761a      	strb	r2, [r3, #24]

      break;
 800d566:	e086      	b.n	800d676 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	791b      	ldrb	r3, [r3, #4]
 800d56c:	4619      	mov	r1, r3
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f000 fbcc 	bl	800dd0c <USBH_LL_GetURBState>
 800d574:	4603      	mov	r3, r0
 800d576:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d578:	7bbb      	ldrb	r3, [r7, #14]
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d105      	bne.n	800d58a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	220d      	movs	r2, #13
 800d582:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d584:	2300      	movs	r3, #0
 800d586:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d588:	e072      	b.n	800d670 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800d58a:	7bbb      	ldrb	r3, [r7, #14]
 800d58c:	2b04      	cmp	r3, #4
 800d58e:	d103      	bne.n	800d598 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	220b      	movs	r2, #11
 800d594:	761a      	strb	r2, [r3, #24]
      break;
 800d596:	e06b      	b.n	800d670 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800d598:	7bbb      	ldrb	r3, [r7, #14]
 800d59a:	2b05      	cmp	r3, #5
 800d59c:	d168      	bne.n	800d670 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800d59e:	2303      	movs	r3, #3
 800d5a0:	73fb      	strb	r3, [r7, #15]
      break;
 800d5a2:	e065      	b.n	800d670 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	795b      	ldrb	r3, [r3, #5]
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	9200      	str	r2, [sp, #0]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	2100      	movs	r1, #0
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 f87f 	bl	800d6b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d5bc:	b29a      	uxth	r2, r3
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	220a      	movs	r2, #10
 800d5c6:	761a      	strb	r2, [r3, #24]
      break;
 800d5c8:	e055      	b.n	800d676 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	795b      	ldrb	r3, [r3, #5]
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 fb9b 	bl	800dd0c <USBH_LL_GetURBState>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d5da:	7bbb      	ldrb	r3, [r7, #14]
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d105      	bne.n	800d5ec <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	220d      	movs	r2, #13
 800d5e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800d5ea:	e043      	b.n	800d674 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d5ec:	7bbb      	ldrb	r3, [r7, #14]
 800d5ee:	2b02      	cmp	r3, #2
 800d5f0:	d103      	bne.n	800d5fa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2209      	movs	r2, #9
 800d5f6:	761a      	strb	r2, [r3, #24]
      break;
 800d5f8:	e03c      	b.n	800d674 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800d5fa:	7bbb      	ldrb	r3, [r7, #14]
 800d5fc:	2b04      	cmp	r3, #4
 800d5fe:	d139      	bne.n	800d674 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	220b      	movs	r2, #11
 800d604:	761a      	strb	r2, [r3, #24]
      break;
 800d606:	e035      	b.n	800d674 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	7e5b      	ldrb	r3, [r3, #25]
 800d60c:	3301      	adds	r3, #1
 800d60e:	b2da      	uxtb	r2, r3
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	765a      	strb	r2, [r3, #25]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	7e5b      	ldrb	r3, [r3, #25]
 800d618:	2b02      	cmp	r3, #2
 800d61a:	d806      	bhi.n	800d62a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2201      	movs	r2, #1
 800d620:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2201      	movs	r2, #1
 800d626:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d628:	e025      	b.n	800d676 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d630:	2106      	movs	r1, #6
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	795b      	ldrb	r3, [r3, #5]
 800d640:	4619      	mov	r1, r3
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 f90c 	bl	800d860 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	791b      	ldrb	r3, [r3, #4]
 800d64c:	4619      	mov	r1, r3
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 f906 	bl	800d860 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d65a:	2302      	movs	r3, #2
 800d65c:	73fb      	strb	r3, [r7, #15]
      break;
 800d65e:	e00a      	b.n	800d676 <USBH_HandleControl+0x2de>

    default:
      break;
 800d660:	bf00      	nop
 800d662:	e008      	b.n	800d676 <USBH_HandleControl+0x2de>
      break;
 800d664:	bf00      	nop
 800d666:	e006      	b.n	800d676 <USBH_HandleControl+0x2de>
      break;
 800d668:	bf00      	nop
 800d66a:	e004      	b.n	800d676 <USBH_HandleControl+0x2de>
      break;
 800d66c:	bf00      	nop
 800d66e:	e002      	b.n	800d676 <USBH_HandleControl+0x2de>
      break;
 800d670:	bf00      	nop
 800d672:	e000      	b.n	800d676 <USBH_HandleControl+0x2de>
      break;
 800d674:	bf00      	nop
  }

  return status;
 800d676:	7bfb      	ldrb	r3, [r7, #15]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b088      	sub	sp, #32
 800d684:	af04      	add	r7, sp, #16
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	60b9      	str	r1, [r7, #8]
 800d68a:	4613      	mov	r3, r2
 800d68c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d68e:	79f9      	ldrb	r1, [r7, #7]
 800d690:	2300      	movs	r3, #0
 800d692:	9303      	str	r3, [sp, #12]
 800d694:	2308      	movs	r3, #8
 800d696:	9302      	str	r3, [sp, #8]
 800d698:	68bb      	ldr	r3, [r7, #8]
 800d69a:	9301      	str	r3, [sp, #4]
 800d69c:	2300      	movs	r3, #0
 800d69e:	9300      	str	r3, [sp, #0]
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f000 fb00 	bl	800dcaa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800d6aa:	2300      	movs	r3, #0
}
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	3710      	adds	r7, #16
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	bd80      	pop	{r7, pc}

0800d6b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b088      	sub	sp, #32
 800d6b8:	af04      	add	r7, sp, #16
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	4611      	mov	r1, r2
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	460b      	mov	r3, r1
 800d6c4:	80fb      	strh	r3, [r7, #6]
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d001      	beq.n	800d6d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d6d8:	7979      	ldrb	r1, [r7, #5]
 800d6da:	7e3b      	ldrb	r3, [r7, #24]
 800d6dc:	9303      	str	r3, [sp, #12]
 800d6de:	88fb      	ldrh	r3, [r7, #6]
 800d6e0:	9302      	str	r3, [sp, #8]
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	9301      	str	r3, [sp, #4]
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	68f8      	ldr	r0, [r7, #12]
 800d6f0:	f000 fadb 	bl	800dcaa <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d6f4:	2300      	movs	r3, #0
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3710      	adds	r7, #16
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b088      	sub	sp, #32
 800d702:	af04      	add	r7, sp, #16
 800d704:	60f8      	str	r0, [r7, #12]
 800d706:	60b9      	str	r1, [r7, #8]
 800d708:	4611      	mov	r1, r2
 800d70a:	461a      	mov	r2, r3
 800d70c:	460b      	mov	r3, r1
 800d70e:	80fb      	strh	r3, [r7, #6]
 800d710:	4613      	mov	r3, r2
 800d712:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d714:	7979      	ldrb	r1, [r7, #5]
 800d716:	2300      	movs	r3, #0
 800d718:	9303      	str	r3, [sp, #12]
 800d71a:	88fb      	ldrh	r3, [r7, #6]
 800d71c:	9302      	str	r3, [sp, #8]
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	9301      	str	r3, [sp, #4]
 800d722:	2301      	movs	r3, #1
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	2300      	movs	r3, #0
 800d728:	2201      	movs	r2, #1
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f000 fabd 	bl	800dcaa <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d730:	2300      	movs	r3, #0

}
 800d732:	4618      	mov	r0, r3
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b088      	sub	sp, #32
 800d73e:	af04      	add	r7, sp, #16
 800d740:	60f8      	str	r0, [r7, #12]
 800d742:	60b9      	str	r1, [r7, #8]
 800d744:	4611      	mov	r1, r2
 800d746:	461a      	mov	r2, r3
 800d748:	460b      	mov	r3, r1
 800d74a:	80fb      	strh	r3, [r7, #6]
 800d74c:	4613      	mov	r3, r2
 800d74e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d756:	2b00      	cmp	r3, #0
 800d758:	d001      	beq.n	800d75e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800d75a:	2300      	movs	r3, #0
 800d75c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d75e:	7979      	ldrb	r1, [r7, #5]
 800d760:	7e3b      	ldrb	r3, [r7, #24]
 800d762:	9303      	str	r3, [sp, #12]
 800d764:	88fb      	ldrh	r3, [r7, #6]
 800d766:	9302      	str	r3, [sp, #8]
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	9301      	str	r3, [sp, #4]
 800d76c:	2301      	movs	r3, #1
 800d76e:	9300      	str	r3, [sp, #0]
 800d770:	2302      	movs	r3, #2
 800d772:	2200      	movs	r2, #0
 800d774:	68f8      	ldr	r0, [r7, #12]
 800d776:	f000 fa98 	bl	800dcaa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800d77a:	2300      	movs	r3, #0
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3710      	adds	r7, #16
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b088      	sub	sp, #32
 800d788:	af04      	add	r7, sp, #16
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	4611      	mov	r1, r2
 800d790:	461a      	mov	r2, r3
 800d792:	460b      	mov	r3, r1
 800d794:	80fb      	strh	r3, [r7, #6]
 800d796:	4613      	mov	r3, r2
 800d798:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d79a:	7979      	ldrb	r1, [r7, #5]
 800d79c:	2300      	movs	r3, #0
 800d79e:	9303      	str	r3, [sp, #12]
 800d7a0:	88fb      	ldrh	r3, [r7, #6]
 800d7a2:	9302      	str	r3, [sp, #8]
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	9301      	str	r3, [sp, #4]
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	9300      	str	r3, [sp, #0]
 800d7ac:	2302      	movs	r3, #2
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	68f8      	ldr	r0, [r7, #12]
 800d7b2:	f000 fa7a 	bl	800dcaa <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3710      	adds	r7, #16
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}

0800d7c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af04      	add	r7, sp, #16
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	4608      	mov	r0, r1
 800d7ca:	4611      	mov	r1, r2
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	70fb      	strb	r3, [r7, #3]
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	70bb      	strb	r3, [r7, #2]
 800d7d6:	4613      	mov	r3, r2
 800d7d8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d7da:	7878      	ldrb	r0, [r7, #1]
 800d7dc:	78ba      	ldrb	r2, [r7, #2]
 800d7de:	78f9      	ldrb	r1, [r7, #3]
 800d7e0:	8b3b      	ldrh	r3, [r7, #24]
 800d7e2:	9302      	str	r3, [sp, #8]
 800d7e4:	7d3b      	ldrb	r3, [r7, #20]
 800d7e6:	9301      	str	r3, [sp, #4]
 800d7e8:	7c3b      	ldrb	r3, [r7, #16]
 800d7ea:	9300      	str	r3, [sp, #0]
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 fa0d 	bl	800dc0e <USBH_LL_OpenPipe>

  return USBH_OK;
 800d7f4:	2300      	movs	r3, #0
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3708      	adds	r7, #8
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b082      	sub	sp, #8
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
 800d806:	460b      	mov	r3, r1
 800d808:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d80a:	78fb      	ldrb	r3, [r7, #3]
 800d80c:	4619      	mov	r1, r3
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 fa2c 	bl	800dc6c <USBH_LL_ClosePipe>

  return USBH_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3708      	adds	r7, #8
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}

0800d81e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d81e:	b580      	push	{r7, lr}
 800d820:	b084      	sub	sp, #16
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	460b      	mov	r3, r1
 800d828:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f000 f836 	bl	800d89c <USBH_GetFreePipe>
 800d830:	4603      	mov	r3, r0
 800d832:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d834:	89fb      	ldrh	r3, [r7, #14]
 800d836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d00a      	beq.n	800d854 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d83e:	78fa      	ldrb	r2, [r7, #3]
 800d840:	89fb      	ldrh	r3, [r7, #14]
 800d842:	f003 030f 	and.w	r3, r3, #15
 800d846:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d84a:	6879      	ldr	r1, [r7, #4]
 800d84c:	33e0      	adds	r3, #224	; 0xe0
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	440b      	add	r3, r1
 800d852:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d854:	89fb      	ldrh	r3, [r7, #14]
 800d856:	b2db      	uxtb	r3, r3
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3710      	adds	r7, #16
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	460b      	mov	r3, r1
 800d86a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d86c:	78fb      	ldrb	r3, [r7, #3]
 800d86e:	2b0f      	cmp	r3, #15
 800d870:	d80d      	bhi.n	800d88e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d872:	78fb      	ldrb	r3, [r7, #3]
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	33e0      	adds	r3, #224	; 0xe0
 800d878:	009b      	lsls	r3, r3, #2
 800d87a:	4413      	add	r3, r2
 800d87c:	685a      	ldr	r2, [r3, #4]
 800d87e:	78fb      	ldrb	r3, [r7, #3]
 800d880:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d884:	6879      	ldr	r1, [r7, #4]
 800d886:	33e0      	adds	r3, #224	; 0xe0
 800d888:	009b      	lsls	r3, r3, #2
 800d88a:	440b      	add	r3, r1
 800d88c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	370c      	adds	r7, #12
 800d894:	46bd      	mov	sp, r7
 800d896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89a:	4770      	bx	lr

0800d89c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b085      	sub	sp, #20
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	73fb      	strb	r3, [r7, #15]
 800d8ac:	e00f      	b.n	800d8ce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d8ae:	7bfb      	ldrb	r3, [r7, #15]
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	33e0      	adds	r3, #224	; 0xe0
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	4413      	add	r3, r2
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d102      	bne.n	800d8c8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800d8c2:	7bfb      	ldrb	r3, [r7, #15]
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	e007      	b.n	800d8d8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800d8c8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	73fb      	strb	r3, [r7, #15]
 800d8ce:	7bfb      	ldrb	r3, [r7, #15]
 800d8d0:	2b0f      	cmp	r3, #15
 800d8d2:	d9ec      	bls.n	800d8ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d8d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3714      	adds	r7, #20
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr

0800d8e4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	490e      	ldr	r1, [pc, #56]	; (800d924 <MX_USB_HOST_Init+0x40>)
 800d8ec:	480e      	ldr	r0, [pc, #56]	; (800d928 <MX_USB_HOST_Init+0x44>)
 800d8ee:	f7ff fb37 	bl	800cf60 <USBH_Init>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d001      	beq.n	800d8fc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d8f8:	f7f4 feae 	bl	8002658 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800d8fc:	490b      	ldr	r1, [pc, #44]	; (800d92c <MX_USB_HOST_Init+0x48>)
 800d8fe:	480a      	ldr	r0, [pc, #40]	; (800d928 <MX_USB_HOST_Init+0x44>)
 800d900:	f7ff fbbc 	bl	800d07c <USBH_RegisterClass>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d001      	beq.n	800d90e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d90a:	f7f4 fea5 	bl	8002658 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800d90e:	4806      	ldr	r0, [pc, #24]	; (800d928 <MX_USB_HOST_Init+0x44>)
 800d910:	f7ff fc40 	bl	800d194 <USBH_Start>
 800d914:	4603      	mov	r3, r0
 800d916:	2b00      	cmp	r3, #0
 800d918:	d001      	beq.n	800d91e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d91a:	f7f4 fe9d 	bl	8002658 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d91e:	bf00      	nop
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	0800d931 	.word	0x0800d931
 800d928:	200081c8 	.word	0x200081c8
 800d92c:	20000054 	.word	0x20000054

0800d930 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	460b      	mov	r3, r1
 800d93a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d93c:	78fb      	ldrb	r3, [r7, #3]
 800d93e:	3b01      	subs	r3, #1
 800d940:	2b04      	cmp	r3, #4
 800d942:	d819      	bhi.n	800d978 <USBH_UserProcess+0x48>
 800d944:	a201      	add	r2, pc, #4	; (adr r2, 800d94c <USBH_UserProcess+0x1c>)
 800d946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d94a:	bf00      	nop
 800d94c:	0800d979 	.word	0x0800d979
 800d950:	0800d969 	.word	0x0800d969
 800d954:	0800d979 	.word	0x0800d979
 800d958:	0800d971 	.word	0x0800d971
 800d95c:	0800d961 	.word	0x0800d961
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d960:	4b09      	ldr	r3, [pc, #36]	; (800d988 <USBH_UserProcess+0x58>)
 800d962:	2203      	movs	r2, #3
 800d964:	701a      	strb	r2, [r3, #0]
  break;
 800d966:	e008      	b.n	800d97a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d968:	4b07      	ldr	r3, [pc, #28]	; (800d988 <USBH_UserProcess+0x58>)
 800d96a:	2202      	movs	r2, #2
 800d96c:	701a      	strb	r2, [r3, #0]
  break;
 800d96e:	e004      	b.n	800d97a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d970:	4b05      	ldr	r3, [pc, #20]	; (800d988 <USBH_UserProcess+0x58>)
 800d972:	2201      	movs	r2, #1
 800d974:	701a      	strb	r2, [r3, #0]
  break;
 800d976:	e000      	b.n	800d97a <USBH_UserProcess+0x4a>

  default:
  break;
 800d978:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d97a:	bf00      	nop
 800d97c:	370c      	adds	r7, #12
 800d97e:	46bd      	mov	sp, r7
 800d980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d984:	4770      	bx	lr
 800d986:	bf00      	nop
 800d988:	200085a0 	.word	0x200085a0

0800d98c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b08a      	sub	sp, #40	; 0x28
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d994:	f107 0314 	add.w	r3, r7, #20
 800d998:	2200      	movs	r2, #0
 800d99a:	601a      	str	r2, [r3, #0]
 800d99c:	605a      	str	r2, [r3, #4]
 800d99e:	609a      	str	r2, [r3, #8]
 800d9a0:	60da      	str	r2, [r3, #12]
 800d9a2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a24      	ldr	r2, [pc, #144]	; (800da3c <HAL_HCD_MspInit+0xb0>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d141      	bne.n	800da32 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	613b      	str	r3, [r7, #16]
 800d9b2:	4b23      	ldr	r3, [pc, #140]	; (800da40 <HAL_HCD_MspInit+0xb4>)
 800d9b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9b6:	4a22      	ldr	r2, [pc, #136]	; (800da40 <HAL_HCD_MspInit+0xb4>)
 800d9b8:	f043 0302 	orr.w	r3, r3, #2
 800d9bc:	6313      	str	r3, [r2, #48]	; 0x30
 800d9be:	4b20      	ldr	r3, [pc, #128]	; (800da40 <HAL_HCD_MspInit+0xb4>)
 800d9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9c2:	f003 0302 	and.w	r3, r3, #2
 800d9c6:	613b      	str	r3, [r7, #16]
 800d9c8:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800d9ca:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800d9ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d9d0:	2302      	movs	r3, #2
 800d9d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d9dc:	230c      	movs	r3, #12
 800d9de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d9e0:	f107 0314 	add.w	r3, r7, #20
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	4817      	ldr	r0, [pc, #92]	; (800da44 <HAL_HCD_MspInit+0xb8>)
 800d9e8:	f7f8 fd28 	bl	800643c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800d9ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d9f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800d9fa:	f107 0314 	add.w	r3, r7, #20
 800d9fe:	4619      	mov	r1, r3
 800da00:	4810      	ldr	r0, [pc, #64]	; (800da44 <HAL_HCD_MspInit+0xb8>)
 800da02:	f7f8 fd1b 	bl	800643c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800da06:	2300      	movs	r3, #0
 800da08:	60fb      	str	r3, [r7, #12]
 800da0a:	4b0d      	ldr	r3, [pc, #52]	; (800da40 <HAL_HCD_MspInit+0xb4>)
 800da0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da0e:	4a0c      	ldr	r2, [pc, #48]	; (800da40 <HAL_HCD_MspInit+0xb4>)
 800da10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800da14:	6313      	str	r3, [r2, #48]	; 0x30
 800da16:	4b0a      	ldr	r3, [pc, #40]	; (800da40 <HAL_HCD_MspInit+0xb4>)
 800da18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da1e:	60fb      	str	r3, [r7, #12]
 800da20:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800da22:	2200      	movs	r2, #0
 800da24:	2100      	movs	r1, #0
 800da26:	204d      	movs	r0, #77	; 0x4d
 800da28:	f7f7 fb02 	bl	8005030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800da2c:	204d      	movs	r0, #77	; 0x4d
 800da2e:	f7f7 fb1b 	bl	8005068 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800da32:	bf00      	nop
 800da34:	3728      	adds	r7, #40	; 0x28
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	40040000 	.word	0x40040000
 800da40:	40023800 	.word	0x40023800
 800da44:	40020400 	.word	0x40020400

0800da48 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b082      	sub	sp, #8
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800da56:	4618      	mov	r0, r3
 800da58:	f7ff fbbb 	bl	800d1d2 <USBH_LL_IncTimer>
}
 800da5c:	bf00      	nop
 800da5e:	3708      	adds	r7, #8
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800da72:	4618      	mov	r0, r3
 800da74:	f7ff fbf3 	bl	800d25e <USBH_LL_Connect>
}
 800da78:	bf00      	nop
 800da7a:	3708      	adds	r7, #8
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b082      	sub	sp, #8
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800da8e:	4618      	mov	r0, r3
 800da90:	f7ff fbfc 	bl	800d28c <USBH_LL_Disconnect>
}
 800da94:	bf00      	nop
 800da96:	3708      	adds	r7, #8
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}

0800da9c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	460b      	mov	r3, r1
 800daa6:	70fb      	strb	r3, [r7, #3]
 800daa8:	4613      	mov	r3, r2
 800daaa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800daac:	bf00      	nop
 800daae:	370c      	adds	r7, #12
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr

0800dab8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7ff fbad 	bl	800d226 <USBH_LL_PortEnabled>
}
 800dacc:	bf00      	nop
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7ff fbad 	bl	800d242 <USBH_LL_PortDisabled>
}
 800dae8:	bf00      	nop
 800daea:	3708      	adds	r7, #8
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d132      	bne.n	800db68 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800db02:	4a1c      	ldr	r2, [pc, #112]	; (800db74 <USBH_LL_Init+0x84>)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4a19      	ldr	r2, [pc, #100]	; (800db74 <USBH_LL_Init+0x84>)
 800db0e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800db12:	4b18      	ldr	r3, [pc, #96]	; (800db74 <USBH_LL_Init+0x84>)
 800db14:	4a18      	ldr	r2, [pc, #96]	; (800db78 <USBH_LL_Init+0x88>)
 800db16:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800db18:	4b16      	ldr	r3, [pc, #88]	; (800db74 <USBH_LL_Init+0x84>)
 800db1a:	220c      	movs	r2, #12
 800db1c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800db1e:	4b15      	ldr	r3, [pc, #84]	; (800db74 <USBH_LL_Init+0x84>)
 800db20:	2201      	movs	r2, #1
 800db22:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800db24:	4b13      	ldr	r3, [pc, #76]	; (800db74 <USBH_LL_Init+0x84>)
 800db26:	2200      	movs	r2, #0
 800db28:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800db2a:	4b12      	ldr	r3, [pc, #72]	; (800db74 <USBH_LL_Init+0x84>)
 800db2c:	2202      	movs	r2, #2
 800db2e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800db30:	4b10      	ldr	r3, [pc, #64]	; (800db74 <USBH_LL_Init+0x84>)
 800db32:	2200      	movs	r2, #0
 800db34:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800db36:	4b0f      	ldr	r3, [pc, #60]	; (800db74 <USBH_LL_Init+0x84>)
 800db38:	2200      	movs	r2, #0
 800db3a:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800db3c:	4b0d      	ldr	r3, [pc, #52]	; (800db74 <USBH_LL_Init+0x84>)
 800db3e:	2200      	movs	r2, #0
 800db40:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800db42:	4b0c      	ldr	r3, [pc, #48]	; (800db74 <USBH_LL_Init+0x84>)
 800db44:	2200      	movs	r2, #0
 800db46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800db48:	480a      	ldr	r0, [pc, #40]	; (800db74 <USBH_LL_Init+0x84>)
 800db4a:	f7f8 ff60 	bl	8006a0e <HAL_HCD_Init>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d001      	beq.n	800db58 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800db54:	f7f4 fd80 	bl	8002658 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800db58:	4806      	ldr	r0, [pc, #24]	; (800db74 <USBH_LL_Init+0x84>)
 800db5a:	f7f9 fb36 	bl	80071ca <HAL_HCD_GetCurrentFrame>
 800db5e:	4603      	mov	r3, r0
 800db60:	4619      	mov	r1, r3
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f7ff fb26 	bl	800d1b4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800db68:	2300      	movs	r3, #0
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3708      	adds	r7, #8
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
 800db72:	bf00      	nop
 800db74:	200085a4 	.word	0x200085a4
 800db78:	40040000 	.word	0x40040000

0800db7c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db84:	2300      	movs	r3, #0
 800db86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800db88:	2300      	movs	r3, #0
 800db8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800db92:	4618      	mov	r0, r3
 800db94:	f7f9 fab1 	bl	80070fa <HAL_HCD_Start>
 800db98:	4603      	mov	r3, r0
 800db9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800db9c:	7bfb      	ldrb	r3, [r7, #15]
 800db9e:	4618      	mov	r0, r3
 800dba0:	f000 f90e 	bl	800ddc0 <USBH_Get_USB_Status>
 800dba4:	4603      	mov	r3, r0
 800dba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dba8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3710      	adds	r7, #16
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}

0800dbb2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dbb2:	b580      	push	{r7, lr}
 800dbb4:	b084      	sub	sp, #16
 800dbb6:	af00      	add	r7, sp, #0
 800dbb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7f9 fab9 	bl	8007140 <HAL_HCD_Stop>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dbd2:	7bfb      	ldrb	r3, [r7, #15]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f000 f8f3 	bl	800ddc0 <USBH_Get_USB_Status>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbde:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3710      	adds	r7, #16
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dbfa:	78fa      	ldrb	r2, [r7, #3]
 800dbfc:	4611      	mov	r1, r2
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7f9 facf 	bl	80071a2 <HAL_HCD_HC_GetXferCount>
 800dc04:	4603      	mov	r3, r0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3708      	adds	r7, #8
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dc0e:	b590      	push	{r4, r7, lr}
 800dc10:	b089      	sub	sp, #36	; 0x24
 800dc12:	af04      	add	r7, sp, #16
 800dc14:	6078      	str	r0, [r7, #4]
 800dc16:	4608      	mov	r0, r1
 800dc18:	4611      	mov	r1, r2
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	70fb      	strb	r3, [r7, #3]
 800dc20:	460b      	mov	r3, r1
 800dc22:	70bb      	strb	r3, [r7, #2]
 800dc24:	4613      	mov	r3, r2
 800dc26:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dc36:	787c      	ldrb	r4, [r7, #1]
 800dc38:	78ba      	ldrb	r2, [r7, #2]
 800dc3a:	78f9      	ldrb	r1, [r7, #3]
 800dc3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dc3e:	9302      	str	r3, [sp, #8]
 800dc40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800dc44:	9301      	str	r3, [sp, #4]
 800dc46:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dc4a:	9300      	str	r3, [sp, #0]
 800dc4c:	4623      	mov	r3, r4
 800dc4e:	f7f8 ff40 	bl	8006ad2 <HAL_HCD_HC_Init>
 800dc52:	4603      	mov	r3, r0
 800dc54:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800dc56:	7bfb      	ldrb	r3, [r7, #15]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f000 f8b1 	bl	800ddc0 <USBH_Get_USB_Status>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc62:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3714      	adds	r7, #20
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd90      	pop	{r4, r7, pc}

0800dc6c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	460b      	mov	r3, r1
 800dc76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dc86:	78fa      	ldrb	r2, [r7, #3]
 800dc88:	4611      	mov	r1, r2
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7f8 ffb0 	bl	8006bf0 <HAL_HCD_HC_Halt>
 800dc90:	4603      	mov	r3, r0
 800dc92:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dc94:	7bfb      	ldrb	r3, [r7, #15]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 f892 	bl	800ddc0 <USBH_Get_USB_Status>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dca0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3710      	adds	r7, #16
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800dcaa:	b590      	push	{r4, r7, lr}
 800dcac:	b089      	sub	sp, #36	; 0x24
 800dcae:	af04      	add	r7, sp, #16
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	4608      	mov	r0, r1
 800dcb4:	4611      	mov	r1, r2
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	4603      	mov	r3, r0
 800dcba:	70fb      	strb	r3, [r7, #3]
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	70bb      	strb	r3, [r7, #2]
 800dcc0:	4613      	mov	r3, r2
 800dcc2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800dcd2:	787c      	ldrb	r4, [r7, #1]
 800dcd4:	78ba      	ldrb	r2, [r7, #2]
 800dcd6:	78f9      	ldrb	r1, [r7, #3]
 800dcd8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dcdc:	9303      	str	r3, [sp, #12]
 800dcde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dce0:	9302      	str	r3, [sp, #8]
 800dce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce4:	9301      	str	r3, [sp, #4]
 800dce6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dcea:	9300      	str	r3, [sp, #0]
 800dcec:	4623      	mov	r3, r4
 800dcee:	f7f8 ffa3 	bl	8006c38 <HAL_HCD_HC_SubmitRequest>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800dcf6:	7bfb      	ldrb	r3, [r7, #15]
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f000 f861 	bl	800ddc0 <USBH_Get_USB_Status>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dd02:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3714      	adds	r7, #20
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd90      	pop	{r4, r7, pc}

0800dd0c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	460b      	mov	r3, r1
 800dd16:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd1e:	78fa      	ldrb	r2, [r7, #3]
 800dd20:	4611      	mov	r1, r2
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7f9 fa29 	bl	800717a <HAL_HCD_HC_GetURBState>
 800dd28:	4603      	mov	r3, r0
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3708      	adds	r7, #8
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}

0800dd32 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800dd32:	b580      	push	{r7, lr}
 800dd34:	b082      	sub	sp, #8
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
 800dd3a:	460b      	mov	r3, r1
 800dd3c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d103      	bne.n	800dd50 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800dd48:	78fb      	ldrb	r3, [r7, #3]
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f000 f864 	bl	800de18 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800dd50:	20c8      	movs	r0, #200	; 0xc8
 800dd52:	f7f6 fc79 	bl	8004648 <HAL_Delay>
  return USBH_OK;
 800dd56:	2300      	movs	r3, #0
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3708      	adds	r7, #8
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800dd60:	b480      	push	{r7}
 800dd62:	b085      	sub	sp, #20
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	70fb      	strb	r3, [r7, #3]
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd76:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800dd78:	78fb      	ldrb	r3, [r7, #3]
 800dd7a:	68fa      	ldr	r2, [r7, #12]
 800dd7c:	212c      	movs	r1, #44	; 0x2c
 800dd7e:	fb01 f303 	mul.w	r3, r1, r3
 800dd82:	4413      	add	r3, r2
 800dd84:	333b      	adds	r3, #59	; 0x3b
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d009      	beq.n	800dda0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800dd8c:	78fb      	ldrb	r3, [r7, #3]
 800dd8e:	68fa      	ldr	r2, [r7, #12]
 800dd90:	212c      	movs	r1, #44	; 0x2c
 800dd92:	fb01 f303 	mul.w	r3, r1, r3
 800dd96:	4413      	add	r3, r2
 800dd98:	3354      	adds	r3, #84	; 0x54
 800dd9a:	78ba      	ldrb	r2, [r7, #2]
 800dd9c:	701a      	strb	r2, [r3, #0]
 800dd9e:	e008      	b.n	800ddb2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800dda0:	78fb      	ldrb	r3, [r7, #3]
 800dda2:	68fa      	ldr	r2, [r7, #12]
 800dda4:	212c      	movs	r1, #44	; 0x2c
 800dda6:	fb01 f303 	mul.w	r3, r1, r3
 800ddaa:	4413      	add	r3, r2
 800ddac:	3355      	adds	r3, #85	; 0x55
 800ddae:	78ba      	ldrb	r2, [r7, #2]
 800ddb0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ddb2:	2300      	movs	r3, #0
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3714      	adds	r7, #20
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr

0800ddc0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ddc0:	b480      	push	{r7}
 800ddc2:	b085      	sub	sp, #20
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ddce:	79fb      	ldrb	r3, [r7, #7]
 800ddd0:	2b03      	cmp	r3, #3
 800ddd2:	d817      	bhi.n	800de04 <USBH_Get_USB_Status+0x44>
 800ddd4:	a201      	add	r2, pc, #4	; (adr r2, 800dddc <USBH_Get_USB_Status+0x1c>)
 800ddd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddda:	bf00      	nop
 800dddc:	0800dded 	.word	0x0800dded
 800dde0:	0800ddf3 	.word	0x0800ddf3
 800dde4:	0800ddf9 	.word	0x0800ddf9
 800dde8:	0800ddff 	.word	0x0800ddff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ddec:	2300      	movs	r3, #0
 800ddee:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf0:	e00b      	b.n	800de0a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ddf2:	2302      	movs	r3, #2
 800ddf4:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf6:	e008      	b.n	800de0a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ddf8:	2301      	movs	r3, #1
 800ddfa:	73fb      	strb	r3, [r7, #15]
    break;
 800ddfc:	e005      	b.n	800de0a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ddfe:	2302      	movs	r3, #2
 800de00:	73fb      	strb	r3, [r7, #15]
    break;
 800de02:	e002      	b.n	800de0a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800de04:	2302      	movs	r3, #2
 800de06:	73fb      	strb	r3, [r7, #15]
    break;
 800de08:	bf00      	nop
  }
  return usb_status;
 800de0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3714      	adds	r7, #20
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr

0800de18 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	4603      	mov	r3, r0
 800de20:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800de22:	79fb      	ldrb	r3, [r7, #7]
 800de24:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800de26:	79fb      	ldrb	r3, [r7, #7]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d102      	bne.n	800de32 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800de2c:	2301      	movs	r3, #1
 800de2e:	73fb      	strb	r3, [r7, #15]
 800de30:	e001      	b.n	800de36 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800de32:	2300      	movs	r3, #0
 800de34:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800de36:	7bfb      	ldrb	r3, [r7, #15]
 800de38:	461a      	mov	r2, r3
 800de3a:	2110      	movs	r1, #16
 800de3c:	4803      	ldr	r0, [pc, #12]	; (800de4c <MX_DriverVbusHS+0x34>)
 800de3e:	f7f8 fdcd 	bl	80069dc <HAL_GPIO_WritePin>
}
 800de42:	bf00      	nop
 800de44:	3710      	adds	r7, #16
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	40020800 	.word	0x40020800

0800de50 <arm_rfft_fast_init_f32>:
 800de50:	084b      	lsrs	r3, r1, #1
 800de52:	2b80      	cmp	r3, #128	; 0x80
 800de54:	b410      	push	{r4}
 800de56:	8201      	strh	r1, [r0, #16]
 800de58:	8003      	strh	r3, [r0, #0]
 800de5a:	d046      	beq.n	800deea <arm_rfft_fast_init_f32+0x9a>
 800de5c:	d916      	bls.n	800de8c <arm_rfft_fast_init_f32+0x3c>
 800de5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de62:	d03c      	beq.n	800dede <arm_rfft_fast_init_f32+0x8e>
 800de64:	d928      	bls.n	800deb8 <arm_rfft_fast_init_f32+0x68>
 800de66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de6a:	d01f      	beq.n	800deac <arm_rfft_fast_init_f32+0x5c>
 800de6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de70:	d112      	bne.n	800de98 <arm_rfft_fast_init_f32+0x48>
 800de72:	4920      	ldr	r1, [pc, #128]	; (800def4 <arm_rfft_fast_init_f32+0xa4>)
 800de74:	4a20      	ldr	r2, [pc, #128]	; (800def8 <arm_rfft_fast_init_f32+0xa8>)
 800de76:	4b21      	ldr	r3, [pc, #132]	; (800defc <arm_rfft_fast_init_f32+0xac>)
 800de78:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800de7c:	8184      	strh	r4, [r0, #12]
 800de7e:	6081      	str	r1, [r0, #8]
 800de80:	6042      	str	r2, [r0, #4]
 800de82:	6143      	str	r3, [r0, #20]
 800de84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de88:	2000      	movs	r0, #0
 800de8a:	4770      	bx	lr
 800de8c:	2b20      	cmp	r3, #32
 800de8e:	d01c      	beq.n	800deca <arm_rfft_fast_init_f32+0x7a>
 800de90:	2b40      	cmp	r3, #64	; 0x40
 800de92:	d006      	beq.n	800dea2 <arm_rfft_fast_init_f32+0x52>
 800de94:	2b10      	cmp	r3, #16
 800de96:	d01d      	beq.n	800ded4 <arm_rfft_fast_init_f32+0x84>
 800de98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dea0:	4770      	bx	lr
 800dea2:	2438      	movs	r4, #56	; 0x38
 800dea4:	4916      	ldr	r1, [pc, #88]	; (800df00 <arm_rfft_fast_init_f32+0xb0>)
 800dea6:	4a17      	ldr	r2, [pc, #92]	; (800df04 <arm_rfft_fast_init_f32+0xb4>)
 800dea8:	4b17      	ldr	r3, [pc, #92]	; (800df08 <arm_rfft_fast_init_f32+0xb8>)
 800deaa:	e7e7      	b.n	800de7c <arm_rfft_fast_init_f32+0x2c>
 800deac:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800deb0:	4916      	ldr	r1, [pc, #88]	; (800df0c <arm_rfft_fast_init_f32+0xbc>)
 800deb2:	4a17      	ldr	r2, [pc, #92]	; (800df10 <arm_rfft_fast_init_f32+0xc0>)
 800deb4:	4b17      	ldr	r3, [pc, #92]	; (800df14 <arm_rfft_fast_init_f32+0xc4>)
 800deb6:	e7e1      	b.n	800de7c <arm_rfft_fast_init_f32+0x2c>
 800deb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800debc:	d1ec      	bne.n	800de98 <arm_rfft_fast_init_f32+0x48>
 800debe:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800dec2:	4915      	ldr	r1, [pc, #84]	; (800df18 <arm_rfft_fast_init_f32+0xc8>)
 800dec4:	4a15      	ldr	r2, [pc, #84]	; (800df1c <arm_rfft_fast_init_f32+0xcc>)
 800dec6:	4b16      	ldr	r3, [pc, #88]	; (800df20 <arm_rfft_fast_init_f32+0xd0>)
 800dec8:	e7d8      	b.n	800de7c <arm_rfft_fast_init_f32+0x2c>
 800deca:	2430      	movs	r4, #48	; 0x30
 800decc:	4915      	ldr	r1, [pc, #84]	; (800df24 <arm_rfft_fast_init_f32+0xd4>)
 800dece:	4a16      	ldr	r2, [pc, #88]	; (800df28 <arm_rfft_fast_init_f32+0xd8>)
 800ded0:	4b16      	ldr	r3, [pc, #88]	; (800df2c <arm_rfft_fast_init_f32+0xdc>)
 800ded2:	e7d3      	b.n	800de7c <arm_rfft_fast_init_f32+0x2c>
 800ded4:	2414      	movs	r4, #20
 800ded6:	4916      	ldr	r1, [pc, #88]	; (800df30 <arm_rfft_fast_init_f32+0xe0>)
 800ded8:	4a16      	ldr	r2, [pc, #88]	; (800df34 <arm_rfft_fast_init_f32+0xe4>)
 800deda:	4b17      	ldr	r3, [pc, #92]	; (800df38 <arm_rfft_fast_init_f32+0xe8>)
 800dedc:	e7ce      	b.n	800de7c <arm_rfft_fast_init_f32+0x2c>
 800dede:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800dee2:	4916      	ldr	r1, [pc, #88]	; (800df3c <arm_rfft_fast_init_f32+0xec>)
 800dee4:	4a16      	ldr	r2, [pc, #88]	; (800df40 <arm_rfft_fast_init_f32+0xf0>)
 800dee6:	4b17      	ldr	r3, [pc, #92]	; (800df44 <arm_rfft_fast_init_f32+0xf4>)
 800dee8:	e7c8      	b.n	800de7c <arm_rfft_fast_init_f32+0x2c>
 800deea:	24d0      	movs	r4, #208	; 0xd0
 800deec:	4916      	ldr	r1, [pc, #88]	; (800df48 <arm_rfft_fast_init_f32+0xf8>)
 800deee:	4a17      	ldr	r2, [pc, #92]	; (800df4c <arm_rfft_fast_init_f32+0xfc>)
 800def0:	4b17      	ldr	r3, [pc, #92]	; (800df50 <arm_rfft_fast_init_f32+0x100>)
 800def2:	e7c3      	b.n	800de7c <arm_rfft_fast_init_f32+0x2c>
 800def4:	080908b4 	.word	0x080908b4
 800def8:	08081aac 	.word	0x08081aac
 800defc:	08087c1c 	.word	0x08087c1c
 800df00:	08085bac 	.word	0x08085bac
 800df04:	08092674 	.word	0x08092674
 800df08:	08094b64 	.word	0x08094b64
 800df0c:	0808e59c 	.word	0x0808e59c
 800df10:	0808c49c 	.word	0x0808c49c
 800df14:	08085c1c 	.word	0x08085c1c
 800df18:	080947f4 	.word	0x080947f4
 800df1c:	0808bc1c 	.word	0x0808bc1c
 800df20:	08092874 	.word	0x08092874
 800df24:	0808f454 	.word	0x0808f454
 800df28:	0808e49c 	.word	0x0808e49c
 800df2c:	08085aac 	.word	0x08085aac
 800df30:	0808f3ac 	.word	0x0808f3ac
 800df34:	0808c41c 	.word	0x0808c41c
 800df38:	0808f3d4 	.word	0x0808f3d4
 800df3c:	08093074 	.word	0x08093074
 800df40:	0808f8b4 	.word	0x0808f8b4
 800df44:	080933f4 	.word	0x080933f4
 800df48:	08094d64 	.word	0x08094d64
 800df4c:	0808f4b4 	.word	0x0808f4b4
 800df50:	080943f4 	.word	0x080943f4

0800df54 <arm_rfft_fast_f32>:
 800df54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df58:	8a06      	ldrh	r6, [r0, #16]
 800df5a:	0876      	lsrs	r6, r6, #1
 800df5c:	4607      	mov	r7, r0
 800df5e:	4615      	mov	r5, r2
 800df60:	8006      	strh	r6, [r0, #0]
 800df62:	460c      	mov	r4, r1
 800df64:	2b00      	cmp	r3, #0
 800df66:	d15c      	bne.n	800e022 <arm_rfft_fast_f32+0xce>
 800df68:	461a      	mov	r2, r3
 800df6a:	2301      	movs	r3, #1
 800df6c:	f000 fbe4 	bl	800e738 <arm_cfft_f32>
 800df70:	edd4 7a00 	vldr	s15, [r4]
 800df74:	ed94 7a01 	vldr	s14, [r4, #4]
 800df78:	883e      	ldrh	r6, [r7, #0]
 800df7a:	6978      	ldr	r0, [r7, #20]
 800df7c:	ee37 7a07 	vadd.f32	s14, s14, s14
 800df80:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800df84:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 800df88:	ee77 6a87 	vadd.f32	s13, s15, s14
 800df8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df90:	3e01      	subs	r6, #1
 800df92:	ee26 7a83 	vmul.f32	s14, s13, s6
 800df96:	ee67 7a83 	vmul.f32	s15, s15, s6
 800df9a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800df9e:	ed85 7a00 	vstr	s14, [r5]
 800dfa2:	edc5 7a01 	vstr	s15, [r5, #4]
 800dfa6:	3010      	adds	r0, #16
 800dfa8:	f105 0210 	add.w	r2, r5, #16
 800dfac:	3b08      	subs	r3, #8
 800dfae:	f104 0110 	add.w	r1, r4, #16
 800dfb2:	ed93 7a02 	vldr	s14, [r3, #8]
 800dfb6:	ed51 6a02 	vldr	s13, [r1, #-8]
 800dfba:	ed10 6a02 	vldr	s12, [r0, #-8]
 800dfbe:	edd3 3a03 	vldr	s7, [r3, #12]
 800dfc2:	ed11 5a01 	vldr	s10, [r1, #-4]
 800dfc6:	ed50 5a01 	vldr	s11, [r0, #-4]
 800dfca:	ee77 7a66 	vsub.f32	s15, s14, s13
 800dfce:	ee77 4a26 	vadd.f32	s9, s14, s13
 800dfd2:	ee33 4a85 	vadd.f32	s8, s7, s10
 800dfd6:	ee66 6a27 	vmul.f32	s13, s12, s15
 800dfda:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800dfde:	ee35 5a63 	vsub.f32	s10, s10, s7
 800dfe2:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800dfe6:	ee77 7a05 	vadd.f32	s15, s14, s10
 800dfea:	ee26 6a04 	vmul.f32	s12, s12, s8
 800dfee:	ee65 5a84 	vmul.f32	s11, s11, s8
 800dff2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800dff6:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800dffa:	ee67 7a83 	vmul.f32	s15, s15, s6
 800dffe:	ee27 7a03 	vmul.f32	s14, s14, s6
 800e002:	3e01      	subs	r6, #1
 800e004:	ed02 7a02 	vstr	s14, [r2, #-8]
 800e008:	ed42 7a01 	vstr	s15, [r2, #-4]
 800e00c:	f1a3 0308 	sub.w	r3, r3, #8
 800e010:	f101 0108 	add.w	r1, r1, #8
 800e014:	f100 0008 	add.w	r0, r0, #8
 800e018:	f102 0208 	add.w	r2, r2, #8
 800e01c:	d1c9      	bne.n	800dfb2 <arm_rfft_fast_f32+0x5e>
 800e01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e022:	edd1 7a00 	vldr	s15, [r1]
 800e026:	edd1 6a01 	vldr	s13, [r1, #4]
 800e02a:	6941      	ldr	r1, [r0, #20]
 800e02c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e030:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e034:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800e038:	ee27 7a23 	vmul.f32	s14, s14, s7
 800e03c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800e040:	3e01      	subs	r6, #1
 800e042:	ed82 7a00 	vstr	s14, [r2]
 800e046:	edc2 7a01 	vstr	s15, [r2, #4]
 800e04a:	00f0      	lsls	r0, r6, #3
 800e04c:	b3ee      	cbz	r6, 800e0ca <arm_rfft_fast_f32+0x176>
 800e04e:	3808      	subs	r0, #8
 800e050:	f101 0e10 	add.w	lr, r1, #16
 800e054:	4420      	add	r0, r4
 800e056:	f104 0110 	add.w	r1, r4, #16
 800e05a:	f102 0c10 	add.w	ip, r2, #16
 800e05e:	ed90 7a02 	vldr	s14, [r0, #8]
 800e062:	ed51 6a02 	vldr	s13, [r1, #-8]
 800e066:	ed1e 6a02 	vldr	s12, [lr, #-8]
 800e06a:	ed90 4a03 	vldr	s8, [r0, #12]
 800e06e:	ed11 5a01 	vldr	s10, [r1, #-4]
 800e072:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800e076:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800e07a:	ee74 4a05 	vadd.f32	s9, s8, s10
 800e07e:	ee26 3a27 	vmul.f32	s6, s12, s15
 800e082:	ee77 6a26 	vadd.f32	s13, s14, s13
 800e086:	ee35 5a44 	vsub.f32	s10, s10, s8
 800e08a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800e08e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800e092:	ee77 7a05 	vadd.f32	s15, s14, s10
 800e096:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e09a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800e09e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e0a2:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800e0a6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800e0aa:	ee27 7a23 	vmul.f32	s14, s14, s7
 800e0ae:	3e01      	subs	r6, #1
 800e0b0:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800e0b4:	ed4c 7a01 	vstr	s15, [ip, #-4]
 800e0b8:	f1a0 0008 	sub.w	r0, r0, #8
 800e0bc:	f101 0108 	add.w	r1, r1, #8
 800e0c0:	f10e 0e08 	add.w	lr, lr, #8
 800e0c4:	f10c 0c08 	add.w	ip, ip, #8
 800e0c8:	d1c9      	bne.n	800e05e <arm_rfft_fast_f32+0x10a>
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	4629      	mov	r1, r5
 800e0ce:	4638      	mov	r0, r7
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0d6:	f000 bb2f 	b.w	800e738 <arm_cfft_f32>
 800e0da:	bf00      	nop

0800e0dc <arm_cfft_radix8by2_f32>:
 800e0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e0:	ed2d 8b08 	vpush	{d8-d11}
 800e0e4:	4607      	mov	r7, r0
 800e0e6:	4608      	mov	r0, r1
 800e0e8:	f8b7 e000 	ldrh.w	lr, [r7]
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800e0f2:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800e0f6:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800e0fa:	f000 80b0 	beq.w	800e25e <arm_cfft_radix8by2_f32+0x182>
 800e0fe:	008b      	lsls	r3, r1, #2
 800e100:	3310      	adds	r3, #16
 800e102:	18c6      	adds	r6, r0, r3
 800e104:	3210      	adds	r2, #16
 800e106:	4443      	add	r3, r8
 800e108:	f100 0510 	add.w	r5, r0, #16
 800e10c:	f108 0410 	add.w	r4, r8, #16
 800e110:	ed54 1a04 	vldr	s3, [r4, #-16]
 800e114:	ed54 6a03 	vldr	s13, [r4, #-12]
 800e118:	ed13 4a04 	vldr	s8, [r3, #-16]
 800e11c:	ed53 3a03 	vldr	s7, [r3, #-12]
 800e120:	ed53 5a02 	vldr	s11, [r3, #-8]
 800e124:	ed13 5a01 	vldr	s10, [r3, #-4]
 800e128:	ed14 0a02 	vldr	s0, [r4, #-8]
 800e12c:	ed54 7a01 	vldr	s15, [r4, #-4]
 800e130:	ed16 2a04 	vldr	s4, [r6, #-16]
 800e134:	ed56 2a03 	vldr	s5, [r6, #-12]
 800e138:	ed15 6a03 	vldr	s12, [r5, #-12]
 800e13c:	ed15 7a01 	vldr	s14, [r5, #-4]
 800e140:	ed15 3a04 	vldr	s6, [r5, #-16]
 800e144:	ed56 0a02 	vldr	s1, [r6, #-8]
 800e148:	ed16 1a01 	vldr	s2, [r6, #-4]
 800e14c:	ed55 4a02 	vldr	s9, [r5, #-8]
 800e150:	ee73 ba21 	vadd.f32	s23, s6, s3
 800e154:	ee36 ba26 	vadd.f32	s22, s12, s13
 800e158:	ee37 aa27 	vadd.f32	s20, s14, s15
 800e15c:	ee72 9a04 	vadd.f32	s19, s4, s8
 800e160:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800e164:	ee31 8a05 	vadd.f32	s16, s2, s10
 800e168:	ee74 aa80 	vadd.f32	s21, s9, s0
 800e16c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800e170:	ed45 ba04 	vstr	s23, [r5, #-16]
 800e174:	ed05 ba03 	vstr	s22, [r5, #-12]
 800e178:	ed45 aa02 	vstr	s21, [r5, #-8]
 800e17c:	ed05 aa01 	vstr	s20, [r5, #-4]
 800e180:	ed06 8a01 	vstr	s16, [r6, #-4]
 800e184:	ed46 9a04 	vstr	s19, [r6, #-16]
 800e188:	ed06 9a03 	vstr	s18, [r6, #-12]
 800e18c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800e190:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e194:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800e198:	ed12 6a03 	vldr	s12, [r2, #-12]
 800e19c:	ed52 2a04 	vldr	s5, [r2, #-16]
 800e1a0:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e1a4:	ee34 4a42 	vsub.f32	s8, s8, s4
 800e1a8:	ee26 8a86 	vmul.f32	s16, s13, s12
 800e1ac:	ee24 2a06 	vmul.f32	s4, s8, s12
 800e1b0:	ee63 1a22 	vmul.f32	s3, s6, s5
 800e1b4:	ee24 4a22 	vmul.f32	s8, s8, s5
 800e1b8:	ee23 3a06 	vmul.f32	s6, s6, s12
 800e1bc:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800e1c0:	ee23 6a86 	vmul.f32	s12, s7, s12
 800e1c4:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e1c8:	ee36 6a04 	vadd.f32	s12, s12, s8
 800e1cc:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800e1d0:	ee72 3a63 	vsub.f32	s7, s4, s7
 800e1d4:	ee71 2a88 	vadd.f32	s5, s3, s16
 800e1d8:	ed44 6a03 	vstr	s13, [r4, #-12]
 800e1dc:	ed44 2a04 	vstr	s5, [r4, #-16]
 800e1e0:	ed43 3a04 	vstr	s7, [r3, #-16]
 800e1e4:	ed03 6a03 	vstr	s12, [r3, #-12]
 800e1e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1ec:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800e1f0:	ed12 7a01 	vldr	s14, [r2, #-4]
 800e1f4:	ed52 5a02 	vldr	s11, [r2, #-8]
 800e1f8:	ee35 6a41 	vsub.f32	s12, s10, s2
 800e1fc:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800e200:	ee67 3a87 	vmul.f32	s7, s15, s14
 800e204:	ee26 5a87 	vmul.f32	s10, s13, s14
 800e208:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800e20c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e210:	ee64 4a87 	vmul.f32	s9, s9, s14
 800e214:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e218:	ee26 7a07 	vmul.f32	s14, s12, s14
 800e21c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800e220:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800e224:	ee74 5a23 	vadd.f32	s11, s8, s7
 800e228:	ee35 6a46 	vsub.f32	s12, s10, s12
 800e22c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e230:	f1be 0e01 	subs.w	lr, lr, #1
 800e234:	ed44 5a02 	vstr	s11, [r4, #-8]
 800e238:	f105 0510 	add.w	r5, r5, #16
 800e23c:	ed44 7a01 	vstr	s15, [r4, #-4]
 800e240:	f106 0610 	add.w	r6, r6, #16
 800e244:	ed03 6a02 	vstr	s12, [r3, #-8]
 800e248:	ed03 7a01 	vstr	s14, [r3, #-4]
 800e24c:	f102 0210 	add.w	r2, r2, #16
 800e250:	f104 0410 	add.w	r4, r4, #16
 800e254:	f103 0310 	add.w	r3, r3, #16
 800e258:	f47f af5a 	bne.w	800e110 <arm_cfft_radix8by2_f32+0x34>
 800e25c:	687a      	ldr	r2, [r7, #4]
 800e25e:	b28c      	uxth	r4, r1
 800e260:	4621      	mov	r1, r4
 800e262:	2302      	movs	r3, #2
 800e264:	f000 fbca 	bl	800e9fc <arm_radix8_butterfly_f32>
 800e268:	ecbd 8b08 	vpop	{d8-d11}
 800e26c:	4621      	mov	r1, r4
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	4640      	mov	r0, r8
 800e272:	2302      	movs	r3, #2
 800e274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e278:	f000 bbc0 	b.w	800e9fc <arm_radix8_butterfly_f32>

0800e27c <arm_cfft_radix8by4_f32>:
 800e27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e280:	ed2d 8b0a 	vpush	{d8-d12}
 800e284:	8802      	ldrh	r2, [r0, #0]
 800e286:	ed91 6a00 	vldr	s12, [r1]
 800e28a:	b08f      	sub	sp, #60	; 0x3c
 800e28c:	460f      	mov	r7, r1
 800e28e:	0852      	lsrs	r2, r2, #1
 800e290:	6841      	ldr	r1, [r0, #4]
 800e292:	900c      	str	r0, [sp, #48]	; 0x30
 800e294:	0093      	lsls	r3, r2, #2
 800e296:	4638      	mov	r0, r7
 800e298:	4418      	add	r0, r3
 800e29a:	4606      	mov	r6, r0
 800e29c:	9009      	str	r0, [sp, #36]	; 0x24
 800e29e:	4418      	add	r0, r3
 800e2a0:	edd0 6a00 	vldr	s13, [r0]
 800e2a4:	ed96 4a00 	vldr	s8, [r6]
 800e2a8:	edd6 2a01 	vldr	s5, [r6, #4]
 800e2ac:	edd0 7a01 	vldr	s15, [r0, #4]
 800e2b0:	900a      	str	r0, [sp, #40]	; 0x28
 800e2b2:	ee76 5a26 	vadd.f32	s11, s12, s13
 800e2b6:	4604      	mov	r4, r0
 800e2b8:	4625      	mov	r5, r4
 800e2ba:	441c      	add	r4, r3
 800e2bc:	edd4 4a00 	vldr	s9, [r4]
 800e2c0:	ed97 7a01 	vldr	s14, [r7, #4]
 800e2c4:	ed94 3a01 	vldr	s6, [r4, #4]
 800e2c8:	9401      	str	r4, [sp, #4]
 800e2ca:	ee35 5a84 	vadd.f32	s10, s11, s8
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	ee35 5a24 	vadd.f32	s10, s10, s9
 800e2d4:	463e      	mov	r6, r7
 800e2d6:	ee15 ea10 	vmov	lr, s10
 800e2da:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e2de:	f846 eb08 	str.w	lr, [r6], #8
 800e2e2:	ee37 6a27 	vadd.f32	s12, s14, s15
 800e2e6:	ed90 5a01 	vldr	s10, [r0, #4]
 800e2ea:	9605      	str	r6, [sp, #20]
 800e2ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2f0:	9e01      	ldr	r6, [sp, #4]
 800e2f2:	9707      	str	r7, [sp, #28]
 800e2f4:	ee76 3aa2 	vadd.f32	s7, s13, s5
 800e2f8:	ed96 2a01 	vldr	s4, [r6, #4]
 800e2fc:	ee36 7a05 	vadd.f32	s14, s12, s10
 800e300:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800e304:	ee37 5ac4 	vsub.f32	s10, s15, s8
 800e308:	ee77 7a84 	vadd.f32	s15, s15, s8
 800e30c:	ee33 4ac3 	vsub.f32	s8, s7, s6
 800e310:	4604      	mov	r4, r0
 800e312:	46a3      	mov	fp, r4
 800e314:	ee37 7a02 	vadd.f32	s14, s14, s4
 800e318:	ee35 5a24 	vadd.f32	s10, s10, s9
 800e31c:	ee14 8a10 	vmov	r8, s8
 800e320:	46a4      	mov	ip, r4
 800e322:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800e326:	ed87 7a01 	vstr	s14, [r7, #4]
 800e32a:	f84b 8b08 	str.w	r8, [fp], #8
 800e32e:	f1ac 0704 	sub.w	r7, ip, #4
 800e332:	ed8c 5a01 	vstr	s10, [ip, #4]
 800e336:	f101 0c08 	add.w	ip, r1, #8
 800e33a:	462c      	mov	r4, r5
 800e33c:	f8cd c010 	str.w	ip, [sp, #16]
 800e340:	ee15 ca90 	vmov	ip, s11
 800e344:	ee36 6a62 	vsub.f32	s12, s12, s5
 800e348:	f844 cb08 	str.w	ip, [r4], #8
 800e34c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800e350:	ee36 6a43 	vsub.f32	s12, s12, s6
 800e354:	9406      	str	r4, [sp, #24]
 800e356:	ee76 6a83 	vadd.f32	s13, s13, s6
 800e35a:	f101 0410 	add.w	r4, r1, #16
 800e35e:	0852      	lsrs	r2, r2, #1
 800e360:	9402      	str	r4, [sp, #8]
 800e362:	ed85 6a01 	vstr	s12, [r5, #4]
 800e366:	462c      	mov	r4, r5
 800e368:	f101 0518 	add.w	r5, r1, #24
 800e36c:	920b      	str	r2, [sp, #44]	; 0x2c
 800e36e:	46b2      	mov	sl, r6
 800e370:	9503      	str	r5, [sp, #12]
 800e372:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800e376:	3a02      	subs	r2, #2
 800e378:	ee16 5a90 	vmov	r5, s13
 800e37c:	46b6      	mov	lr, r6
 800e37e:	4630      	mov	r0, r6
 800e380:	0852      	lsrs	r2, r2, #1
 800e382:	f84a 5b08 	str.w	r5, [sl], #8
 800e386:	f1a0 0604 	sub.w	r6, r0, #4
 800e38a:	edce 7a01 	vstr	s15, [lr, #4]
 800e38e:	9208      	str	r2, [sp, #32]
 800e390:	f000 8130 	beq.w	800e5f4 <arm_cfft_radix8by4_f32+0x378>
 800e394:	4691      	mov	r9, r2
 800e396:	9a07      	ldr	r2, [sp, #28]
 800e398:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e39c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e3a0:	3b08      	subs	r3, #8
 800e3a2:	f102 0510 	add.w	r5, r2, #16
 800e3a6:	f101 0c20 	add.w	ip, r1, #32
 800e3aa:	f1a4 020c 	sub.w	r2, r4, #12
 800e3ae:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800e3b2:	4433      	add	r3, r6
 800e3b4:	3410      	adds	r4, #16
 800e3b6:	4650      	mov	r0, sl
 800e3b8:	4659      	mov	r1, fp
 800e3ba:	ed55 3a02 	vldr	s7, [r5, #-8]
 800e3be:	ed14 5a02 	vldr	s10, [r4, #-8]
 800e3c2:	ed91 7a00 	vldr	s14, [r1]
 800e3c6:	edd0 7a00 	vldr	s15, [r0]
 800e3ca:	ed54 5a01 	vldr	s11, [r4, #-4]
 800e3ce:	ed15 4a01 	vldr	s8, [r5, #-4]
 800e3d2:	edd0 6a01 	vldr	s13, [r0, #4]
 800e3d6:	ed91 6a01 	vldr	s12, [r1, #4]
 800e3da:	ee33 8a85 	vadd.f32	s16, s7, s10
 800e3de:	ee34 0a25 	vadd.f32	s0, s8, s11
 800e3e2:	ee78 4a07 	vadd.f32	s9, s16, s14
 800e3e6:	ee74 5a65 	vsub.f32	s11, s8, s11
 800e3ea:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800e3ee:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800e3f2:	ed45 4a02 	vstr	s9, [r5, #-8]
 800e3f6:	edd1 4a01 	vldr	s9, [r1, #4]
 800e3fa:	ed90 4a01 	vldr	s8, [r0, #4]
 800e3fe:	ee70 4a24 	vadd.f32	s9, s0, s9
 800e402:	ee75 aa06 	vadd.f32	s21, s10, s12
 800e406:	ee74 4a84 	vadd.f32	s9, s9, s8
 800e40a:	ee35 aac7 	vsub.f32	s20, s11, s14
 800e40e:	ed45 4a01 	vstr	s9, [r5, #-4]
 800e412:	edd6 1a00 	vldr	s3, [r6]
 800e416:	edd7 0a00 	vldr	s1, [r7]
 800e41a:	ed92 4a02 	vldr	s8, [r2, #8]
 800e41e:	edd3 3a02 	vldr	s7, [r3, #8]
 800e422:	ed93 2a01 	vldr	s4, [r3, #4]
 800e426:	ed16 1a01 	vldr	s2, [r6, #-4]
 800e42a:	edd2 2a01 	vldr	s5, [r2, #4]
 800e42e:	ed57 9a01 	vldr	s19, [r7, #-4]
 800e432:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800e436:	ee39 3a81 	vadd.f32	s6, s19, s2
 800e43a:	ee74 8a84 	vadd.f32	s17, s9, s8
 800e43e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800e442:	ee78 8aa3 	vadd.f32	s17, s17, s7
 800e446:	ee7a aae6 	vsub.f32	s21, s21, s13
 800e44a:	ee18 aa90 	vmov	sl, s17
 800e44e:	f847 a908 	str.w	sl, [r7], #-8
 800e452:	edd2 8a01 	vldr	s17, [r2, #4]
 800e456:	ed93 9a01 	vldr	s18, [r3, #4]
 800e45a:	ee73 8a28 	vadd.f32	s17, s6, s17
 800e45e:	ee3a aa27 	vadd.f32	s20, s20, s15
 800e462:	ee78 8a89 	vadd.f32	s17, s17, s18
 800e466:	ee74 0a63 	vsub.f32	s1, s8, s7
 800e46a:	edc7 8a01 	vstr	s17, [r7, #4]
 800e46e:	ed18 ba02 	vldr	s22, [r8, #-8]
 800e472:	ed58 8a01 	vldr	s17, [r8, #-4]
 800e476:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800e47a:	ee6a ba28 	vmul.f32	s23, s20, s17
 800e47e:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800e482:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800e486:	ee31 9a20 	vadd.f32	s18, s2, s1
 800e48a:	ee79 9a82 	vadd.f32	s19, s19, s4
 800e48e:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800e492:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800e496:	ee69 baa8 	vmul.f32	s23, s19, s17
 800e49a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800e49e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800e4a2:	ee69 8a28 	vmul.f32	s17, s18, s17
 800e4a6:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800e4aa:	ee1c aa10 	vmov	sl, s24
 800e4ae:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800e4b2:	f841 ab08 	str.w	sl, [r1], #8
 800e4b6:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800e4ba:	ee3b bacb 	vsub.f32	s22, s23, s22
 800e4be:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800e4c2:	ee33 3a62 	vsub.f32	s6, s6, s5
 800e4c6:	ed01 aa01 	vstr	s20, [r1, #-4]
 800e4ca:	edc2 8a01 	vstr	s17, [r2, #4]
 800e4ce:	ed82 ba02 	vstr	s22, [r2, #8]
 800e4d2:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800e4d6:	ee74 3a63 	vsub.f32	s7, s8, s7
 800e4da:	ee38 8a47 	vsub.f32	s16, s16, s14
 800e4de:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800e4e2:	ee30 0a46 	vsub.f32	s0, s0, s12
 800e4e6:	ee33 3a42 	vsub.f32	s6, s6, s4
 800e4ea:	ee38 8a67 	vsub.f32	s16, s16, s15
 800e4ee:	ee30 0a66 	vsub.f32	s0, s0, s13
 800e4f2:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800e4f6:	ee63 8a04 	vmul.f32	s17, s6, s8
 800e4fa:	ee28 aa24 	vmul.f32	s20, s16, s9
 800e4fe:	ee60 9a04 	vmul.f32	s19, s0, s8
 800e502:	ee28 8a04 	vmul.f32	s16, s16, s8
 800e506:	ee20 0a24 	vmul.f32	s0, s0, s9
 800e50a:	ee63 3a84 	vmul.f32	s7, s7, s8
 800e50e:	ee39 4a68 	vsub.f32	s8, s18, s17
 800e512:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800e516:	ee14 aa10 	vmov	sl, s8
 800e51a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800e51e:	ee63 4a24 	vmul.f32	s9, s6, s9
 800e522:	ed44 9a02 	vstr	s19, [r4, #-8]
 800e526:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800e52a:	ed04 0a01 	vstr	s0, [r4, #-4]
 800e52e:	f846 a908 	str.w	sl, [r6], #-8
 800e532:	ee35 6a46 	vsub.f32	s12, s10, s12
 800e536:	ee35 7a87 	vadd.f32	s14, s11, s14
 800e53a:	edc6 3a01 	vstr	s7, [r6, #4]
 800e53e:	ee76 6a26 	vadd.f32	s13, s12, s13
 800e542:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e546:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800e54a:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800e54e:	ee67 5a86 	vmul.f32	s11, s15, s12
 800e552:	ee26 5a87 	vmul.f32	s10, s13, s14
 800e556:	ee72 2a62 	vsub.f32	s5, s4, s5
 800e55a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800e55e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800e562:	ee75 5a25 	vadd.f32	s11, s10, s11
 800e566:	ee62 0a86 	vmul.f32	s1, s5, s12
 800e56a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e56e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e572:	ee21 6a06 	vmul.f32	s12, s2, s12
 800e576:	ee62 2a87 	vmul.f32	s5, s5, s14
 800e57a:	ee21 1a07 	vmul.f32	s2, s2, s14
 800e57e:	ee15 aa90 	vmov	sl, s11
 800e582:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e586:	f840 ab08 	str.w	sl, [r0], #8
 800e58a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800e58e:	ee76 2a22 	vadd.f32	s5, s12, s5
 800e592:	f1b9 0901 	subs.w	r9, r9, #1
 800e596:	ed40 7a01 	vstr	s15, [r0, #-4]
 800e59a:	f105 0508 	add.w	r5, r5, #8
 800e59e:	ed83 1a02 	vstr	s2, [r3, #8]
 800e5a2:	edc3 2a01 	vstr	s5, [r3, #4]
 800e5a6:	f108 0808 	add.w	r8, r8, #8
 800e5aa:	f1a2 0208 	sub.w	r2, r2, #8
 800e5ae:	f10c 0c10 	add.w	ip, ip, #16
 800e5b2:	f104 0408 	add.w	r4, r4, #8
 800e5b6:	f10e 0e18 	add.w	lr, lr, #24
 800e5ba:	f1a3 0308 	sub.w	r3, r3, #8
 800e5be:	f47f aefc 	bne.w	800e3ba <arm_cfft_radix8by4_f32+0x13e>
 800e5c2:	9908      	ldr	r1, [sp, #32]
 800e5c4:	9802      	ldr	r0, [sp, #8]
 800e5c6:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800e5ca:	00cb      	lsls	r3, r1, #3
 800e5cc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800e5d0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800e5d4:	9102      	str	r1, [sp, #8]
 800e5d6:	9905      	ldr	r1, [sp, #20]
 800e5d8:	4419      	add	r1, r3
 800e5da:	9105      	str	r1, [sp, #20]
 800e5dc:	9904      	ldr	r1, [sp, #16]
 800e5de:	4419      	add	r1, r3
 800e5e0:	9104      	str	r1, [sp, #16]
 800e5e2:	9906      	ldr	r1, [sp, #24]
 800e5e4:	449b      	add	fp, r3
 800e5e6:	4419      	add	r1, r3
 800e5e8:	449a      	add	sl, r3
 800e5ea:	9b03      	ldr	r3, [sp, #12]
 800e5ec:	9106      	str	r1, [sp, #24]
 800e5ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e5f2:	9303      	str	r3, [sp, #12]
 800e5f4:	9a05      	ldr	r2, [sp, #20]
 800e5f6:	9806      	ldr	r0, [sp, #24]
 800e5f8:	ed92 4a00 	vldr	s8, [r2]
 800e5fc:	ed90 7a00 	vldr	s14, [r0]
 800e600:	ed9b 3a00 	vldr	s6, [fp]
 800e604:	edda 3a00 	vldr	s7, [sl]
 800e608:	edd2 4a01 	vldr	s9, [r2, #4]
 800e60c:	edd0 6a01 	vldr	s13, [r0, #4]
 800e610:	ed9a 2a01 	vldr	s4, [sl, #4]
 800e614:	eddb 7a01 	vldr	s15, [fp, #4]
 800e618:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800e61c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e61e:	ee34 6a07 	vadd.f32	s12, s8, s14
 800e622:	ee74 5aa6 	vadd.f32	s11, s9, s13
 800e626:	ee36 5a03 	vadd.f32	s10, s12, s6
 800e62a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800e62e:	ee35 5a23 	vadd.f32	s10, s10, s7
 800e632:	ee34 7a47 	vsub.f32	s14, s8, s14
 800e636:	ed82 5a00 	vstr	s10, [r2]
 800e63a:	ed9b 5a01 	vldr	s10, [fp, #4]
 800e63e:	edda 4a01 	vldr	s9, [sl, #4]
 800e642:	ee35 5a85 	vadd.f32	s10, s11, s10
 800e646:	ee37 4a27 	vadd.f32	s8, s14, s15
 800e64a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800e64e:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800e652:	ed82 5a01 	vstr	s10, [r2, #4]
 800e656:	9a04      	ldr	r2, [sp, #16]
 800e658:	ee34 5aa3 	vadd.f32	s10, s9, s7
 800e65c:	edd2 1a00 	vldr	s3, [r2]
 800e660:	edd2 2a01 	vldr	s5, [r2, #4]
 800e664:	9a02      	ldr	r2, [sp, #8]
 800e666:	ee34 4a42 	vsub.f32	s8, s8, s4
 800e66a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800e66e:	ee64 4a21 	vmul.f32	s9, s8, s3
 800e672:	ee24 4a22 	vmul.f32	s8, s8, s5
 800e676:	ee65 2a22 	vmul.f32	s5, s10, s5
 800e67a:	ee25 5a21 	vmul.f32	s10, s10, s3
 800e67e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800e682:	ee35 5a44 	vsub.f32	s10, s10, s8
 800e686:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800e68a:	edcb 2a00 	vstr	s5, [fp]
 800e68e:	ed8b 5a01 	vstr	s10, [fp, #4]
 800e692:	ed92 4a01 	vldr	s8, [r2, #4]
 800e696:	ed92 5a00 	vldr	s10, [r2]
 800e69a:	9a03      	ldr	r2, [sp, #12]
 800e69c:	ee36 6a63 	vsub.f32	s12, s12, s7
 800e6a0:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800e6a4:	ee66 4a05 	vmul.f32	s9, s12, s10
 800e6a8:	ee25 5a85 	vmul.f32	s10, s11, s10
 800e6ac:	ee26 6a04 	vmul.f32	s12, s12, s8
 800e6b0:	ee65 5a84 	vmul.f32	s11, s11, s8
 800e6b4:	ee35 6a46 	vsub.f32	s12, s10, s12
 800e6b8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800e6bc:	ee76 6a83 	vadd.f32	s13, s13, s6
 800e6c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e6c4:	ed80 6a01 	vstr	s12, [r0, #4]
 800e6c8:	edc0 5a00 	vstr	s11, [r0]
 800e6cc:	edd2 5a01 	vldr	s11, [r2, #4]
 800e6d0:	9807      	ldr	r0, [sp, #28]
 800e6d2:	ee77 7a02 	vadd.f32	s15, s14, s4
 800e6d6:	ee36 7ae3 	vsub.f32	s14, s13, s7
 800e6da:	edd2 6a00 	vldr	s13, [r2]
 800e6de:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800e6e2:	ee67 6a26 	vmul.f32	s13, s14, s13
 800e6e6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e6ea:	ee27 7a25 	vmul.f32	s14, s14, s11
 800e6ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e6f2:	ee36 7a07 	vadd.f32	s14, s12, s14
 800e6f6:	edca 7a01 	vstr	s15, [sl, #4]
 800e6fa:	ed8a 7a00 	vstr	s14, [sl]
 800e6fe:	6872      	ldr	r2, [r6, #4]
 800e700:	4621      	mov	r1, r4
 800e702:	2304      	movs	r3, #4
 800e704:	f000 f97a 	bl	800e9fc <arm_radix8_butterfly_f32>
 800e708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e70a:	6872      	ldr	r2, [r6, #4]
 800e70c:	4621      	mov	r1, r4
 800e70e:	2304      	movs	r3, #4
 800e710:	f000 f974 	bl	800e9fc <arm_radix8_butterfly_f32>
 800e714:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e716:	6872      	ldr	r2, [r6, #4]
 800e718:	4621      	mov	r1, r4
 800e71a:	2304      	movs	r3, #4
 800e71c:	f000 f96e 	bl	800e9fc <arm_radix8_butterfly_f32>
 800e720:	6872      	ldr	r2, [r6, #4]
 800e722:	9801      	ldr	r0, [sp, #4]
 800e724:	4621      	mov	r1, r4
 800e726:	2304      	movs	r3, #4
 800e728:	b00f      	add	sp, #60	; 0x3c
 800e72a:	ecbd 8b0a 	vpop	{d8-d12}
 800e72e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e732:	f000 b963 	b.w	800e9fc <arm_radix8_butterfly_f32>
 800e736:	bf00      	nop

0800e738 <arm_cfft_f32>:
 800e738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e73c:	2a01      	cmp	r2, #1
 800e73e:	4606      	mov	r6, r0
 800e740:	4617      	mov	r7, r2
 800e742:	460c      	mov	r4, r1
 800e744:	4698      	mov	r8, r3
 800e746:	8805      	ldrh	r5, [r0, #0]
 800e748:	d054      	beq.n	800e7f4 <arm_cfft_f32+0xbc>
 800e74a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800e74e:	d04c      	beq.n	800e7ea <arm_cfft_f32+0xb2>
 800e750:	d916      	bls.n	800e780 <arm_cfft_f32+0x48>
 800e752:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800e756:	d01a      	beq.n	800e78e <arm_cfft_f32+0x56>
 800e758:	d95c      	bls.n	800e814 <arm_cfft_f32+0xdc>
 800e75a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800e75e:	d044      	beq.n	800e7ea <arm_cfft_f32+0xb2>
 800e760:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800e764:	d105      	bne.n	800e772 <arm_cfft_f32+0x3a>
 800e766:	2301      	movs	r3, #1
 800e768:	6872      	ldr	r2, [r6, #4]
 800e76a:	4629      	mov	r1, r5
 800e76c:	4620      	mov	r0, r4
 800e76e:	f000 f945 	bl	800e9fc <arm_radix8_butterfly_f32>
 800e772:	f1b8 0f00 	cmp.w	r8, #0
 800e776:	d111      	bne.n	800e79c <arm_cfft_f32+0x64>
 800e778:	2f01      	cmp	r7, #1
 800e77a:	d016      	beq.n	800e7aa <arm_cfft_f32+0x72>
 800e77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e780:	2d20      	cmp	r5, #32
 800e782:	d032      	beq.n	800e7ea <arm_cfft_f32+0xb2>
 800e784:	d94a      	bls.n	800e81c <arm_cfft_f32+0xe4>
 800e786:	2d40      	cmp	r5, #64	; 0x40
 800e788:	d0ed      	beq.n	800e766 <arm_cfft_f32+0x2e>
 800e78a:	2d80      	cmp	r5, #128	; 0x80
 800e78c:	d1f1      	bne.n	800e772 <arm_cfft_f32+0x3a>
 800e78e:	4621      	mov	r1, r4
 800e790:	4630      	mov	r0, r6
 800e792:	f7ff fca3 	bl	800e0dc <arm_cfft_radix8by2_f32>
 800e796:	f1b8 0f00 	cmp.w	r8, #0
 800e79a:	d0ed      	beq.n	800e778 <arm_cfft_f32+0x40>
 800e79c:	68b2      	ldr	r2, [r6, #8]
 800e79e:	89b1      	ldrh	r1, [r6, #12]
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	f7f1 fd25 	bl	80001f0 <arm_bitreversal_32>
 800e7a6:	2f01      	cmp	r7, #1
 800e7a8:	d1e8      	bne.n	800e77c <arm_cfft_f32+0x44>
 800e7aa:	ee07 5a90 	vmov	s15, r5
 800e7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e7b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e7ba:	2d00      	cmp	r5, #0
 800e7bc:	d0de      	beq.n	800e77c <arm_cfft_f32+0x44>
 800e7be:	f104 0108 	add.w	r1, r4, #8
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	3301      	adds	r3, #1
 800e7c6:	429d      	cmp	r5, r3
 800e7c8:	f101 0108 	add.w	r1, r1, #8
 800e7cc:	ed11 7a04 	vldr	s14, [r1, #-16]
 800e7d0:	ed51 7a03 	vldr	s15, [r1, #-12]
 800e7d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e7d8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e7dc:	ed01 7a04 	vstr	s14, [r1, #-16]
 800e7e0:	ed41 7a03 	vstr	s15, [r1, #-12]
 800e7e4:	d1ee      	bne.n	800e7c4 <arm_cfft_f32+0x8c>
 800e7e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ea:	4621      	mov	r1, r4
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	f7ff fd45 	bl	800e27c <arm_cfft_radix8by4_f32>
 800e7f2:	e7be      	b.n	800e772 <arm_cfft_f32+0x3a>
 800e7f4:	b1ad      	cbz	r5, 800e822 <arm_cfft_f32+0xea>
 800e7f6:	f101 030c 	add.w	r3, r1, #12
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	ed53 7a02 	vldr	s15, [r3, #-8]
 800e800:	3201      	adds	r2, #1
 800e802:	eef1 7a67 	vneg.f32	s15, s15
 800e806:	4295      	cmp	r5, r2
 800e808:	ed43 7a02 	vstr	s15, [r3, #-8]
 800e80c:	f103 0308 	add.w	r3, r3, #8
 800e810:	d1f4      	bne.n	800e7fc <arm_cfft_f32+0xc4>
 800e812:	e79a      	b.n	800e74a <arm_cfft_f32+0x12>
 800e814:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800e818:	d0a5      	beq.n	800e766 <arm_cfft_f32+0x2e>
 800e81a:	e7aa      	b.n	800e772 <arm_cfft_f32+0x3a>
 800e81c:	2d10      	cmp	r5, #16
 800e81e:	d0b6      	beq.n	800e78e <arm_cfft_f32+0x56>
 800e820:	e7a7      	b.n	800e772 <arm_cfft_f32+0x3a>
 800e822:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800e826:	d894      	bhi.n	800e752 <arm_cfft_f32+0x1a>
 800e828:	e7aa      	b.n	800e780 <arm_cfft_f32+0x48>
 800e82a:	bf00      	nop

0800e82c <arm_cmplx_mag_f32>:
 800e82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e830:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800e834:	b084      	sub	sp, #16
 800e836:	d07f      	beq.n	800e938 <arm_cmplx_mag_f32+0x10c>
 800e838:	2700      	movs	r7, #0
 800e83a:	f100 0420 	add.w	r4, r0, #32
 800e83e:	f101 0510 	add.w	r5, r1, #16
 800e842:	4646      	mov	r6, r8
 800e844:	e05a      	b.n	800e8fc <arm_cmplx_mag_f32+0xd0>
 800e846:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800e84a:	eeb4 0a40 	vcmp.f32	s0, s0
 800e84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e852:	f040 80a4 	bne.w	800e99e <arm_cmplx_mag_f32+0x172>
 800e856:	ed05 0a04 	vstr	s0, [r5, #-16]
 800e85a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800e85e:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800e862:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e866:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e86a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e86e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e876:	f2c0 808f 	blt.w	800e998 <arm_cmplx_mag_f32+0x16c>
 800e87a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800e87e:	eeb4 0a40 	vcmp.f32	s0, s0
 800e882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e886:	f040 80af 	bne.w	800e9e8 <arm_cmplx_mag_f32+0x1bc>
 800e88a:	ed05 0a03 	vstr	s0, [r5, #-12]
 800e88e:	ed54 7a04 	vldr	s15, [r4, #-16]
 800e892:	ed14 0a03 	vldr	s0, [r4, #-12]
 800e896:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e89a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e89e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e8a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8aa:	db72      	blt.n	800e992 <arm_cmplx_mag_f32+0x166>
 800e8ac:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800e8b0:	eeb4 0a40 	vcmp.f32	s0, s0
 800e8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8b8:	f040 808c 	bne.w	800e9d4 <arm_cmplx_mag_f32+0x1a8>
 800e8bc:	ed05 0a02 	vstr	s0, [r5, #-8]
 800e8c0:	ed54 7a02 	vldr	s15, [r4, #-8]
 800e8c4:	ed14 0a01 	vldr	s0, [r4, #-4]
 800e8c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e8cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e8d0:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e8d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8dc:	db20      	blt.n	800e920 <arm_cmplx_mag_f32+0xf4>
 800e8de:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800e8e2:	eeb4 0a40 	vcmp.f32	s0, s0
 800e8e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ea:	d169      	bne.n	800e9c0 <arm_cmplx_mag_f32+0x194>
 800e8ec:	3e01      	subs	r6, #1
 800e8ee:	ed05 0a01 	vstr	s0, [r5, #-4]
 800e8f2:	f104 0420 	add.w	r4, r4, #32
 800e8f6:	f105 0510 	add.w	r5, r5, #16
 800e8fa:	d019      	beq.n	800e930 <arm_cmplx_mag_f32+0x104>
 800e8fc:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800e900:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800e904:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e908:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e90c:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e910:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e918:	da95      	bge.n	800e846 <arm_cmplx_mag_f32+0x1a>
 800e91a:	f845 7c10 	str.w	r7, [r5, #-16]
 800e91e:	e79c      	b.n	800e85a <arm_cmplx_mag_f32+0x2e>
 800e920:	3e01      	subs	r6, #1
 800e922:	f845 7c04 	str.w	r7, [r5, #-4]
 800e926:	f104 0420 	add.w	r4, r4, #32
 800e92a:	f105 0510 	add.w	r5, r5, #16
 800e92e:	d1e5      	bne.n	800e8fc <arm_cmplx_mag_f32+0xd0>
 800e930:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800e934:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800e938:	f012 0503 	ands.w	r5, r2, #3
 800e93c:	d026      	beq.n	800e98c <arm_cmplx_mag_f32+0x160>
 800e93e:	2600      	movs	r6, #0
 800e940:	f100 0408 	add.w	r4, r0, #8
 800e944:	e00c      	b.n	800e960 <arm_cmplx_mag_f32+0x134>
 800e946:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800e94a:	eeb4 0a40 	vcmp.f32	s0, s0
 800e94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e952:	d12e      	bne.n	800e9b2 <arm_cmplx_mag_f32+0x186>
 800e954:	3d01      	subs	r5, #1
 800e956:	ed01 0a01 	vstr	s0, [r1, #-4]
 800e95a:	f104 0408 	add.w	r4, r4, #8
 800e95e:	d015      	beq.n	800e98c <arm_cmplx_mag_f32+0x160>
 800e960:	ed54 7a02 	vldr	s15, [r4, #-8]
 800e964:	ed14 0a01 	vldr	s0, [r4, #-4]
 800e968:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e96c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e970:	3104      	adds	r1, #4
 800e972:	ee77 7a80 	vadd.f32	s15, s15, s0
 800e976:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e97e:	dae2      	bge.n	800e946 <arm_cmplx_mag_f32+0x11a>
 800e980:	3d01      	subs	r5, #1
 800e982:	f841 6c04 	str.w	r6, [r1, #-4]
 800e986:	f104 0408 	add.w	r4, r4, #8
 800e98a:	d1e9      	bne.n	800e960 <arm_cmplx_mag_f32+0x134>
 800e98c:	b004      	add	sp, #16
 800e98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e992:	f845 7c08 	str.w	r7, [r5, #-8]
 800e996:	e793      	b.n	800e8c0 <arm_cmplx_mag_f32+0x94>
 800e998:	f845 7c0c 	str.w	r7, [r5, #-12]
 800e99c:	e777      	b.n	800e88e <arm_cmplx_mag_f32+0x62>
 800e99e:	eeb0 0a67 	vmov.f32	s0, s15
 800e9a2:	9203      	str	r2, [sp, #12]
 800e9a4:	9102      	str	r1, [sp, #8]
 800e9a6:	9001      	str	r0, [sp, #4]
 800e9a8:	f000 fc88 	bl	800f2bc <sqrtf>
 800e9ac:	a801      	add	r0, sp, #4
 800e9ae:	c807      	ldmia	r0, {r0, r1, r2}
 800e9b0:	e751      	b.n	800e856 <arm_cmplx_mag_f32+0x2a>
 800e9b2:	eeb0 0a67 	vmov.f32	s0, s15
 800e9b6:	9101      	str	r1, [sp, #4]
 800e9b8:	f000 fc80 	bl	800f2bc <sqrtf>
 800e9bc:	9901      	ldr	r1, [sp, #4]
 800e9be:	e7c9      	b.n	800e954 <arm_cmplx_mag_f32+0x128>
 800e9c0:	eeb0 0a67 	vmov.f32	s0, s15
 800e9c4:	9203      	str	r2, [sp, #12]
 800e9c6:	9102      	str	r1, [sp, #8]
 800e9c8:	9001      	str	r0, [sp, #4]
 800e9ca:	f000 fc77 	bl	800f2bc <sqrtf>
 800e9ce:	a801      	add	r0, sp, #4
 800e9d0:	c807      	ldmia	r0, {r0, r1, r2}
 800e9d2:	e78b      	b.n	800e8ec <arm_cmplx_mag_f32+0xc0>
 800e9d4:	eeb0 0a67 	vmov.f32	s0, s15
 800e9d8:	9203      	str	r2, [sp, #12]
 800e9da:	9102      	str	r1, [sp, #8]
 800e9dc:	9001      	str	r0, [sp, #4]
 800e9de:	f000 fc6d 	bl	800f2bc <sqrtf>
 800e9e2:	a801      	add	r0, sp, #4
 800e9e4:	c807      	ldmia	r0, {r0, r1, r2}
 800e9e6:	e769      	b.n	800e8bc <arm_cmplx_mag_f32+0x90>
 800e9e8:	eeb0 0a67 	vmov.f32	s0, s15
 800e9ec:	9203      	str	r2, [sp, #12]
 800e9ee:	9102      	str	r1, [sp, #8]
 800e9f0:	9001      	str	r0, [sp, #4]
 800e9f2:	f000 fc63 	bl	800f2bc <sqrtf>
 800e9f6:	a801      	add	r0, sp, #4
 800e9f8:	c807      	ldmia	r0, {r0, r1, r2}
 800e9fa:	e746      	b.n	800e88a <arm_cmplx_mag_f32+0x5e>

0800e9fc <arm_radix8_butterfly_f32>:
 800e9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea00:	ed2d 8b10 	vpush	{d8-d15}
 800ea04:	461c      	mov	r4, r3
 800ea06:	b09d      	sub	sp, #116	; 0x74
 800ea08:	4603      	mov	r3, r0
 800ea0a:	3304      	adds	r3, #4
 800ea0c:	ed9f bac4 	vldr	s22, [pc, #784]	; 800ed20 <arm_radix8_butterfly_f32+0x324>
 800ea10:	9019      	str	r0, [sp, #100]	; 0x64
 800ea12:	921a      	str	r2, [sp, #104]	; 0x68
 800ea14:	468b      	mov	fp, r1
 800ea16:	931b      	str	r3, [sp, #108]	; 0x6c
 800ea18:	468a      	mov	sl, r1
 800ea1a:	46a1      	mov	r9, r4
 800ea1c:	4607      	mov	r7, r0
 800ea1e:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800ea22:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800ea26:	eb03 0508 	add.w	r5, r3, r8
 800ea2a:	195c      	adds	r4, r3, r5
 800ea2c:	00de      	lsls	r6, r3, #3
 800ea2e:	191a      	adds	r2, r3, r4
 800ea30:	9600      	str	r6, [sp, #0]
 800ea32:	1898      	adds	r0, r3, r2
 800ea34:	4619      	mov	r1, r3
 800ea36:	9e00      	ldr	r6, [sp, #0]
 800ea38:	9311      	str	r3, [sp, #68]	; 0x44
 800ea3a:	4401      	add	r1, r0
 800ea3c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800ea40:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800ea44:	19be      	adds	r6, r7, r6
 800ea46:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800ea4a:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800ea4e:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800ea52:	9f00      	ldr	r7, [sp, #0]
 800ea54:	011b      	lsls	r3, r3, #4
 800ea56:	eb06 0e07 	add.w	lr, r6, r7
 800ea5a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800ea5c:	9302      	str	r3, [sp, #8]
 800ea5e:	3204      	adds	r2, #4
 800ea60:	3104      	adds	r1, #4
 800ea62:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ea66:	f04f 0c00 	mov.w	ip, #0
 800ea6a:	edde 7a00 	vldr	s15, [lr]
 800ea6e:	edd6 6a00 	vldr	s13, [r6]
 800ea72:	ed95 2a00 	vldr	s4, [r5]
 800ea76:	ed17 aa01 	vldr	s20, [r7, #-4]
 800ea7a:	edd4 4a00 	vldr	s9, [r4]
 800ea7e:	ed90 5a00 	vldr	s10, [r0]
 800ea82:	ed12 7a01 	vldr	s14, [r2, #-4]
 800ea86:	ed51 0a01 	vldr	s1, [r1, #-4]
 800ea8a:	ee77 8a85 	vadd.f32	s17, s15, s10
 800ea8e:	ee76 3a87 	vadd.f32	s7, s13, s14
 800ea92:	ee32 4a20 	vadd.f32	s8, s4, s1
 800ea96:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800ea9a:	ee33 6a84 	vadd.f32	s12, s7, s8
 800ea9e:	ee73 5a28 	vadd.f32	s11, s6, s17
 800eaa2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800eaa6:	ee75 6a86 	vadd.f32	s13, s11, s12
 800eaaa:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800eaae:	ed47 6a01 	vstr	s13, [r7, #-4]
 800eab2:	edc4 5a00 	vstr	s11, [r4]
 800eab6:	ed92 9a00 	vldr	s18, [r2]
 800eaba:	ed95 1a01 	vldr	s2, [r5, #4]
 800eabe:	edd6 5a01 	vldr	s11, [r6, #4]
 800eac2:	ed91 6a00 	vldr	s12, [r1]
 800eac6:	edd7 2a00 	vldr	s5, [r7]
 800eaca:	edd4 1a01 	vldr	s3, [r4, #4]
 800eace:	edde 6a01 	vldr	s13, [lr, #4]
 800ead2:	edd0 9a01 	vldr	s19, [r0, #4]
 800ead6:	ee72 0a60 	vsub.f32	s1, s4, s1
 800eada:	ee71 aa46 	vsub.f32	s21, s2, s12
 800eade:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800eae2:	ee37 0a60 	vsub.f32	s0, s14, s1
 800eae6:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800eaea:	ee37 7a20 	vadd.f32	s14, s14, s1
 800eaee:	ee32 2a6a 	vsub.f32	s4, s4, s21
 800eaf2:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800eaf6:	ee75 5a89 	vadd.f32	s11, s11, s18
 800eafa:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800eafe:	ee7a 4a64 	vsub.f32	s9, s20, s9
 800eb02:	ee31 6a06 	vadd.f32	s12, s2, s12
 800eb06:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800eb0a:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800eb0e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800eb12:	ee72 1ae1 	vsub.f32	s3, s5, s3
 800eb16:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800eb1a:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800eb1e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800eb22:	ee33 3a68 	vsub.f32	s6, s6, s17
 800eb26:	ee36 0a88 	vadd.f32	s0, s13, s16
 800eb2a:	ee75 8a86 	vadd.f32	s17, s11, s12
 800eb2e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800eb32:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800eb36:	ee74 6ae0 	vsub.f32	s13, s9, s1
 800eb3a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800eb3e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800eb42:	ee75 4a27 	vadd.f32	s9, s10, s15
 800eb46:	ee71 5a49 	vsub.f32	s11, s2, s18
 800eb4a:	ee31 2a09 	vadd.f32	s4, s2, s18
 800eb4e:	ee75 7a67 	vsub.f32	s15, s10, s15
 800eb52:	ee31 1aa2 	vadd.f32	s2, s3, s5
 800eb56:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800eb5a:	ee73 0a06 	vadd.f32	s1, s6, s12
 800eb5e:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800eb62:	ee36 5a87 	vadd.f32	s10, s13, s14
 800eb66:	ee32 8a28 	vadd.f32	s16, s4, s17
 800eb6a:	ee33 6a46 	vsub.f32	s12, s6, s12
 800eb6e:	ee34 4a25 	vadd.f32	s8, s8, s11
 800eb72:	ee33 3a80 	vadd.f32	s6, s7, s0
 800eb76:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800eb7a:	ee71 5a64 	vsub.f32	s11, s2, s9
 800eb7e:	ee72 6ae7 	vsub.f32	s13, s5, s15
 800eb82:	ee32 2a68 	vsub.f32	s4, s4, s17
 800eb86:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800eb8a:	ee74 4a81 	vadd.f32	s9, s9, s2
 800eb8e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800eb92:	44dc      	add	ip, fp
 800eb94:	45e2      	cmp	sl, ip
 800eb96:	ed87 8a00 	vstr	s16, [r7]
 800eb9a:	ed84 2a01 	vstr	s4, [r4, #4]
 800eb9e:	441f      	add	r7, r3
 800eba0:	edce 0a00 	vstr	s1, [lr]
 800eba4:	441c      	add	r4, r3
 800eba6:	ed80 6a00 	vstr	s12, [r0]
 800ebaa:	edce 1a01 	vstr	s3, [lr, #4]
 800ebae:	ed80 4a01 	vstr	s8, [r0, #4]
 800ebb2:	449e      	add	lr, r3
 800ebb4:	ed86 3a00 	vstr	s6, [r6]
 800ebb8:	4418      	add	r0, r3
 800ebba:	ed41 3a01 	vstr	s7, [r1, #-4]
 800ebbe:	ed02 5a01 	vstr	s10, [r2, #-4]
 800ebc2:	ed85 7a00 	vstr	s14, [r5]
 800ebc6:	edc6 5a01 	vstr	s11, [r6, #4]
 800ebca:	edc1 4a00 	vstr	s9, [r1]
 800ebce:	441e      	add	r6, r3
 800ebd0:	edc2 6a00 	vstr	s13, [r2]
 800ebd4:	4419      	add	r1, r3
 800ebd6:	edc5 7a01 	vstr	s15, [r5, #4]
 800ebda:	441a      	add	r2, r3
 800ebdc:	441d      	add	r5, r3
 800ebde:	f63f af44 	bhi.w	800ea6a <arm_radix8_butterfly_f32+0x6e>
 800ebe2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ebe4:	2a07      	cmp	r2, #7
 800ebe6:	f240 81f5 	bls.w	800efd4 <arm_radix8_butterfly_f32+0x5d8>
 800ebea:	f108 0101 	add.w	r1, r8, #1
 800ebee:	188f      	adds	r7, r1, r2
 800ebf0:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 800ebf4:	19d6      	adds	r6, r2, r7
 800ebf6:	eb08 0c09 	add.w	ip, r8, r9
 800ebfa:	1994      	adds	r4, r2, r6
 800ebfc:	eb0c 0e09 	add.w	lr, ip, r9
 800ec00:	4610      	mov	r0, r2
 800ec02:	9701      	str	r7, [sp, #4]
 800ec04:	4420      	add	r0, r4
 800ec06:	eb0e 0709 	add.w	r7, lr, r9
 800ec0a:	1815      	adds	r5, r2, r0
 800ec0c:	eb07 0209 	add.w	r2, r7, r9
 800ec10:	9203      	str	r2, [sp, #12]
 800ec12:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ec14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ec18:	9117      	str	r1, [sp, #92]	; 0x5c
 800ec1a:	440a      	add	r2, r1
 800ec1c:	9900      	ldr	r1, [sp, #0]
 800ec1e:	3108      	adds	r1, #8
 800ec20:	9100      	str	r1, [sp, #0]
 800ec22:	9902      	ldr	r1, [sp, #8]
 800ec24:	3108      	adds	r1, #8
 800ec26:	9102      	str	r1, [sp, #8]
 800ec28:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ec2a:	00ff      	lsls	r7, r7, #3
 800ec2c:	9715      	str	r7, [sp, #84]	; 0x54
 800ec2e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800ec32:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800ec36:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800ec3a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800ec3c:	9903      	ldr	r1, [sp, #12]
 800ec3e:	19d7      	adds	r7, r2, r7
 800ec40:	00c9      	lsls	r1, r1, #3
 800ec42:	9114      	str	r1, [sp, #80]	; 0x50
 800ec44:	9710      	str	r7, [sp, #64]	; 0x40
 800ec46:	9919      	ldr	r1, [sp, #100]	; 0x64
 800ec48:	9f00      	ldr	r7, [sp, #0]
 800ec4a:	19cf      	adds	r7, r1, r7
 800ec4c:	970d      	str	r7, [sp, #52]	; 0x34
 800ec4e:	9f02      	ldr	r7, [sp, #8]
 800ec50:	19cf      	adds	r7, r1, r7
 800ec52:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800ec56:	970c      	str	r7, [sp, #48]	; 0x30
 800ec58:	9f01      	ldr	r7, [sp, #4]
 800ec5a:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 800ec5e:	3504      	adds	r5, #4
 800ec60:	3004      	adds	r0, #4
 800ec62:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 800ec66:	9508      	str	r5, [sp, #32]
 800ec68:	9009      	str	r0, [sp, #36]	; 0x24
 800ec6a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800ec6c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800ec6e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800ec72:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800ec76:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 800ec7a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800ec7c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800ec80:	1945      	adds	r5, r0, r5
 800ec82:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800ec86:	460f      	mov	r7, r1
 800ec88:	3404      	adds	r4, #4
 800ec8a:	4641      	mov	r1, r8
 800ec8c:	1841      	adds	r1, r0, r1
 800ec8e:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800ec92:	940a      	str	r4, [sp, #40]	; 0x28
 800ec94:	eb00 0c06 	add.w	ip, r0, r6
 800ec98:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800ec9c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ec9e:	9506      	str	r5, [sp, #24]
 800eca0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800eca2:	9105      	str	r1, [sp, #20]
 800eca4:	4639      	mov	r1, r7
 800eca6:	1905      	adds	r5, r0, r4
 800eca8:	3108      	adds	r1, #8
 800ecaa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800ecac:	9507      	str	r5, [sp, #28]
 800ecae:	910f      	str	r1, [sp, #60]	; 0x3c
 800ecb0:	ea4f 1509 	mov.w	r5, r9, lsl #4
 800ecb4:	2101      	movs	r1, #1
 800ecb6:	eb00 0e06 	add.w	lr, r0, r6
 800ecba:	9518      	str	r5, [sp, #96]	; 0x60
 800ecbc:	9404      	str	r4, [sp, #16]
 800ecbe:	9103      	str	r1, [sp, #12]
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	4689      	mov	r9, r1
 800ecc4:	9e06      	ldr	r6, [sp, #24]
 800ecc6:	ed90 fa00 	vldr	s30, [r0]
 800ecca:	edd6 7a01 	vldr	s15, [r6, #4]
 800ecce:	edd0 ba01 	vldr	s23, [r0, #4]
 800ecd2:	edcd 7a00 	vstr	s15, [sp]
 800ecd6:	a80d      	add	r0, sp, #52	; 0x34
 800ecd8:	edde 7a01 	vldr	s15, [lr, #4]
 800ecdc:	9c05      	ldr	r4, [sp, #20]
 800ecde:	9d07      	ldr	r5, [sp, #28]
 800ece0:	edd2 fa00 	vldr	s31, [r2]
 800ece4:	ed92 ca01 	vldr	s24, [r2, #4]
 800ece8:	edcd 7a01 	vstr	s15, [sp, #4]
 800ecec:	c807      	ldmia	r0, {r0, r1, r2}
 800ecee:	eddc 7a01 	vldr	s15, [ip, #4]
 800ecf2:	edd4 ea00 	vldr	s29, [r4]
 800ecf6:	ed95 ea00 	vldr	s28, [r5]
 800ecfa:	edd6 da00 	vldr	s27, [r6]
 800ecfe:	edd4 aa01 	vldr	s21, [r4, #4]
 800ed02:	ed95 aa01 	vldr	s20, [r5, #4]
 800ed06:	ed9e da00 	vldr	s26, [lr]
 800ed0a:	eddc ca00 	vldr	s25, [ip]
 800ed0e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ed14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ed16:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ed18:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ed1a:	edcd 7a02 	vstr	s15, [sp, #8]
 800ed1e:	e001      	b.n	800ed24 <arm_radix8_butterfly_f32+0x328>
 800ed20:	3f3504f3 	.word	0x3f3504f3
 800ed24:	ed16 6a01 	vldr	s12, [r6, #-4]
 800ed28:	ed91 5a00 	vldr	s10, [r1]
 800ed2c:	ed57 9a01 	vldr	s19, [r7, #-4]
 800ed30:	edd5 7a00 	vldr	s15, [r5]
 800ed34:	ed18 7a01 	vldr	s14, [r8, #-4]
 800ed38:	edd2 3a00 	vldr	s7, [r2]
 800ed3c:	ed94 3a00 	vldr	s6, [r4]
 800ed40:	ed90 2a00 	vldr	s4, [r0]
 800ed44:	ed92 0a01 	vldr	s0, [r2, #4]
 800ed48:	ee33 8a85 	vadd.f32	s16, s7, s10
 800ed4c:	ee32 1a06 	vadd.f32	s2, s4, s12
 800ed50:	ee33 4a29 	vadd.f32	s8, s6, s19
 800ed54:	ee77 4a87 	vadd.f32	s9, s15, s14
 800ed58:	ee78 1a04 	vadd.f32	s3, s16, s8
 800ed5c:	ee71 6a24 	vadd.f32	s13, s2, s9
 800ed60:	ee32 2a46 	vsub.f32	s4, s4, s12
 800ed64:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800ed68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed6c:	ed82 6a00 	vstr	s12, [r2]
 800ed70:	edd5 8a01 	vldr	s17, [r5, #4]
 800ed74:	ed90 9a01 	vldr	s18, [r0, #4]
 800ed78:	edd6 2a00 	vldr	s5, [r6]
 800ed7c:	ed98 7a00 	vldr	s14, [r8]
 800ed80:	edd4 0a01 	vldr	s1, [r4, #4]
 800ed84:	ed91 6a01 	vldr	s12, [r1, #4]
 800ed88:	edd7 5a00 	vldr	s11, [r7]
 800ed8c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800ed90:	ee33 3a69 	vsub.f32	s6, s6, s19
 800ed94:	ee39 5a62 	vsub.f32	s10, s18, s5
 800ed98:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800ed9c:	ee38 4a44 	vsub.f32	s8, s16, s8
 800eda0:	ee38 7a87 	vadd.f32	s14, s17, s14
 800eda4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800eda8:	ee79 2a22 	vadd.f32	s5, s18, s5
 800edac:	ee75 8a69 	vsub.f32	s17, s10, s19
 800edb0:	ee32 9a27 	vadd.f32	s18, s4, s15
 800edb4:	ee35 5a29 	vadd.f32	s10, s10, s19
 800edb8:	ee72 7a67 	vsub.f32	s15, s4, s15
 800edbc:	ee30 2a06 	vadd.f32	s4, s0, s12
 800edc0:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800edc4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800edc8:	ee32 9a08 	vadd.f32	s18, s4, s16
 800edcc:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800edd0:	ee32 2a48 	vsub.f32	s4, s4, s16
 800edd4:	ee71 4a64 	vsub.f32	s9, s2, s9
 800edd8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800eddc:	ee32 1a87 	vadd.f32	s2, s5, s14
 800ede0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800ede4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800ede8:	ee30 6a46 	vsub.f32	s12, s0, s12
 800edec:	ee73 0a29 	vadd.f32	s1, s6, s19
 800edf0:	ee36 0a28 	vadd.f32	s0, s12, s17
 800edf4:	ee33 3a69 	vsub.f32	s6, s6, s19
 800edf8:	ee32 7a64 	vsub.f32	s14, s4, s9
 800edfc:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800ee00:	ee36 6a68 	vsub.f32	s12, s12, s17
 800ee04:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800ee08:	ee75 8a85 	vadd.f32	s17, s11, s10
 800ee0c:	ee74 3a22 	vadd.f32	s7, s8, s5
 800ee10:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800ee14:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800ee18:	ee79 1a41 	vsub.f32	s3, s18, s2
 800ee1c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800ee20:	ee76 5a43 	vsub.f32	s11, s12, s6
 800ee24:	ee74 2a62 	vsub.f32	s5, s8, s5
 800ee28:	ee74 4a82 	vadd.f32	s9, s9, s4
 800ee2c:	ee30 4a60 	vsub.f32	s8, s0, s1
 800ee30:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800ee34:	ee30 0a80 	vadd.f32	s0, s1, s0
 800ee38:	ee77 9a85 	vadd.f32	s19, s15, s10
 800ee3c:	ee33 6a06 	vadd.f32	s12, s6, s12
 800ee40:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ee44:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800ee48:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800ee4c:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800ee50:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800ee54:	ee39 1a01 	vadd.f32	s2, s18, s2
 800ee58:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800ee5c:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800ee60:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800ee64:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800ee68:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800ee6c:	ee35 3a03 	vadd.f32	s6, s10, s6
 800ee70:	ee72 6a66 	vsub.f32	s13, s4, s13
 800ee74:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800ee78:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800ee7c:	ed9d 4a02 	vldr	s8, [sp, #8]
 800ee80:	ed82 1a01 	vstr	s2, [r2, #4]
 800ee84:	ee77 3a63 	vsub.f32	s7, s14, s7
 800ee88:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800ee8c:	ed9d 7a01 	vldr	s14, [sp, #4]
 800ee90:	ed81 3a00 	vstr	s6, [r1]
 800ee94:	ee30 9a89 	vadd.f32	s18, s1, s18
 800ee98:	ee32 2a05 	vadd.f32	s4, s4, s10
 800ee9c:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800eea0:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800eea4:	ee67 2a22 	vmul.f32	s5, s14, s5
 800eea8:	ee64 1a00 	vmul.f32	s3, s8, s0
 800eeac:	ee27 7a24 	vmul.f32	s14, s14, s9
 800eeb0:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800eeb4:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800eeb8:	ee64 8a28 	vmul.f32	s17, s8, s17
 800eebc:	ed9d 4a00 	vldr	s8, [sp]
 800eec0:	edc1 6a01 	vstr	s13, [r1, #4]
 800eec4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800eec8:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800eecc:	ee64 9a29 	vmul.f32	s19, s8, s19
 800eed0:	ee24 4a25 	vmul.f32	s8, s8, s11
 800eed4:	ee30 7a87 	vadd.f32	s14, s1, s14
 800eed8:	ee74 4a84 	vadd.f32	s9, s9, s8
 800eedc:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800eee0:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800eee4:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800eee8:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800eeec:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800eef0:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800eef4:	ee75 1a21 	vadd.f32	s3, s10, s3
 800eef8:	ee30 0a68 	vsub.f32	s0, s0, s17
 800eefc:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800ef00:	ee70 0a84 	vadd.f32	s1, s1, s8
 800ef04:	ee36 6a67 	vsub.f32	s12, s12, s15
 800ef08:	44d9      	add	r9, fp
 800ef0a:	45ca      	cmp	sl, r9
 800ef0c:	ed84 9a00 	vstr	s18, [r4]
 800ef10:	edc4 3a01 	vstr	s7, [r4, #4]
 800ef14:	441a      	add	r2, r3
 800ef16:	ed07 7a01 	vstr	s14, [r7, #-4]
 800ef1a:	edc7 2a00 	vstr	s5, [r7]
 800ef1e:	4419      	add	r1, r3
 800ef20:	ed80 2a00 	vstr	s4, [r0]
 800ef24:	ed80 8a01 	vstr	s16, [r0, #4]
 800ef28:	441c      	add	r4, r3
 800ef2a:	ed48 1a01 	vstr	s3, [r8, #-4]
 800ef2e:	ed88 0a00 	vstr	s0, [r8]
 800ef32:	441f      	add	r7, r3
 800ef34:	ed46 4a01 	vstr	s9, [r6, #-4]
 800ef38:	4418      	add	r0, r3
 800ef3a:	edc6 9a00 	vstr	s19, [r6]
 800ef3e:	4498      	add	r8, r3
 800ef40:	edc5 0a00 	vstr	s1, [r5]
 800ef44:	ed85 6a01 	vstr	s12, [r5, #4]
 800ef48:	441e      	add	r6, r3
 800ef4a:	441d      	add	r5, r3
 800ef4c:	f63f aeea 	bhi.w	800ed24 <arm_radix8_butterfly_f32+0x328>
 800ef50:	9a03      	ldr	r2, [sp, #12]
 800ef52:	9818      	ldr	r0, [sp, #96]	; 0x60
 800ef54:	3201      	adds	r2, #1
 800ef56:	4611      	mov	r1, r2
 800ef58:	9203      	str	r2, [sp, #12]
 800ef5a:	9a04      	ldr	r2, [sp, #16]
 800ef5c:	4402      	add	r2, r0
 800ef5e:	9204      	str	r2, [sp, #16]
 800ef60:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800ef62:	9a05      	ldr	r2, [sp, #20]
 800ef64:	4402      	add	r2, r0
 800ef66:	9205      	str	r2, [sp, #20]
 800ef68:	9812      	ldr	r0, [sp, #72]	; 0x48
 800ef6a:	9a07      	ldr	r2, [sp, #28]
 800ef6c:	4402      	add	r2, r0
 800ef6e:	9207      	str	r2, [sp, #28]
 800ef70:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ef72:	9a06      	ldr	r2, [sp, #24]
 800ef74:	4402      	add	r2, r0
 800ef76:	9206      	str	r2, [sp, #24]
 800ef78:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ef7a:	4496      	add	lr, r2
 800ef7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ef7e:	4494      	add	ip, r2
 800ef80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef82:	3208      	adds	r2, #8
 800ef84:	920f      	str	r2, [sp, #60]	; 0x3c
 800ef86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef88:	3208      	adds	r2, #8
 800ef8a:	920e      	str	r2, [sp, #56]	; 0x38
 800ef8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ef8e:	3208      	adds	r2, #8
 800ef90:	920d      	str	r2, [sp, #52]	; 0x34
 800ef92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ef94:	3208      	adds	r2, #8
 800ef96:	920c      	str	r2, [sp, #48]	; 0x30
 800ef98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef9a:	3208      	adds	r2, #8
 800ef9c:	920b      	str	r2, [sp, #44]	; 0x2c
 800ef9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800efa0:	3208      	adds	r2, #8
 800efa2:	920a      	str	r2, [sp, #40]	; 0x28
 800efa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efa6:	3208      	adds	r2, #8
 800efa8:	9209      	str	r2, [sp, #36]	; 0x24
 800efaa:	9a08      	ldr	r2, [sp, #32]
 800efac:	3208      	adds	r2, #8
 800efae:	9208      	str	r2, [sp, #32]
 800efb0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800efb2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800efb4:	4288      	cmp	r0, r1
 800efb6:	4622      	mov	r2, r4
 800efb8:	d007      	beq.n	800efca <arm_radix8_butterfly_f32+0x5ce>
 800efba:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800efbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800efc0:	4621      	mov	r1, r4
 800efc2:	4401      	add	r1, r0
 800efc4:	9110      	str	r1, [sp, #64]	; 0x40
 800efc6:	9804      	ldr	r0, [sp, #16]
 800efc8:	e67c      	b.n	800ecc4 <arm_radix8_butterfly_f32+0x2c8>
 800efca:	4683      	mov	fp, r0
 800efcc:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 800efd0:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800efd2:	e524      	b.n	800ea1e <arm_radix8_butterfly_f32+0x22>
 800efd4:	b01d      	add	sp, #116	; 0x74
 800efd6:	ecbd 8b10 	vpop	{d8-d15}
 800efda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efde:	bf00      	nop

0800efe0 <__errno>:
 800efe0:	4b01      	ldr	r3, [pc, #4]	; (800efe8 <__errno+0x8>)
 800efe2:	6818      	ldr	r0, [r3, #0]
 800efe4:	4770      	bx	lr
 800efe6:	bf00      	nop
 800efe8:	20000074 	.word	0x20000074

0800efec <__libc_init_array>:
 800efec:	b570      	push	{r4, r5, r6, lr}
 800efee:	4d0d      	ldr	r5, [pc, #52]	; (800f024 <__libc_init_array+0x38>)
 800eff0:	4c0d      	ldr	r4, [pc, #52]	; (800f028 <__libc_init_array+0x3c>)
 800eff2:	1b64      	subs	r4, r4, r5
 800eff4:	10a4      	asrs	r4, r4, #2
 800eff6:	2600      	movs	r6, #0
 800eff8:	42a6      	cmp	r6, r4
 800effa:	d109      	bne.n	800f010 <__libc_init_array+0x24>
 800effc:	4d0b      	ldr	r5, [pc, #44]	; (800f02c <__libc_init_array+0x40>)
 800effe:	4c0c      	ldr	r4, [pc, #48]	; (800f030 <__libc_init_array+0x44>)
 800f000:	f000 facc 	bl	800f59c <_init>
 800f004:	1b64      	subs	r4, r4, r5
 800f006:	10a4      	asrs	r4, r4, #2
 800f008:	2600      	movs	r6, #0
 800f00a:	42a6      	cmp	r6, r4
 800f00c:	d105      	bne.n	800f01a <__libc_init_array+0x2e>
 800f00e:	bd70      	pop	{r4, r5, r6, pc}
 800f010:	f855 3b04 	ldr.w	r3, [r5], #4
 800f014:	4798      	blx	r3
 800f016:	3601      	adds	r6, #1
 800f018:	e7ee      	b.n	800eff8 <__libc_init_array+0xc>
 800f01a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f01e:	4798      	blx	r3
 800f020:	3601      	adds	r6, #1
 800f022:	e7f2      	b.n	800f00a <__libc_init_array+0x1e>
 800f024:	08094f10 	.word	0x08094f10
 800f028:	08094f10 	.word	0x08094f10
 800f02c:	08094f10 	.word	0x08094f10
 800f030:	08094f14 	.word	0x08094f14

0800f034 <malloc>:
 800f034:	4b02      	ldr	r3, [pc, #8]	; (800f040 <malloc+0xc>)
 800f036:	4601      	mov	r1, r0
 800f038:	6818      	ldr	r0, [r3, #0]
 800f03a:	f000 b87f 	b.w	800f13c <_malloc_r>
 800f03e:	bf00      	nop
 800f040:	20000074 	.word	0x20000074

0800f044 <free>:
 800f044:	4b02      	ldr	r3, [pc, #8]	; (800f050 <free+0xc>)
 800f046:	4601      	mov	r1, r0
 800f048:	6818      	ldr	r0, [r3, #0]
 800f04a:	f000 b80b 	b.w	800f064 <_free_r>
 800f04e:	bf00      	nop
 800f050:	20000074 	.word	0x20000074

0800f054 <memset>:
 800f054:	4402      	add	r2, r0
 800f056:	4603      	mov	r3, r0
 800f058:	4293      	cmp	r3, r2
 800f05a:	d100      	bne.n	800f05e <memset+0xa>
 800f05c:	4770      	bx	lr
 800f05e:	f803 1b01 	strb.w	r1, [r3], #1
 800f062:	e7f9      	b.n	800f058 <memset+0x4>

0800f064 <_free_r>:
 800f064:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f066:	2900      	cmp	r1, #0
 800f068:	d044      	beq.n	800f0f4 <_free_r+0x90>
 800f06a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f06e:	9001      	str	r0, [sp, #4]
 800f070:	2b00      	cmp	r3, #0
 800f072:	f1a1 0404 	sub.w	r4, r1, #4
 800f076:	bfb8      	it	lt
 800f078:	18e4      	addlt	r4, r4, r3
 800f07a:	f000 f8e3 	bl	800f244 <__malloc_lock>
 800f07e:	4a1e      	ldr	r2, [pc, #120]	; (800f0f8 <_free_r+0x94>)
 800f080:	9801      	ldr	r0, [sp, #4]
 800f082:	6813      	ldr	r3, [r2, #0]
 800f084:	b933      	cbnz	r3, 800f094 <_free_r+0x30>
 800f086:	6063      	str	r3, [r4, #4]
 800f088:	6014      	str	r4, [r2, #0]
 800f08a:	b003      	add	sp, #12
 800f08c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f090:	f000 b8de 	b.w	800f250 <__malloc_unlock>
 800f094:	42a3      	cmp	r3, r4
 800f096:	d908      	bls.n	800f0aa <_free_r+0x46>
 800f098:	6825      	ldr	r5, [r4, #0]
 800f09a:	1961      	adds	r1, r4, r5
 800f09c:	428b      	cmp	r3, r1
 800f09e:	bf01      	itttt	eq
 800f0a0:	6819      	ldreq	r1, [r3, #0]
 800f0a2:	685b      	ldreq	r3, [r3, #4]
 800f0a4:	1949      	addeq	r1, r1, r5
 800f0a6:	6021      	streq	r1, [r4, #0]
 800f0a8:	e7ed      	b.n	800f086 <_free_r+0x22>
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	b10b      	cbz	r3, 800f0b4 <_free_r+0x50>
 800f0b0:	42a3      	cmp	r3, r4
 800f0b2:	d9fa      	bls.n	800f0aa <_free_r+0x46>
 800f0b4:	6811      	ldr	r1, [r2, #0]
 800f0b6:	1855      	adds	r5, r2, r1
 800f0b8:	42a5      	cmp	r5, r4
 800f0ba:	d10b      	bne.n	800f0d4 <_free_r+0x70>
 800f0bc:	6824      	ldr	r4, [r4, #0]
 800f0be:	4421      	add	r1, r4
 800f0c0:	1854      	adds	r4, r2, r1
 800f0c2:	42a3      	cmp	r3, r4
 800f0c4:	6011      	str	r1, [r2, #0]
 800f0c6:	d1e0      	bne.n	800f08a <_free_r+0x26>
 800f0c8:	681c      	ldr	r4, [r3, #0]
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	6053      	str	r3, [r2, #4]
 800f0ce:	4421      	add	r1, r4
 800f0d0:	6011      	str	r1, [r2, #0]
 800f0d2:	e7da      	b.n	800f08a <_free_r+0x26>
 800f0d4:	d902      	bls.n	800f0dc <_free_r+0x78>
 800f0d6:	230c      	movs	r3, #12
 800f0d8:	6003      	str	r3, [r0, #0]
 800f0da:	e7d6      	b.n	800f08a <_free_r+0x26>
 800f0dc:	6825      	ldr	r5, [r4, #0]
 800f0de:	1961      	adds	r1, r4, r5
 800f0e0:	428b      	cmp	r3, r1
 800f0e2:	bf04      	itt	eq
 800f0e4:	6819      	ldreq	r1, [r3, #0]
 800f0e6:	685b      	ldreq	r3, [r3, #4]
 800f0e8:	6063      	str	r3, [r4, #4]
 800f0ea:	bf04      	itt	eq
 800f0ec:	1949      	addeq	r1, r1, r5
 800f0ee:	6021      	streq	r1, [r4, #0]
 800f0f0:	6054      	str	r4, [r2, #4]
 800f0f2:	e7ca      	b.n	800f08a <_free_r+0x26>
 800f0f4:	b003      	add	sp, #12
 800f0f6:	bd30      	pop	{r4, r5, pc}
 800f0f8:	200088a8 	.word	0x200088a8

0800f0fc <sbrk_aligned>:
 800f0fc:	b570      	push	{r4, r5, r6, lr}
 800f0fe:	4e0e      	ldr	r6, [pc, #56]	; (800f138 <sbrk_aligned+0x3c>)
 800f100:	460c      	mov	r4, r1
 800f102:	6831      	ldr	r1, [r6, #0]
 800f104:	4605      	mov	r5, r0
 800f106:	b911      	cbnz	r1, 800f10e <sbrk_aligned+0x12>
 800f108:	f000 f88c 	bl	800f224 <_sbrk_r>
 800f10c:	6030      	str	r0, [r6, #0]
 800f10e:	4621      	mov	r1, r4
 800f110:	4628      	mov	r0, r5
 800f112:	f000 f887 	bl	800f224 <_sbrk_r>
 800f116:	1c43      	adds	r3, r0, #1
 800f118:	d00a      	beq.n	800f130 <sbrk_aligned+0x34>
 800f11a:	1cc4      	adds	r4, r0, #3
 800f11c:	f024 0403 	bic.w	r4, r4, #3
 800f120:	42a0      	cmp	r0, r4
 800f122:	d007      	beq.n	800f134 <sbrk_aligned+0x38>
 800f124:	1a21      	subs	r1, r4, r0
 800f126:	4628      	mov	r0, r5
 800f128:	f000 f87c 	bl	800f224 <_sbrk_r>
 800f12c:	3001      	adds	r0, #1
 800f12e:	d101      	bne.n	800f134 <sbrk_aligned+0x38>
 800f130:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f134:	4620      	mov	r0, r4
 800f136:	bd70      	pop	{r4, r5, r6, pc}
 800f138:	200088ac 	.word	0x200088ac

0800f13c <_malloc_r>:
 800f13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f140:	1ccd      	adds	r5, r1, #3
 800f142:	f025 0503 	bic.w	r5, r5, #3
 800f146:	3508      	adds	r5, #8
 800f148:	2d0c      	cmp	r5, #12
 800f14a:	bf38      	it	cc
 800f14c:	250c      	movcc	r5, #12
 800f14e:	2d00      	cmp	r5, #0
 800f150:	4607      	mov	r7, r0
 800f152:	db01      	blt.n	800f158 <_malloc_r+0x1c>
 800f154:	42a9      	cmp	r1, r5
 800f156:	d905      	bls.n	800f164 <_malloc_r+0x28>
 800f158:	230c      	movs	r3, #12
 800f15a:	603b      	str	r3, [r7, #0]
 800f15c:	2600      	movs	r6, #0
 800f15e:	4630      	mov	r0, r6
 800f160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f164:	4e2e      	ldr	r6, [pc, #184]	; (800f220 <_malloc_r+0xe4>)
 800f166:	f000 f86d 	bl	800f244 <__malloc_lock>
 800f16a:	6833      	ldr	r3, [r6, #0]
 800f16c:	461c      	mov	r4, r3
 800f16e:	bb34      	cbnz	r4, 800f1be <_malloc_r+0x82>
 800f170:	4629      	mov	r1, r5
 800f172:	4638      	mov	r0, r7
 800f174:	f7ff ffc2 	bl	800f0fc <sbrk_aligned>
 800f178:	1c43      	adds	r3, r0, #1
 800f17a:	4604      	mov	r4, r0
 800f17c:	d14d      	bne.n	800f21a <_malloc_r+0xde>
 800f17e:	6834      	ldr	r4, [r6, #0]
 800f180:	4626      	mov	r6, r4
 800f182:	2e00      	cmp	r6, #0
 800f184:	d140      	bne.n	800f208 <_malloc_r+0xcc>
 800f186:	6823      	ldr	r3, [r4, #0]
 800f188:	4631      	mov	r1, r6
 800f18a:	4638      	mov	r0, r7
 800f18c:	eb04 0803 	add.w	r8, r4, r3
 800f190:	f000 f848 	bl	800f224 <_sbrk_r>
 800f194:	4580      	cmp	r8, r0
 800f196:	d13a      	bne.n	800f20e <_malloc_r+0xd2>
 800f198:	6821      	ldr	r1, [r4, #0]
 800f19a:	3503      	adds	r5, #3
 800f19c:	1a6d      	subs	r5, r5, r1
 800f19e:	f025 0503 	bic.w	r5, r5, #3
 800f1a2:	3508      	adds	r5, #8
 800f1a4:	2d0c      	cmp	r5, #12
 800f1a6:	bf38      	it	cc
 800f1a8:	250c      	movcc	r5, #12
 800f1aa:	4629      	mov	r1, r5
 800f1ac:	4638      	mov	r0, r7
 800f1ae:	f7ff ffa5 	bl	800f0fc <sbrk_aligned>
 800f1b2:	3001      	adds	r0, #1
 800f1b4:	d02b      	beq.n	800f20e <_malloc_r+0xd2>
 800f1b6:	6823      	ldr	r3, [r4, #0]
 800f1b8:	442b      	add	r3, r5
 800f1ba:	6023      	str	r3, [r4, #0]
 800f1bc:	e00e      	b.n	800f1dc <_malloc_r+0xa0>
 800f1be:	6822      	ldr	r2, [r4, #0]
 800f1c0:	1b52      	subs	r2, r2, r5
 800f1c2:	d41e      	bmi.n	800f202 <_malloc_r+0xc6>
 800f1c4:	2a0b      	cmp	r2, #11
 800f1c6:	d916      	bls.n	800f1f6 <_malloc_r+0xba>
 800f1c8:	1961      	adds	r1, r4, r5
 800f1ca:	42a3      	cmp	r3, r4
 800f1cc:	6025      	str	r5, [r4, #0]
 800f1ce:	bf18      	it	ne
 800f1d0:	6059      	strne	r1, [r3, #4]
 800f1d2:	6863      	ldr	r3, [r4, #4]
 800f1d4:	bf08      	it	eq
 800f1d6:	6031      	streq	r1, [r6, #0]
 800f1d8:	5162      	str	r2, [r4, r5]
 800f1da:	604b      	str	r3, [r1, #4]
 800f1dc:	4638      	mov	r0, r7
 800f1de:	f104 060b 	add.w	r6, r4, #11
 800f1e2:	f000 f835 	bl	800f250 <__malloc_unlock>
 800f1e6:	f026 0607 	bic.w	r6, r6, #7
 800f1ea:	1d23      	adds	r3, r4, #4
 800f1ec:	1af2      	subs	r2, r6, r3
 800f1ee:	d0b6      	beq.n	800f15e <_malloc_r+0x22>
 800f1f0:	1b9b      	subs	r3, r3, r6
 800f1f2:	50a3      	str	r3, [r4, r2]
 800f1f4:	e7b3      	b.n	800f15e <_malloc_r+0x22>
 800f1f6:	6862      	ldr	r2, [r4, #4]
 800f1f8:	42a3      	cmp	r3, r4
 800f1fa:	bf0c      	ite	eq
 800f1fc:	6032      	streq	r2, [r6, #0]
 800f1fe:	605a      	strne	r2, [r3, #4]
 800f200:	e7ec      	b.n	800f1dc <_malloc_r+0xa0>
 800f202:	4623      	mov	r3, r4
 800f204:	6864      	ldr	r4, [r4, #4]
 800f206:	e7b2      	b.n	800f16e <_malloc_r+0x32>
 800f208:	4634      	mov	r4, r6
 800f20a:	6876      	ldr	r6, [r6, #4]
 800f20c:	e7b9      	b.n	800f182 <_malloc_r+0x46>
 800f20e:	230c      	movs	r3, #12
 800f210:	603b      	str	r3, [r7, #0]
 800f212:	4638      	mov	r0, r7
 800f214:	f000 f81c 	bl	800f250 <__malloc_unlock>
 800f218:	e7a1      	b.n	800f15e <_malloc_r+0x22>
 800f21a:	6025      	str	r5, [r4, #0]
 800f21c:	e7de      	b.n	800f1dc <_malloc_r+0xa0>
 800f21e:	bf00      	nop
 800f220:	200088a8 	.word	0x200088a8

0800f224 <_sbrk_r>:
 800f224:	b538      	push	{r3, r4, r5, lr}
 800f226:	4d06      	ldr	r5, [pc, #24]	; (800f240 <_sbrk_r+0x1c>)
 800f228:	2300      	movs	r3, #0
 800f22a:	4604      	mov	r4, r0
 800f22c:	4608      	mov	r0, r1
 800f22e:	602b      	str	r3, [r5, #0]
 800f230:	f7f3 ff90 	bl	8003154 <_sbrk>
 800f234:	1c43      	adds	r3, r0, #1
 800f236:	d102      	bne.n	800f23e <_sbrk_r+0x1a>
 800f238:	682b      	ldr	r3, [r5, #0]
 800f23a:	b103      	cbz	r3, 800f23e <_sbrk_r+0x1a>
 800f23c:	6023      	str	r3, [r4, #0]
 800f23e:	bd38      	pop	{r3, r4, r5, pc}
 800f240:	200088b0 	.word	0x200088b0

0800f244 <__malloc_lock>:
 800f244:	4801      	ldr	r0, [pc, #4]	; (800f24c <__malloc_lock+0x8>)
 800f246:	f000 b809 	b.w	800f25c <__retarget_lock_acquire_recursive>
 800f24a:	bf00      	nop
 800f24c:	200088b4 	.word	0x200088b4

0800f250 <__malloc_unlock>:
 800f250:	4801      	ldr	r0, [pc, #4]	; (800f258 <__malloc_unlock+0x8>)
 800f252:	f000 b804 	b.w	800f25e <__retarget_lock_release_recursive>
 800f256:	bf00      	nop
 800f258:	200088b4 	.word	0x200088b4

0800f25c <__retarget_lock_acquire_recursive>:
 800f25c:	4770      	bx	lr

0800f25e <__retarget_lock_release_recursive>:
 800f25e:	4770      	bx	lr

0800f260 <log10f>:
 800f260:	b508      	push	{r3, lr}
 800f262:	ed2d 8b02 	vpush	{d8}
 800f266:	eeb0 8a40 	vmov.f32	s16, s0
 800f26a:	f000 f845 	bl	800f2f8 <__ieee754_log10f>
 800f26e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f276:	d60f      	bvs.n	800f298 <log10f+0x38>
 800f278:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f280:	d80a      	bhi.n	800f298 <log10f+0x38>
 800f282:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f28a:	d108      	bne.n	800f29e <log10f+0x3e>
 800f28c:	f7ff fea8 	bl	800efe0 <__errno>
 800f290:	2322      	movs	r3, #34	; 0x22
 800f292:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800f2b4 <log10f+0x54>
 800f296:	6003      	str	r3, [r0, #0]
 800f298:	ecbd 8b02 	vpop	{d8}
 800f29c:	bd08      	pop	{r3, pc}
 800f29e:	f7ff fe9f 	bl	800efe0 <__errno>
 800f2a2:	ecbd 8b02 	vpop	{d8}
 800f2a6:	2321      	movs	r3, #33	; 0x21
 800f2a8:	6003      	str	r3, [r0, #0]
 800f2aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f2ae:	4802      	ldr	r0, [pc, #8]	; (800f2b8 <log10f+0x58>)
 800f2b0:	f000 b87e 	b.w	800f3b0 <nanf>
 800f2b4:	ff800000 	.word	0xff800000
 800f2b8:	08094f04 	.word	0x08094f04

0800f2bc <sqrtf>:
 800f2bc:	b508      	push	{r3, lr}
 800f2be:	ed2d 8b02 	vpush	{d8}
 800f2c2:	eeb0 8a40 	vmov.f32	s16, s0
 800f2c6:	f000 f86f 	bl	800f3a8 <__ieee754_sqrtf>
 800f2ca:	eeb4 8a48 	vcmp.f32	s16, s16
 800f2ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d2:	d60c      	bvs.n	800f2ee <sqrtf+0x32>
 800f2d4:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f2f4 <sqrtf+0x38>
 800f2d8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2e0:	d505      	bpl.n	800f2ee <sqrtf+0x32>
 800f2e2:	f7ff fe7d 	bl	800efe0 <__errno>
 800f2e6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f2ea:	2321      	movs	r3, #33	; 0x21
 800f2ec:	6003      	str	r3, [r0, #0]
 800f2ee:	ecbd 8b02 	vpop	{d8}
 800f2f2:	bd08      	pop	{r3, pc}
 800f2f4:	00000000 	.word	0x00000000

0800f2f8 <__ieee754_log10f>:
 800f2f8:	b508      	push	{r3, lr}
 800f2fa:	ee10 2a10 	vmov	r2, s0
 800f2fe:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800f302:	ed2d 8b02 	vpush	{d8}
 800f306:	d108      	bne.n	800f31a <__ieee754_log10f+0x22>
 800f308:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800f390 <__ieee754_log10f+0x98>
 800f30c:	eddf 7a21 	vldr	s15, [pc, #132]	; 800f394 <__ieee754_log10f+0x9c>
 800f310:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f314:	ecbd 8b02 	vpop	{d8}
 800f318:	bd08      	pop	{r3, pc}
 800f31a:	2a00      	cmp	r2, #0
 800f31c:	da02      	bge.n	800f324 <__ieee754_log10f+0x2c>
 800f31e:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f322:	e7f3      	b.n	800f30c <__ieee754_log10f+0x14>
 800f324:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f328:	db02      	blt.n	800f330 <__ieee754_log10f+0x38>
 800f32a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f32e:	e7f1      	b.n	800f314 <__ieee754_log10f+0x1c>
 800f330:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800f334:	bfbf      	itttt	lt
 800f336:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800f398 <__ieee754_log10f+0xa0>
 800f33a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f33e:	f06f 0118 	mvnlt.w	r1, #24
 800f342:	ee17 2a90 	vmovlt	r2, s15
 800f346:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800f34a:	bfa8      	it	ge
 800f34c:	2100      	movge	r1, #0
 800f34e:	3b7f      	subs	r3, #127	; 0x7f
 800f350:	440b      	add	r3, r1
 800f352:	0fd9      	lsrs	r1, r3, #31
 800f354:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800f358:	ee07 3a90 	vmov	s15, r3
 800f35c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800f360:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800f364:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f368:	ee00 3a10 	vmov	s0, r3
 800f36c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800f370:	f000 f824 	bl	800f3bc <__ieee754_logf>
 800f374:	eddf 7a09 	vldr	s15, [pc, #36]	; 800f39c <__ieee754_log10f+0xa4>
 800f378:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f37c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800f3a0 <__ieee754_log10f+0xa8>
 800f380:	eea8 0a27 	vfma.f32	s0, s16, s15
 800f384:	eddf 7a07 	vldr	s15, [pc, #28]	; 800f3a4 <__ieee754_log10f+0xac>
 800f388:	eea8 0a27 	vfma.f32	s0, s16, s15
 800f38c:	e7c2      	b.n	800f314 <__ieee754_log10f+0x1c>
 800f38e:	bf00      	nop
 800f390:	cc000000 	.word	0xcc000000
 800f394:	00000000 	.word	0x00000000
 800f398:	4c000000 	.word	0x4c000000
 800f39c:	3ede5bd9 	.word	0x3ede5bd9
 800f3a0:	355427db 	.word	0x355427db
 800f3a4:	3e9a2080 	.word	0x3e9a2080

0800f3a8 <__ieee754_sqrtf>:
 800f3a8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f3ac:	4770      	bx	lr
	...

0800f3b0 <nanf>:
 800f3b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f3b8 <nanf+0x8>
 800f3b4:	4770      	bx	lr
 800f3b6:	bf00      	nop
 800f3b8:	7fc00000 	.word	0x7fc00000

0800f3bc <__ieee754_logf>:
 800f3bc:	ee10 3a10 	vmov	r3, s0
 800f3c0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800f3c4:	d106      	bne.n	800f3d4 <__ieee754_logf+0x18>
 800f3c6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800f55c <__ieee754_logf+0x1a0>
 800f3ca:	eddf 7a65 	vldr	s15, [pc, #404]	; 800f560 <__ieee754_logf+0x1a4>
 800f3ce:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f3d2:	4770      	bx	lr
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	da02      	bge.n	800f3de <__ieee754_logf+0x22>
 800f3d8:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f3dc:	e7f5      	b.n	800f3ca <__ieee754_logf+0xe>
 800f3de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f3e2:	db02      	blt.n	800f3ea <__ieee754_logf+0x2e>
 800f3e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f3e8:	4770      	bx	lr
 800f3ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f3ee:	bfb8      	it	lt
 800f3f0:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800f564 <__ieee754_logf+0x1a8>
 800f3f4:	485c      	ldr	r0, [pc, #368]	; (800f568 <__ieee754_logf+0x1ac>)
 800f3f6:	bfbe      	ittt	lt
 800f3f8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f3fc:	f06f 0118 	mvnlt.w	r1, #24
 800f400:	ee17 3a90 	vmovlt	r3, s15
 800f404:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800f408:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f40c:	4418      	add	r0, r3
 800f40e:	bfa8      	it	ge
 800f410:	2100      	movge	r1, #0
 800f412:	3a7f      	subs	r2, #127	; 0x7f
 800f414:	440a      	add	r2, r1
 800f416:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800f41a:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800f41e:	4319      	orrs	r1, r3
 800f420:	ee00 1a10 	vmov	s0, r1
 800f424:	4951      	ldr	r1, [pc, #324]	; (800f56c <__ieee754_logf+0x1b0>)
 800f426:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800f42a:	f103 000f 	add.w	r0, r3, #15
 800f42e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f432:	4001      	ands	r1, r0
 800f434:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f438:	bb89      	cbnz	r1, 800f49e <__ieee754_logf+0xe2>
 800f43a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f442:	d10f      	bne.n	800f464 <__ieee754_logf+0xa8>
 800f444:	2a00      	cmp	r2, #0
 800f446:	f000 8085 	beq.w	800f554 <__ieee754_logf+0x198>
 800f44a:	ee07 2a90 	vmov	s15, r2
 800f44e:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800f570 <__ieee754_logf+0x1b4>
 800f452:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f574 <__ieee754_logf+0x1b8>
 800f456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f45a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f45e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800f462:	4770      	bx	lr
 800f464:	eddf 6a44 	vldr	s13, [pc, #272]	; 800f578 <__ieee754_logf+0x1bc>
 800f468:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f46c:	eee0 7a66 	vfms.f32	s15, s0, s13
 800f470:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f474:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f478:	b912      	cbnz	r2, 800f480 <__ieee754_logf+0xc4>
 800f47a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f47e:	4770      	bx	lr
 800f480:	ee07 2a90 	vmov	s15, r2
 800f484:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800f570 <__ieee754_logf+0x1b4>
 800f488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f48c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800f490:	ee37 0a40 	vsub.f32	s0, s14, s0
 800f494:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800f574 <__ieee754_logf+0x1b8>
 800f498:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800f49c:	4770      	bx	lr
 800f49e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f4a2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f4a6:	eddf 5a35 	vldr	s11, [pc, #212]	; 800f57c <__ieee754_logf+0x1c0>
 800f4aa:	eddf 4a35 	vldr	s9, [pc, #212]	; 800f580 <__ieee754_logf+0x1c4>
 800f4ae:	4935      	ldr	r1, [pc, #212]	; (800f584 <__ieee754_logf+0x1c8>)
 800f4b0:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800f4b4:	4419      	add	r1, r3
 800f4b6:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800f4ba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f4be:	430b      	orrs	r3, r1
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	ee07 2a90 	vmov	s15, r2
 800f4c6:	ee26 5a06 	vmul.f32	s10, s12, s12
 800f4ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f4ce:	ee25 7a05 	vmul.f32	s14, s10, s10
 800f4d2:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800f588 <__ieee754_logf+0x1cc>
 800f4d6:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f4da:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800f58c <__ieee754_logf+0x1d0>
 800f4de:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f4e2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800f590 <__ieee754_logf+0x1d4>
 800f4e6:	eee7 7a24 	vfma.f32	s15, s14, s9
 800f4ea:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800f594 <__ieee754_logf+0x1d8>
 800f4ee:	eee7 4a87 	vfma.f32	s9, s15, s14
 800f4f2:	eddf 7a29 	vldr	s15, [pc, #164]	; 800f598 <__ieee754_logf+0x1dc>
 800f4f6:	eee4 7a87 	vfma.f32	s15, s9, s14
 800f4fa:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f4fe:	eee5 7a87 	vfma.f32	s15, s11, s14
 800f502:	dd1c      	ble.n	800f53e <__ieee754_logf+0x182>
 800f504:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f508:	ee20 7a07 	vmul.f32	s14, s0, s14
 800f50c:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f510:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f514:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f518:	b922      	cbnz	r2, 800f524 <__ieee754_logf+0x168>
 800f51a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f51e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f522:	4770      	bx	lr
 800f524:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800f570 <__ieee754_logf+0x1b4>
 800f528:	eee6 7a86 	vfma.f32	s15, s13, s12
 800f52c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f530:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800f534:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800f574 <__ieee754_logf+0x1b8>
 800f538:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800f53c:	4770      	bx	lr
 800f53e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f542:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f546:	2a00      	cmp	r2, #0
 800f548:	d0e9      	beq.n	800f51e <__ieee754_logf+0x162>
 800f54a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800f570 <__ieee754_logf+0x1b4>
 800f54e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800f552:	e7ed      	b.n	800f530 <__ieee754_logf+0x174>
 800f554:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800f560 <__ieee754_logf+0x1a4>
 800f558:	4770      	bx	lr
 800f55a:	bf00      	nop
 800f55c:	cc000000 	.word	0xcc000000
 800f560:	00000000 	.word	0x00000000
 800f564:	4c000000 	.word	0x4c000000
 800f568:	004afb20 	.word	0x004afb20
 800f56c:	007ffff0 	.word	0x007ffff0
 800f570:	3717f7d1 	.word	0x3717f7d1
 800f574:	3f317180 	.word	0x3f317180
 800f578:	3eaaaaab 	.word	0x3eaaaaab
 800f57c:	3e1cd04f 	.word	0x3e1cd04f
 800f580:	3e178897 	.word	0x3e178897
 800f584:	ffcf5c30 	.word	0xffcf5c30
 800f588:	3e638e29 	.word	0x3e638e29
 800f58c:	3ecccccd 	.word	0x3ecccccd
 800f590:	3e3a3325 	.word	0x3e3a3325
 800f594:	3e924925 	.word	0x3e924925
 800f598:	3f2aaaab 	.word	0x3f2aaaab

0800f59c <_init>:
 800f59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f59e:	bf00      	nop
 800f5a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5a2:	bc08      	pop	{r3}
 800f5a4:	469e      	mov	lr, r3
 800f5a6:	4770      	bx	lr

0800f5a8 <_fini>:
 800f5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5aa:	bf00      	nop
 800f5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5ae:	bc08      	pop	{r3}
 800f5b0:	469e      	mov	lr, r3
 800f5b2:	4770      	bx	lr
