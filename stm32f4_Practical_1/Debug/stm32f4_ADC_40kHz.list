
stm32f4_ADC_40kHz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107a4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00072530  08010958  08010958  00020958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08082e88  08082e88  000a00d8  2**0
                  CONTENTS
  4 .ARM          00000008  08082e88  08082e88  00092e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08082e90  08082e90  000a00d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08082e90  08082e90  00092e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08082e94  08082e94  00092e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08082e98  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000a00d8  2**0
                  CONTENTS
 10 .bss          000046e8  200000d8  200000d8  000a00d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200047c0  200047c0  000a00d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000a00d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bdbe  00000000  00000000  000a0108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005956  00000000  00000000  000cbec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002238  00000000  00000000  000d1820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002008  00000000  00000000  000d3a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cf04  00000000  00000000  000d5a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b518  00000000  00000000  00102964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc1c1  00000000  00000000  0012de7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0022a03d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009a34  00000000  00000000  0022a090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801093c 	.word	0x0801093c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000dc 	.word	0x200000dc
 80001ec:	0801093c 	.word	0x0801093c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_d2f>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b20:	bf24      	itt	cs
 8000b22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2a:	d90d      	bls.n	8000b48 <__aeabi_d2f+0x30>
 8000b2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b40:	bf08      	it	eq
 8000b42:	f020 0001 	biceq.w	r0, r0, #1
 8000b46:	4770      	bx	lr
 8000b48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b4c:	d121      	bne.n	8000b92 <__aeabi_d2f+0x7a>
 8000b4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b52:	bfbc      	itt	lt
 8000b54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	4770      	bxlt	lr
 8000b5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b62:	f1c2 0218 	rsb	r2, r2, #24
 8000b66:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b72:	bf18      	it	ne
 8000b74:	f040 0001 	orrne.w	r0, r0, #1
 8000b78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b84:	ea40 000c 	orr.w	r0, r0, ip
 8000b88:	fa23 f302 	lsr.w	r3, r3, r2
 8000b8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b90:	e7cc      	b.n	8000b2c <__aeabi_d2f+0x14>
 8000b92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b96:	d107      	bne.n	8000ba8 <__aeabi_d2f+0x90>
 8000b98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b9c:	bf1e      	ittt	ne
 8000b9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba6:	4770      	bxne	lr
 8000ba8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 bad4 	b.w	8001178 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f966 	bl	8000ea8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__mulsc3>:
 8000be8:	ee60 6a01 	vmul.f32	s13, s0, s2
 8000bec:	ee20 6aa1 	vmul.f32	s12, s1, s3
 8000bf0:	ee20 5a21 	vmul.f32	s10, s0, s3
 8000bf4:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8000bf8:	ee61 5a20 	vmul.f32	s11, s2, s1
 8000bfc:	eef4 7a67 	vcmp.f32	s15, s15
 8000c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c04:	ee35 7a25 	vadd.f32	s14, s10, s11
 8000c08:	d604      	bvs.n	8000c14 <__mulsc3+0x2c>
 8000c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c0e:	eef0 0a47 	vmov.f32	s1, s14
 8000c12:	4770      	bx	lr
 8000c14:	eeb4 7a47 	vcmp.f32	s14, s14
 8000c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c1c:	d7f5      	bvc.n	8000c0a <__mulsc3+0x22>
 8000c1e:	eddf 4a9e 	vldr	s9, [pc, #632]	; 8000e98 <__mulsc3+0x2b0>
 8000c22:	eeb0 4ac0 	vabs.f32	s8, s0
 8000c26:	eeb4 4a64 	vcmp.f32	s8, s9
 8000c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c2e:	bfcc      	ite	gt
 8000c30:	2301      	movgt	r3, #1
 8000c32:	2300      	movle	r3, #0
 8000c34:	eeb0 4ae0 	vabs.f32	s8, s1
 8000c38:	f300 80a0 	bgt.w	8000d7c <__mulsc3+0x194>
 8000c3c:	eeb4 4a64 	vcmp.f32	s8, s9
 8000c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c44:	f300 809a 	bgt.w	8000d7c <__mulsc3+0x194>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	eddf 4a93 	vldr	s9, [pc, #588]	; 8000e98 <__mulsc3+0x2b0>
 8000c4e:	eeb0 4ac1 	vabs.f32	s8, s2
 8000c52:	eeb4 4a64 	vcmp.f32	s8, s9
 8000c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c5a:	eef0 3ae1 	vabs.f32	s7, s3
 8000c5e:	dc48      	bgt.n	8000cf2 <__mulsc3+0x10a>
 8000c60:	eef4 3a64 	vcmp.f32	s7, s9
 8000c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c68:	dc43      	bgt.n	8000cf2 <__mulsc3+0x10a>
 8000c6a:	bb9b      	cbnz	r3, 8000cd4 <__mulsc3+0xec>
 8000c6c:	eef0 6ae6 	vabs.f32	s13, s13
 8000c70:	eef4 6a64 	vcmp.f32	s13, s9
 8000c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c78:	dc14      	bgt.n	8000ca4 <__mulsc3+0xbc>
 8000c7a:	eeb0 6ac6 	vabs.f32	s12, s12
 8000c7e:	eeb4 6a64 	vcmp.f32	s12, s9
 8000c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c86:	dc0d      	bgt.n	8000ca4 <__mulsc3+0xbc>
 8000c88:	eeb0 5ac5 	vabs.f32	s10, s10
 8000c8c:	eeb4 5a64 	vcmp.f32	s10, s9
 8000c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c94:	dc06      	bgt.n	8000ca4 <__mulsc3+0xbc>
 8000c96:	eef0 5ae5 	vabs.f32	s11, s11
 8000c9a:	eef4 5a64 	vcmp.f32	s11, s9
 8000c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca2:	ddb2      	ble.n	8000c0a <__mulsc3+0x22>
 8000ca4:	eeb4 0a40 	vcmp.f32	s0, s0
 8000ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cac:	f180 80e7 	bvs.w	8000e7e <__mulsc3+0x296>
 8000cb0:	eef4 0a60 	vcmp.f32	s1, s1
 8000cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cb8:	f180 80d4 	bvs.w	8000e64 <__mulsc3+0x27c>
 8000cbc:	eeb4 1a41 	vcmp.f32	s2, s2
 8000cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cc4:	f180 80c1 	bvs.w	8000e4a <__mulsc3+0x262>
 8000cc8:	eef4 1a61 	vcmp.f32	s3, s3
 8000ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd0:	f180 80ae 	bvs.w	8000e30 <__mulsc3+0x248>
 8000cd4:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8000cd8:	ee60 0a81 	vmul.f32	s1, s1, s2
 8000cdc:	eee0 7a01 	vfma.f32	s15, s0, s2
 8000ce0:	eee0 0a21 	vfma.f32	s1, s0, s3
 8000ce4:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8000e9c <__mulsc3+0x2b4>
 8000ce8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cec:	ee20 7a87 	vmul.f32	s14, s1, s14
 8000cf0:	e78b      	b.n	8000c0a <__mulsc3+0x22>
 8000cf2:	eddf 7a69 	vldr	s15, [pc, #420]	; 8000e98 <__mulsc3+0x2b0>
 8000cf6:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8000e98 <__mulsc3+0x2b0>
 8000cfa:	eeb4 4a67 	vcmp.f32	s8, s15
 8000cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d02:	bfcc      	ite	gt
 8000d04:	2301      	movgt	r3, #1
 8000d06:	2300      	movle	r3, #0
 8000d08:	ee07 3a90 	vmov	s15, r3
 8000d0c:	ee11 3a10 	vmov	r3, s2
 8000d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	eef0 7ae7 	vabs.f32	s15, s15
 8000d1a:	eef4 3a47 	vcmp.f32	s7, s14
 8000d1e:	bfb8      	it	lt
 8000d20:	eef1 7a67 	vneglt.f32	s15, s15
 8000d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d28:	bfcc      	ite	gt
 8000d2a:	2301      	movgt	r3, #1
 8000d2c:	2300      	movle	r3, #0
 8000d2e:	eeb0 1a67 	vmov.f32	s2, s15
 8000d32:	ee07 3a90 	vmov	s15, r3
 8000d36:	ee11 3a90 	vmov	r3, s3
 8000d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	eef0 7ae7 	vabs.f32	s15, s15
 8000d44:	eeb4 0a40 	vcmp.f32	s0, s0
 8000d48:	bfb8      	it	lt
 8000d4a:	eef1 7a67 	vneglt.f32	s15, s15
 8000d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d52:	eef0 1a67 	vmov.f32	s3, s15
 8000d56:	d651      	bvs.n	8000dfc <__mulsc3+0x214>
 8000d58:	eef4 0a60 	vcmp.f32	s1, s1
 8000d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d60:	d7b8      	bvc.n	8000cd4 <__mulsc3+0xec>
 8000d62:	ee10 3a90 	vmov	r3, s1
 8000d66:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000ea0 <__mulsc3+0x2b8>
 8000d6a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8000ea4 <__mulsc3+0x2bc>
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	bfb4      	ite	lt
 8000d72:	eef0 0a67 	vmovlt.f32	s1, s15
 8000d76:	eef0 0a47 	vmovge.f32	s1, s14
 8000d7a:	e7ab      	b.n	8000cd4 <__mulsc3+0xec>
 8000d7c:	ee04 3a90 	vmov	s9, r3
 8000d80:	eddf 3a45 	vldr	s7, [pc, #276]	; 8000e98 <__mulsc3+0x2b0>
 8000d84:	ee10 3a10 	vmov	r3, s0
 8000d88:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	eef0 4ae4 	vabs.f32	s9, s9
 8000d92:	eeb4 4a63 	vcmp.f32	s8, s7
 8000d96:	bfb8      	it	lt
 8000d98:	eef1 4a64 	vneglt.f32	s9, s9
 8000d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da0:	bfcc      	ite	gt
 8000da2:	2301      	movgt	r3, #1
 8000da4:	2300      	movle	r3, #0
 8000da6:	eeb0 0a64 	vmov.f32	s0, s9
 8000daa:	ee04 3a90 	vmov	s9, r3
 8000dae:	ee10 3a90 	vmov	r3, s1
 8000db2:	eef8 4ae4 	vcvt.f32.s32	s9, s9
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	eef0 4ae4 	vabs.f32	s9, s9
 8000dbc:	eeb4 1a41 	vcmp.f32	s2, s2
 8000dc0:	bfb8      	it	lt
 8000dc2:	eef1 4a64 	vneglt.f32	s9, s9
 8000dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dca:	eef0 0a64 	vmov.f32	s1, s9
 8000dce:	d622      	bvs.n	8000e16 <__mulsc3+0x22e>
 8000dd0:	eef4 1a61 	vcmp.f32	s3, s3
 8000dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd8:	bf78      	it	vc
 8000dda:	2301      	movvc	r3, #1
 8000ddc:	f5ff af35 	bvc.w	8000c4a <__mulsc3+0x62>
 8000de0:	ee11 3a90 	vmov	r3, s3
 8000de4:	ed9f 4a2e 	vldr	s8, [pc, #184]	; 8000ea0 <__mulsc3+0x2b8>
 8000de8:	eddf 4a2e 	vldr	s9, [pc, #184]	; 8000ea4 <__mulsc3+0x2bc>
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	bfb4      	ite	lt
 8000df0:	eef0 1a64 	vmovlt.f32	s3, s9
 8000df4:	eef0 1a44 	vmovge.f32	s3, s8
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e726      	b.n	8000c4a <__mulsc3+0x62>
 8000dfc:	ee10 3a10 	vmov	r3, s0
 8000e00:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8000ea0 <__mulsc3+0x2b8>
 8000e04:	eddf 7a27 	vldr	s15, [pc, #156]	; 8000ea4 <__mulsc3+0x2bc>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	bfb4      	ite	lt
 8000e0c:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000e10:	eeb0 0a47 	vmovge.f32	s0, s14
 8000e14:	e7a0      	b.n	8000d58 <__mulsc3+0x170>
 8000e16:	ee11 3a10 	vmov	r3, s2
 8000e1a:	ed9f 4a21 	vldr	s8, [pc, #132]	; 8000ea0 <__mulsc3+0x2b8>
 8000e1e:	eddf 4a21 	vldr	s9, [pc, #132]	; 8000ea4 <__mulsc3+0x2bc>
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bfb4      	ite	lt
 8000e26:	eeb0 1a64 	vmovlt.f32	s2, s9
 8000e2a:	eeb0 1a44 	vmovge.f32	s2, s8
 8000e2e:	e7cf      	b.n	8000dd0 <__mulsc3+0x1e8>
 8000e30:	ee11 3a90 	vmov	r3, s3
 8000e34:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000ea0 <__mulsc3+0x2b8>
 8000e38:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8000ea4 <__mulsc3+0x2bc>
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	bfb4      	ite	lt
 8000e40:	eef0 1a67 	vmovlt.f32	s3, s15
 8000e44:	eef0 1a47 	vmovge.f32	s3, s14
 8000e48:	e744      	b.n	8000cd4 <__mulsc3+0xec>
 8000e4a:	ee11 3a10 	vmov	r3, s2
 8000e4e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000ea0 <__mulsc3+0x2b8>
 8000e52:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000ea4 <__mulsc3+0x2bc>
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	bfb4      	ite	lt
 8000e5a:	eeb0 1a67 	vmovlt.f32	s2, s15
 8000e5e:	eeb0 1a47 	vmovge.f32	s2, s14
 8000e62:	e731      	b.n	8000cc8 <__mulsc3+0xe0>
 8000e64:	ee10 3a90 	vmov	r3, s1
 8000e68:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000ea0 <__mulsc3+0x2b8>
 8000e6c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000ea4 <__mulsc3+0x2bc>
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bfb4      	ite	lt
 8000e74:	eef0 0a67 	vmovlt.f32	s1, s15
 8000e78:	eef0 0a47 	vmovge.f32	s1, s14
 8000e7c:	e71e      	b.n	8000cbc <__mulsc3+0xd4>
 8000e7e:	ee10 3a10 	vmov	r3, s0
 8000e82:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000ea0 <__mulsc3+0x2b8>
 8000e86:	eddf 7a07 	vldr	s15, [pc, #28]	; 8000ea4 <__mulsc3+0x2bc>
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	bfb4      	ite	lt
 8000e8e:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000e92:	eeb0 0a47 	vmovge.f32	s0, s14
 8000e96:	e70b      	b.n	8000cb0 <__mulsc3+0xc8>
 8000e98:	7f7fffff 	.word	0x7f7fffff
 8000e9c:	7f800000 	.word	0x7f800000
 8000ea0:	00000000 	.word	0x00000000
 8000ea4:	80000000 	.word	0x80000000

08000ea8 <__udivmoddi4>:
 8000ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eac:	9d08      	ldr	r5, [sp, #32]
 8000eae:	4604      	mov	r4, r0
 8000eb0:	468e      	mov	lr, r1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d14d      	bne.n	8000f52 <__udivmoddi4+0xaa>
 8000eb6:	428a      	cmp	r2, r1
 8000eb8:	4694      	mov	ip, r2
 8000eba:	d969      	bls.n	8000f90 <__udivmoddi4+0xe8>
 8000ebc:	fab2 f282 	clz	r2, r2
 8000ec0:	b152      	cbz	r2, 8000ed8 <__udivmoddi4+0x30>
 8000ec2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ec6:	f1c2 0120 	rsb	r1, r2, #32
 8000eca:	fa20 f101 	lsr.w	r1, r0, r1
 8000ece:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ed6:	4094      	lsls	r4, r2
 8000ed8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000edc:	0c21      	lsrs	r1, r4, #16
 8000ede:	fbbe f6f8 	udiv	r6, lr, r8
 8000ee2:	fa1f f78c 	uxth.w	r7, ip
 8000ee6:	fb08 e316 	mls	r3, r8, r6, lr
 8000eea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000eee:	fb06 f107 	mul.w	r1, r6, r7
 8000ef2:	4299      	cmp	r1, r3
 8000ef4:	d90a      	bls.n	8000f0c <__udivmoddi4+0x64>
 8000ef6:	eb1c 0303 	adds.w	r3, ip, r3
 8000efa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000efe:	f080 811f 	bcs.w	8001140 <__udivmoddi4+0x298>
 8000f02:	4299      	cmp	r1, r3
 8000f04:	f240 811c 	bls.w	8001140 <__udivmoddi4+0x298>
 8000f08:	3e02      	subs	r6, #2
 8000f0a:	4463      	add	r3, ip
 8000f0c:	1a5b      	subs	r3, r3, r1
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f14:	fb08 3310 	mls	r3, r8, r0, r3
 8000f18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f1c:	fb00 f707 	mul.w	r7, r0, r7
 8000f20:	42a7      	cmp	r7, r4
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x92>
 8000f24:	eb1c 0404 	adds.w	r4, ip, r4
 8000f28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f2c:	f080 810a 	bcs.w	8001144 <__udivmoddi4+0x29c>
 8000f30:	42a7      	cmp	r7, r4
 8000f32:	f240 8107 	bls.w	8001144 <__udivmoddi4+0x29c>
 8000f36:	4464      	add	r4, ip
 8000f38:	3802      	subs	r0, #2
 8000f3a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f3e:	1be4      	subs	r4, r4, r7
 8000f40:	2600      	movs	r6, #0
 8000f42:	b11d      	cbz	r5, 8000f4c <__udivmoddi4+0xa4>
 8000f44:	40d4      	lsrs	r4, r2
 8000f46:	2300      	movs	r3, #0
 8000f48:	e9c5 4300 	strd	r4, r3, [r5]
 8000f4c:	4631      	mov	r1, r6
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d909      	bls.n	8000f6a <__udivmoddi4+0xc2>
 8000f56:	2d00      	cmp	r5, #0
 8000f58:	f000 80ef 	beq.w	800113a <__udivmoddi4+0x292>
 8000f5c:	2600      	movs	r6, #0
 8000f5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000f62:	4630      	mov	r0, r6
 8000f64:	4631      	mov	r1, r6
 8000f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6a:	fab3 f683 	clz	r6, r3
 8000f6e:	2e00      	cmp	r6, #0
 8000f70:	d14a      	bne.n	8001008 <__udivmoddi4+0x160>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d302      	bcc.n	8000f7c <__udivmoddi4+0xd4>
 8000f76:	4282      	cmp	r2, r0
 8000f78:	f200 80f9 	bhi.w	800116e <__udivmoddi4+0x2c6>
 8000f7c:	1a84      	subs	r4, r0, r2
 8000f7e:	eb61 0303 	sbc.w	r3, r1, r3
 8000f82:	2001      	movs	r0, #1
 8000f84:	469e      	mov	lr, r3
 8000f86:	2d00      	cmp	r5, #0
 8000f88:	d0e0      	beq.n	8000f4c <__udivmoddi4+0xa4>
 8000f8a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f8e:	e7dd      	b.n	8000f4c <__udivmoddi4+0xa4>
 8000f90:	b902      	cbnz	r2, 8000f94 <__udivmoddi4+0xec>
 8000f92:	deff      	udf	#255	; 0xff
 8000f94:	fab2 f282 	clz	r2, r2
 8000f98:	2a00      	cmp	r2, #0
 8000f9a:	f040 8092 	bne.w	80010c2 <__udivmoddi4+0x21a>
 8000f9e:	eba1 010c 	sub.w	r1, r1, ip
 8000fa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa6:	fa1f fe8c 	uxth.w	lr, ip
 8000faa:	2601      	movs	r6, #1
 8000fac:	0c20      	lsrs	r0, r4, #16
 8000fae:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fb2:	fb07 1113 	mls	r1, r7, r3, r1
 8000fb6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fba:	fb0e f003 	mul.w	r0, lr, r3
 8000fbe:	4288      	cmp	r0, r1
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x12c>
 8000fc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000fca:	d202      	bcs.n	8000fd2 <__udivmoddi4+0x12a>
 8000fcc:	4288      	cmp	r0, r1
 8000fce:	f200 80cb 	bhi.w	8001168 <__udivmoddi4+0x2c0>
 8000fd2:	4643      	mov	r3, r8
 8000fd4:	1a09      	subs	r1, r1, r0
 8000fd6:	b2a4      	uxth	r4, r4
 8000fd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fdc:	fb07 1110 	mls	r1, r7, r0, r1
 8000fe0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fe4:	fb0e fe00 	mul.w	lr, lr, r0
 8000fe8:	45a6      	cmp	lr, r4
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x156>
 8000fec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ff0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ff4:	d202      	bcs.n	8000ffc <__udivmoddi4+0x154>
 8000ff6:	45a6      	cmp	lr, r4
 8000ff8:	f200 80bb 	bhi.w	8001172 <__udivmoddi4+0x2ca>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	eba4 040e 	sub.w	r4, r4, lr
 8001002:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001006:	e79c      	b.n	8000f42 <__udivmoddi4+0x9a>
 8001008:	f1c6 0720 	rsb	r7, r6, #32
 800100c:	40b3      	lsls	r3, r6
 800100e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001012:	ea4c 0c03 	orr.w	ip, ip, r3
 8001016:	fa20 f407 	lsr.w	r4, r0, r7
 800101a:	fa01 f306 	lsl.w	r3, r1, r6
 800101e:	431c      	orrs	r4, r3
 8001020:	40f9      	lsrs	r1, r7
 8001022:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001026:	fa00 f306 	lsl.w	r3, r0, r6
 800102a:	fbb1 f8f9 	udiv	r8, r1, r9
 800102e:	0c20      	lsrs	r0, r4, #16
 8001030:	fa1f fe8c 	uxth.w	lr, ip
 8001034:	fb09 1118 	mls	r1, r9, r8, r1
 8001038:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800103c:	fb08 f00e 	mul.w	r0, r8, lr
 8001040:	4288      	cmp	r0, r1
 8001042:	fa02 f206 	lsl.w	r2, r2, r6
 8001046:	d90b      	bls.n	8001060 <__udivmoddi4+0x1b8>
 8001048:	eb1c 0101 	adds.w	r1, ip, r1
 800104c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8001050:	f080 8088 	bcs.w	8001164 <__udivmoddi4+0x2bc>
 8001054:	4288      	cmp	r0, r1
 8001056:	f240 8085 	bls.w	8001164 <__udivmoddi4+0x2bc>
 800105a:	f1a8 0802 	sub.w	r8, r8, #2
 800105e:	4461      	add	r1, ip
 8001060:	1a09      	subs	r1, r1, r0
 8001062:	b2a4      	uxth	r4, r4
 8001064:	fbb1 f0f9 	udiv	r0, r1, r9
 8001068:	fb09 1110 	mls	r1, r9, r0, r1
 800106c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001070:	fb00 fe0e 	mul.w	lr, r0, lr
 8001074:	458e      	cmp	lr, r1
 8001076:	d908      	bls.n	800108a <__udivmoddi4+0x1e2>
 8001078:	eb1c 0101 	adds.w	r1, ip, r1
 800107c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8001080:	d26c      	bcs.n	800115c <__udivmoddi4+0x2b4>
 8001082:	458e      	cmp	lr, r1
 8001084:	d96a      	bls.n	800115c <__udivmoddi4+0x2b4>
 8001086:	3802      	subs	r0, #2
 8001088:	4461      	add	r1, ip
 800108a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800108e:	fba0 9402 	umull	r9, r4, r0, r2
 8001092:	eba1 010e 	sub.w	r1, r1, lr
 8001096:	42a1      	cmp	r1, r4
 8001098:	46c8      	mov	r8, r9
 800109a:	46a6      	mov	lr, r4
 800109c:	d356      	bcc.n	800114c <__udivmoddi4+0x2a4>
 800109e:	d053      	beq.n	8001148 <__udivmoddi4+0x2a0>
 80010a0:	b15d      	cbz	r5, 80010ba <__udivmoddi4+0x212>
 80010a2:	ebb3 0208 	subs.w	r2, r3, r8
 80010a6:	eb61 010e 	sbc.w	r1, r1, lr
 80010aa:	fa01 f707 	lsl.w	r7, r1, r7
 80010ae:	fa22 f306 	lsr.w	r3, r2, r6
 80010b2:	40f1      	lsrs	r1, r6
 80010b4:	431f      	orrs	r7, r3
 80010b6:	e9c5 7100 	strd	r7, r1, [r5]
 80010ba:	2600      	movs	r6, #0
 80010bc:	4631      	mov	r1, r6
 80010be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c2:	f1c2 0320 	rsb	r3, r2, #32
 80010c6:	40d8      	lsrs	r0, r3
 80010c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80010cc:	fa21 f303 	lsr.w	r3, r1, r3
 80010d0:	4091      	lsls	r1, r2
 80010d2:	4301      	orrs	r1, r0
 80010d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010d8:	fa1f fe8c 	uxth.w	lr, ip
 80010dc:	fbb3 f0f7 	udiv	r0, r3, r7
 80010e0:	fb07 3610 	mls	r6, r7, r0, r3
 80010e4:	0c0b      	lsrs	r3, r1, #16
 80010e6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010ea:	fb00 f60e 	mul.w	r6, r0, lr
 80010ee:	429e      	cmp	r6, r3
 80010f0:	fa04 f402 	lsl.w	r4, r4, r2
 80010f4:	d908      	bls.n	8001108 <__udivmoddi4+0x260>
 80010f6:	eb1c 0303 	adds.w	r3, ip, r3
 80010fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80010fe:	d22f      	bcs.n	8001160 <__udivmoddi4+0x2b8>
 8001100:	429e      	cmp	r6, r3
 8001102:	d92d      	bls.n	8001160 <__udivmoddi4+0x2b8>
 8001104:	3802      	subs	r0, #2
 8001106:	4463      	add	r3, ip
 8001108:	1b9b      	subs	r3, r3, r6
 800110a:	b289      	uxth	r1, r1
 800110c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001110:	fb07 3316 	mls	r3, r7, r6, r3
 8001114:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001118:	fb06 f30e 	mul.w	r3, r6, lr
 800111c:	428b      	cmp	r3, r1
 800111e:	d908      	bls.n	8001132 <__udivmoddi4+0x28a>
 8001120:	eb1c 0101 	adds.w	r1, ip, r1
 8001124:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8001128:	d216      	bcs.n	8001158 <__udivmoddi4+0x2b0>
 800112a:	428b      	cmp	r3, r1
 800112c:	d914      	bls.n	8001158 <__udivmoddi4+0x2b0>
 800112e:	3e02      	subs	r6, #2
 8001130:	4461      	add	r1, ip
 8001132:	1ac9      	subs	r1, r1, r3
 8001134:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001138:	e738      	b.n	8000fac <__udivmoddi4+0x104>
 800113a:	462e      	mov	r6, r5
 800113c:	4628      	mov	r0, r5
 800113e:	e705      	b.n	8000f4c <__udivmoddi4+0xa4>
 8001140:	4606      	mov	r6, r0
 8001142:	e6e3      	b.n	8000f0c <__udivmoddi4+0x64>
 8001144:	4618      	mov	r0, r3
 8001146:	e6f8      	b.n	8000f3a <__udivmoddi4+0x92>
 8001148:	454b      	cmp	r3, r9
 800114a:	d2a9      	bcs.n	80010a0 <__udivmoddi4+0x1f8>
 800114c:	ebb9 0802 	subs.w	r8, r9, r2
 8001150:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001154:	3801      	subs	r0, #1
 8001156:	e7a3      	b.n	80010a0 <__udivmoddi4+0x1f8>
 8001158:	4646      	mov	r6, r8
 800115a:	e7ea      	b.n	8001132 <__udivmoddi4+0x28a>
 800115c:	4620      	mov	r0, r4
 800115e:	e794      	b.n	800108a <__udivmoddi4+0x1e2>
 8001160:	4640      	mov	r0, r8
 8001162:	e7d1      	b.n	8001108 <__udivmoddi4+0x260>
 8001164:	46d0      	mov	r8, sl
 8001166:	e77b      	b.n	8001060 <__udivmoddi4+0x1b8>
 8001168:	3b02      	subs	r3, #2
 800116a:	4461      	add	r1, ip
 800116c:	e732      	b.n	8000fd4 <__udivmoddi4+0x12c>
 800116e:	4630      	mov	r0, r6
 8001170:	e709      	b.n	8000f86 <__udivmoddi4+0xde>
 8001172:	4464      	add	r4, ip
 8001174:	3802      	subs	r0, #2
 8001176:	e742      	b.n	8000ffe <__udivmoddi4+0x156>

08001178 <__aeabi_idiv0>:
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	0000      	movs	r0, r0
	...

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001184:	ed2d 8b02 	vpush	{d8}
 8001188:	b08d      	sub	sp, #52	; 0x34
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118c:	f003 f800 	bl	8004190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001190:	f000 fc1a 	bl	80019c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001194:	f000 ff78 	bl	8002088 <MX_GPIO_Init>
  MX_CRC_Init();
 8001198:	f000 fcda 	bl	8001b50 <MX_CRC_Init>
  MX_DMA2D_Init();
 800119c:	f000 fcec 	bl	8001b78 <MX_DMA2D_Init>
  MX_FMC_Init();
 80011a0:	f000 ff22 	bl	8001fe8 <MX_FMC_Init>
  MX_I2C3_Init();
 80011a4:	f000 fd1a 	bl	8001bdc <MX_I2C3_Init>
  MX_LTDC_Init();
 80011a8:	f000 fd58 	bl	8001c5c <MX_LTDC_Init>
  MX_SPI5_Init();
 80011ac:	f000 fdd6 	bl	8001d5c <MX_SPI5_Init>
  MX_TIM1_Init();
 80011b0:	f000 fe0a 	bl	8001dc8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80011b4:	f000 fece 	bl	8001f54 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80011b8:	f00d fb5a 	bl	800e870 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80011bc:	f000 fe54 	bl	8001e68 <MX_TIM2_Init>
  BSP_LCD_Init();
 80011c0:	f002 f97a 	bl	80034b8 <BSP_LCD_Init>
  MX_DMA_Init();
 80011c4:	f000 fef0 	bl	8001fa8 <MX_DMA_Init>
  MX_ADC1_Init();
 80011c8:	f000 fc70 	bl	8001aac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80011cc:	487a      	ldr	r0, [pc, #488]	; (80013b8 <main+0x238>)
 80011ce:	f008 ff89 	bl	800a0e4 <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim2,TIM_CHANNEL_1);
 80011d2:	2100      	movs	r1, #0
 80011d4:	4878      	ldr	r0, [pc, #480]	; (80013b8 <main+0x238>)
 80011d6:	f009 f8df 	bl	800a398 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)dmaBuffer,Buff_len);
 80011da:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011de:	4977      	ldr	r1, [pc, #476]	; (80013bc <main+0x23c>)
 80011e0:	4877      	ldr	r0, [pc, #476]	; (80013c0 <main+0x240>)
 80011e2:	f003 f87f 	bl	80042e4 <HAL_ADC_Start_DMA>




  BSP_LCD_DisplayOn();
 80011e6:	f002 fc81 	bl	8003aec <BSP_LCD_DisplayOn>
  BSP_LCD_LayerDefaultInit(0,LCD_FRAME_BUFFER);
 80011ea:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80011ee:	2000      	movs	r0, #0
 80011f0:	f002 f9e4 	bl	80035bc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1,LCD_FRAME_BUFFER);
 80011f4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80011f8:	2001      	movs	r0, #1
 80011fa:	f002 f9df 	bl	80035bc <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 80011fe:	2000      	movs	r0, #0
 8001200:	f002 fa40 	bl	8003684 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_TRANSPARENT);
 8001204:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001208:	f002 fa7e 	bl	8003708 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f002 fa39 	bl	8003684 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_TRANSPARENT);
 8001212:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001216:	f002 fa77 	bl	8003708 <BSP_LCD_Clear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  if ((samplingFinished = 1))
 800121a:	4b6a      	ldr	r3, [pc, #424]	; (80013c4 <main+0x244>)
 800121c:	2201      	movs	r2, #1
 800121e:	601a      	str	r2, [r3, #0]
  {
	  samplingFinished = 0;
 8001220:	4b68      	ldr	r3, [pc, #416]	; (80013c4 <main+0x244>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
	  for (int i=0; i < 256; i++)
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122a:	e028      	b.n	800127e <main+0xfe>
		  {
				FFT_Buffer[i] = (((float)dmaBuffer[i]/4096.0) - 0.5);
 800122c:	4a63      	ldr	r2, [pc, #396]	; (80013bc <main+0x23c>)
 800122e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800123c:	ee17 0a90 	vmov	r0, s15
 8001240:	f7ff f93a 	bl	80004b8 <__aeabi_f2d>
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <main+0x248>)
 800124a:	f7ff fab7 	bl	80007bc <__aeabi_ddiv>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	4b5c      	ldr	r3, [pc, #368]	; (80013cc <main+0x24c>)
 800125c:	f7fe ffcc 	bl	80001f8 <__aeabi_dsub>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	f7ff fc56 	bl	8000b18 <__aeabi_d2f>
 800126c:	4602      	mov	r2, r0
 800126e:	4958      	ldr	r1, [pc, #352]	; (80013d0 <main+0x250>)
 8001270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	601a      	str	r2, [r3, #0]
	  for (int i=0; i < 256; i++)
 8001278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800127a:	3301      	adds	r3, #1
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001280:	2bff      	cmp	r3, #255	; 0xff
 8001282:	ddd3      	ble.n	800122c <main+0xac>
		  }
	  //FFT Calculation
	  for (int count = 0; count < FFT_len; count++){
 8001284:	2300      	movs	r3, #0
 8001286:	62bb      	str	r3, [r7, #40]	; 0x28
 8001288:	e00c      	b.n	80012a4 <main+0x124>
	      	fftInput[count] = FFT_Buffer[count];
 800128a:	4a51      	ldr	r2, [pc, #324]	; (80013d0 <main+0x250>)
 800128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	4413      	add	r3, r2
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	494f      	ldr	r1, [pc, #316]	; (80013d4 <main+0x254>)
 8001296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	440b      	add	r3, r1
 800129c:	601a      	str	r2, [r3, #0]
	  for (int count = 0; count < FFT_len; count++){
 800129e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a0:	3301      	adds	r3, #1
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80012a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a6:	2bff      	cmp	r3, #255	; 0xff
 80012a8:	ddef      	ble.n	800128a <main+0x10a>
	      }

	      // Calculate twiddle Factors
	      for (int ii = 0; ii < FFT_len; ii++){
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
 80012ae:	e067      	b.n	8001380 <main+0x200>
	      	twiddlePhase[ii] = -(2*M_PI*ii)/FFT_len;
 80012b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012b2:	f7ff f8ef 	bl	8000494 <__aeabi_i2d>
 80012b6:	a33e      	add	r3, pc, #248	; (adr r3, 80013b0 <main+0x230>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff f954 	bl	8000568 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4614      	mov	r4, r2
 80012c6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <main+0x258>)
 80012d0:	4620      	mov	r0, r4
 80012d2:	4629      	mov	r1, r5
 80012d4:	f7ff fa72 	bl	80007bc <__aeabi_ddiv>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fc1a 	bl	8000b18 <__aeabi_d2f>
 80012e4:	4602      	mov	r2, r0
 80012e6:	493d      	ldr	r1, [pc, #244]	; (80013dc <main+0x25c>)
 80012e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	440b      	add	r3, r1
 80012ee:	601a      	str	r2, [r3, #0]
	      	twiddleFactor[ii] = cos(twiddlePhase[ii]) + sin(twiddlePhase[ii])*I;
 80012f0:	4a3a      	ldr	r2, [pc, #232]	; (80013dc <main+0x25c>)
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f8dc 	bl	80004b8 <__aeabi_f2d>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	ec43 2b10 	vmov	d0, r2, r3
 8001308:	f00d ff76 	bl	800f1f8 <sin>
 800130c:	ec59 8b10 	vmov	r8, r9, d0
 8001310:	4a32      	ldr	r2, [pc, #200]	; (80013dc <main+0x25c>)
 8001312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f8cc 	bl	80004b8 <__aeabi_f2d>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	ec43 2b10 	vmov	d0, r2, r3
 8001328:	f00d ff12 	bl	800f150 <cos>
 800132c:	ec5b ab10 	vmov	sl, fp, d0
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	4640      	mov	r0, r8
 800133a:	4649      	mov	r1, r9
 800133c:	f7ff f914 	bl	8000568 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4650      	mov	r0, sl
 8001346:	4659      	mov	r1, fp
 8001348:	f7fe ff58 	bl	80001fc <__adddf3>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fbe0 	bl	8000b18 <__aeabi_d2f>
 8001358:	4606      	mov	r6, r0
 800135a:	4640      	mov	r0, r8
 800135c:	4649      	mov	r1, r9
 800135e:	f7ff fbdb 	bl	8000b18 <__aeabi_d2f>
 8001362:	4602      	mov	r2, r0
 8001364:	491e      	ldr	r1, [pc, #120]	; (80013e0 <main+0x260>)
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	440b      	add	r3, r1
 800136c:	601e      	str	r6, [r3, #0]
 800136e:	491c      	ldr	r1, [pc, #112]	; (80013e0 <main+0x260>)
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	440b      	add	r3, r1
 8001376:	3304      	adds	r3, #4
 8001378:	601a      	str	r2, [r3, #0]
	      for (int ii = 0; ii < FFT_len; ii++){
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	3301      	adds	r3, #1
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	2bff      	cmp	r3, #255	; 0xff
 8001384:	dd94      	ble.n	80012b0 <main+0x130>
	      }

	      // Calculate even sums and uneven sums
	      // M counter loop
	      for (indexM = 0; indexM < FFT_len/2; indexM++){
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <main+0x264>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e124      	b.n	80015d8 <main+0x458>
	      	// Reset even and uneven sums
	      	evenSum = 0;
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <main+0x268>)
 8001390:	4a16      	ldr	r2, [pc, #88]	; (80013ec <main+0x26c>)
 8001392:	6811      	ldr	r1, [r2, #0]
 8001394:	6019      	str	r1, [r3, #0]
 8001396:	6852      	ldr	r2, [r2, #4]
 8001398:	605a      	str	r2, [r3, #4]
	      	unevenSum = 0;
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <main+0x270>)
 800139c:	4a13      	ldr	r2, [pc, #76]	; (80013ec <main+0x26c>)
 800139e:	6811      	ldr	r1, [r2, #0]
 80013a0:	6019      	str	r1, [r3, #0]
 80013a2:	6852      	ldr	r2, [r2, #4]
 80013a4:	605a      	str	r2, [r3, #4]

	      	// N counter loop
	      	for (indexN = 0; indexN < FFT_len/2; indexN++){
 80013a6:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <main+0x274>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e097      	b.n	80014de <main+0x35e>
 80013ae:	bf00      	nop
 80013b0:	54442d18 	.word	0x54442d18
 80013b4:	401921fb 	.word	0x401921fb
 80013b8:	20000380 	.word	0x20000380
 80013bc:	20000440 	.word	0x20000440
 80013c0:	200000f4 	.word	0x200000f4
 80013c4:	20003e24 	.word	0x20003e24
 80013c8:	40b00000 	.word	0x40b00000
 80013cc:	3fe00000 	.word	0x3fe00000
 80013d0:	20000648 	.word	0x20000648
 80013d4:	20001624 	.word	0x20001624
 80013d8:	40700000 	.word	0x40700000
 80013dc:	20001a24 	.word	0x20001a24
 80013e0:	20001e24 	.word	0x20001e24
 80013e4:	2000160c 	.word	0x2000160c
 80013e8:	20001614 	.word	0x20001614
 80013ec:	08010958 	.word	0x08010958
 80013f0:	2000161c 	.word	0x2000161c
 80013f4:	20001608 	.word	0x20001608
	      		// Calculate twiddle factor index
	      		twiddleIndex = indexN*indexM;
 80013f8:	4bae      	ldr	r3, [pc, #696]	; (80016b4 <main+0x534>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4aae      	ldr	r2, [pc, #696]	; (80016b8 <main+0x538>)
 80013fe:	6812      	ldr	r2, [r2, #0]
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	4aad      	ldr	r2, [pc, #692]	; (80016bc <main+0x53c>)
 8001406:	6013      	str	r3, [r2, #0]

	      		// Adjust for multiple revolutions of twiddle phasor
	      		if (twiddleIndex >= FFT_len/2){
 8001408:	4bac      	ldr	r3, [pc, #688]	; (80016bc <main+0x53c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b7f      	cmp	r3, #127	; 0x7f
 800140e:	dd0c      	ble.n	800142a <main+0x2aa>
	      			twiddleIndex = twiddleIndex % FFT_len/2;
 8001410:	4baa      	ldr	r3, [pc, #680]	; (80016bc <main+0x53c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	425a      	negs	r2, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	bf58      	it	pl
 800141c:	4253      	negpl	r3, r2
 800141e:	0fda      	lsrs	r2, r3, #31
 8001420:	4413      	add	r3, r2
 8001422:	105b      	asrs	r3, r3, #1
 8001424:	461a      	mov	r2, r3
 8001426:	4ba5      	ldr	r3, [pc, #660]	; (80016bc <main+0x53c>)
 8001428:	601a      	str	r2, [r3, #0]
	      		}

	      		// Calculate sums
	      		evenSum = evenSum + fftInput[2*indexN]*twiddleFactor[2*twiddleIndex];
 800142a:	4ba2      	ldr	r3, [pc, #648]	; (80016b4 <main+0x534>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4aa3      	ldr	r2, [pc, #652]	; (80016c0 <main+0x540>)
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	4ba0      	ldr	r3, [pc, #640]	; (80016bc <main+0x53c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	49a0      	ldr	r1, [pc, #640]	; (80016c4 <main+0x544>)
 8001442:	00da      	lsls	r2, r3, #3
 8001444:	440a      	add	r2, r1
 8001446:	edd2 6a00 	vldr	s13, [r2]
 800144a:	4a9e      	ldr	r2, [pc, #632]	; (80016c4 <main+0x544>)
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4413      	add	r3, r2
 8001450:	3304      	adds	r3, #4
 8001452:	ed93 7a00 	vldr	s14, [r3]
 8001456:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800145a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800145e:	4b9a      	ldr	r3, [pc, #616]	; (80016c8 <main+0x548>)
 8001460:	ed93 7a00 	vldr	s14, [r3]
 8001464:	4b98      	ldr	r3, [pc, #608]	; (80016c8 <main+0x548>)
 8001466:	edd3 7a01 	vldr	s15, [r3, #4]
 800146a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800146e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001472:	4b95      	ldr	r3, [pc, #596]	; (80016c8 <main+0x548>)
 8001474:	ed83 7a00 	vstr	s14, [r3]
 8001478:	4b93      	ldr	r3, [pc, #588]	; (80016c8 <main+0x548>)
 800147a:	edc3 7a01 	vstr	s15, [r3, #4]
	      		unevenSum = unevenSum + fftInput[2*indexN + 1]*twiddleFactor[2*twiddleIndex];
 800147e:	4b8d      	ldr	r3, [pc, #564]	; (80016b4 <main+0x534>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	3301      	adds	r3, #1
 8001486:	4a8e      	ldr	r2, [pc, #568]	; (80016c0 <main+0x540>)
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	4b8a      	ldr	r3, [pc, #552]	; (80016bc <main+0x53c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	498b      	ldr	r1, [pc, #556]	; (80016c4 <main+0x544>)
 8001498:	00da      	lsls	r2, r3, #3
 800149a:	440a      	add	r2, r1
 800149c:	edd2 6a00 	vldr	s13, [r2]
 80014a0:	4a88      	ldr	r2, [pc, #544]	; (80016c4 <main+0x544>)
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4413      	add	r3, r2
 80014a6:	3304      	adds	r3, #4
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80014b0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80014b4:	4b85      	ldr	r3, [pc, #532]	; (80016cc <main+0x54c>)
 80014b6:	ed93 7a00 	vldr	s14, [r3]
 80014ba:	4b84      	ldr	r3, [pc, #528]	; (80016cc <main+0x54c>)
 80014bc:	edd3 7a01 	vldr	s15, [r3, #4]
 80014c0:	ee36 7a07 	vadd.f32	s14, s12, s14
 80014c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014c8:	4b80      	ldr	r3, [pc, #512]	; (80016cc <main+0x54c>)
 80014ca:	ed83 7a00 	vstr	s14, [r3]
 80014ce:	4b7f      	ldr	r3, [pc, #508]	; (80016cc <main+0x54c>)
 80014d0:	edc3 7a01 	vstr	s15, [r3, #4]
	      	for (indexN = 0; indexN < FFT_len/2; indexN++){
 80014d4:	4b77      	ldr	r3, [pc, #476]	; (80016b4 <main+0x534>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3301      	adds	r3, #1
 80014da:	4a76      	ldr	r2, [pc, #472]	; (80016b4 <main+0x534>)
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b75      	ldr	r3, [pc, #468]	; (80016b4 <main+0x534>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b7f      	cmp	r3, #127	; 0x7f
 80014e4:	dd88      	ble.n	80013f8 <main+0x278>
	      	}

	      	// Store output values
	      	firstHalfXm[indexM] = evenSum + twiddleFactor[indexM]*unevenSum;
 80014e6:	4b74      	ldr	r3, [pc, #464]	; (80016b8 <main+0x538>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4976      	ldr	r1, [pc, #472]	; (80016c4 <main+0x544>)
 80014ec:	00da      	lsls	r2, r3, #3
 80014ee:	440a      	add	r2, r1
 80014f0:	edd2 7a00 	vldr	s15, [r2]
 80014f4:	4a73      	ldr	r2, [pc, #460]	; (80016c4 <main+0x544>)
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4413      	add	r3, r2
 80014fa:	3304      	adds	r3, #4
 80014fc:	ed93 7a00 	vldr	s14, [r3]
 8001500:	4b72      	ldr	r3, [pc, #456]	; (80016cc <main+0x54c>)
 8001502:	edd3 6a00 	vldr	s13, [r3]
 8001506:	4b71      	ldr	r3, [pc, #452]	; (80016cc <main+0x54c>)
 8001508:	ed93 6a01 	vldr	s12, [r3, #4]
 800150c:	eef0 1a46 	vmov.f32	s3, s12
 8001510:	eeb0 1a66 	vmov.f32	s2, s13
 8001514:	eef0 0a47 	vmov.f32	s1, s14
 8001518:	eeb0 0a67 	vmov.f32	s0, s15
 800151c:	f7ff fb64 	bl	8000be8 <__mulsc3>
 8001520:	eeb0 7a40 	vmov.f32	s14, s0
 8001524:	eef0 7a60 	vmov.f32	s15, s1
 8001528:	eeb0 6a47 	vmov.f32	s12, s14
 800152c:	eef0 6a67 	vmov.f32	s13, s15
 8001530:	4b65      	ldr	r3, [pc, #404]	; (80016c8 <main+0x548>)
 8001532:	ed93 7a00 	vldr	s14, [r3]
 8001536:	4b64      	ldr	r3, [pc, #400]	; (80016c8 <main+0x548>)
 8001538:	edd3 7a01 	vldr	s15, [r3, #4]
 800153c:	4b5e      	ldr	r3, [pc, #376]	; (80016b8 <main+0x538>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	ee36 7a07 	vadd.f32	s14, s12, s14
 8001544:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001548:	4961      	ldr	r1, [pc, #388]	; (80016d0 <main+0x550>)
 800154a:	00da      	lsls	r2, r3, #3
 800154c:	440a      	add	r2, r1
 800154e:	ed82 7a00 	vstr	s14, [r2]
 8001552:	4a5f      	ldr	r2, [pc, #380]	; (80016d0 <main+0x550>)
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	4413      	add	r3, r2
 8001558:	3304      	adds	r3, #4
 800155a:	edc3 7a00 	vstr	s15, [r3]
 800155e:	4b5a      	ldr	r3, [pc, #360]	; (80016c8 <main+0x548>)
 8001560:	edd3 8a00 	vldr	s17, [r3]
 8001564:	4b58      	ldr	r3, [pc, #352]	; (80016c8 <main+0x548>)
 8001566:	ed93 8a01 	vldr	s16, [r3, #4]
	      	secondHalfXm[indexM] = evenSum - twiddleFactor[indexM]*unevenSum;
 800156a:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <main+0x538>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4955      	ldr	r1, [pc, #340]	; (80016c4 <main+0x544>)
 8001570:	00da      	lsls	r2, r3, #3
 8001572:	440a      	add	r2, r1
 8001574:	edd2 7a00 	vldr	s15, [r2]
 8001578:	4a52      	ldr	r2, [pc, #328]	; (80016c4 <main+0x544>)
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4413      	add	r3, r2
 800157e:	3304      	adds	r3, #4
 8001580:	ed93 7a00 	vldr	s14, [r3]
 8001584:	4b51      	ldr	r3, [pc, #324]	; (80016cc <main+0x54c>)
 8001586:	edd3 6a00 	vldr	s13, [r3]
 800158a:	4b50      	ldr	r3, [pc, #320]	; (80016cc <main+0x54c>)
 800158c:	ed93 6a01 	vldr	s12, [r3, #4]
 8001590:	eef0 1a46 	vmov.f32	s3, s12
 8001594:	eeb0 1a66 	vmov.f32	s2, s13
 8001598:	eef0 0a47 	vmov.f32	s1, s14
 800159c:	eeb0 0a67 	vmov.f32	s0, s15
 80015a0:	f7ff fb22 	bl	8000be8 <__mulsc3>
 80015a4:	eeb0 7a40 	vmov.f32	s14, s0
 80015a8:	eef0 7a60 	vmov.f32	s15, s1
 80015ac:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <main+0x538>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80015b4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80015b8:	4946      	ldr	r1, [pc, #280]	; (80016d4 <main+0x554>)
 80015ba:	00da      	lsls	r2, r3, #3
 80015bc:	440a      	add	r2, r1
 80015be:	ed82 7a00 	vstr	s14, [r2]
 80015c2:	4a44      	ldr	r2, [pc, #272]	; (80016d4 <main+0x554>)
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4413      	add	r3, r2
 80015c8:	3304      	adds	r3, #4
 80015ca:	edc3 7a00 	vstr	s15, [r3]
	      for (indexM = 0; indexM < FFT_len/2; indexM++){
 80015ce:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <main+0x538>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	4a38      	ldr	r2, [pc, #224]	; (80016b8 <main+0x538>)
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <main+0x538>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b7f      	cmp	r3, #127	; 0x7f
 80015de:	f77f aed6 	ble.w	800138e <main+0x20e>
	      }

	  	// Store output values in single array
	  	for (int firstHalfIndex = 0; firstHalfIndex < FFT_len/2; firstHalfIndex++){
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
 80015e6:	e018      	b.n	800161a <main+0x49a>
 80015e8:	4a39      	ldr	r2, [pc, #228]	; (80016d0 <main+0x550>)
 80015ea:	6a3b      	ldr	r3, [r7, #32]
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	6819      	ldr	r1, [r3, #0]
 80015f2:	4a37      	ldr	r2, [pc, #220]	; (80016d0 <main+0x550>)
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4413      	add	r3, r2
 80015fa:	3304      	adds	r3, #4
 80015fc:	681a      	ldr	r2, [r3, #0]
	  		outputFFT[firstHalfIndex] = firstHalfXm[firstHalfIndex];
 80015fe:	4836      	ldr	r0, [pc, #216]	; (80016d8 <main+0x558>)
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	00db      	lsls	r3, r3, #3
 8001604:	4403      	add	r3, r0
 8001606:	6019      	str	r1, [r3, #0]
 8001608:	4933      	ldr	r1, [pc, #204]	; (80016d8 <main+0x558>)
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	440b      	add	r3, r1
 8001610:	3304      	adds	r3, #4
 8001612:	601a      	str	r2, [r3, #0]
	  	for (int firstHalfIndex = 0; firstHalfIndex < FFT_len/2; firstHalfIndex++){
 8001614:	6a3b      	ldr	r3, [r7, #32]
 8001616:	3301      	adds	r3, #1
 8001618:	623b      	str	r3, [r7, #32]
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	2b7f      	cmp	r3, #127	; 0x7f
 800161e:	dde3      	ble.n	80015e8 <main+0x468>
	  	}
	  	for (int secondHalfIndex = 0; secondHalfIndex < FFT_len/2; secondHalfIndex++){
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
 8001624:	e018      	b.n	8001658 <main+0x4d8>
	  		outputFFT[secondHalfIndex + FFT_len/2] = secondHalfXm[secondHalfIndex];
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3380      	adds	r3, #128	; 0x80
 800162a:	492a      	ldr	r1, [pc, #168]	; (80016d4 <main+0x554>)
 800162c:	69fa      	ldr	r2, [r7, #28]
 800162e:	00d2      	lsls	r2, r2, #3
 8001630:	440a      	add	r2, r1
 8001632:	6810      	ldr	r0, [r2, #0]
 8001634:	4927      	ldr	r1, [pc, #156]	; (80016d4 <main+0x554>)
 8001636:	69fa      	ldr	r2, [r7, #28]
 8001638:	00d2      	lsls	r2, r2, #3
 800163a:	440a      	add	r2, r1
 800163c:	3204      	adds	r2, #4
 800163e:	6812      	ldr	r2, [r2, #0]
 8001640:	4e25      	ldr	r6, [pc, #148]	; (80016d8 <main+0x558>)
 8001642:	00d9      	lsls	r1, r3, #3
 8001644:	4431      	add	r1, r6
 8001646:	6008      	str	r0, [r1, #0]
 8001648:	4923      	ldr	r1, [pc, #140]	; (80016d8 <main+0x558>)
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	440b      	add	r3, r1
 800164e:	3304      	adds	r3, #4
 8001650:	601a      	str	r2, [r3, #0]
	  	for (int secondHalfIndex = 0; secondHalfIndex < FFT_len/2; secondHalfIndex++){
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3301      	adds	r3, #1
 8001656:	61fb      	str	r3, [r7, #28]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	2b7f      	cmp	r3, #127	; 0x7f
 800165c:	dde3      	ble.n	8001626 <main+0x4a6>
	  	}

	  	// Calculate magnitude of output
	  	for (int fftIndex = 0; fftIndex < FFT_len; fftIndex++){
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	e020      	b.n	80016a6 <main+0x526>
 8001664:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <main+0x558>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4413      	add	r3, r2
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	4a1a      	ldr	r2, [pc, #104]	; (80016d8 <main+0x558>)
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4413      	add	r3, r2
 8001676:	3304      	adds	r3, #4
 8001678:	681b      	ldr	r3, [r3, #0]
	  		fftMagOutput[fftIndex] = (cabsf(outputFFT[fftIndex])) ;
 800167a:	460a      	mov	r2, r1
 800167c:	ee07 2a10 	vmov	s14, r2
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eeb0 0a47 	vmov.f32	s0, s14
 8001688:	eef0 0a67 	vmov.f32	s1, s15
 800168c:	f00d fd3e 	bl	800f10c <cabsf>
 8001690:	eef0 7a40 	vmov.f32	s15, s0
 8001694:	4a11      	ldr	r2, [pc, #68]	; (80016dc <main+0x55c>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	edc3 7a00 	vstr	s15, [r3]
	  	for (int fftIndex = 0; fftIndex < FFT_len; fftIndex++){
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	3301      	adds	r3, #1
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2bff      	cmp	r3, #255	; 0xff
 80016aa:	dddb      	ble.n	8001664 <main+0x4e4>
	  	}

	  	// Calculate magnitude of output in DB
	  	for (int logIndex = 0; logIndex < FFT_len; logIndex++){
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	e043      	b.n	800173a <main+0x5ba>
 80016b2:	bf00      	nop
 80016b4:	20001608 	.word	0x20001608
 80016b8:	2000160c 	.word	0x2000160c
 80016bc:	20001610 	.word	0x20001610
 80016c0:	20001624 	.word	0x20001624
 80016c4:	20001e24 	.word	0x20001e24
 80016c8:	20001614 	.word	0x20001614
 80016cc:	2000161c 	.word	0x2000161c
 80016d0:	20002e24 	.word	0x20002e24
 80016d4:	20003224 	.word	0x20003224
 80016d8:	20002624 	.word	0x20002624
 80016dc:	20003624 	.word	0x20003624
	  		fftMagLogOutput[logIndex] = 20*log10((2.0/256.0)*(1.5)*fftMagOutput[logIndex]);
 80016e0:	4aa5      	ldr	r2, [pc, #660]	; (8001978 <main+0x7f8>)
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4413      	add	r3, r2
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fee4 	bl	80004b8 <__aeabi_f2d>
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	4ba1      	ldr	r3, [pc, #644]	; (800197c <main+0x7fc>)
 80016f6:	f7fe ff37 	bl	8000568 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	ec43 2b17 	vmov	d7, r2, r3
 8001702:	eeb0 0a47 	vmov.f32	s0, s14
 8001706:	eef0 0a67 	vmov.f32	s1, s15
 800170a:	f00d fdcd 	bl	800f2a8 <log10>
 800170e:	ec51 0b10 	vmov	r0, r1, d0
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	4b9a      	ldr	r3, [pc, #616]	; (8001980 <main+0x800>)
 8001718:	f7fe ff26 	bl	8000568 <__aeabi_dmul>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	f7ff f9f8 	bl	8000b18 <__aeabi_d2f>
 8001728:	4602      	mov	r2, r0
 800172a:	4996      	ldr	r1, [pc, #600]	; (8001984 <main+0x804>)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	601a      	str	r2, [r3, #0]
	  	for (int logIndex = 0; logIndex < FFT_len; logIndex++){
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2bff      	cmp	r3, #255	; 0xff
 800173e:	ddcf      	ble.n	80016e0 <main+0x560>
	  	}


	  if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1)
 8001740:	2101      	movs	r1, #1
 8001742:	4891      	ldr	r0, [pc, #580]	; (8001988 <main+0x808>)
 8001744:	f004 fd8c 	bl	8006260 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	2b01      	cmp	r3, #1
 800174c:	d170      	bne.n	8001830 <main+0x6b0>
	  	  {
		  //Signal Graph
		  for (int i = 0; i < Sig_buflen; i++)
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	e056      	b.n	8001802 <main+0x682>
		  {
			  float p = (float)dmaBuffer[i] * (182.0/4096.0) + 37.0 ;
 8001754:	4a8d      	ldr	r2, [pc, #564]	; (800198c <main+0x80c>)
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001764:	ee17 0a90 	vmov	r0, s15
 8001768:	f7fe fea6 	bl	80004b8 <__aeabi_f2d>
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	4b87      	ldr	r3, [pc, #540]	; (8001990 <main+0x810>)
 8001772:	f7fe fef9 	bl	8000568 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4610      	mov	r0, r2
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	4b84      	ldr	r3, [pc, #528]	; (8001994 <main+0x814>)
 8001784:	f7fe fd3a 	bl	80001fc <__adddf3>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f7ff f9c2 	bl	8000b18 <__aeabi_d2f>
 8001794:	4603      	mov	r3, r0
 8001796:	607b      	str	r3, [r7, #4]
		  	  P_S[i].X = (int)p;
 8001798:	edd7 7a01 	vldr	s15, [r7, #4]
 800179c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a0:	ee17 3a90 	vmov	r3, s15
 80017a4:	b219      	sxth	r1, r3
 80017a6:	4a7c      	ldr	r2, [pc, #496]	; (8001998 <main+0x818>)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		  	  P_S[Sig_buflen*2 - i -1].X = (int)p;
 80017ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	f5c3 73f7 	rsb	r3, r3, #494	; 0x1ee
 80017bc:	3301      	adds	r3, #1
 80017be:	ee17 2a90 	vmov	r2, s15
 80017c2:	b211      	sxth	r1, r2
 80017c4:	4a74      	ldr	r2, [pc, #464]	; (8001998 <main+0x818>)
 80017c6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]

		  	  P_S[i].Y = i + Sig_Horizontal_lower ;
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	3339      	adds	r3, #57	; 0x39
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b219      	sxth	r1, r3
 80017d4:	4a70      	ldr	r2, [pc, #448]	; (8001998 <main+0x818>)
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	460a      	mov	r2, r1
 80017de:	805a      	strh	r2, [r3, #2]
		  	  P_S[Sig_buflen*2 - i - 1].Y = i + Sig_Horizontal_lower ;
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	3339      	adds	r3, #57	; 0x39
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f5c3 73f7 	rsb	r3, r3, #494	; 0x1ee
 80017ee:	3301      	adds	r3, #1
 80017f0:	b211      	sxth	r1, r2
 80017f2:	4a69      	ldr	r2, [pc, #420]	; (8001998 <main+0x818>)
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	460a      	mov	r2, r1
 80017fa:	805a      	strh	r2, [r3, #2]
		  for (int i = 0; i < Sig_buflen; i++)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	3301      	adds	r3, #1
 8001800:	613b      	str	r3, [r7, #16]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	2bf7      	cmp	r3, #247	; 0xf7
 8001806:	dda5      	ble.n	8001754 <main+0x5d4>

		  }
		  BSP_LCD_SelectLayer(0);
 8001808:	2000      	movs	r0, #0
 800180a:	f001 ff3b 	bl	8003684 <BSP_LCD_SelectLayer>
		  BSP_LCD_DrawBitmap (0,0, (uint8_t *)signalg);
 800180e:	4a63      	ldr	r2, [pc, #396]	; (800199c <main+0x81c>)
 8001810:	2100      	movs	r1, #0
 8001812:	2000      	movs	r0, #0
 8001814:	f002 f8b8 	bl	8003988 <BSP_LCD_DrawBitmap>
		  BSP_LCD_SelectLayer(1);
 8001818:	2001      	movs	r0, #1
 800181a:	f001 ff33 	bl	8003684 <BSP_LCD_SelectLayer>
		  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800181e:	4860      	ldr	r0, [pc, #384]	; (80019a0 <main+0x820>)
 8001820:	f001 ff40 	bl	80036a4 <BSP_LCD_SetTextColor>
		  BSP_LCD_DrawPolygon(P_S,Sig_buflen*2);
 8001824:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8001828:	485b      	ldr	r0, [pc, #364]	; (8001998 <main+0x818>)
 800182a:	f002 f85f 	bl	80038ec <BSP_LCD_DrawPolygon>
 800182e:	e08c      	b.n	800194a <main+0x7ca>
	  	  }
	  	  else
	  	  {
	  	  	 //FFT Graph
	  		for (int i = 0; i < FFT_len/2; i++)
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	e073      	b.n	800191e <main+0x79e>
		    {
	  			float p = (float)fftMagLogOutput[i]; //offset the dB values
 8001836:	4a53      	ldr	r2, [pc, #332]	; (8001984 <main+0x804>)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60bb      	str	r3, [r7, #8]
	  			p = (182.0 - (p * (182.0/-40.0))) + 37.0;
 8001842:	68b8      	ldr	r0, [r7, #8]
 8001844:	f7fe fe38 	bl	80004b8 <__aeabi_f2d>
 8001848:	a347      	add	r3, pc, #284	; (adr r3, 8001968 <main+0x7e8>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe fe8b 	bl	8000568 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	a345      	add	r3, pc, #276	; (adr r3, 8001970 <main+0x7f0>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7fe fccc 	bl	80001fc <__adddf3>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	4b48      	ldr	r3, [pc, #288]	; (8001994 <main+0x814>)
 8001872:	f7fe fcc3 	bl	80001fc <__adddf3>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f94b 	bl	8000b18 <__aeabi_d2f>
 8001882:	4603      	mov	r3, r0
 8001884:	60bb      	str	r3, [r7, #8]

	  			if (p < 37.0)
 8001886:	edd7 7a02 	vldr	s15, [r7, #8]
 800188a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80019a4 <main+0x824>
 800188e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001896:	d502      	bpl.n	800189e <main+0x71e>
	  			{
	  				p = 37.0;
 8001898:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <main+0x828>)
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	e00a      	b.n	80018b4 <main+0x734>
	  			}

	  			else if(219 < p)
 800189e:	edd7 7a02 	vldr	s15, [r7, #8]
 80018a2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80019ac <main+0x82c>
 80018a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ae:	dd01      	ble.n	80018b4 <main+0x734>
	  			{
	  				p = 219.0;
 80018b0:	4b3f      	ldr	r3, [pc, #252]	; (80019b0 <main+0x830>)
 80018b2:	60bb      	str	r3, [r7, #8]
	  			}
	  			P_F[i].X = (int)p;
 80018b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018bc:	ee17 3a90 	vmov	r3, s15
 80018c0:	b219      	sxth	r1, r3
 80018c2:	4a3c      	ldr	r2, [pc, #240]	; (80019b4 <main+0x834>)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
	  			P_F[FFT_len - i -1].X = (int)p;
 80018ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80018d8:	ee17 2a90 	vmov	r2, s15
 80018dc:	b211      	sxth	r1, r2
 80018de:	4a35      	ldr	r2, [pc, #212]	; (80019b4 <main+0x834>)
 80018e0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]

	  			P_F[i].Y = (i*2) + 52;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	331a      	adds	r3, #26
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	b219      	sxth	r1, r3
 80018f0:	4a30      	ldr	r2, [pc, #192]	; (80019b4 <main+0x834>)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	460a      	mov	r2, r1
 80018fa:	805a      	strh	r2, [r3, #2]
	  			P_F[FFT_len - i -1].Y = (i*2) + 52;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	331a      	adds	r3, #26
 8001900:	b29b      	uxth	r3, r3
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	b29a      	uxth	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800190c:	b211      	sxth	r1, r2
 800190e:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <main+0x834>)
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	460a      	mov	r2, r1
 8001916:	805a      	strh	r2, [r3, #2]
	  		for (int i = 0; i < FFT_len/2; i++)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	3301      	adds	r3, #1
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2b7f      	cmp	r3, #127	; 0x7f
 8001922:	dd88      	ble.n	8001836 <main+0x6b6>
	  		}
	  	  	 BSP_LCD_SelectLayer(0);
 8001924:	2000      	movs	r0, #0
 8001926:	f001 fead 	bl	8003684 <BSP_LCD_SelectLayer>
	  	  	 BSP_LCD_DrawBitmap (0,0, (uint8_t *)fft);
 800192a:	4a23      	ldr	r2, [pc, #140]	; (80019b8 <main+0x838>)
 800192c:	2100      	movs	r1, #0
 800192e:	2000      	movs	r0, #0
 8001930:	f002 f82a 	bl	8003988 <BSP_LCD_DrawBitmap>
	  	  	 BSP_LCD_SelectLayer(1);
 8001934:	2001      	movs	r0, #1
 8001936:	f001 fea5 	bl	8003684 <BSP_LCD_SelectLayer>
	  	  	 BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800193a:	4820      	ldr	r0, [pc, #128]	; (80019bc <main+0x83c>)
 800193c:	f001 feb2 	bl	80036a4 <BSP_LCD_SetTextColor>
	  	  	 BSP_LCD_DrawPolygon(P_F,FFT_len);
 8001940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001944:	481b      	ldr	r0, [pc, #108]	; (80019b4 <main+0x834>)
 8001946:	f001 ffd1 	bl	80038ec <BSP_LCD_DrawPolygon>
	  	  }
	HAL_TIM_Base_Start(&htim2);
 800194a:	481d      	ldr	r0, [pc, #116]	; (80019c0 <main+0x840>)
 800194c:	f008 fbca 	bl	800a0e4 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1,(uint32_t *)dmaBuffer,Buff_len);
 8001950:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001954:	490d      	ldr	r1, [pc, #52]	; (800198c <main+0x80c>)
 8001956:	481b      	ldr	r0, [pc, #108]	; (80019c4 <main+0x844>)
 8001958:	f002 fcc4 	bl	80042e4 <HAL_ADC_Start_DMA>
	}
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800195c:	f00c ffae 	bl	800e8bc <MX_USB_HOST_Process>
  if ((samplingFinished = 1))
 8001960:	e45b      	b.n	800121a <main+0x9a>
 8001962:	bf00      	nop
 8001964:	f3af 8000 	nop.w
 8001968:	33333333 	.word	0x33333333
 800196c:	40123333 	.word	0x40123333
 8001970:	00000000 	.word	0x00000000
 8001974:	4066c000 	.word	0x4066c000
 8001978:	20003624 	.word	0x20003624
 800197c:	3f880000 	.word	0x3f880000
 8001980:	40340000 	.word	0x40340000
 8001984:	20003a24 	.word	0x20003a24
 8001988:	40020000 	.word	0x40020000
 800198c:	20000440 	.word	0x20000440
 8001990:	3fa6c000 	.word	0x3fa6c000
 8001994:	40428000 	.word	0x40428000
 8001998:	20000a48 	.word	0x20000a48
 800199c:	08048d9c 	.word	0x08048d9c
 80019a0:	ff0000ff 	.word	0xff0000ff
 80019a4:	42140000 	.word	0x42140000
 80019a8:	42140000 	.word	0x42140000
 80019ac:	435b0000 	.word	0x435b0000
 80019b0:	435b0000 	.word	0x435b0000
 80019b4:	20001208 	.word	0x20001208
 80019b8:	08010964 	.word	0x08010964
 80019bc:	ffff0000 	.word	0xffff0000
 80019c0:	20000380 	.word	0x20000380
 80019c4:	200000f4 	.word	0x200000f4

080019c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b094      	sub	sp, #80	; 0x50
 80019cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ce:	f107 0320 	add.w	r3, r7, #32
 80019d2:	2230      	movs	r2, #48	; 0x30
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f00d fa92 	bl	800ef00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <SystemClock_Config+0xdc>)
 80019f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f4:	4a2b      	ldr	r2, [pc, #172]	; (8001aa4 <SystemClock_Config+0xdc>)
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fa:	6413      	str	r3, [r2, #64]	; 0x40
 80019fc:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <SystemClock_Config+0xdc>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a08:	2300      	movs	r3, #0
 8001a0a:	607b      	str	r3, [r7, #4]
 8001a0c:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <SystemClock_Config+0xe0>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a25      	ldr	r2, [pc, #148]	; (8001aa8 <SystemClock_Config+0xe0>)
 8001a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <SystemClock_Config+0xe0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a24:	2301      	movs	r3, #1
 8001a26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a38:	2308      	movs	r3, #8
 8001a3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001a3c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001a40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a42:	2302      	movs	r3, #2
 8001a44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a46:	2307      	movs	r3, #7
 8001a48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4a:	f107 0320 	add.w	r3, r7, #32
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f006 fdfe 	bl	8008650 <HAL_RCC_OscConfig>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a5a:	f000 fc55 	bl	8002308 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a5e:	f006 fda7 	bl	80085b0 <HAL_PWREx_EnableOverDrive>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001a68:	f000 fc4e 	bl	8002308 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a6c:	230f      	movs	r3, #15
 8001a6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a70:	2302      	movs	r3, #2
 8001a72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a78:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8001a7e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a82:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	2105      	movs	r1, #5
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f007 f858 	bl	8008b40 <HAL_RCC_ClockConfig>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001a96:	f000 fc37 	bl	8002308 <Error_Handler>
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	3750      	adds	r7, #80	; 0x50
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40007000 	.word	0x40007000

08001aac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <MX_ADC1_Init+0x9c>)
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <MX_ADC1_Init+0xa0>)
 8001ac2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001ac4:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <MX_ADC1_Init+0x9c>)
 8001ac6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001aca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <MX_ADC1_Init+0x9c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <MX_ADC1_Init+0x9c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ad8:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MX_ADC1_Init+0x9c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ade:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_ADC1_Init+0x9c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <MX_ADC1_Init+0x9c>)
 8001ae8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001aec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <MX_ADC1_Init+0x9c>)
 8001af0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001af4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <MX_ADC1_Init+0x9c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <MX_ADC1_Init+0x9c>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_ADC1_Init+0x9c>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <MX_ADC1_Init+0x9c>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b10:	480d      	ldr	r0, [pc, #52]	; (8001b48 <MX_ADC1_Init+0x9c>)
 8001b12:	f002 fba3 	bl	800425c <HAL_ADC_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001b1c:	f000 fbf4 	bl	8002308 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001b20:	230d      	movs	r3, #13
 8001b22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b24:	2301      	movs	r3, #1
 8001b26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_ADC1_Init+0x9c>)
 8001b32:	f002 fd55 	bl	80045e0 <HAL_ADC_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001b3c:	f000 fbe4 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200000f4 	.word	0x200000f4
 8001b4c:	40012000 	.word	0x40012000

08001b50 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_CRC_Init+0x20>)
 8001b56:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <MX_CRC_Init+0x24>)
 8001b58:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_CRC_Init+0x20>)
 8001b5c:	f003 f8d2 	bl	8004d04 <HAL_CRC_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001b66:	f000 fbcf 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	2000019c 	.word	0x2000019c
 8001b74:	40023000 	.word	0x40023000

08001b78 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001b7c:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <MX_DMA2D_Init+0x5c>)
 8001b7e:	4a16      	ldr	r2, [pc, #88]	; (8001bd8 <MX_DMA2D_Init+0x60>)
 8001b80:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <MX_DMA2D_Init+0x5c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <MX_DMA2D_Init+0x5c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001b8e:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <MX_DMA2D_Init+0x5c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MX_DMA2D_Init+0x5c>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <MX_DMA2D_Init+0x5c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <MX_DMA2D_Init+0x5c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <MX_DMA2D_Init+0x5c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001bac:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <MX_DMA2D_Init+0x5c>)
 8001bae:	f003 fd03 	bl	80055b8 <HAL_DMA2D_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001bb8:	f000 fba6 	bl	8002308 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	4805      	ldr	r0, [pc, #20]	; (8001bd4 <MX_DMA2D_Init+0x5c>)
 8001bc0:	f003 ff68 	bl	8005a94 <HAL_DMA2D_ConfigLayer>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001bca:	f000 fb9d 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200001a4 	.word	0x200001a4
 8001bd8:	4002b000 	.word	0x4002b000

08001bdc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001be0:	4b1b      	ldr	r3, [pc, #108]	; (8001c50 <MX_I2C3_Init+0x74>)
 8001be2:	4a1c      	ldr	r2, [pc, #112]	; (8001c54 <MX_I2C3_Init+0x78>)
 8001be4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001be6:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <MX_I2C3_Init+0x74>)
 8001be8:	4a1b      	ldr	r2, [pc, #108]	; (8001c58 <MX_I2C3_Init+0x7c>)
 8001bea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <MX_I2C3_Init+0x74>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <MX_I2C3_Init+0x74>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <MX_I2C3_Init+0x74>)
 8001bfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bfe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MX_I2C3_Init+0x74>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <MX_I2C3_Init+0x74>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c0c:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <MX_I2C3_Init+0x74>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_I2C3_Init+0x74>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c18:	480d      	ldr	r0, [pc, #52]	; (8001c50 <MX_I2C3_Init+0x74>)
 8001c1a:	f005 ff77 	bl	8007b0c <HAL_I2C_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c24:	f000 fb70 	bl	8002308 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4809      	ldr	r0, [pc, #36]	; (8001c50 <MX_I2C3_Init+0x74>)
 8001c2c:	f006 f8b2 	bl	8007d94 <HAL_I2CEx_ConfigAnalogFilter>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001c36:	f000 fb67 	bl	8002308 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <MX_I2C3_Init+0x74>)
 8001c3e:	f006 f8e5 	bl	8007e0c <HAL_I2CEx_ConfigDigitalFilter>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001c48:	f000 fb5e 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200001e4 	.word	0x200001e4
 8001c54:	40005c00 	.word	0x40005c00
 8001c58:	000186a0 	.word	0x000186a0

08001c5c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08e      	sub	sp, #56	; 0x38
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2234      	movs	r2, #52	; 0x34
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00d f949 	bl	800ef00 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001c6e:	4b39      	ldr	r3, [pc, #228]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001c70:	4a39      	ldr	r2, [pc, #228]	; (8001d58 <MX_LTDC_Init+0xfc>)
 8001c72:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001c74:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001c7a:	4b36      	ldr	r3, [pc, #216]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001c80:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001c86:	4b33      	ldr	r3, [pc, #204]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001c8e:	2209      	movs	r2, #9
 8001c90:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8001c92:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8001c98:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001c9a:	221d      	movs	r2, #29
 8001c9c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8001c9e:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001ca6:	f240 120d 	movw	r2, #269	; 0x10d
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8001cac:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001cae:	f240 1243 	movw	r2, #323	; 0x143
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8001cb4:	4b27      	ldr	r3, [pc, #156]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001cb6:	f240 1217 	movw	r2, #279	; 0x117
 8001cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8001cbc:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001cbe:	f240 1247 	movw	r2, #327	; 0x147
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001cc4:	4b23      	ldr	r3, [pc, #140]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001ccc:	4b21      	ldr	r3, [pc, #132]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001cd4:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001cdc:	481d      	ldr	r0, [pc, #116]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001cde:	f006 f8d5 	bl	8007e8c <HAL_LTDC_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001ce8:	f000 fb0e 	bl	8002308 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8001cf0:	23f0      	movs	r3, #240	; 0xf0
 8001cf2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8001cf8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001cfc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001d02:	23ff      	movs	r3, #255	; 0xff
 8001d04:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001d0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d0e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001d10:	2307      	movs	r3, #7
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8001d14:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8001d18:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8001d1a:	23f0      	movs	r3, #240	; 0xf0
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8001d1e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	2200      	movs	r2, #0
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_LTDC_Init+0xf8>)
 8001d3e:	f006 fa37 	bl	80081b0 <HAL_LTDC_ConfigLayer>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8001d48:	f000 fade 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001d4c:	bf00      	nop
 8001d4e:	3738      	adds	r7, #56	; 0x38
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000238 	.word	0x20000238
 8001d58:	40016800 	.word	0x40016800

08001d5c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001d60:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <MX_SPI5_Init+0x64>)
 8001d62:	4a18      	ldr	r2, [pc, #96]	; (8001dc4 <MX_SPI5_Init+0x68>)
 8001d64:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <MX_SPI5_Init+0x64>)
 8001d68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d6c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001d6e:	4b14      	ldr	r3, [pc, #80]	; (8001dc0 <MX_SPI5_Init+0x64>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <MX_SPI5_Init+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d7a:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <MX_SPI5_Init+0x64>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <MX_SPI5_Init+0x64>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <MX_SPI5_Init+0x64>)
 8001d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <MX_SPI5_Init+0x64>)
 8001d90:	2218      	movs	r2, #24
 8001d92:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <MX_SPI5_Init+0x64>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <MX_SPI5_Init+0x64>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001da0:	4b07      	ldr	r3, [pc, #28]	; (8001dc0 <MX_SPI5_Init+0x64>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001da6:	4b06      	ldr	r3, [pc, #24]	; (8001dc0 <MX_SPI5_Init+0x64>)
 8001da8:	220a      	movs	r2, #10
 8001daa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001dac:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <MX_SPI5_Init+0x64>)
 8001dae:	f007 fb6a 	bl	8009486 <HAL_SPI_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001db8:	f000 faa6 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	200002e0 	.word	0x200002e0
 8001dc4:	40015000 	.word	0x40015000

08001dc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dce:	f107 0308 	add.w	r3, r7, #8
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]
 8001dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ddc:	463b      	mov	r3, r7
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001de4:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <MX_TIM1_Init+0x98>)
 8001de6:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <MX_TIM1_Init+0x9c>)
 8001de8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001dea:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <MX_TIM1_Init+0x98>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <MX_TIM1_Init+0x98>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <MX_TIM1_Init+0x98>)
 8001df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <MX_TIM1_Init+0x98>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <MX_TIM1_Init+0x98>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <MX_TIM1_Init+0x98>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e10:	4813      	ldr	r0, [pc, #76]	; (8001e60 <MX_TIM1_Init+0x98>)
 8001e12:	f008 f917 	bl	800a044 <HAL_TIM_Base_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001e1c:	f000 fa74 	bl	8002308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <MX_TIM1_Init+0x98>)
 8001e2e:	f008 fcdf 	bl	800a7f0 <HAL_TIM_ConfigClockSource>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001e38:	f000 fa66 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e44:	463b      	mov	r3, r7
 8001e46:	4619      	mov	r1, r3
 8001e48:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_TIM1_Init+0x98>)
 8001e4a:	f009 f8d1 	bl	800aff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e54:	f000 fa58 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000338 	.word	0x20000338
 8001e64:	40010000 	.word	0x40010000

08001e68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08e      	sub	sp, #56	; 0x38
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e72:	2200      	movs	r2, #0
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	605a      	str	r2, [r3, #4]
 8001e78:	609a      	str	r2, [r3, #8]
 8001e7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7c:	f107 0320 	add.w	r3, r7, #32
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
 8001e94:	615a      	str	r2, [r3, #20]
 8001e96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e98:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <MX_TIM2_Init+0xe8>)
 8001e9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <MX_TIM2_Init+0xe8>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <MX_TIM2_Init+0xe8>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1125-1;
 8001eac:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <MX_TIM2_Init+0xe8>)
 8001eae:	f240 4264 	movw	r2, #1124	; 0x464
 8001eb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <MX_TIM2_Init+0xe8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <MX_TIM2_Init+0xe8>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ec0:	4823      	ldr	r0, [pc, #140]	; (8001f50 <MX_TIM2_Init+0xe8>)
 8001ec2:	f008 f8bf 	bl	800a044 <HAL_TIM_Base_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001ecc:	f000 fa1c 	bl	8002308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ed6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eda:	4619      	mov	r1, r3
 8001edc:	481c      	ldr	r0, [pc, #112]	; (8001f50 <MX_TIM2_Init+0xe8>)
 8001ede:	f008 fc87 	bl	800a7f0 <HAL_TIM_ConfigClockSource>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001ee8:	f000 fa0e 	bl	8002308 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001eec:	4818      	ldr	r0, [pc, #96]	; (8001f50 <MX_TIM2_Init+0xe8>)
 8001eee:	f008 f9f9 	bl	800a2e4 <HAL_TIM_OC_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ef8:	f000 fa06 	bl	8002308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001efc:	2320      	movs	r3, #32
 8001efe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f04:	f107 0320 	add.w	r3, r7, #32
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4811      	ldr	r0, [pc, #68]	; (8001f50 <MX_TIM2_Init+0xe8>)
 8001f0c:	f009 f870 	bl	800aff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f16:	f000 f9f7 	bl	8002308 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001f1a:	2330      	movs	r3, #48	; 0x30
 8001f1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4807      	ldr	r0, [pc, #28]	; (8001f50 <MX_TIM2_Init+0xe8>)
 8001f32:	f008 fc01 	bl	800a738 <HAL_TIM_OC_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001f3c:	f000 f9e4 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f40:	4803      	ldr	r0, [pc, #12]	; (8001f50 <MX_TIM2_Init+0xe8>)
 8001f42:	f000 fd0f 	bl	8002964 <HAL_TIM_MspPostInit>

}
 8001f46:	bf00      	nop
 8001f48:	3738      	adds	r7, #56	; 0x38
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000380 	.word	0x20000380

08001f54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_USART1_UART_Init+0x4c>)
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <MX_USART1_UART_Init+0x50>)
 8001f5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <MX_USART1_UART_Init+0x4c>)
 8001f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <MX_USART1_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_USART1_UART_Init+0x4c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <MX_USART1_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_USART1_UART_Init+0x4c>)
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <MX_USART1_UART_Init+0x4c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <MX_USART1_UART_Init+0x4c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_USART1_UART_Init+0x4c>)
 8001f8c:	f009 f8c0 	bl	800b110 <HAL_UART_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f96:	f000 f9b7 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200003c8 	.word	0x200003c8
 8001fa4:	40011000 	.word	0x40011000

08001fa8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <MX_DMA_Init+0x3c>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <MX_DMA_Init+0x3c>)
 8001fb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <MX_DMA_Init+0x3c>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	2038      	movs	r0, #56	; 0x38
 8001fd0:	f002 fe6e 	bl	8004cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001fd4:	2038      	movs	r0, #56	; 0x38
 8001fd6:	f002 fe87 	bl	8004ce8 <HAL_NVIC_EnableIRQ>

}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
 8001ffc:	615a      	str	r2, [r3, #20]
 8001ffe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002000:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <MX_FMC_Init+0x98>)
 8002002:	4a20      	ldr	r2, [pc, #128]	; (8002084 <MX_FMC_Init+0x9c>)
 8002004:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8002006:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <MX_FMC_Init+0x98>)
 8002008:	2201      	movs	r2, #1
 800200a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800200c:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <MX_FMC_Init+0x98>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002012:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <MX_FMC_Init+0x98>)
 8002014:	2204      	movs	r2, #4
 8002016:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <MX_FMC_Init+0x98>)
 800201a:	2210      	movs	r2, #16
 800201c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800201e:	4b18      	ldr	r3, [pc, #96]	; (8002080 <MX_FMC_Init+0x98>)
 8002020:	2240      	movs	r2, #64	; 0x40
 8002022:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <MX_FMC_Init+0x98>)
 8002026:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800202a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <MX_FMC_Init+0x98>)
 800202e:	2200      	movs	r2, #0
 8002030:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002032:	4b13      	ldr	r3, [pc, #76]	; (8002080 <MX_FMC_Init+0x98>)
 8002034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002038:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800203a:	4b11      	ldr	r3, [pc, #68]	; (8002080 <MX_FMC_Init+0x98>)
 800203c:	2200      	movs	r2, #0
 800203e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <MX_FMC_Init+0x98>)
 8002042:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002046:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8002048:	2302      	movs	r3, #2
 800204a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800204c:	2307      	movs	r3, #7
 800204e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8002050:	2304      	movs	r3, #4
 8002052:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8002054:	2307      	movs	r3, #7
 8002056:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8002058:	2303      	movs	r3, #3
 800205a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800205c:	2302      	movs	r3, #2
 800205e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8002060:	2302      	movs	r3, #2
 8002062:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	4619      	mov	r1, r3
 8002068:	4805      	ldr	r0, [pc, #20]	; (8002080 <MX_FMC_Init+0x98>)
 800206a:	f007 f97b 	bl	8009364 <HAL_SDRAM_Init>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8002074:	f000 f948 	bl	8002308 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002078:	bf00      	nop
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	2000040c 	.word	0x2000040c
 8002084:	a0000140 	.word	0xa0000140

08002088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08e      	sub	sp, #56	; 0x38
 800208c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
 80020a2:	4b7b      	ldr	r3, [pc, #492]	; (8002290 <MX_GPIO_Init+0x208>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a7a      	ldr	r2, [pc, #488]	; (8002290 <MX_GPIO_Init+0x208>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b78      	ldr	r3, [pc, #480]	; (8002290 <MX_GPIO_Init+0x208>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	623b      	str	r3, [r7, #32]
 80020b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
 80020be:	4b74      	ldr	r3, [pc, #464]	; (8002290 <MX_GPIO_Init+0x208>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a73      	ldr	r2, [pc, #460]	; (8002290 <MX_GPIO_Init+0x208>)
 80020c4:	f043 0320 	orr.w	r3, r3, #32
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b71      	ldr	r3, [pc, #452]	; (8002290 <MX_GPIO_Init+0x208>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	61bb      	str	r3, [r7, #24]
 80020da:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <MX_GPIO_Init+0x208>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a6c      	ldr	r2, [pc, #432]	; (8002290 <MX_GPIO_Init+0x208>)
 80020e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <MX_GPIO_Init+0x208>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	4b66      	ldr	r3, [pc, #408]	; (8002290 <MX_GPIO_Init+0x208>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a65      	ldr	r2, [pc, #404]	; (8002290 <MX_GPIO_Init+0x208>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b63      	ldr	r3, [pc, #396]	; (8002290 <MX_GPIO_Init+0x208>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	617b      	str	r3, [r7, #20]
 800210c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	4b5f      	ldr	r3, [pc, #380]	; (8002290 <MX_GPIO_Init+0x208>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a5e      	ldr	r2, [pc, #376]	; (8002290 <MX_GPIO_Init+0x208>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b5c      	ldr	r3, [pc, #368]	; (8002290 <MX_GPIO_Init+0x208>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	4b58      	ldr	r3, [pc, #352]	; (8002290 <MX_GPIO_Init+0x208>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a57      	ldr	r2, [pc, #348]	; (8002290 <MX_GPIO_Init+0x208>)
 8002134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b55      	ldr	r3, [pc, #340]	; (8002290 <MX_GPIO_Init+0x208>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	4b51      	ldr	r3, [pc, #324]	; (8002290 <MX_GPIO_Init+0x208>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a50      	ldr	r2, [pc, #320]	; (8002290 <MX_GPIO_Init+0x208>)
 8002150:	f043 0310 	orr.w	r3, r3, #16
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b4e      	ldr	r3, [pc, #312]	; (8002290 <MX_GPIO_Init+0x208>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
 8002166:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <MX_GPIO_Init+0x208>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a49      	ldr	r2, [pc, #292]	; (8002290 <MX_GPIO_Init+0x208>)
 800216c:	f043 0308 	orr.w	r3, r3, #8
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b47      	ldr	r3, [pc, #284]	; (8002290 <MX_GPIO_Init+0x208>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800217e:	2200      	movs	r2, #0
 8002180:	2116      	movs	r1, #22
 8002182:	4844      	ldr	r0, [pc, #272]	; (8002294 <MX_GPIO_Init+0x20c>)
 8002184:	f004 f884 	bl	8006290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002188:	2200      	movs	r2, #0
 800218a:	2180      	movs	r1, #128	; 0x80
 800218c:	4842      	ldr	r0, [pc, #264]	; (8002298 <MX_GPIO_Init+0x210>)
 800218e:	f004 f87f 	bl	8006290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002192:	2200      	movs	r2, #0
 8002194:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8002198:	4840      	ldr	r0, [pc, #256]	; (800229c <MX_GPIO_Init+0x214>)
 800219a:	f004 f879 	bl	8006290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	f246 0108 	movw	r1, #24584	; 0x6008
 80021a4:	483e      	ldr	r0, [pc, #248]	; (80022a0 <MX_GPIO_Init+0x218>)
 80021a6:	f004 f873 	bl	8006290 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80021aa:	2316      	movs	r3, #22
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ae:	2301      	movs	r3, #1
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021be:	4619      	mov	r1, r3
 80021c0:	4834      	ldr	r0, [pc, #208]	; (8002294 <MX_GPIO_Init+0x20c>)
 80021c2:	f003 fd95 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80021c6:	f248 0307 	movw	r3, #32775	; 0x8007
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021cc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80021d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021da:	4619      	mov	r1, r3
 80021dc:	482e      	ldr	r0, [pc, #184]	; (8002298 <MX_GPIO_Init+0x210>)
 80021de:	f003 fd87 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80021e2:	2380      	movs	r3, #128	; 0x80
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80021f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021f6:	4619      	mov	r1, r3
 80021f8:	4827      	ldr	r0, [pc, #156]	; (8002298 <MX_GPIO_Init+0x210>)
 80021fa:	f003 fd79 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80021fe:	2320      	movs	r3, #32
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002202:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8002206:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800220c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002210:	4619      	mov	r1, r3
 8002212:	4820      	ldr	r0, [pc, #128]	; (8002294 <MX_GPIO_Init+0x20c>)
 8002214:	f003 fd6c 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002218:	2304      	movs	r3, #4
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800221c:	2300      	movs	r3, #0
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002224:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002228:	4619      	mov	r1, r3
 800222a:	481e      	ldr	r0, [pc, #120]	; (80022a4 <MX_GPIO_Init+0x21c>)
 800222c:	f003 fd60 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002230:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002236:	2300      	movs	r3, #0
 8002238:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 800223e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002242:	4619      	mov	r1, r3
 8002244:	4815      	ldr	r0, [pc, #84]	; (800229c <MX_GPIO_Init+0x214>)
 8002246:	f003 fd53 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800224a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002250:	2301      	movs	r3, #1
 8002252:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800225c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002260:	4619      	mov	r1, r3
 8002262:	480e      	ldr	r0, [pc, #56]	; (800229c <MX_GPIO_Init+0x214>)
 8002264:	f003 fd44 	bl	8005cf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|LD3_Pin|LD4_Pin;
 8002268:	f246 0308 	movw	r3, #24584	; 0x6008
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226e:	2301      	movs	r3, #1
 8002270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002272:	2300      	movs	r3, #0
 8002274:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002276:	2300      	movs	r3, #0
 8002278:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800227a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800227e:	4619      	mov	r1, r3
 8002280:	4807      	ldr	r0, [pc, #28]	; (80022a0 <MX_GPIO_Init+0x218>)
 8002282:	f003 fd35 	bl	8005cf0 <HAL_GPIO_Init>

}
 8002286:	bf00      	nop
 8002288:	3738      	adds	r7, #56	; 0x38
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	40020800 	.word	0x40020800
 8002298:	40020000 	.word	0x40020000
 800229c:	40020c00 	.word	0x40020c00
 80022a0:	40021800 	.word	0x40021800
 80022a4:	40020400 	.word	0x40020400

080022a8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOG,GPIO_PIN_3);
 80022b0:	2108      	movs	r1, #8
 80022b2:	4808      	ldr	r0, [pc, #32]	; (80022d4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80022b4:	f004 f805 	bl	80062c2 <HAL_GPIO_TogglePin>
	HAL_TIM_Base_Stop(&htim2);
 80022b8:	4807      	ldr	r0, [pc, #28]	; (80022d8 <HAL_ADC_ConvCpltCallback+0x30>)
 80022ba:	f007 ff7b 	bl	800a1b4 <HAL_TIM_Base_Stop>
	HAL_ADC_Stop_DMA(&hadc1);
 80022be:	4807      	ldr	r0, [pc, #28]	; (80022dc <HAL_ADC_ConvCpltCallback+0x34>)
 80022c0:	f002 f920 	bl	8004504 <HAL_ADC_Stop_DMA>
	samplingFinished = 1;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_ADC_ConvCpltCallback+0x38>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40021800 	.word	0x40021800
 80022d8:	20000380 	.word	0x20000380
 80022dc:	200000f4 	.word	0x200000f4
 80022e0:	20003e24 	.word	0x20003e24

080022e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a04      	ldr	r2, [pc, #16]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d101      	bne.n	80022fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022f6:	f001 ff6d 	bl	80041d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40001000 	.word	0x40001000

08002308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800230c:	b672      	cpsid	i
}
 800230e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002310:	e7fe      	b.n	8002310 <Error_Handler+0x8>
	...

08002314 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <HAL_MspInit+0x4c>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <HAL_MspInit+0x4c>)
 8002324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002328:	6453      	str	r3, [r2, #68]	; 0x44
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <HAL_MspInit+0x4c>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002332:	607b      	str	r3, [r7, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	603b      	str	r3, [r7, #0]
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_MspInit+0x4c>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a08      	ldr	r2, [pc, #32]	; (8002360 <HAL_MspInit+0x4c>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <HAL_MspInit+0x4c>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a2f      	ldr	r2, [pc, #188]	; (8002440 <HAL_ADC_MspInit+0xdc>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d157      	bne.n	8002436 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	4b2e      	ldr	r3, [pc, #184]	; (8002444 <HAL_ADC_MspInit+0xe0>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238e:	4a2d      	ldr	r2, [pc, #180]	; (8002444 <HAL_ADC_MspInit+0xe0>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	6453      	str	r3, [r2, #68]	; 0x44
 8002396:	4b2b      	ldr	r3, [pc, #172]	; (8002444 <HAL_ADC_MspInit+0xe0>)
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b27      	ldr	r3, [pc, #156]	; (8002444 <HAL_ADC_MspInit+0xe0>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	4a26      	ldr	r2, [pc, #152]	; (8002444 <HAL_ADC_MspInit+0xe0>)
 80023ac:	f043 0304 	orr.w	r3, r3, #4
 80023b0:	6313      	str	r3, [r2, #48]	; 0x30
 80023b2:	4b24      	ldr	r3, [pc, #144]	; (8002444 <HAL_ADC_MspInit+0xe0>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	f003 0304 	and.w	r3, r3, #4
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023be:	2308      	movs	r3, #8
 80023c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023c2:	2303      	movs	r3, #3
 80023c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4619      	mov	r1, r3
 80023d0:	481d      	ldr	r0, [pc, #116]	; (8002448 <HAL_ADC_MspInit+0xe4>)
 80023d2:	f003 fc8d 	bl	8005cf0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80023d6:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_ADC_MspInit+0xe8>)
 80023d8:	4a1d      	ldr	r2, [pc, #116]	; (8002450 <HAL_ADC_MspInit+0xec>)
 80023da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80023dc:	4b1b      	ldr	r3, [pc, #108]	; (800244c <HAL_ADC_MspInit+0xe8>)
 80023de:	2200      	movs	r2, #0
 80023e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023e2:	4b1a      	ldr	r3, [pc, #104]	; (800244c <HAL_ADC_MspInit+0xe8>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <HAL_ADC_MspInit+0xe8>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023ee:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_ADC_MspInit+0xe8>)
 80023f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023f6:	4b15      	ldr	r3, [pc, #84]	; (800244c <HAL_ADC_MspInit+0xe8>)
 80023f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023fe:	4b13      	ldr	r3, [pc, #76]	; (800244c <HAL_ADC_MspInit+0xe8>)
 8002400:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002404:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_ADC_MspInit+0xe8>)
 8002408:	f44f 7280 	mov.w	r2, #256	; 0x100
 800240c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <HAL_ADC_MspInit+0xe8>)
 8002410:	2200      	movs	r2, #0
 8002412:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_ADC_MspInit+0xe8>)
 8002416:	2200      	movs	r2, #0
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800241a:	480c      	ldr	r0, [pc, #48]	; (800244c <HAL_ADC_MspInit+0xe8>)
 800241c:	f002 fc8e 	bl	8004d3c <HAL_DMA_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002426:	f7ff ff6f 	bl	8002308 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a07      	ldr	r2, [pc, #28]	; (800244c <HAL_ADC_MspInit+0xe8>)
 800242e:	639a      	str	r2, [r3, #56]	; 0x38
 8002430:	4a06      	ldr	r2, [pc, #24]	; (800244c <HAL_ADC_MspInit+0xe8>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002436:	bf00      	nop
 8002438:	3728      	adds	r7, #40	; 0x28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40012000 	.word	0x40012000
 8002444:	40023800 	.word	0x40023800
 8002448:	40020800 	.word	0x40020800
 800244c:	2000013c 	.word	0x2000013c
 8002450:	40026410 	.word	0x40026410

08002454 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <HAL_CRC_MspInit+0x3c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d10d      	bne.n	8002482 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_CRC_MspInit+0x40>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a09      	ldr	r2, [pc, #36]	; (8002494 <HAL_CRC_MspInit+0x40>)
 8002470:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <HAL_CRC_MspInit+0x40>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40023000 	.word	0x40023000
 8002494:	40023800 	.word	0x40023800

08002498 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <HAL_DMA2D_MspInit+0x48>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d115      	bne.n	80024d6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <HAL_DMA2D_MspInit+0x4c>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	4a0c      	ldr	r2, [pc, #48]	; (80024e4 <HAL_DMA2D_MspInit+0x4c>)
 80024b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024b8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <HAL_DMA2D_MspInit+0x4c>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2105      	movs	r1, #5
 80024ca:	205a      	movs	r0, #90	; 0x5a
 80024cc:	f002 fbf0 	bl	8004cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80024d0:	205a      	movs	r0, #90	; 0x5a
 80024d2:	f002 fc09 	bl	8004ce8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80024d6:	bf00      	nop
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	4002b000 	.word	0x4002b000
 80024e4:	40023800 	.word	0x40023800

080024e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a29      	ldr	r2, [pc, #164]	; (80025ac <HAL_I2C_MspInit+0xc4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d14b      	bne.n	80025a2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <HAL_I2C_MspInit+0xc8>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a27      	ldr	r2, [pc, #156]	; (80025b0 <HAL_I2C_MspInit+0xc8>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <HAL_I2C_MspInit+0xc8>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	613b      	str	r3, [r7, #16]
 8002524:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <HAL_I2C_MspInit+0xc8>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a20      	ldr	r2, [pc, #128]	; (80025b0 <HAL_I2C_MspInit+0xc8>)
 8002530:	f043 0301 	orr.w	r3, r3, #1
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_I2C_MspInit+0xc8>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002542:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002548:	2312      	movs	r3, #18
 800254a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800254c:	2301      	movs	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002554:	2304      	movs	r3, #4
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4619      	mov	r1, r3
 800255e:	4815      	ldr	r0, [pc, #84]	; (80025b4 <HAL_I2C_MspInit+0xcc>)
 8002560:	f003 fbc6 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800256a:	2312      	movs	r3, #18
 800256c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800256e:	2301      	movs	r3, #1
 8002570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002572:	2300      	movs	r3, #0
 8002574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002576:	2304      	movs	r3, #4
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4619      	mov	r1, r3
 8002580:	480d      	ldr	r0, [pc, #52]	; (80025b8 <HAL_I2C_MspInit+0xd0>)
 8002582:	f003 fbb5 	bl	8005cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_I2C_MspInit+0xc8>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <HAL_I2C_MspInit+0xc8>)
 8002590:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_I2C_MspInit+0xc8>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800259e:	60bb      	str	r3, [r7, #8]
 80025a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80025a2:	bf00      	nop
 80025a4:	3728      	adds	r7, #40	; 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40005c00 	.word	0x40005c00
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020800 	.word	0x40020800
 80025b8:	40020000 	.word	0x40020000

080025bc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b09a      	sub	sp, #104	; 0x68
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d8:	2230      	movs	r2, #48	; 0x30
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f00c fc8f 	bl	800ef00 <memset>
  if(hltdc->Instance==LTDC)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a89      	ldr	r2, [pc, #548]	; (800280c <HAL_LTDC_MspInit+0x250>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	f040 810a 	bne.w	8002802 <HAL_LTDC_MspInit+0x246>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80025ee:	2308      	movs	r3, #8
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 80025f2:	2364      	movs	r3, #100	; 0x64
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80025f6:	2304      	movs	r3, #4
 80025f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80025fa:	2300      	movs	r3, #0
 80025fc:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002602:	4618      	mov	r0, r3
 8002604:	f006 fcee 	bl	8008fe4 <HAL_RCCEx_PeriphCLKConfig>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800260e:	f7ff fe7b 	bl	8002308 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	623b      	str	r3, [r7, #32]
 8002616:	4b7e      	ldr	r3, [pc, #504]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 8002618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261a:	4a7d      	ldr	r2, [pc, #500]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 800261c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002620:	6453      	str	r3, [r2, #68]	; 0x44
 8002622:	4b7b      	ldr	r3, [pc, #492]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800262a:	623b      	str	r3, [r7, #32]
 800262c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	4b77      	ldr	r3, [pc, #476]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a76      	ldr	r2, [pc, #472]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 8002638:	f043 0320 	orr.w	r3, r3, #32
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b74      	ldr	r3, [pc, #464]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	61fb      	str	r3, [r7, #28]
 8002648:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	4b70      	ldr	r3, [pc, #448]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a6f      	ldr	r2, [pc, #444]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b6d      	ldr	r3, [pc, #436]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	4b69      	ldr	r3, [pc, #420]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	4a68      	ldr	r2, [pc, #416]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 8002670:	f043 0302 	orr.w	r3, r3, #2
 8002674:	6313      	str	r3, [r2, #48]	; 0x30
 8002676:	4b66      	ldr	r3, [pc, #408]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	4b62      	ldr	r3, [pc, #392]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	4a61      	ldr	r2, [pc, #388]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 800268c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002690:	6313      	str	r3, [r2, #48]	; 0x30
 8002692:	4b5f      	ldr	r3, [pc, #380]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b5b      	ldr	r3, [pc, #364]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a5a      	ldr	r2, [pc, #360]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b58      	ldr	r3, [pc, #352]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	4b54      	ldr	r3, [pc, #336]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	4a53      	ldr	r2, [pc, #332]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 80026c4:	f043 0308 	orr.w	r3, r3, #8
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b51      	ldr	r3, [pc, #324]	; (8002810 <HAL_LTDC_MspInit+0x254>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80026d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026da:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e4:	2300      	movs	r3, #0
 80026e6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026e8:	230e      	movs	r3, #14
 80026ea:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80026ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026f0:	4619      	mov	r1, r3
 80026f2:	4848      	ldr	r0, [pc, #288]	; (8002814 <HAL_LTDC_MspInit+0x258>)
 80026f4:	f003 fafc 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80026f8:	f641 0358 	movw	r3, #6232	; 0x1858
 80026fc:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800270a:	230e      	movs	r3, #14
 800270c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002712:	4619      	mov	r1, r3
 8002714:	4840      	ldr	r0, [pc, #256]	; (8002818 <HAL_LTDC_MspInit+0x25c>)
 8002716:	f003 faeb 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800271a:	2303      	movs	r3, #3
 800271c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800272a:	2309      	movs	r3, #9
 800272c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002732:	4619      	mov	r1, r3
 8002734:	4839      	ldr	r0, [pc, #228]	; (800281c <HAL_LTDC_MspInit+0x260>)
 8002736:	f003 fadb 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800273a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800273e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800274c:	230e      	movs	r3, #14
 800274e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002750:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002754:	4619      	mov	r1, r3
 8002756:	4831      	ldr	r0, [pc, #196]	; (800281c <HAL_LTDC_MspInit+0x260>)
 8002758:	f003 faca 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800275c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002760:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002762:	2302      	movs	r3, #2
 8002764:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276a:	2300      	movs	r3, #0
 800276c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800276e:	230e      	movs	r3, #14
 8002770:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002772:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002776:	4619      	mov	r1, r3
 8002778:	4829      	ldr	r0, [pc, #164]	; (8002820 <HAL_LTDC_MspInit+0x264>)
 800277a:	f003 fab9 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800277e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002782:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002784:	2302      	movs	r3, #2
 8002786:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278c:	2300      	movs	r3, #0
 800278e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002790:	230e      	movs	r3, #14
 8002792:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002794:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002798:	4619      	mov	r1, r3
 800279a:	4822      	ldr	r0, [pc, #136]	; (8002824 <HAL_LTDC_MspInit+0x268>)
 800279c:	f003 faa8 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80027a0:	2348      	movs	r3, #72	; 0x48
 80027a2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2300      	movs	r3, #0
 80027ae:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80027b0:	230e      	movs	r3, #14
 80027b2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027b8:	4619      	mov	r1, r3
 80027ba:	481b      	ldr	r0, [pc, #108]	; (8002828 <HAL_LTDC_MspInit+0x26c>)
 80027bc:	f003 fa98 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80027c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027c4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80027d2:	2309      	movs	r3, #9
 80027d4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027da:	4619      	mov	r1, r3
 80027dc:	4810      	ldr	r0, [pc, #64]	; (8002820 <HAL_LTDC_MspInit+0x264>)
 80027de:	f003 fa87 	bl	8005cf0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 10, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	210a      	movs	r1, #10
 80027e6:	2058      	movs	r0, #88	; 0x58
 80027e8:	f002 fa62 	bl	8004cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80027ec:	2058      	movs	r0, #88	; 0x58
 80027ee:	f002 fa7b 	bl	8004ce8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2100      	movs	r1, #0
 80027f6:	2059      	movs	r0, #89	; 0x59
 80027f8:	f002 fa5a 	bl	8004cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 80027fc:	2059      	movs	r0, #89	; 0x59
 80027fe:	f002 fa73 	bl	8004ce8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8002802:	bf00      	nop
 8002804:	3768      	adds	r7, #104	; 0x68
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40016800 	.word	0x40016800
 8002810:	40023800 	.word	0x40023800
 8002814:	40021400 	.word	0x40021400
 8002818:	40020000 	.word	0x40020000
 800281c:	40020400 	.word	0x40020400
 8002820:	40021800 	.word	0x40021800
 8002824:	40020800 	.word	0x40020800
 8002828:	40020c00 	.word	0x40020c00

0800282c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	; 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <HAL_SPI_MspInit+0x84>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d12c      	bne.n	80028a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002856:	4a17      	ldr	r2, [pc, #92]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800285c:	6453      	str	r3, [r2, #68]	; 0x44
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b11      	ldr	r3, [pc, #68]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 8002874:	f043 0320 	orr.w	r3, r3, #32
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <HAL_SPI_MspInit+0x88>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002886:	f44f 7360 	mov.w	r3, #896	; 0x380
 800288a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002894:	2300      	movs	r3, #0
 8002896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002898:	2305      	movs	r3, #5
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	4619      	mov	r1, r3
 80028a2:	4805      	ldr	r0, [pc, #20]	; (80028b8 <HAL_SPI_MspInit+0x8c>)
 80028a4:	f003 fa24 	bl	8005cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80028a8:	bf00      	nop
 80028aa:	3728      	adds	r7, #40	; 0x28
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40015000 	.word	0x40015000
 80028b4:	40023800 	.word	0x40023800
 80028b8:	40021400 	.word	0x40021400

080028bc <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a08      	ldr	r2, [pc, #32]	; (80028ec <HAL_SPI_MspDeInit+0x30>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10a      	bne.n	80028e4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80028ce:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_SPI_MspDeInit+0x34>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <HAL_SPI_MspDeInit+0x34>)
 80028d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80028d8:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80028da:	f44f 7160 	mov.w	r1, #896	; 0x380
 80028de:	4805      	ldr	r0, [pc, #20]	; (80028f4 <HAL_SPI_MspDeInit+0x38>)
 80028e0:	f003 fbb2 	bl	8006048 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40015000 	.word	0x40015000
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40021400 	.word	0x40021400

080028f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a15      	ldr	r2, [pc, #84]	; (800295c <HAL_TIM_Base_MspInit+0x64>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10e      	bne.n	8002928 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <HAL_TIM_Base_MspInit+0x68>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	4a13      	ldr	r2, [pc, #76]	; (8002960 <HAL_TIM_Base_MspInit+0x68>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6453      	str	r3, [r2, #68]	; 0x44
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <HAL_TIM_Base_MspInit+0x68>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002926:	e012      	b.n	800294e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002930:	d10d      	bne.n	800294e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_TIM_Base_MspInit+0x68>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a09      	ldr	r2, [pc, #36]	; (8002960 <HAL_TIM_Base_MspInit+0x68>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <HAL_TIM_Base_MspInit+0x68>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40010000 	.word	0x40010000
 8002960:	40023800 	.word	0x40023800

08002964 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d11d      	bne.n	80029c2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_TIM_MspPostInit+0x68>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a0f      	ldr	r2, [pc, #60]	; (80029cc <HAL_TIM_MspPostInit+0x68>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HAL_TIM_MspPostInit+0x68>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80029a2:	2320      	movs	r3, #32
 80029a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029b2:	2301      	movs	r3, #1
 80029b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	4619      	mov	r1, r3
 80029bc:	4804      	ldr	r0, [pc, #16]	; (80029d0 <HAL_TIM_MspPostInit+0x6c>)
 80029be:	f003 f997 	bl	8005cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80029c2:	bf00      	nop
 80029c4:	3720      	adds	r7, #32
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020000 	.word	0x40020000

080029d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a19      	ldr	r2, [pc, #100]	; (8002a58 <HAL_UART_MspInit+0x84>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d12c      	bne.n	8002a50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	4b18      	ldr	r3, [pc, #96]	; (8002a5c <HAL_UART_MspInit+0x88>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	4a17      	ldr	r2, [pc, #92]	; (8002a5c <HAL_UART_MspInit+0x88>)
 8002a00:	f043 0310 	orr.w	r3, r3, #16
 8002a04:	6453      	str	r3, [r2, #68]	; 0x44
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <HAL_UART_MspInit+0x88>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b11      	ldr	r3, [pc, #68]	; (8002a5c <HAL_UART_MspInit+0x88>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4a10      	ldr	r2, [pc, #64]	; (8002a5c <HAL_UART_MspInit+0x88>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6313      	str	r3, [r2, #48]	; 0x30
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_UART_MspInit+0x88>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002a2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a34:	2302      	movs	r3, #2
 8002a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a40:	2307      	movs	r3, #7
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4805      	ldr	r0, [pc, #20]	; (8002a60 <HAL_UART_MspInit+0x8c>)
 8002a4c:	f003 f950 	bl	8005cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a50:	bf00      	nop
 8002a52:	3728      	adds	r7, #40	; 0x28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	40020000 	.word	0x40020000

08002a64 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002a6a:	1d3b      	adds	r3, r7, #4
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002a78:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <HAL_FMC_MspInit+0x104>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d16f      	bne.n	8002b60 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002a80:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <HAL_FMC_MspInit+0x104>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	4b38      	ldr	r3, [pc, #224]	; (8002b6c <HAL_FMC_MspInit+0x108>)
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	4a37      	ldr	r2, [pc, #220]	; (8002b6c <HAL_FMC_MspInit+0x108>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6393      	str	r3, [r2, #56]	; 0x38
 8002a96:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <HAL_FMC_MspInit+0x108>)
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002aa2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002aa6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ab4:	230c      	movs	r3, #12
 8002ab6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	4619      	mov	r1, r3
 8002abc:	482c      	ldr	r0, [pc, #176]	; (8002b70 <HAL_FMC_MspInit+0x10c>)
 8002abe:	f003 f917 	bl	8005cf0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ad2:	230c      	movs	r3, #12
 8002ad4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4826      	ldr	r0, [pc, #152]	; (8002b74 <HAL_FMC_MspInit+0x110>)
 8002adc:	f003 f908 	bl	8005cf0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002ae0:	f248 1333 	movw	r3, #33075	; 0x8133
 8002ae4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aee:	2303      	movs	r3, #3
 8002af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002af2:	230c      	movs	r3, #12
 8002af4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	4619      	mov	r1, r3
 8002afa:	481f      	ldr	r0, [pc, #124]	; (8002b78 <HAL_FMC_MspInit+0x114>)
 8002afc:	f003 f8f8 	bl	8005cf0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002b00:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002b04:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b06:	2302      	movs	r3, #2
 8002b08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b12:	230c      	movs	r3, #12
 8002b14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b16:	1d3b      	adds	r3, r7, #4
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4818      	ldr	r0, [pc, #96]	; (8002b7c <HAL_FMC_MspInit+0x118>)
 8002b1c:	f003 f8e8 	bl	8005cf0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002b20:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002b24:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b26:	2302      	movs	r3, #2
 8002b28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b32:	230c      	movs	r3, #12
 8002b34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4811      	ldr	r0, [pc, #68]	; (8002b80 <HAL_FMC_MspInit+0x11c>)
 8002b3c:	f003 f8d8 	bl	8005cf0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002b40:	2360      	movs	r3, #96	; 0x60
 8002b42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b50:	230c      	movs	r3, #12
 8002b52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	4619      	mov	r1, r3
 8002b58:	480a      	ldr	r0, [pc, #40]	; (8002b84 <HAL_FMC_MspInit+0x120>)
 8002b5a:	f003 f8c9 	bl	8005cf0 <HAL_GPIO_Init>
 8002b5e:	e000      	b.n	8002b62 <HAL_FMC_MspInit+0xfe>
    return;
 8002b60:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20003e28 	.word	0x20003e28
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40021400 	.word	0x40021400
 8002b74:	40020800 	.word	0x40020800
 8002b78:	40021800 	.word	0x40021800
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	40020c00 	.word	0x40020c00
 8002b84:	40020400 	.word	0x40020400

08002b88 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002b90:	f7ff ff68 	bl	8002a64 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	; 0x30
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002bac:	2200      	movs	r2, #0
 8002bae:	6879      	ldr	r1, [r7, #4]
 8002bb0:	2036      	movs	r0, #54	; 0x36
 8002bb2:	f002 f87d 	bl	8004cb0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bb6:	2036      	movs	r0, #54	; 0x36
 8002bb8:	f002 f896 	bl	8004ce8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <HAL_InitTick+0xa4>)
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	4a1e      	ldr	r2, [pc, #120]	; (8002c40 <HAL_InitTick+0xa4>)
 8002bc6:	f043 0310 	orr.w	r3, r3, #16
 8002bca:	6413      	str	r3, [r2, #64]	; 0x40
 8002bcc:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <HAL_InitTick+0xa4>)
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f003 0310 	and.w	r3, r3, #16
 8002bd4:	60fb      	str	r3, [r7, #12]
 8002bd6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bd8:	f107 0210 	add.w	r2, r7, #16
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f006 f9cc 	bl	8008f80 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002be8:	f006 f9a2 	bl	8008f30 <HAL_RCC_GetPCLK1Freq>
 8002bec:	4603      	mov	r3, r0
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <HAL_InitTick+0xa8>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	0c9b      	lsrs	r3, r3, #18
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <HAL_InitTick+0xac>)
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <HAL_InitTick+0xb0>)
 8002c04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c06:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <HAL_InitTick+0xac>)
 8002c08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c0e:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <HAL_InitTick+0xac>)
 8002c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <HAL_InitTick+0xac>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_InitTick+0xac>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002c20:	4809      	ldr	r0, [pc, #36]	; (8002c48 <HAL_InitTick+0xac>)
 8002c22:	f007 fa0f 	bl	800a044 <HAL_TIM_Base_Init>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d104      	bne.n	8002c36 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002c2c:	4806      	ldr	r0, [pc, #24]	; (8002c48 <HAL_InitTick+0xac>)
 8002c2e:	f007 fae9 	bl	800a204 <HAL_TIM_Base_Start_IT>
 8002c32:	4603      	mov	r3, r0
 8002c34:	e000      	b.n	8002c38 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3730      	adds	r7, #48	; 0x30
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40023800 	.word	0x40023800
 8002c44:	431bde83 	.word	0x431bde83
 8002c48:	20003e2c 	.word	0x20003e2c
 8002c4c:	40001000 	.word	0x40001000

08002c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c54:	e7fe      	b.n	8002c54 <NMI_Handler+0x4>

08002c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c56:	b480      	push	{r7}
 8002c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c5a:	e7fe      	b.n	8002c5a <HardFault_Handler+0x4>

08002c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c60:	e7fe      	b.n	8002c60 <MemManage_Handler+0x4>

08002c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c62:	b480      	push	{r7}
 8002c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c66:	e7fe      	b.n	8002c66 <BusFault_Handler+0x4>

08002c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <UsageFault_Handler+0x4>

08002c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c72:	bf00      	nop
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cac:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <TIM6_DAC_IRQHandler+0x10>)
 8002cae:	f007 fc3b 	bl	800a528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20003e2c 	.word	0x20003e2c

08002cbc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cc0:	4802      	ldr	r0, [pc, #8]	; (8002ccc <DMA2_Stream0_IRQHandler+0x10>)
 8002cc2:	f002 fa0f 	bl	80050e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	2000013c 	.word	0x2000013c

08002cd0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002cd4:	4802      	ldr	r0, [pc, #8]	; (8002ce0 <OTG_HS_IRQHandler+0x10>)
 8002cd6:	f003 fd79 	bl	80067cc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200044ac 	.word	0x200044ac

08002ce4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002ce8:	4802      	ldr	r0, [pc, #8]	; (8002cf4 <LTDC_IRQHandler+0x10>)
 8002cea:	f005 f99f 	bl	800802c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000238 	.word	0x20000238

08002cf8 <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC global error interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002cfc:	4802      	ldr	r0, [pc, #8]	; (8002d08 <LTDC_ER_IRQHandler+0x10>)
 8002cfe:	f005 f995 	bl	800802c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000238 	.word	0x20000238

08002d0c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <DMA2D_IRQHandler+0x10>)
 8002d12:	f002 fdae 	bl	8005872 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	200001a4 	.word	0x200001a4

08002d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d28:	4a14      	ldr	r2, [pc, #80]	; (8002d7c <_sbrk+0x5c>)
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <_sbrk+0x60>)
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <_sbrk+0x64>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d102      	bne.n	8002d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <_sbrk+0x64>)
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <_sbrk+0x68>)
 8002d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d207      	bcs.n	8002d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d50:	f00c f89c 	bl	800ee8c <__errno>
 8002d54:	4603      	mov	r3, r0
 8002d56:	220c      	movs	r2, #12
 8002d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d5e:	e009      	b.n	8002d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <_sbrk+0x64>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4a05      	ldr	r2, [pc, #20]	; (8002d84 <_sbrk+0x64>)
 8002d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20030000 	.word	0x20030000
 8002d80:	00000400 	.word	0x00000400
 8002d84:	20003e74 	.word	0x20003e74
 8002d88:	200047c0 	.word	0x200047c0

08002d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d90:	4b06      	ldr	r3, [pc, #24]	; (8002dac <SystemInit+0x20>)
 8002d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d96:	4a05      	ldr	r2, [pc, #20]	; (8002dac <SystemInit+0x20>)
 8002d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002db4:	480d      	ldr	r0, [pc, #52]	; (8002dec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002db6:	490e      	ldr	r1, [pc, #56]	; (8002df0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002db8:	4a0e      	ldr	r2, [pc, #56]	; (8002df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dbc:	e002      	b.n	8002dc4 <LoopCopyDataInit>

08002dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dc2:	3304      	adds	r3, #4

08002dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dc8:	d3f9      	bcc.n	8002dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dca:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002dcc:	4c0b      	ldr	r4, [pc, #44]	; (8002dfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002dd0:	e001      	b.n	8002dd6 <LoopFillZerobss>

08002dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd4:	3204      	adds	r2, #4

08002dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dd8:	d3fb      	bcc.n	8002dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dda:	f7ff ffd7 	bl	8002d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dde:	f00c f85b 	bl	800ee98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002de2:	f7fe f9cd 	bl	8001180 <main>
  bx  lr    
 8002de6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002de8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002df0:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8002df4:	08082e98 	.word	0x08082e98
  ldr r2, =_sbss
 8002df8:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8002dfc:	200047c0 	.word	0x200047c0

08002e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e00:	e7fe      	b.n	8002e00 <ADC_IRQHandler>

08002e02 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002e06:	f000 fa5d 	bl	80032c4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002e0a:	20ca      	movs	r0, #202	; 0xca
 8002e0c:	f000 f95d 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002e10:	20c3      	movs	r0, #195	; 0xc3
 8002e12:	f000 f967 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002e16:	2008      	movs	r0, #8
 8002e18:	f000 f964 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002e1c:	2050      	movs	r0, #80	; 0x50
 8002e1e:	f000 f961 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002e22:	20cf      	movs	r0, #207	; 0xcf
 8002e24:	f000 f951 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002e28:	2000      	movs	r0, #0
 8002e2a:	f000 f95b 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002e2e:	20c1      	movs	r0, #193	; 0xc1
 8002e30:	f000 f958 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002e34:	2030      	movs	r0, #48	; 0x30
 8002e36:	f000 f955 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002e3a:	20ed      	movs	r0, #237	; 0xed
 8002e3c:	f000 f945 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002e40:	2064      	movs	r0, #100	; 0x64
 8002e42:	f000 f94f 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002e46:	2003      	movs	r0, #3
 8002e48:	f000 f94c 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002e4c:	2012      	movs	r0, #18
 8002e4e:	f000 f949 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002e52:	2081      	movs	r0, #129	; 0x81
 8002e54:	f000 f946 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002e58:	20e8      	movs	r0, #232	; 0xe8
 8002e5a:	f000 f936 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002e5e:	2085      	movs	r0, #133	; 0x85
 8002e60:	f000 f940 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002e64:	2000      	movs	r0, #0
 8002e66:	f000 f93d 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002e6a:	2078      	movs	r0, #120	; 0x78
 8002e6c:	f000 f93a 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002e70:	20cb      	movs	r0, #203	; 0xcb
 8002e72:	f000 f92a 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002e76:	2039      	movs	r0, #57	; 0x39
 8002e78:	f000 f934 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002e7c:	202c      	movs	r0, #44	; 0x2c
 8002e7e:	f000 f931 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002e82:	2000      	movs	r0, #0
 8002e84:	f000 f92e 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002e88:	2034      	movs	r0, #52	; 0x34
 8002e8a:	f000 f92b 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002e8e:	2002      	movs	r0, #2
 8002e90:	f000 f928 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002e94:	20f7      	movs	r0, #247	; 0xf7
 8002e96:	f000 f918 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002e9a:	2020      	movs	r0, #32
 8002e9c:	f000 f922 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002ea0:	20ea      	movs	r0, #234	; 0xea
 8002ea2:	f000 f912 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f000 f91c 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f000 f919 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002eb2:	20b1      	movs	r0, #177	; 0xb1
 8002eb4:	f000 f909 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002eb8:	2000      	movs	r0, #0
 8002eba:	f000 f913 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002ebe:	201b      	movs	r0, #27
 8002ec0:	f000 f910 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002ec4:	20b6      	movs	r0, #182	; 0xb6
 8002ec6:	f000 f900 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002eca:	200a      	movs	r0, #10
 8002ecc:	f000 f90a 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002ed0:	20a2      	movs	r0, #162	; 0xa2
 8002ed2:	f000 f907 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002ed6:	20c0      	movs	r0, #192	; 0xc0
 8002ed8:	f000 f8f7 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002edc:	2010      	movs	r0, #16
 8002ede:	f000 f901 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002ee2:	20c1      	movs	r0, #193	; 0xc1
 8002ee4:	f000 f8f1 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002ee8:	2010      	movs	r0, #16
 8002eea:	f000 f8fb 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002eee:	20c5      	movs	r0, #197	; 0xc5
 8002ef0:	f000 f8eb 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002ef4:	2045      	movs	r0, #69	; 0x45
 8002ef6:	f000 f8f5 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8002efa:	2015      	movs	r0, #21
 8002efc:	f000 f8f2 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002f00:	20c7      	movs	r0, #199	; 0xc7
 8002f02:	f000 f8e2 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002f06:	2090      	movs	r0, #144	; 0x90
 8002f08:	f000 f8ec 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002f0c:	2036      	movs	r0, #54	; 0x36
 8002f0e:	f000 f8dc 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002f12:	20c8      	movs	r0, #200	; 0xc8
 8002f14:	f000 f8e6 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002f18:	20f2      	movs	r0, #242	; 0xf2
 8002f1a:	f000 f8d6 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f000 f8e0 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002f24:	20b0      	movs	r0, #176	; 0xb0
 8002f26:	f000 f8d0 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002f2a:	20c2      	movs	r0, #194	; 0xc2
 8002f2c:	f000 f8da 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002f30:	20b6      	movs	r0, #182	; 0xb6
 8002f32:	f000 f8ca 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002f36:	200a      	movs	r0, #10
 8002f38:	f000 f8d4 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002f3c:	20a7      	movs	r0, #167	; 0xa7
 8002f3e:	f000 f8d1 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002f42:	2027      	movs	r0, #39	; 0x27
 8002f44:	f000 f8ce 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002f48:	2004      	movs	r0, #4
 8002f4a:	f000 f8cb 	bl	80030e4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8002f4e:	202a      	movs	r0, #42	; 0x2a
 8002f50:	f000 f8bb 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f000 f8c5 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	f000 f8c2 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f60:	2000      	movs	r0, #0
 8002f62:	f000 f8bf 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002f66:	20ef      	movs	r0, #239	; 0xef
 8002f68:	f000 f8bc 	bl	80030e4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002f6c:	202b      	movs	r0, #43	; 0x2b
 8002f6e:	f000 f8ac 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002f72:	2000      	movs	r0, #0
 8002f74:	f000 f8b6 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f000 f8b3 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f000 f8b0 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002f84:	203f      	movs	r0, #63	; 0x3f
 8002f86:	f000 f8ad 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002f8a:	20f6      	movs	r0, #246	; 0xf6
 8002f8c:	f000 f89d 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002f90:	2001      	movs	r0, #1
 8002f92:	f000 f8a7 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002f96:	2000      	movs	r0, #0
 8002f98:	f000 f8a4 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002f9c:	2006      	movs	r0, #6
 8002f9e:	f000 f8a1 	bl	80030e4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002fa2:	202c      	movs	r0, #44	; 0x2c
 8002fa4:	f000 f891 	bl	80030ca <ili9341_WriteReg>
  LCD_Delay(200);
 8002fa8:	20c8      	movs	r0, #200	; 0xc8
 8002faa:	f000 fa79 	bl	80034a0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002fae:	2026      	movs	r0, #38	; 0x26
 8002fb0:	f000 f88b 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f000 f895 	bl	80030e4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8002fba:	20e0      	movs	r0, #224	; 0xe0
 8002fbc:	f000 f885 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002fc0:	200f      	movs	r0, #15
 8002fc2:	f000 f88f 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002fc6:	2029      	movs	r0, #41	; 0x29
 8002fc8:	f000 f88c 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002fcc:	2024      	movs	r0, #36	; 0x24
 8002fce:	f000 f889 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002fd2:	200c      	movs	r0, #12
 8002fd4:	f000 f886 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002fd8:	200e      	movs	r0, #14
 8002fda:	f000 f883 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002fde:	2009      	movs	r0, #9
 8002fe0:	f000 f880 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002fe4:	204e      	movs	r0, #78	; 0x4e
 8002fe6:	f000 f87d 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002fea:	2078      	movs	r0, #120	; 0x78
 8002fec:	f000 f87a 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002ff0:	203c      	movs	r0, #60	; 0x3c
 8002ff2:	f000 f877 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002ff6:	2009      	movs	r0, #9
 8002ff8:	f000 f874 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002ffc:	2013      	movs	r0, #19
 8002ffe:	f000 f871 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003002:	2005      	movs	r0, #5
 8003004:	f000 f86e 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8003008:	2017      	movs	r0, #23
 800300a:	f000 f86b 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800300e:	2011      	movs	r0, #17
 8003010:	f000 f868 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8003014:	2000      	movs	r0, #0
 8003016:	f000 f865 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800301a:	20e1      	movs	r0, #225	; 0xe1
 800301c:	f000 f855 	bl	80030ca <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8003020:	2000      	movs	r0, #0
 8003022:	f000 f85f 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8003026:	2016      	movs	r0, #22
 8003028:	f000 f85c 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800302c:	201b      	movs	r0, #27
 800302e:	f000 f859 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8003032:	2004      	movs	r0, #4
 8003034:	f000 f856 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8003038:	2011      	movs	r0, #17
 800303a:	f000 f853 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800303e:	2007      	movs	r0, #7
 8003040:	f000 f850 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8003044:	2031      	movs	r0, #49	; 0x31
 8003046:	f000 f84d 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800304a:	2033      	movs	r0, #51	; 0x33
 800304c:	f000 f84a 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8003050:	2042      	movs	r0, #66	; 0x42
 8003052:	f000 f847 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8003056:	2005      	movs	r0, #5
 8003058:	f000 f844 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800305c:	200c      	movs	r0, #12
 800305e:	f000 f841 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8003062:	200a      	movs	r0, #10
 8003064:	f000 f83e 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8003068:	2028      	movs	r0, #40	; 0x28
 800306a:	f000 f83b 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800306e:	202f      	movs	r0, #47	; 0x2f
 8003070:	f000 f838 	bl	80030e4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8003074:	200f      	movs	r0, #15
 8003076:	f000 f835 	bl	80030e4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800307a:	2011      	movs	r0, #17
 800307c:	f000 f825 	bl	80030ca <ili9341_WriteReg>
  LCD_Delay(200);
 8003080:	20c8      	movs	r0, #200	; 0xc8
 8003082:	f000 fa0d 	bl	80034a0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8003086:	2029      	movs	r0, #41	; 0x29
 8003088:	f000 f81f 	bl	80030ca <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800308c:	202c      	movs	r0, #44	; 0x2c
 800308e:	f000 f81c 	bl	80030ca <ili9341_WriteReg>
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}

08003096 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800309a:	f000 f913 	bl	80032c4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800309e:	2103      	movs	r1, #3
 80030a0:	20d3      	movs	r0, #211	; 0xd3
 80030a2:	f000 f82c 	bl	80030fe <ili9341_ReadData>
 80030a6:	4603      	mov	r3, r0
 80030a8:	b29b      	uxth	r3, r3
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	bd80      	pop	{r7, pc}

080030ae <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80030b2:	2029      	movs	r0, #41	; 0x29
 80030b4:	f000 f809 	bl	80030ca <ili9341_WriteReg>
}
 80030b8:	bf00      	nop
 80030ba:	bd80      	pop	{r7, pc}

080030bc <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80030c0:	2028      	movs	r0, #40	; 0x28
 80030c2:	f000 f802 	bl	80030ca <ili9341_WriteReg>
}
 80030c6:	bf00      	nop
 80030c8:	bd80      	pop	{r7, pc}

080030ca <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 f98e 	bl	80033f8 <LCD_IO_WriteReg>
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	4603      	mov	r3, r0
 80030ec:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 f95f 	bl	80033b4 <LCD_IO_WriteData>
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	4603      	mov	r3, r0
 8003106:	460a      	mov	r2, r1
 8003108:	80fb      	strh	r3, [r7, #6]
 800310a:	4613      	mov	r3, r2
 800310c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800310e:	797a      	ldrb	r2, [r7, #5]
 8003110:	88fb      	ldrh	r3, [r7, #6]
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f991 	bl	800343c <LCD_IO_ReadData>
 800311a:	4603      	mov	r3, r0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8003128:	23f0      	movs	r3, #240	; 0xf0
}
 800312a:	4618      	mov	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8003138:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
	...

08003148 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800314c:	4819      	ldr	r0, [pc, #100]	; (80031b4 <SPIx_Init+0x6c>)
 800314e:	f006 fe3a 	bl	8009dc6 <HAL_SPI_GetState>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d12b      	bne.n	80031b0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003158:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <SPIx_Init+0x6c>)
 800315a:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <SPIx_Init+0x70>)
 800315c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <SPIx_Init+0x6c>)
 8003160:	2218      	movs	r2, #24
 8003162:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003164:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <SPIx_Init+0x6c>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <SPIx_Init+0x6c>)
 800316c:	2200      	movs	r2, #0
 800316e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003170:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <SPIx_Init+0x6c>)
 8003172:	2200      	movs	r2, #0
 8003174:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003176:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <SPIx_Init+0x6c>)
 8003178:	2200      	movs	r2, #0
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800317c:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <SPIx_Init+0x6c>)
 800317e:	2207      	movs	r2, #7
 8003180:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003182:	4b0c      	ldr	r3, [pc, #48]	; (80031b4 <SPIx_Init+0x6c>)
 8003184:	2200      	movs	r2, #0
 8003186:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003188:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <SPIx_Init+0x6c>)
 800318a:	2200      	movs	r2, #0
 800318c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800318e:	4b09      	ldr	r3, [pc, #36]	; (80031b4 <SPIx_Init+0x6c>)
 8003190:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003194:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003196:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <SPIx_Init+0x6c>)
 8003198:	2200      	movs	r2, #0
 800319a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800319c:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <SPIx_Init+0x6c>)
 800319e:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031a2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80031a4:	4803      	ldr	r0, [pc, #12]	; (80031b4 <SPIx_Init+0x6c>)
 80031a6:	f000 f853 	bl	8003250 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80031aa:	4802      	ldr	r0, [pc, #8]	; (80031b4 <SPIx_Init+0x6c>)
 80031ac:	f006 f96b 	bl	8009486 <HAL_SPI_Init>
  } 
}
 80031b0:	bf00      	nop
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20003e78 	.word	0x20003e78
 80031b8:	40015000 	.word	0x40015000

080031bc <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <SPIx_Read+0x38>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f107 0108 	add.w	r1, r7, #8
 80031d6:	4808      	ldr	r0, [pc, #32]	; (80031f8 <SPIx_Read+0x3c>)
 80031d8:	f006 fb42 	bl	8009860 <HAL_SPI_Receive>
 80031dc:	4603      	mov	r3, r0
 80031de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80031e0:	7bfb      	ldrb	r3, [r7, #15]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80031e6:	f000 f827 	bl	8003238 <SPIx_Error>
  }
  
  return readvalue;
 80031ea:	68bb      	ldr	r3, [r7, #8]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	2000003c 	.word	0x2000003c
 80031f8:	20003e78 	.word	0x20003e78

080031fc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800320a:	4b09      	ldr	r3, [pc, #36]	; (8003230 <SPIx_Write+0x34>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	1db9      	adds	r1, r7, #6
 8003210:	2201      	movs	r2, #1
 8003212:	4808      	ldr	r0, [pc, #32]	; (8003234 <SPIx_Write+0x38>)
 8003214:	f006 f9e8 	bl	80095e8 <HAL_SPI_Transmit>
 8003218:	4603      	mov	r3, r0
 800321a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003222:	f000 f809 	bl	8003238 <SPIx_Error>
  }
}
 8003226:	bf00      	nop
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	2000003c 	.word	0x2000003c
 8003234:	20003e78 	.word	0x20003e78

08003238 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800323c:	4803      	ldr	r0, [pc, #12]	; (800324c <SPIx_Error+0x14>)
 800323e:	f006 f9ab 	bl	8009598 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003242:	f7ff ff81 	bl	8003148 <SPIx_Init>
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20003e78 	.word	0x20003e78

08003250 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	; 0x28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003258:	2300      	movs	r3, #0
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	4b17      	ldr	r3, [pc, #92]	; (80032bc <SPIx_MspInit+0x6c>)
 800325e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003260:	4a16      	ldr	r2, [pc, #88]	; (80032bc <SPIx_MspInit+0x6c>)
 8003262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003266:	6453      	str	r3, [r2, #68]	; 0x44
 8003268:	4b14      	ldr	r3, [pc, #80]	; (80032bc <SPIx_MspInit+0x6c>)
 800326a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003274:	2300      	movs	r3, #0
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	4b10      	ldr	r3, [pc, #64]	; (80032bc <SPIx_MspInit+0x6c>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	4a0f      	ldr	r2, [pc, #60]	; (80032bc <SPIx_MspInit+0x6c>)
 800327e:	f043 0320 	orr.w	r3, r3, #32
 8003282:	6313      	str	r3, [r2, #48]	; 0x30
 8003284:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <SPIx_MspInit+0x6c>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003290:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003294:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8003296:	2302      	movs	r3, #2
 8003298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800329a:	2302      	movs	r3, #2
 800329c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800329e:	2301      	movs	r3, #1
 80032a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80032a2:	2305      	movs	r3, #5
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80032a6:	f107 0314 	add.w	r3, r7, #20
 80032aa:	4619      	mov	r1, r3
 80032ac:	4804      	ldr	r0, [pc, #16]	; (80032c0 <SPIx_MspInit+0x70>)
 80032ae:	f002 fd1f 	bl	8005cf0 <HAL_GPIO_Init>
}
 80032b2:	bf00      	nop
 80032b4:	3728      	adds	r7, #40	; 0x28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40021400 	.word	0x40021400

080032c4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80032ca:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <LCD_IO_Init+0xe0>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d164      	bne.n	800339c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80032d2:	4b34      	ldr	r3, [pc, #208]	; (80033a4 <LCD_IO_Init+0xe0>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80032d8:	2300      	movs	r3, #0
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	4b32      	ldr	r3, [pc, #200]	; (80033a8 <LCD_IO_Init+0xe4>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	4a31      	ldr	r2, [pc, #196]	; (80033a8 <LCD_IO_Init+0xe4>)
 80032e2:	f043 0308 	orr.w	r3, r3, #8
 80032e6:	6313      	str	r3, [r2, #48]	; 0x30
 80032e8:	4b2f      	ldr	r3, [pc, #188]	; (80033a8 <LCD_IO_Init+0xe4>)
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80032f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80032fa:	2301      	movs	r3, #1
 80032fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003302:	2302      	movs	r3, #2
 8003304:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003306:	f107 030c 	add.w	r3, r7, #12
 800330a:	4619      	mov	r1, r3
 800330c:	4827      	ldr	r0, [pc, #156]	; (80033ac <LCD_IO_Init+0xe8>)
 800330e:	f002 fcef 	bl	8005cf0 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <LCD_IO_Init+0xe4>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	4a23      	ldr	r2, [pc, #140]	; (80033a8 <LCD_IO_Init+0xe4>)
 800331c:	f043 0308 	orr.w	r3, r3, #8
 8003320:	6313      	str	r3, [r2, #48]	; 0x30
 8003322:	4b21      	ldr	r3, [pc, #132]	; (80033a8 <LCD_IO_Init+0xe4>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800332e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003332:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003334:	2301      	movs	r3, #1
 8003336:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800333c:	2302      	movs	r3, #2
 800333e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003340:	f107 030c 	add.w	r3, r7, #12
 8003344:	4619      	mov	r1, r3
 8003346:	4819      	ldr	r0, [pc, #100]	; (80033ac <LCD_IO_Init+0xe8>)
 8003348:	f002 fcd2 	bl	8005cf0 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800334c:	2300      	movs	r3, #0
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	4b15      	ldr	r3, [pc, #84]	; (80033a8 <LCD_IO_Init+0xe4>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	4a14      	ldr	r2, [pc, #80]	; (80033a8 <LCD_IO_Init+0xe4>)
 8003356:	f043 0304 	orr.w	r3, r3, #4
 800335a:	6313      	str	r3, [r2, #48]	; 0x30
 800335c:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <LCD_IO_Init+0xe4>)
 800335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	603b      	str	r3, [r7, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003368:	2304      	movs	r3, #4
 800336a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800336c:	2301      	movs	r3, #1
 800336e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003374:	2302      	movs	r3, #2
 8003376:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003378:	f107 030c 	add.w	r3, r7, #12
 800337c:	4619      	mov	r1, r3
 800337e:	480c      	ldr	r0, [pc, #48]	; (80033b0 <LCD_IO_Init+0xec>)
 8003380:	f002 fcb6 	bl	8005cf0 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003384:	2200      	movs	r2, #0
 8003386:	2104      	movs	r1, #4
 8003388:	4809      	ldr	r0, [pc, #36]	; (80033b0 <LCD_IO_Init+0xec>)
 800338a:	f002 ff81 	bl	8006290 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800338e:	2201      	movs	r2, #1
 8003390:	2104      	movs	r1, #4
 8003392:	4807      	ldr	r0, [pc, #28]	; (80033b0 <LCD_IO_Init+0xec>)
 8003394:	f002 ff7c 	bl	8006290 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003398:	f7ff fed6 	bl	8003148 <SPIx_Init>
  }
}
 800339c:	bf00      	nop
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20003ed0 	.word	0x20003ed0
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40020c00 	.word	0x40020c00
 80033b0:	40020800 	.word	0x40020800

080033b4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80033be:	2201      	movs	r2, #1
 80033c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033c4:	480a      	ldr	r0, [pc, #40]	; (80033f0 <LCD_IO_WriteData+0x3c>)
 80033c6:	f002 ff63 	bl	8006290 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80033ca:	2200      	movs	r2, #0
 80033cc:	2104      	movs	r1, #4
 80033ce:	4809      	ldr	r0, [pc, #36]	; (80033f4 <LCD_IO_WriteData+0x40>)
 80033d0:	f002 ff5e 	bl	8006290 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff ff10 	bl	80031fc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80033dc:	2201      	movs	r2, #1
 80033de:	2104      	movs	r1, #4
 80033e0:	4804      	ldr	r0, [pc, #16]	; (80033f4 <LCD_IO_WriteData+0x40>)
 80033e2:	f002 ff55 	bl	8006290 <HAL_GPIO_WritePin>
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40020c00 	.word	0x40020c00
 80033f4:	40020800 	.word	0x40020800

080033f8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003402:	2200      	movs	r2, #0
 8003404:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003408:	480a      	ldr	r0, [pc, #40]	; (8003434 <LCD_IO_WriteReg+0x3c>)
 800340a:	f002 ff41 	bl	8006290 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800340e:	2200      	movs	r2, #0
 8003410:	2104      	movs	r1, #4
 8003412:	4809      	ldr	r0, [pc, #36]	; (8003438 <LCD_IO_WriteReg+0x40>)
 8003414:	f002 ff3c 	bl	8006290 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	b29b      	uxth	r3, r3
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff feed 	bl	80031fc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003422:	2201      	movs	r2, #1
 8003424:	2104      	movs	r1, #4
 8003426:	4804      	ldr	r0, [pc, #16]	; (8003438 <LCD_IO_WriteReg+0x40>)
 8003428:	f002 ff32 	bl	8006290 <HAL_GPIO_WritePin>
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40020c00 	.word	0x40020c00
 8003438:	40020800 	.word	0x40020800

0800343c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	460a      	mov	r2, r1
 8003446:	80fb      	strh	r3, [r7, #6]
 8003448:	4613      	mov	r3, r2
 800344a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003450:	2200      	movs	r2, #0
 8003452:	2104      	movs	r1, #4
 8003454:	4810      	ldr	r0, [pc, #64]	; (8003498 <LCD_IO_ReadData+0x5c>)
 8003456:	f002 ff1b 	bl	8006290 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800345a:	2200      	movs	r2, #0
 800345c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003460:	480e      	ldr	r0, [pc, #56]	; (800349c <LCD_IO_ReadData+0x60>)
 8003462:	f002 ff15 	bl	8006290 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fec7 	bl	80031fc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800346e:	797b      	ldrb	r3, [r7, #5]
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fea3 	bl	80031bc <SPIx_Read>
 8003476:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003478:	2201      	movs	r2, #1
 800347a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800347e:	4807      	ldr	r0, [pc, #28]	; (800349c <LCD_IO_ReadData+0x60>)
 8003480:	f002 ff06 	bl	8006290 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003484:	2201      	movs	r2, #1
 8003486:	2104      	movs	r1, #4
 8003488:	4803      	ldr	r0, [pc, #12]	; (8003498 <LCD_IO_ReadData+0x5c>)
 800348a:	f002 ff01 	bl	8006290 <HAL_GPIO_WritePin>
  
  return readvalue;
 800348e:	68fb      	ldr	r3, [r7, #12]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40020800 	.word	0x40020800
 800349c:	40020c00 	.word	0x40020c00

080034a0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 feb3 	bl	8004214 <HAL_Delay>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80034bc:	4b2d      	ldr	r3, [pc, #180]	; (8003574 <BSP_LCD_Init+0xbc>)
 80034be:	4a2e      	ldr	r2, [pc, #184]	; (8003578 <BSP_LCD_Init+0xc0>)
 80034c0:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80034c2:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <BSP_LCD_Init+0xbc>)
 80034c4:	2209      	movs	r2, #9
 80034c6:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80034c8:	4b2a      	ldr	r3, [pc, #168]	; (8003574 <BSP_LCD_Init+0xbc>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80034ce:	4b29      	ldr	r3, [pc, #164]	; (8003574 <BSP_LCD_Init+0xbc>)
 80034d0:	221d      	movs	r2, #29
 80034d2:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80034d4:	4b27      	ldr	r3, [pc, #156]	; (8003574 <BSP_LCD_Init+0xbc>)
 80034d6:	2203      	movs	r2, #3
 80034d8:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80034da:	4b26      	ldr	r3, [pc, #152]	; (8003574 <BSP_LCD_Init+0xbc>)
 80034dc:	f240 120d 	movw	r2, #269	; 0x10d
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80034e2:	4b24      	ldr	r3, [pc, #144]	; (8003574 <BSP_LCD_Init+0xbc>)
 80034e4:	f240 1243 	movw	r2, #323	; 0x143
 80034e8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80034ea:	4b22      	ldr	r3, [pc, #136]	; (8003574 <BSP_LCD_Init+0xbc>)
 80034ec:	f240 1217 	movw	r2, #279	; 0x117
 80034f0:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80034f2:	4b20      	ldr	r3, [pc, #128]	; (8003574 <BSP_LCD_Init+0xbc>)
 80034f4:	f240 1247 	movw	r2, #327	; 0x147
 80034f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80034fa:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <BSP_LCD_Init+0xbc>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003502:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <BSP_LCD_Init+0xbc>)
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800350a:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <BSP_LCD_Init+0xbc>)
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003512:	4b1a      	ldr	r3, [pc, #104]	; (800357c <BSP_LCD_Init+0xc4>)
 8003514:	2208      	movs	r2, #8
 8003516:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003518:	4b18      	ldr	r3, [pc, #96]	; (800357c <BSP_LCD_Init+0xc4>)
 800351a:	22c0      	movs	r2, #192	; 0xc0
 800351c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800351e:	4b17      	ldr	r3, [pc, #92]	; (800357c <BSP_LCD_Init+0xc4>)
 8003520:	2204      	movs	r2, #4
 8003522:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003524:	4b15      	ldr	r3, [pc, #84]	; (800357c <BSP_LCD_Init+0xc4>)
 8003526:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800352a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800352c:	4813      	ldr	r0, [pc, #76]	; (800357c <BSP_LCD_Init+0xc4>)
 800352e:	f005 fd59 	bl	8008fe4 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003532:	4b10      	ldr	r3, [pc, #64]	; (8003574 <BSP_LCD_Init+0xbc>)
 8003534:	2200      	movs	r2, #0
 8003536:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003538:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <BSP_LCD_Init+0xbc>)
 800353a:	2200      	movs	r2, #0
 800353c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <BSP_LCD_Init+0xbc>)
 8003540:	2200      	movs	r2, #0
 8003542:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <BSP_LCD_Init+0xbc>)
 8003546:	2200      	movs	r2, #0
 8003548:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800354a:	f000 fadf 	bl	8003b0c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800354e:	4809      	ldr	r0, [pc, #36]	; (8003574 <BSP_LCD_Init+0xbc>)
 8003550:	f004 fc9c 	bl	8007e8c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003554:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <BSP_LCD_Init+0xc8>)
 8003556:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <BSP_LCD_Init+0xcc>)
 8003558:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800355a:	4b09      	ldr	r3, [pc, #36]	; (8003580 <BSP_LCD_Init+0xc8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003562:	f000 fc4b 	bl	8003dfc <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003566:	4808      	ldr	r0, [pc, #32]	; (8003588 <BSP_LCD_Init+0xd0>)
 8003568:	f000 f8b4 	bl	80036d4 <BSP_LCD_SetFont>

  return LCD_OK;
 800356c:	2300      	movs	r3, #0
}  
 800356e:	4618      	mov	r0, r3
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20003ed4 	.word	0x20003ed4
 8003578:	40016800 	.word	0x40016800
 800357c:	20003fbc 	.word	0x20003fbc
 8003580:	20004008 	.word	0x20004008
 8003584:	20000004 	.word	0x20000004
 8003588:	20000040 	.word	0x20000040

0800358c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <BSP_LCD_GetXSize+0x14>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003596:	4798      	blx	r3
 8003598:	4603      	mov	r3, r0
}
 800359a:	4618      	mov	r0, r3
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20004008 	.word	0x20004008

080035a4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80035a8:	4b03      	ldr	r3, [pc, #12]	; (80035b8 <BSP_LCD_GetYSize+0x14>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	4798      	blx	r3
 80035b0:	4603      	mov	r3, r0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20004008 	.word	0x20004008

080035bc <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80035bc:	b580      	push	{r7, lr}
 80035be:	b090      	sub	sp, #64	; 0x40
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	4603      	mov	r3, r0
 80035c4:	6039      	str	r1, [r7, #0]
 80035c6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80035cc:	f7ff ffde 	bl	800358c <BSP_LCD_GetXSize>
 80035d0:	4603      	mov	r3, r0
 80035d2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80035d8:	f7ff ffe4 	bl	80035a4 <BSP_LCD_GetYSize>
 80035dc:	4603      	mov	r3, r0
 80035de:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80035e8:	23ff      	movs	r3, #255	; 0xff
 80035ea:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003602:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003608:	2307      	movs	r3, #7
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800360c:	f7ff ffbe 	bl	800358c <BSP_LCD_GetXSize>
 8003610:	4603      	mov	r3, r0
 8003612:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003614:	f7ff ffc6 	bl	80035a4 <BSP_LCD_GetYSize>
 8003618:	4603      	mov	r3, r0
 800361a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800361c:	88fa      	ldrh	r2, [r7, #6]
 800361e:	f107 030c 	add.w	r3, r7, #12
 8003622:	4619      	mov	r1, r3
 8003624:	4814      	ldr	r0, [pc, #80]	; (8003678 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003626:	f004 fdc3 	bl	80081b0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800362a:	88fa      	ldrh	r2, [r7, #6]
 800362c:	4913      	ldr	r1, [pc, #76]	; (800367c <BSP_LCD_LayerDefaultInit+0xc0>)
 800362e:	4613      	mov	r3, r2
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	3304      	adds	r3, #4
 800363a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800363e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003640:	88fa      	ldrh	r2, [r7, #6]
 8003642:	490e      	ldr	r1, [pc, #56]	; (800367c <BSP_LCD_LayerDefaultInit+0xc0>)
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	3308      	adds	r3, #8
 8003650:	4a0b      	ldr	r2, [pc, #44]	; (8003680 <BSP_LCD_LayerDefaultInit+0xc4>)
 8003652:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003654:	88fa      	ldrh	r2, [r7, #6]
 8003656:	4909      	ldr	r1, [pc, #36]	; (800367c <BSP_LCD_LayerDefaultInit+0xc0>)
 8003658:	4613      	mov	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003666:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003668:	4803      	ldr	r0, [pc, #12]	; (8003678 <BSP_LCD_LayerDefaultInit+0xbc>)
 800366a:	f004 fddf 	bl	800822c <HAL_LTDC_EnableDither>
}
 800366e:	bf00      	nop
 8003670:	3740      	adds	r7, #64	; 0x40
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20003ed4 	.word	0x20003ed4
 800367c:	20003ff0 	.word	0x20003ff0
 8003680:	20000040 	.word	0x20000040

08003684 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800368c:	4a04      	ldr	r2, [pc, #16]	; (80036a0 <BSP_LCD_SelectLayer+0x1c>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6013      	str	r3, [r2, #0]
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	20003fec 	.word	0x20003fec

080036a4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80036ac:	4b07      	ldr	r3, [pc, #28]	; (80036cc <BSP_LCD_SetTextColor+0x28>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4907      	ldr	r1, [pc, #28]	; (80036d0 <BSP_LCD_SetTextColor+0x2c>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	601a      	str	r2, [r3, #0]
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	20003fec 	.word	0x20003fec
 80036d0:	20003ff0 	.word	0x20003ff0

080036d4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <BSP_LCD_SetFont+0x2c>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4908      	ldr	r1, [pc, #32]	; (8003704 <BSP_LCD_SetFont+0x30>)
 80036e2:	4613      	mov	r3, r2
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	3308      	adds	r3, #8
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	601a      	str	r2, [r3, #0]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20003fec 	.word	0x20003fec
 8003704:	20003ff0 	.word	0x20003ff0

08003708 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800370a:	b085      	sub	sp, #20
 800370c:	af02      	add	r7, sp, #8
 800370e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003710:	4b0f      	ldr	r3, [pc, #60]	; (8003750 <BSP_LCD_Clear+0x48>)
 8003712:	681c      	ldr	r4, [r3, #0]
 8003714:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <BSP_LCD_Clear+0x48>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a0e      	ldr	r2, [pc, #56]	; (8003754 <BSP_LCD_Clear+0x4c>)
 800371a:	2134      	movs	r1, #52	; 0x34
 800371c:	fb01 f303 	mul.w	r3, r1, r3
 8003720:	4413      	add	r3, r2
 8003722:	335c      	adds	r3, #92	; 0x5c
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461e      	mov	r6, r3
 8003728:	f7ff ff30 	bl	800358c <BSP_LCD_GetXSize>
 800372c:	4605      	mov	r5, r0
 800372e:	f7ff ff39 	bl	80035a4 <BSP_LCD_GetYSize>
 8003732:	4602      	mov	r2, r0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	2300      	movs	r3, #0
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	462a      	mov	r2, r5
 8003740:	4631      	mov	r1, r6
 8003742:	4620      	mov	r0, r4
 8003744:	f000 fade 	bl	8003d04 <FillBuffer>
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003750:	20003fec 	.word	0x20003fec
 8003754:	20003ed4 	.word	0x20003ed4

08003758 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003758:	b590      	push	{r4, r7, lr}
 800375a:	b08b      	sub	sp, #44	; 0x2c
 800375c:	af00      	add	r7, sp, #0
 800375e:	4604      	mov	r4, r0
 8003760:	4608      	mov	r0, r1
 8003762:	4611      	mov	r1, r2
 8003764:	461a      	mov	r2, r3
 8003766:	4623      	mov	r3, r4
 8003768:	80fb      	strh	r3, [r7, #6]
 800376a:	4603      	mov	r3, r0
 800376c:	80bb      	strh	r3, [r7, #4]
 800376e:	460b      	mov	r3, r1
 8003770:	807b      	strh	r3, [r7, #2]
 8003772:	4613      	mov	r3, r2
 8003774:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003776:	2300      	movs	r3, #0
 8003778:	823b      	strh	r3, [r7, #16]
 800377a:	2300      	movs	r3, #0
 800377c:	81fb      	strh	r3, [r7, #14]
 800377e:	2300      	movs	r3, #0
 8003780:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003782:	2300      	movs	r3, #0
 8003784:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003786:	2300      	movs	r3, #0
 8003788:	847b      	strh	r3, [r7, #34]	; 0x22
 800378a:	2300      	movs	r3, #0
 800378c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800378e:	2300      	movs	r3, #0
 8003790:	83fb      	strh	r3, [r7, #30]
 8003792:	2300      	movs	r3, #0
 8003794:	83bb      	strh	r3, [r7, #28]
 8003796:	2300      	movs	r3, #0
 8003798:	837b      	strh	r3, [r7, #26]
 800379a:	2300      	movs	r3, #0
 800379c:	833b      	strh	r3, [r7, #24]
 800379e:	2300      	movs	r3, #0
 80037a0:	82fb      	strh	r3, [r7, #22]
 80037a2:	2300      	movs	r3, #0
 80037a4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 80037aa:	887a      	ldrh	r2, [r7, #2]
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bfb8      	it	lt
 80037b4:	425b      	neglt	r3, r3
 80037b6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80037b8:	883a      	ldrh	r2, [r7, #0]
 80037ba:	88bb      	ldrh	r3, [r7, #4]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	bfb8      	it	lt
 80037c2:	425b      	neglt	r3, r3
 80037c4:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 80037ca:	88bb      	ldrh	r3, [r7, #4]
 80037cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 80037ce:	887a      	ldrh	r2, [r7, #2]
 80037d0:	88fb      	ldrh	r3, [r7, #6]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d304      	bcc.n	80037e0 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80037d6:	2301      	movs	r3, #1
 80037d8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80037da:	2301      	movs	r3, #1
 80037dc:	843b      	strh	r3, [r7, #32]
 80037de:	e005      	b.n	80037ec <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80037e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037e4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80037e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037ea:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 80037ec:	883a      	ldrh	r2, [r7, #0]
 80037ee:	88bb      	ldrh	r3, [r7, #4]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d304      	bcc.n	80037fe <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80037f4:	2301      	movs	r3, #1
 80037f6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80037f8:	2301      	movs	r3, #1
 80037fa:	83bb      	strh	r3, [r7, #28]
 80037fc:	e005      	b.n	800380a <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80037fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003802:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003808:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800380a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800380e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003812:	429a      	cmp	r2, r3
 8003814:	db10      	blt.n	8003838 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003816:	2300      	movs	r3, #0
 8003818:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800381a:	2300      	movs	r3, #0
 800381c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800381e:	8a3b      	ldrh	r3, [r7, #16]
 8003820:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003822:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003826:	0fda      	lsrs	r2, r3, #31
 8003828:	4413      	add	r3, r2
 800382a:	105b      	asrs	r3, r3, #1
 800382c:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 800382e:	89fb      	ldrh	r3, [r7, #14]
 8003830:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8003832:	8a3b      	ldrh	r3, [r7, #16]
 8003834:	82bb      	strh	r3, [r7, #20]
 8003836:	e00f      	b.n	8003858 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003838:	2300      	movs	r3, #0
 800383a:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800383c:	2300      	movs	r3, #0
 800383e:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003840:	89fb      	ldrh	r3, [r7, #14]
 8003842:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003844:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003848:	0fda      	lsrs	r2, r3, #31
 800384a:	4413      	add	r3, r2
 800384c:	105b      	asrs	r3, r3, #1
 800384e:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8003850:	8a3b      	ldrh	r3, [r7, #16]
 8003852:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003854:	89fb      	ldrh	r3, [r7, #14]
 8003856:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003858:	2300      	movs	r3, #0
 800385a:	827b      	strh	r3, [r7, #18]
 800385c:	e037      	b.n	80038ce <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800385e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003860:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <BSP_LCD_DrawLine+0x18c>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	4c20      	ldr	r4, [pc, #128]	; (80038e8 <BSP_LCD_DrawLine+0x190>)
 8003868:	4613      	mov	r3, r2
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4423      	add	r3, r4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	f000 fa1f 	bl	8003cb8 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800387a:	8b3a      	ldrh	r2, [r7, #24]
 800387c:	8afb      	ldrh	r3, [r7, #22]
 800387e:	4413      	add	r3, r2
 8003880:	b29b      	uxth	r3, r3
 8003882:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003884:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003888:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800388c:	429a      	cmp	r2, r3
 800388e:	db0e      	blt.n	80038ae <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003890:	8b3a      	ldrh	r2, [r7, #24]
 8003892:	8b7b      	ldrh	r3, [r7, #26]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	b29b      	uxth	r3, r3
 8003898:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800389a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800389c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800389e:	4413      	add	r3, r2
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 80038a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038a6:	8bfb      	ldrh	r3, [r7, #30]
 80038a8:	4413      	add	r3, r2
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 80038ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038b0:	8c3b      	ldrh	r3, [r7, #32]
 80038b2:	4413      	add	r3, r2
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 80038b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038ba:	8bbb      	ldrh	r3, [r7, #28]
 80038bc:	4413      	add	r3, r2
 80038be:	b29b      	uxth	r3, r3
 80038c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80038c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	827b      	strh	r3, [r7, #18]
 80038ce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80038d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	ddc1      	ble.n	800385e <BSP_LCD_DrawLine+0x106>
  }
}
 80038da:	bf00      	nop
 80038dc:	bf00      	nop
 80038de:	372c      	adds	r7, #44	; 0x2c
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd90      	pop	{r4, r7, pc}
 80038e4:	20003fec 	.word	0x20003fec
 80038e8:	20003ff0 	.word	0x20003ff0

080038ec <BSP_LCD_DrawPolygon>:
  * @brief  Displays an poly-line (between many points).
  * @param  Points: pointer to the points array
  * @param  PointCount: Number of points
  */
void BSP_LCD_DrawPolygon(pPoint Points, uint16_t PointCount)
{
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	807b      	strh	r3, [r7, #2]
  int16_t x = 0, y = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	81fb      	strh	r3, [r7, #14]
 80038fc:	2300      	movs	r3, #0
 80038fe:	81bb      	strh	r3, [r7, #12]

  if(PointCount < 2)
 8003900:	887b      	ldrh	r3, [r7, #2]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d93b      	bls.n	800397e <BSP_LCD_DrawPolygon+0x92>
  {
    return;
  }

  BSP_LCD_DrawLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800390c:	b298      	uxth	r0, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003914:	b299      	uxth	r1, r3
 8003916:	887b      	ldrh	r3, [r7, #2]
 8003918:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800391c:	3b01      	subs	r3, #1
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	4413      	add	r3, r2
 8003924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003928:	b29c      	uxth	r4, r3
 800392a:	887b      	ldrh	r3, [r7, #2]
 800392c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003930:	3b01      	subs	r3, #1
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	4413      	add	r3, r2
 8003938:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800393c:	b29b      	uxth	r3, r3
 800393e:	4622      	mov	r2, r4
 8003940:	f7ff ff0a 	bl	8003758 <BSP_LCD_DrawLine>
  
  while(--PointCount)
 8003944:	e014      	b.n	8003970 <BSP_LCD_DrawPolygon+0x84>
  {
    x = Points->X;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	81fb      	strh	r3, [r7, #14]
    y = Points->Y;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	885b      	ldrh	r3, [r3, #2]
 8003950:	81bb      	strh	r3, [r7, #12]
    Points++;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3304      	adds	r3, #4
 8003956:	607b      	str	r3, [r7, #4]
    BSP_LCD_DrawLine(x, y, Points->X, Points->Y);
 8003958:	89f8      	ldrh	r0, [r7, #14]
 800395a:	89b9      	ldrh	r1, [r7, #12]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003962:	b29a      	uxth	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800396a:	b29b      	uxth	r3, r3
 800396c:	f7ff fef4 	bl	8003758 <BSP_LCD_DrawLine>
  while(--PointCount)
 8003970:	887b      	ldrh	r3, [r7, #2]
 8003972:	3b01      	subs	r3, #1
 8003974:	807b      	strh	r3, [r7, #2]
 8003976:	887b      	ldrh	r3, [r7, #2]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e4      	bne.n	8003946 <BSP_LCD_DrawPolygon+0x5a>
 800397c:	e000      	b.n	8003980 <BSP_LCD_DrawPolygon+0x94>
    return;
 800397e:	bf00      	nop
  }
}
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	bd90      	pop	{r4, r7, pc}
	...

08003988 <BSP_LCD_DrawBitmap>:
  * @param  X: the bmp x position in the LCD
  * @param  Y: the bmp Y position in the LCD
  * @param  pBmp: Bmp picture address in the internal Flash
  */
void BSP_LCD_DrawBitmap(uint32_t X, uint32_t Y, uint8_t *pBmp)
{
 8003988:	b590      	push	{r4, r7, lr}
 800398a:	b08b      	sub	sp, #44	; 0x2c
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bitpixel = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t inputcolormode = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	330a      	adds	r3, #10
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	330b      	adds	r3, #11
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	441a      	add	r2, r3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	330c      	adds	r3, #12
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	041b      	lsls	r3, r3, #16
 80039c2:	441a      	add	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	330d      	adds	r3, #13
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	061b      	lsls	r3, r3, #24
 80039cc:	4413      	add	r3, r2
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3312      	adds	r3, #18
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3313      	adds	r3, #19
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	441a      	add	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3314      	adds	r3, #20
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	041b      	lsls	r3, r3, #16
 80039ea:	441a      	add	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3315      	adds	r3, #21
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	061b      	lsls	r3, r3, #24
 80039f4:	4413      	add	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3316      	adds	r3, #22
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3317      	adds	r3, #23
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	441a      	add	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3318      	adds	r3, #24
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	041b      	lsls	r3, r3, #16
 8003a12:	441a      	add	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3319      	adds	r3, #25
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	061b      	lsls	r3, r3, #24
 8003a1c:	4413      	add	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bitpixel = pBmp[28] + (pBmp[29] << 8);   
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	331c      	adds	r3, #28
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	331d      	adds	r3, #29
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	4413      	add	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
 
  /* Set Address */
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 8003a34:	4b2b      	ldr	r3, [pc, #172]	; (8003ae4 <BSP_LCD_DrawBitmap+0x15c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a2b      	ldr	r2, [pc, #172]	; (8003ae8 <BSP_LCD_DrawBitmap+0x160>)
 8003a3a:	2134      	movs	r1, #52	; 0x34
 8003a3c:	fb01 f303 	mul.w	r3, r1, r3
 8003a40:	4413      	add	r3, r2
 8003a42:	335c      	adds	r3, #92	; 0x5c
 8003a44:	681c      	ldr	r4, [r3, #0]
 8003a46:	f7ff fda1 	bl	800358c <BSP_LCD_GetXSize>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	fb03 f202 	mul.w	r2, r3, r2
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4413      	add	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4423      	add	r3, r4
 8003a5a:	623b      	str	r3, [r7, #32]

  /* Get the Layer pixel format */    
  if ((bitpixel/8) == 4)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	3b20      	subs	r3, #32
 8003a60:	2b07      	cmp	r3, #7
 8003a62:	d802      	bhi.n	8003a6a <BSP_LCD_DrawBitmap+0xe2>
  {
    inputcolormode = CM_ARGB8888;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	e008      	b.n	8003a7c <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bitpixel/8) == 2)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	3b10      	subs	r3, #16
 8003a6e:	2b07      	cmp	r3, #7
 8003a70:	d802      	bhi.n	8003a78 <BSP_LCD_DrawBitmap+0xf0>
  {
    inputcolormode = CM_RGB565;
 8003a72:	2302      	movs	r3, #2
 8003a74:	61fb      	str	r3, [r7, #28]
 8003a76:	e001      	b.n	8003a7c <BSP_LCD_DrawBitmap+0xf4>
  }
  else
  {
    inputcolormode = CM_RGB888;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	61fb      	str	r3, [r7, #28]
  }
 
  /* bypass the bitmap header */
  pBmp += (index + (width * (height - 1) * (bitpixel/8)));
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	fb02 f303 	mul.w	r3, r2, r3
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	08d2      	lsrs	r2, r2, #3
 8003a8a:	fb03 f202 	mul.w	r2, r3, r2
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	4413      	add	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	607b      	str	r3, [r7, #4]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9c:	e018      	b.n	8003ad0 <BSP_LCD_DrawBitmap+0x148>
  {
  /* Pixel format conversion */
  ConvertLineToARGB8888((uint32_t *)pBmp, (uint32_t *)address, width, inputcolormode);
 8003a9e:	6a39      	ldr	r1, [r7, #32]
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f965 	bl	8003d74 <ConvertLineToARGB8888>

  /* Increment the source and destination buffers */
  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 8003aaa:	f7ff fd6f 	bl	800358c <BSP_LCD_GetXSize>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	6a3a      	ldr	r2, [r7, #32]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	623b      	str	r3, [r7, #32]
  pBmp -= width*(bitpixel/8);
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	08db      	lsrs	r3, r3, #3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	425b      	negs	r3, r3
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	3301      	adds	r3, #1
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d3e2      	bcc.n	8003a9e <BSP_LCD_DrawBitmap+0x116>
  }
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	372c      	adds	r7, #44	; 0x2c
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd90      	pop	{r4, r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20003fec 	.word	0x20003fec
 8003ae8:	20003ed4 	.word	0x20003ed4

08003aec <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <BSP_LCD_DisplayOn+0x1c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003afa:	4b03      	ldr	r3, [pc, #12]	; (8003b08 <BSP_LCD_DisplayOn+0x1c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4798      	blx	r3
  }
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20004008 	.word	0x20004008

08003b0c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08e      	sub	sp, #56	; 0x38
 8003b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	623b      	str	r3, [r7, #32]
 8003b16:	4b61      	ldr	r3, [pc, #388]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1a:	4a60      	ldr	r2, [pc, #384]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003b1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b20:	6453      	str	r3, [r2, #68]	; 0x44
 8003b22:	4b5e      	ldr	r3, [pc, #376]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b2a:	623b      	str	r3, [r7, #32]
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	4b5a      	ldr	r3, [pc, #360]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	4a59      	ldr	r2, [pc, #356]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003b38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b3e:	4b57      	ldr	r3, [pc, #348]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	4b53      	ldr	r3, [pc, #332]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	4a52      	ldr	r2, [pc, #328]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	6313      	str	r3, [r2, #48]	; 0x30
 8003b5a:	4b50      	ldr	r3, [pc, #320]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	4b4c      	ldr	r3, [pc, #304]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	4a4b      	ldr	r2, [pc, #300]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003b70:	f043 0302 	orr.w	r3, r3, #2
 8003b74:	6313      	str	r3, [r2, #48]	; 0x30
 8003b76:	4b49      	ldr	r3, [pc, #292]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	4b45      	ldr	r3, [pc, #276]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	4a44      	ldr	r2, [pc, #272]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003b8c:	f043 0304 	orr.w	r3, r3, #4
 8003b90:	6313      	str	r3, [r2, #48]	; 0x30
 8003b92:	4b42      	ldr	r3, [pc, #264]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	4b3e      	ldr	r3, [pc, #248]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	4a3d      	ldr	r2, [pc, #244]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003ba8:	f043 0308 	orr.w	r3, r3, #8
 8003bac:	6313      	str	r3, [r2, #48]	; 0x30
 8003bae:	4b3b      	ldr	r3, [pc, #236]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	4b37      	ldr	r3, [pc, #220]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	4a36      	ldr	r2, [pc, #216]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003bc4:	f043 0320 	orr.w	r3, r3, #32
 8003bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bca:	4b34      	ldr	r3, [pc, #208]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	4b30      	ldr	r3, [pc, #192]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bde:	4a2f      	ldr	r2, [pc, #188]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003be4:	6313      	str	r3, [r2, #48]	; 0x30
 8003be6:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <BSP_LCD_MspInit+0x190>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003bf2:	f641 0358 	movw	r3, #6232	; 0x1858
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003c00:	2302      	movs	r3, #2
 8003c02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003c04:	230e      	movs	r3, #14
 8003c06:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4824      	ldr	r0, [pc, #144]	; (8003ca0 <BSP_LCD_MspInit+0x194>)
 8003c10:	f002 f86e 	bl	8005cf0 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003c14:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4820      	ldr	r0, [pc, #128]	; (8003ca4 <BSP_LCD_MspInit+0x198>)
 8003c22:	f002 f865 	bl	8005cf0 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003c26:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003c2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c30:	4619      	mov	r1, r3
 8003c32:	481d      	ldr	r0, [pc, #116]	; (8003ca8 <BSP_LCD_MspInit+0x19c>)
 8003c34:	f002 f85c 	bl	8005cf0 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003c38:	2348      	movs	r3, #72	; 0x48
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c40:	4619      	mov	r1, r3
 8003c42:	481a      	ldr	r0, [pc, #104]	; (8003cac <BSP_LCD_MspInit+0x1a0>)
 8003c44:	f002 f854 	bl	8005cf0 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c52:	4619      	mov	r1, r3
 8003c54:	4816      	ldr	r0, [pc, #88]	; (8003cb0 <BSP_LCD_MspInit+0x1a4>)
 8003c56:	f002 f84b 	bl	8005cf0 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003c5a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003c5e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c64:	4619      	mov	r1, r3
 8003c66:	4813      	ldr	r0, [pc, #76]	; (8003cb4 <BSP_LCD_MspInit+0x1a8>)
 8003c68:	f002 f842 	bl	8005cf0 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003c70:	2309      	movs	r3, #9
 8003c72:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c78:	4619      	mov	r1, r3
 8003c7a:	480a      	ldr	r0, [pc, #40]	; (8003ca4 <BSP_LCD_MspInit+0x198>)
 8003c7c:	f002 f838 	bl	8005cf0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003c80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4809      	ldr	r0, [pc, #36]	; (8003cb4 <BSP_LCD_MspInit+0x1a8>)
 8003c8e:	f002 f82f 	bl	8005cf0 <HAL_GPIO_Init>
}
 8003c92:	bf00      	nop
 8003c94:	3738      	adds	r7, #56	; 0x38
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40020000 	.word	0x40020000
 8003ca4:	40020400 	.word	0x40020400
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	40020c00 	.word	0x40020c00
 8003cb0:	40021400 	.word	0x40021400
 8003cb4:	40021800 	.word	0x40021800

08003cb8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003cb8:	b5b0      	push	{r4, r5, r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	603a      	str	r2, [r7, #0]
 8003cc2:	80fb      	strh	r3, [r7, #6]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	; (8003cfc <BSP_LCD_DrawPixel+0x44>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a0c      	ldr	r2, [pc, #48]	; (8003d00 <BSP_LCD_DrawPixel+0x48>)
 8003cce:	2134      	movs	r1, #52	; 0x34
 8003cd0:	fb01 f303 	mul.w	r3, r1, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	335c      	adds	r3, #92	; 0x5c
 8003cd8:	681c      	ldr	r4, [r3, #0]
 8003cda:	88bd      	ldrh	r5, [r7, #4]
 8003cdc:	f7ff fc56 	bl	800358c <BSP_LCD_GetXSize>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	fb03 f205 	mul.w	r2, r3, r5
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4423      	add	r3, r4
 8003cee:	461a      	mov	r2, r3
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	6013      	str	r3, [r2, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8003cfc:	20003fec 	.word	0x20003fec
 8003d00:	20003ed4 	.word	0x20003ed4

08003d04 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
 8003d10:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003d12:	4b16      	ldr	r3, [pc, #88]	; (8003d6c <FillBuffer+0x68>)
 8003d14:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003d18:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003d1a:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <FillBuffer+0x68>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003d20:	4a12      	ldr	r2, [pc, #72]	; (8003d6c <FillBuffer+0x68>)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003d26:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <FillBuffer+0x68>)
 8003d28:	4a11      	ldr	r2, [pc, #68]	; (8003d70 <FillBuffer+0x6c>)
 8003d2a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003d2c:	480f      	ldr	r0, [pc, #60]	; (8003d6c <FillBuffer+0x68>)
 8003d2e:	f001 fc43 	bl	80055b8 <HAL_DMA2D_Init>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d115      	bne.n	8003d64 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003d38:	68f9      	ldr	r1, [r7, #12]
 8003d3a:	480c      	ldr	r0, [pc, #48]	; (8003d6c <FillBuffer+0x68>)
 8003d3c:	f001 feaa 	bl	8005a94 <HAL_DMA2D_ConfigLayer>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10e      	bne.n	8003d64 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003d46:	68ba      	ldr	r2, [r7, #8]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69f9      	ldr	r1, [r7, #28]
 8003d50:	4806      	ldr	r0, [pc, #24]	; (8003d6c <FillBuffer+0x68>)
 8003d52:	f001 fc7a 	bl	800564a <HAL_DMA2D_Start>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d103      	bne.n	8003d64 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003d5c:	210a      	movs	r1, #10
 8003d5e:	4803      	ldr	r0, [pc, #12]	; (8003d6c <FillBuffer+0x68>)
 8003d60:	f001 fc9e 	bl	80056a0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20003f7c 	.word	0x20003f7c
 8003d70:	4002b000 	.word	0x4002b000

08003d74 <ConvertLineToARGB8888>:
  * @param  pDst: output color
  * @param  xSize: buffer width
  * @param  ColorMode: input color mode   
  */
static void ConvertLineToARGB8888(void * pSrc, void * pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af02      	add	r7, sp, #8
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  Dma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8003d82:	4b1c      	ldr	r3, [pc, #112]	; (8003df4 <ConvertLineToARGB8888+0x80>)
 8003d84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d88:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003d8a:	4b1a      	ldr	r3, [pc, #104]	; (8003df4 <ConvertLineToARGB8888+0x80>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = 0;     
 8003d90:	4b18      	ldr	r3, [pc, #96]	; (8003df4 <ConvertLineToARGB8888+0x80>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  Dma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003d96:	4b17      	ldr	r3, [pc, #92]	; (8003df4 <ConvertLineToARGB8888+0x80>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	631a      	str	r2, [r3, #48]	; 0x30
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8003d9c:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <ConvertLineToARGB8888+0x80>)
 8003d9e:	22ff      	movs	r2, #255	; 0xff
 8003da0:	635a      	str	r2, [r3, #52]	; 0x34
  Dma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8003da2:	4a14      	ldr	r2, [pc, #80]	; (8003df4 <ConvertLineToARGB8888+0x80>)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	62d3      	str	r3, [r2, #44]	; 0x2c
  Dma2dHandler.LayerCfg[1].InputOffset = 0;
 8003da8:	4b12      	ldr	r3, [pc, #72]	; (8003df4 <ConvertLineToARGB8888+0x80>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	629a      	str	r2, [r3, #40]	; 0x28
  
  Dma2dHandler.Instance = DMA2D; 
 8003dae:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <ConvertLineToARGB8888+0x80>)
 8003db0:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <ConvertLineToARGB8888+0x84>)
 8003db2:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003db4:	480f      	ldr	r0, [pc, #60]	; (8003df4 <ConvertLineToARGB8888+0x80>)
 8003db6:	f001 fbff 	bl	80055b8 <HAL_DMA2D_Init>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d115      	bne.n	8003dec <ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, 1) == HAL_OK) 
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	480c      	ldr	r0, [pc, #48]	; (8003df4 <ConvertLineToARGB8888+0x80>)
 8003dc4:	f001 fe66 	bl	8005a94 <HAL_DMA2D_ConfigLayer>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10e      	bne.n	8003dec <ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003dce:	68f9      	ldr	r1, [r7, #12]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4806      	ldr	r0, [pc, #24]	; (8003df4 <ConvertLineToARGB8888+0x80>)
 8003dda:	f001 fc36 	bl	800564a <HAL_DMA2D_Start>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d103      	bne.n	8003dec <ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003de4:	210a      	movs	r1, #10
 8003de6:	4803      	ldr	r0, [pc, #12]	; (8003df4 <ConvertLineToARGB8888+0x80>)
 8003de8:	f001 fc5a 	bl	80056a0 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003dec:	bf00      	nop
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20003f7c 	.word	0x20003f7c
 8003df8:	4002b000 	.word	0x4002b000

08003dfc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003e00:	4b29      	ldr	r3, [pc, #164]	; (8003ea8 <BSP_SDRAM_Init+0xac>)
 8003e02:	4a2a      	ldr	r2, [pc, #168]	; (8003eac <BSP_SDRAM_Init+0xb0>)
 8003e04:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003e06:	4b2a      	ldr	r3, [pc, #168]	; (8003eb0 <BSP_SDRAM_Init+0xb4>)
 8003e08:	2202      	movs	r2, #2
 8003e0a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003e0c:	4b28      	ldr	r3, [pc, #160]	; (8003eb0 <BSP_SDRAM_Init+0xb4>)
 8003e0e:	2207      	movs	r2, #7
 8003e10:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003e12:	4b27      	ldr	r3, [pc, #156]	; (8003eb0 <BSP_SDRAM_Init+0xb4>)
 8003e14:	2204      	movs	r2, #4
 8003e16:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003e18:	4b25      	ldr	r3, [pc, #148]	; (8003eb0 <BSP_SDRAM_Init+0xb4>)
 8003e1a:	2207      	movs	r2, #7
 8003e1c:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003e1e:	4b24      	ldr	r3, [pc, #144]	; (8003eb0 <BSP_SDRAM_Init+0xb4>)
 8003e20:	2202      	movs	r2, #2
 8003e22:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003e24:	4b22      	ldr	r3, [pc, #136]	; (8003eb0 <BSP_SDRAM_Init+0xb4>)
 8003e26:	2202      	movs	r2, #2
 8003e28:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003e2a:	4b21      	ldr	r3, [pc, #132]	; (8003eb0 <BSP_SDRAM_Init+0xb4>)
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003e30:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <BSP_SDRAM_Init+0xac>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003e36:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <BSP_SDRAM_Init+0xac>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003e3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <BSP_SDRAM_Init+0xac>)
 8003e3e:	2204      	movs	r2, #4
 8003e40:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003e42:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <BSP_SDRAM_Init+0xac>)
 8003e44:	2210      	movs	r2, #16
 8003e46:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003e48:	4b17      	ldr	r3, [pc, #92]	; (8003ea8 <BSP_SDRAM_Init+0xac>)
 8003e4a:	2240      	movs	r2, #64	; 0x40
 8003e4c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003e4e:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <BSP_SDRAM_Init+0xac>)
 8003e50:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003e54:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003e56:	4b14      	ldr	r3, [pc, #80]	; (8003ea8 <BSP_SDRAM_Init+0xac>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003e5c:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <BSP_SDRAM_Init+0xac>)
 8003e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e62:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003e64:	4b10      	ldr	r3, [pc, #64]	; (8003ea8 <BSP_SDRAM_Init+0xac>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003e6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ea8 <BSP_SDRAM_Init+0xac>)
 8003e6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e70:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003e72:	2100      	movs	r1, #0
 8003e74:	480c      	ldr	r0, [pc, #48]	; (8003ea8 <BSP_SDRAM_Init+0xac>)
 8003e76:	f000 f87f 	bl	8003f78 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003e7a:	490d      	ldr	r1, [pc, #52]	; (8003eb0 <BSP_SDRAM_Init+0xb4>)
 8003e7c:	480a      	ldr	r0, [pc, #40]	; (8003ea8 <BSP_SDRAM_Init+0xac>)
 8003e7e:	f005 fa71 	bl	8009364 <HAL_SDRAM_Init>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <BSP_SDRAM_Init+0xb8>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	701a      	strb	r2, [r3, #0]
 8003e8e:	e002      	b.n	8003e96 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003e90:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <BSP_SDRAM_Init+0xb8>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003e96:	f240 506a 	movw	r0, #1386	; 0x56a
 8003e9a:	f000 f80d 	bl	8003eb8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003e9e:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <BSP_SDRAM_Init+0xb8>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	2000400c 	.word	0x2000400c
 8003eac:	a0000140 	.word	0xa0000140
 8003eb0:	20004040 	.word	0x20004040
 8003eb4:	20000048 	.word	0x20000048

08003eb8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003ec4:	4b2a      	ldr	r3, [pc, #168]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003eca:	4b29      	ldr	r3, [pc, #164]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ecc:	2208      	movs	r2, #8
 8003ece:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003ed0:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003ed6:	4b26      	ldr	r3, [pc, #152]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003edc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ee0:	4923      	ldr	r1, [pc, #140]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ee2:	4824      	ldr	r0, [pc, #144]	; (8003f74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ee4:	f005 fa72 	bl	80093cc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003ee8:	2001      	movs	r0, #1
 8003eea:	f000 f993 	bl	8004214 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003eee:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003ef4:	4b1e      	ldr	r3, [pc, #120]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ef6:	2208      	movs	r2, #8
 8003ef8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003efa:	4b1d      	ldr	r3, [pc, #116]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003efc:	2201      	movs	r2, #1
 8003efe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003f00:	4b1b      	ldr	r3, [pc, #108]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f0a:	4919      	ldr	r1, [pc, #100]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f0c:	4819      	ldr	r0, [pc, #100]	; (8003f74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f0e:	f005 fa5d 	bl	80093cc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003f12:	4b17      	ldr	r3, [pc, #92]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f14:	2203      	movs	r2, #3
 8003f16:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f18:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f1a:	2208      	movs	r2, #8
 8003f1c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003f1e:	4b14      	ldr	r3, [pc, #80]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f20:	2204      	movs	r2, #4
 8003f22:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003f24:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003f2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f2e:	4910      	ldr	r1, [pc, #64]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f30:	4810      	ldr	r0, [pc, #64]	; (8003f74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f32:	f005 fa4b 	bl	80093cc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003f36:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003f3a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f3e:	2204      	movs	r2, #4
 8003f40:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003f42:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f44:	2208      	movs	r2, #8
 8003f46:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003f48:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4a07      	ldr	r2, [pc, #28]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f52:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f58:	4905      	ldr	r1, [pc, #20]	; (8003f70 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003f5a:	4806      	ldr	r0, [pc, #24]	; (8003f74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f5c:	f005 fa36 	bl	80093cc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4804      	ldr	r0, [pc, #16]	; (8003f74 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003f64:	f005 fa67 	bl	8009436 <HAL_SDRAM_ProgramRefreshRate>
}
 8003f68:	bf00      	nop
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	2000405c 	.word	0x2000405c
 8003f74:	2000400c 	.word	0x2000400c

08003f78 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b090      	sub	sp, #64	; 0x40
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 80ec 	beq.w	8004162 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f8e:	4b77      	ldr	r3, [pc, #476]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	4a76      	ldr	r2, [pc, #472]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	6393      	str	r3, [r2, #56]	; 0x38
 8003f9a:	4b74      	ldr	r3, [pc, #464]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8003f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003faa:	4b70      	ldr	r3, [pc, #448]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8003fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fae:	4a6f      	ldr	r2, [pc, #444]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8003fb0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb6:	4b6d      	ldr	r3, [pc, #436]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	623b      	str	r3, [r7, #32]
 8003fc6:	4b69      	ldr	r3, [pc, #420]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8003fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fca:	4a68      	ldr	r2, [pc, #416]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8003fcc:	f043 0302 	orr.w	r3, r3, #2
 8003fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd2:	4b66      	ldr	r3, [pc, #408]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	623b      	str	r3, [r7, #32]
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	4b62      	ldr	r3, [pc, #392]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	4a61      	ldr	r2, [pc, #388]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8003fe8:	f043 0304 	orr.w	r3, r3, #4
 8003fec:	6313      	str	r3, [r2, #48]	; 0x30
 8003fee:	4b5f      	ldr	r3, [pc, #380]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	61fb      	str	r3, [r7, #28]
 8003ff8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	4b5b      	ldr	r3, [pc, #364]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8004000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004002:	4a5a      	ldr	r2, [pc, #360]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8004004:	f043 0308 	orr.w	r3, r3, #8
 8004008:	6313      	str	r3, [r2, #48]	; 0x30
 800400a:	4b58      	ldr	r3, [pc, #352]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	61bb      	str	r3, [r7, #24]
 8004014:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	4b54      	ldr	r3, [pc, #336]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	4a53      	ldr	r2, [pc, #332]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8004020:	f043 0310 	orr.w	r3, r3, #16
 8004024:	6313      	str	r3, [r2, #48]	; 0x30
 8004026:	4b51      	ldr	r3, [pc, #324]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	4b4d      	ldr	r3, [pc, #308]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	4a4c      	ldr	r2, [pc, #304]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 800403c:	f043 0320 	orr.w	r3, r3, #32
 8004040:	6313      	str	r3, [r2, #48]	; 0x30
 8004042:	4b4a      	ldr	r3, [pc, #296]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	f003 0320 	and.w	r3, r3, #32
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	4b46      	ldr	r3, [pc, #280]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	4a45      	ldr	r2, [pc, #276]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8004058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800405c:	6313      	str	r3, [r2, #48]	; 0x30
 800405e:	4b43      	ldr	r3, [pc, #268]	; (800416c <BSP_SDRAM_MspInit+0x1f4>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800406a:	2302      	movs	r3, #2
 800406c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800406e:	2302      	movs	r3, #2
 8004070:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004072:	2300      	movs	r3, #0
 8004074:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004076:	230c      	movs	r3, #12
 8004078:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800407a:	2360      	movs	r3, #96	; 0x60
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800407e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004082:	4619      	mov	r1, r3
 8004084:	483a      	ldr	r0, [pc, #232]	; (8004170 <BSP_SDRAM_MspInit+0x1f8>)
 8004086:	f001 fe33 	bl	8005cf0 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800408a:	2301      	movs	r3, #1
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800408e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004092:	4619      	mov	r1, r3
 8004094:	4837      	ldr	r0, [pc, #220]	; (8004174 <BSP_SDRAM_MspInit+0x1fc>)
 8004096:	f001 fe2b 	bl	8005cf0 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800409a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80040a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040a4:	4619      	mov	r1, r3
 80040a6:	4834      	ldr	r0, [pc, #208]	; (8004178 <BSP_SDRAM_MspInit+0x200>)
 80040a8:	f001 fe22 	bl	8005cf0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80040ac:	f64f 7383 	movw	r3, #65411	; 0xff83
 80040b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80040b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040b6:	4619      	mov	r1, r3
 80040b8:	4830      	ldr	r0, [pc, #192]	; (800417c <BSP_SDRAM_MspInit+0x204>)
 80040ba:	f001 fe19 	bl	8005cf0 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80040be:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80040c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040c8:	4619      	mov	r1, r3
 80040ca:	482d      	ldr	r0, [pc, #180]	; (8004180 <BSP_SDRAM_MspInit+0x208>)
 80040cc:	f001 fe10 	bl	8005cf0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80040d0:	f248 1333 	movw	r3, #33075	; 0x8133
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80040d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80040da:	4619      	mov	r1, r3
 80040dc:	4829      	ldr	r0, [pc, #164]	; (8004184 <BSP_SDRAM_MspInit+0x20c>)
 80040de:	f001 fe07 	bl	8005cf0 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80040e2:	4b29      	ldr	r3, [pc, #164]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80040e8:	4b27      	ldr	r3, [pc, #156]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 80040ea:	2280      	movs	r2, #128	; 0x80
 80040ec:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80040ee:	4b26      	ldr	r3, [pc, #152]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 80040f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80040f6:	4b24      	ldr	r3, [pc, #144]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 80040f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040fc:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80040fe:	4b22      	ldr	r3, [pc, #136]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 8004100:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004104:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004106:	4b20      	ldr	r3, [pc, #128]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 8004108:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800410c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800410e:	4b1e      	ldr	r3, [pc, #120]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 8004110:	2200      	movs	r2, #0
 8004112:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004114:	4b1c      	ldr	r3, [pc, #112]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 8004116:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800411a:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800411c:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 800411e:	2200      	movs	r2, #0
 8004120:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004122:	4b19      	ldr	r3, [pc, #100]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 8004124:	2203      	movs	r2, #3
 8004126:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 800412a:	2200      	movs	r2, #0
 800412c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800412e:	4b16      	ldr	r3, [pc, #88]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 8004130:	2200      	movs	r2, #0
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004134:	4b14      	ldr	r3, [pc, #80]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 8004136:	4a15      	ldr	r2, [pc, #84]	; (800418c <BSP_SDRAM_MspInit+0x214>)
 8004138:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a12      	ldr	r2, [pc, #72]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
 8004140:	4a11      	ldr	r2, [pc, #68]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004146:	4810      	ldr	r0, [pc, #64]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 8004148:	f000 fea6 	bl	8004e98 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800414c:	480e      	ldr	r0, [pc, #56]	; (8004188 <BSP_SDRAM_MspInit+0x210>)
 800414e:	f000 fdf5 	bl	8004d3c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004152:	2200      	movs	r2, #0
 8004154:	210f      	movs	r1, #15
 8004156:	2038      	movs	r0, #56	; 0x38
 8004158:	f000 fdaa 	bl	8004cb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800415c:	2038      	movs	r0, #56	; 0x38
 800415e:	f000 fdc3 	bl	8004ce8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004162:	bf00      	nop
 8004164:	3740      	adds	r7, #64	; 0x40
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800
 8004170:	40020400 	.word	0x40020400
 8004174:	40020800 	.word	0x40020800
 8004178:	40020c00 	.word	0x40020c00
 800417c:	40021000 	.word	0x40021000
 8004180:	40021400 	.word	0x40021400
 8004184:	40021800 	.word	0x40021800
 8004188:	2000406c 	.word	0x2000406c
 800418c:	40026410 	.word	0x40026410

08004190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004194:	4b0e      	ldr	r3, [pc, #56]	; (80041d0 <HAL_Init+0x40>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a0d      	ldr	r2, [pc, #52]	; (80041d0 <HAL_Init+0x40>)
 800419a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800419e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <HAL_Init+0x40>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <HAL_Init+0x40>)
 80041a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041ac:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <HAL_Init+0x40>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a07      	ldr	r2, [pc, #28]	; (80041d0 <HAL_Init+0x40>)
 80041b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041b8:	2003      	movs	r0, #3
 80041ba:	f000 fd6e 	bl	8004c9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041be:	200f      	movs	r0, #15
 80041c0:	f7fe fcec 	bl	8002b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041c4:	f7fe f8a6 	bl	8002314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40023c00 	.word	0x40023c00

080041d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <HAL_IncTick+0x20>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	461a      	mov	r2, r3
 80041de:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <HAL_IncTick+0x24>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4413      	add	r3, r2
 80041e4:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <HAL_IncTick+0x24>)
 80041e6:	6013      	str	r3, [r2, #0]
}
 80041e8:	bf00      	nop
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	20000050 	.word	0x20000050
 80041f8:	200040cc 	.word	0x200040cc

080041fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  return uwTick;
 8004200:	4b03      	ldr	r3, [pc, #12]	; (8004210 <HAL_GetTick+0x14>)
 8004202:	681b      	ldr	r3, [r3, #0]
}
 8004204:	4618      	mov	r0, r3
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	200040cc 	.word	0x200040cc

08004214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800421c:	f7ff ffee 	bl	80041fc <HAL_GetTick>
 8004220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800422c:	d005      	beq.n	800423a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800422e:	4b0a      	ldr	r3, [pc, #40]	; (8004258 <HAL_Delay+0x44>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800423a:	bf00      	nop
 800423c:	f7ff ffde 	bl	80041fc <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	429a      	cmp	r2, r3
 800424a:	d8f7      	bhi.n	800423c <HAL_Delay+0x28>
  {
  }
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000050 	.word	0x20000050

0800425c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e033      	b.n	80042da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fe f872 	bl	8002364 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f003 0310 	and.w	r3, r3, #16
 8004296:	2b00      	cmp	r3, #0
 8004298:	d118      	bne.n	80042cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80042a2:	f023 0302 	bic.w	r3, r3, #2
 80042a6:	f043 0202 	orr.w	r2, r3, #2
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fac8 	bl	8004844 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f023 0303 	bic.w	r3, r3, #3
 80042c2:	f043 0201 	orr.w	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	641a      	str	r2, [r3, #64]	; 0x40
 80042ca:	e001      	b.n	80042d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
	...

080042e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d101      	bne.n	8004302 <HAL_ADC_Start_DMA+0x1e>
 80042fe:	2302      	movs	r3, #2
 8004300:	e0e9      	b.n	80044d6 <HAL_ADC_Start_DMA+0x1f2>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b01      	cmp	r3, #1
 8004316:	d018      	beq.n	800434a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0201 	orr.w	r2, r2, #1
 8004326:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004328:	4b6d      	ldr	r3, [pc, #436]	; (80044e0 <HAL_ADC_Start_DMA+0x1fc>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a6d      	ldr	r2, [pc, #436]	; (80044e4 <HAL_ADC_Start_DMA+0x200>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	0c9a      	lsrs	r2, r3, #18
 8004334:	4613      	mov	r3, r2
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	4413      	add	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800433c:	e002      	b.n	8004344 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	3b01      	subs	r3, #1
 8004342:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f9      	bne.n	800433e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004358:	d107      	bne.n	800436a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004368:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b01      	cmp	r3, #1
 8004376:	f040 80a1 	bne.w	80044bc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004382:	f023 0301 	bic.w	r3, r3, #1
 8004386:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043b8:	d106      	bne.n	80043c8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	f023 0206 	bic.w	r2, r3, #6
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44
 80043c6:	e002      	b.n	80043ce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80043d6:	4b44      	ldr	r3, [pc, #272]	; (80044e8 <HAL_ADC_Start_DMA+0x204>)
 80043d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	4a43      	ldr	r2, [pc, #268]	; (80044ec <HAL_ADC_Start_DMA+0x208>)
 80043e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	4a42      	ldr	r2, [pc, #264]	; (80044f0 <HAL_ADC_Start_DMA+0x20c>)
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ee:	4a41      	ldr	r2, [pc, #260]	; (80044f4 <HAL_ADC_Start_DMA+0x210>)
 80043f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80043fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800440a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689a      	ldr	r2, [r3, #8]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800441a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	334c      	adds	r3, #76	; 0x4c
 8004426:	4619      	mov	r1, r3
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f000 fd92 	bl	8004f54 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 031f 	and.w	r3, r3, #31
 8004438:	2b00      	cmp	r3, #0
 800443a:	d12a      	bne.n	8004492 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a2d      	ldr	r2, [pc, #180]	; (80044f8 <HAL_ADC_Start_DMA+0x214>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d015      	beq.n	8004472 <HAL_ADC_Start_DMA+0x18e>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a2c      	ldr	r2, [pc, #176]	; (80044fc <HAL_ADC_Start_DMA+0x218>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d105      	bne.n	800445c <HAL_ADC_Start_DMA+0x178>
 8004450:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <HAL_ADC_Start_DMA+0x204>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a27      	ldr	r2, [pc, #156]	; (8004500 <HAL_ADC_Start_DMA+0x21c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d136      	bne.n	80044d4 <HAL_ADC_Start_DMA+0x1f0>
 8004466:	4b20      	ldr	r3, [pc, #128]	; (80044e8 <HAL_ADC_Start_DMA+0x204>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b00      	cmp	r3, #0
 8004470:	d130      	bne.n	80044d4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d129      	bne.n	80044d4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	e020      	b.n	80044d4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a18      	ldr	r2, [pc, #96]	; (80044f8 <HAL_ADC_Start_DMA+0x214>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d11b      	bne.n	80044d4 <HAL_ADC_Start_DMA+0x1f0>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d114      	bne.n	80044d4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044b8:	609a      	str	r2, [r3, #8]
 80044ba:	e00b      	b.n	80044d4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	f043 0210 	orr.w	r2, r3, #16
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044cc:	f043 0201 	orr.w	r2, r3, #1
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20000000 	.word	0x20000000
 80044e4:	431bde83 	.word	0x431bde83
 80044e8:	40012300 	.word	0x40012300
 80044ec:	08004a3d 	.word	0x08004a3d
 80044f0:	08004af7 	.word	0x08004af7
 80044f4:	08004b13 	.word	0x08004b13
 80044f8:	40012000 	.word	0x40012000
 80044fc:	40012100 	.word	0x40012100
 8004500:	40012200 	.word	0x40012200

08004504 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004516:	2b01      	cmp	r3, #1
 8004518:	d101      	bne.n	800451e <HAL_ADC_Stop_DMA+0x1a>
 800451a:	2302      	movs	r3, #2
 800451c:	e048      	b.n	80045b0 <HAL_ADC_Stop_DMA+0xac>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0201 	bic.w	r2, r2, #1
 8004534:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d130      	bne.n	80045a6 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689a      	ldr	r2, [r3, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004552:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d10f      	bne.n	8004582 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fd4c 	bl	8005004 <HAL_DMA_Abort>
 800456c:	4603      	mov	r3, r0
 800456e:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004570:	7bfb      	ldrb	r3, [r7, #15]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004590:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800459a:	f023 0301 	bic.w	r3, r3, #1
 800459e:	f043 0201 	orr.w	r2, r3, #1
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_ADC_ConfigChannel+0x1c>
 80045f8:	2302      	movs	r3, #2
 80045fa:	e113      	b.n	8004824 <HAL_ADC_ConfigChannel+0x244>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b09      	cmp	r3, #9
 800460a:	d925      	bls.n	8004658 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68d9      	ldr	r1, [r3, #12]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	b29b      	uxth	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	4613      	mov	r3, r2
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	4413      	add	r3, r2
 8004620:	3b1e      	subs	r3, #30
 8004622:	2207      	movs	r2, #7
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43da      	mvns	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	400a      	ands	r2, r1
 8004630:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68d9      	ldr	r1, [r3, #12]
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	b29b      	uxth	r3, r3
 8004642:	4618      	mov	r0, r3
 8004644:	4603      	mov	r3, r0
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	4403      	add	r3, r0
 800464a:	3b1e      	subs	r3, #30
 800464c:	409a      	lsls	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	e022      	b.n	800469e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6919      	ldr	r1, [r3, #16]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	4613      	mov	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	4413      	add	r3, r2
 800466c:	2207      	movs	r2, #7
 800466e:	fa02 f303 	lsl.w	r3, r2, r3
 8004672:	43da      	mvns	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	400a      	ands	r2, r1
 800467a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	6919      	ldr	r1, [r3, #16]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	b29b      	uxth	r3, r3
 800468c:	4618      	mov	r0, r3
 800468e:	4603      	mov	r3, r0
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	4403      	add	r3, r0
 8004694:	409a      	lsls	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d824      	bhi.n	80046f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	3b05      	subs	r3, #5
 80046b8:	221f      	movs	r2, #31
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	43da      	mvns	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	400a      	ands	r2, r1
 80046c6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	4618      	mov	r0, r3
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	4613      	mov	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	3b05      	subs	r3, #5
 80046e2:	fa00 f203 	lsl.w	r2, r0, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	635a      	str	r2, [r3, #52]	; 0x34
 80046ee:	e04c      	b.n	800478a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	2b0c      	cmp	r3, #12
 80046f6:	d824      	bhi.n	8004742 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	3b23      	subs	r3, #35	; 0x23
 800470a:	221f      	movs	r2, #31
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	43da      	mvns	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	400a      	ands	r2, r1
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	4618      	mov	r0, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	4413      	add	r3, r2
 8004732:	3b23      	subs	r3, #35	; 0x23
 8004734:	fa00 f203 	lsl.w	r2, r0, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	430a      	orrs	r2, r1
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
 8004740:	e023      	b.n	800478a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	3b41      	subs	r3, #65	; 0x41
 8004754:	221f      	movs	r2, #31
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43da      	mvns	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	400a      	ands	r2, r1
 8004762:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	b29b      	uxth	r3, r3
 8004770:	4618      	mov	r0, r3
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	3b41      	subs	r3, #65	; 0x41
 800477e:	fa00 f203 	lsl.w	r2, r0, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800478a:	4b29      	ldr	r3, [pc, #164]	; (8004830 <HAL_ADC_ConfigChannel+0x250>)
 800478c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a28      	ldr	r2, [pc, #160]	; (8004834 <HAL_ADC_ConfigChannel+0x254>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d10f      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x1d8>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b12      	cmp	r3, #18
 800479e:	d10b      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <HAL_ADC_ConfigChannel+0x254>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d12b      	bne.n	800481a <HAL_ADC_ConfigChannel+0x23a>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <HAL_ADC_ConfigChannel+0x258>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <HAL_ADC_ConfigChannel+0x1f4>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b11      	cmp	r3, #17
 80047d2:	d122      	bne.n	800481a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a11      	ldr	r2, [pc, #68]	; (8004838 <HAL_ADC_ConfigChannel+0x258>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d111      	bne.n	800481a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047f6:	4b11      	ldr	r3, [pc, #68]	; (800483c <HAL_ADC_ConfigChannel+0x25c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a11      	ldr	r2, [pc, #68]	; (8004840 <HAL_ADC_ConfigChannel+0x260>)
 80047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004800:	0c9a      	lsrs	r2, r3, #18
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800480c:	e002      	b.n	8004814 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	3b01      	subs	r3, #1
 8004812:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f9      	bne.n	800480e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	40012300 	.word	0x40012300
 8004834:	40012000 	.word	0x40012000
 8004838:	10000012 	.word	0x10000012
 800483c:	20000000 	.word	0x20000000
 8004840:	431bde83 	.word	0x431bde83

08004844 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800484c:	4b79      	ldr	r3, [pc, #484]	; (8004a34 <ADC_Init+0x1f0>)
 800484e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	431a      	orrs	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004878:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6859      	ldr	r1, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	021a      	lsls	r2, r3, #8
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800489c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6859      	ldr	r1, [r3, #4]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6899      	ldr	r1, [r3, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d6:	4a58      	ldr	r2, [pc, #352]	; (8004a38 <ADC_Init+0x1f4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d022      	beq.n	8004922 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6899      	ldr	r1, [r3, #8]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800490c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6899      	ldr	r1, [r3, #8]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	609a      	str	r2, [r3, #8]
 8004920:	e00f      	b.n	8004942 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004940:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f022 0202 	bic.w	r2, r2, #2
 8004950:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6899      	ldr	r1, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	7e1b      	ldrb	r3, [r3, #24]
 800495c:	005a      	lsls	r2, r3, #1
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01b      	beq.n	80049a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800497e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800498e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6859      	ldr	r1, [r3, #4]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	3b01      	subs	r3, #1
 800499c:	035a      	lsls	r2, r3, #13
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	605a      	str	r2, [r3, #4]
 80049a6:	e007      	b.n	80049b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	3b01      	subs	r3, #1
 80049d4:	051a      	lsls	r2, r3, #20
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80049ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6899      	ldr	r1, [r3, #8]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049fa:	025a      	lsls	r2, r3, #9
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689a      	ldr	r2, [r3, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6899      	ldr	r1, [r3, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	029a      	lsls	r2, r3, #10
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	609a      	str	r2, [r3, #8]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40012300 	.word	0x40012300
 8004a38:	0f000001 	.word	0x0f000001

08004a3c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d13c      	bne.n	8004ad0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d12b      	bne.n	8004ac8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d127      	bne.n	8004ac8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d006      	beq.n	8004a94 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d119      	bne.n	8004ac8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0220 	bic.w	r2, r2, #32
 8004aa2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d105      	bne.n	8004ac8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac0:	f043 0201 	orr.w	r2, r3, #1
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7fd fbed 	bl	80022a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ace:	e00e      	b.n	8004aee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f7ff fd75 	bl	80045cc <HAL_ADC_ErrorCallback>
}
 8004ae2:	e004      	b.n	8004aee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	4798      	blx	r3
}
 8004aee:	bf00      	nop
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b084      	sub	sp, #16
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b02:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f7ff fd57 	bl	80045b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b0a:	bf00      	nop
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b084      	sub	sp, #16
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2240      	movs	r2, #64	; 0x40
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	f043 0204 	orr.w	r2, r3, #4
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7ff fd4a 	bl	80045cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004b38:	bf00      	nop
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <__NVIC_SetPriorityGrouping+0x44>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b72:	4a04      	ldr	r2, [pc, #16]	; (8004b84 <__NVIC_SetPriorityGrouping+0x44>)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	60d3      	str	r3, [r2, #12]
}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000ed00 	.word	0xe000ed00

08004b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b8c:	4b04      	ldr	r3, [pc, #16]	; (8004ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	0a1b      	lsrs	r3, r3, #8
 8004b92:	f003 0307 	and.w	r3, r3, #7
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr
 8004ba0:	e000ed00 	.word	0xe000ed00

08004ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	4603      	mov	r3, r0
 8004bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	db0b      	blt.n	8004bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	f003 021f 	and.w	r2, r3, #31
 8004bbc:	4907      	ldr	r1, [pc, #28]	; (8004bdc <__NVIC_EnableIRQ+0x38>)
 8004bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc2:	095b      	lsrs	r3, r3, #5
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8004bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	e000e100 	.word	0xe000e100

08004be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	6039      	str	r1, [r7, #0]
 8004bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	db0a      	blt.n	8004c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	490c      	ldr	r1, [pc, #48]	; (8004c2c <__NVIC_SetPriority+0x4c>)
 8004bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bfe:	0112      	lsls	r2, r2, #4
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	440b      	add	r3, r1
 8004c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c08:	e00a      	b.n	8004c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	4908      	ldr	r1, [pc, #32]	; (8004c30 <__NVIC_SetPriority+0x50>)
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	3b04      	subs	r3, #4
 8004c18:	0112      	lsls	r2, r2, #4
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	761a      	strb	r2, [r3, #24]
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	e000e100 	.word	0xe000e100
 8004c30:	e000ed00 	.word	0xe000ed00

08004c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b089      	sub	sp, #36	; 0x24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 0307 	and.w	r3, r3, #7
 8004c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	f1c3 0307 	rsb	r3, r3, #7
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	bf28      	it	cs
 8004c52:	2304      	movcs	r3, #4
 8004c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	2b06      	cmp	r3, #6
 8004c5c:	d902      	bls.n	8004c64 <NVIC_EncodePriority+0x30>
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3b03      	subs	r3, #3
 8004c62:	e000      	b.n	8004c66 <NVIC_EncodePriority+0x32>
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c72:	43da      	mvns	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	401a      	ands	r2, r3
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	fa01 f303 	lsl.w	r3, r1, r3
 8004c86:	43d9      	mvns	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c8c:	4313      	orrs	r3, r2
         );
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3724      	adds	r7, #36	; 0x24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff ff4c 	bl	8004b40 <__NVIC_SetPriorityGrouping>
}
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cc2:	f7ff ff61 	bl	8004b88 <__NVIC_GetPriorityGrouping>
 8004cc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	68b9      	ldr	r1, [r7, #8]
 8004ccc:	6978      	ldr	r0, [r7, #20]
 8004cce:	f7ff ffb1 	bl	8004c34 <NVIC_EncodePriority>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cd8:	4611      	mov	r1, r2
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff ff80 	bl	8004be0 <__NVIC_SetPriority>
}
 8004ce0:	bf00      	nop
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	4603      	mov	r3, r0
 8004cf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff ff54 	bl	8004ba4 <__NVIC_EnableIRQ>
}
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e00e      	b.n	8004d34 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	795b      	ldrb	r3, [r3, #5]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fd fb94 	bl	8002454 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d48:	f7ff fa58 	bl	80041fc <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e099      	b.n	8004e8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f022 0201 	bic.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d78:	e00f      	b.n	8004d9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d7a:	f7ff fa3f 	bl	80041fc <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b05      	cmp	r3, #5
 8004d86:	d908      	bls.n	8004d9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2203      	movs	r2, #3
 8004d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e078      	b.n	8004e8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e8      	bne.n	8004d7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4b38      	ldr	r3, [pc, #224]	; (8004e94 <HAL_DMA_Init+0x158>)
 8004db4:	4013      	ands	r3, r2
 8004db6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685a      	ldr	r2, [r3, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	699b      	ldr	r3, [r3, #24]
 8004dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	2b04      	cmp	r3, #4
 8004df2:	d107      	bne.n	8004e04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f023 0307 	bic.w	r3, r3, #7
 8004e1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d117      	bne.n	8004e5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00e      	beq.n	8004e5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fb3d 	bl	80054c0 <DMA_CheckFifoParam>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d008      	beq.n	8004e5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2240      	movs	r2, #64	; 0x40
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e016      	b.n	8004e8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 faf4 	bl	8005454 <DMA_CalcBaseAndBitshift>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e74:	223f      	movs	r2, #63	; 0x3f
 8004e76:	409a      	lsls	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	f010803f 	.word	0xf010803f

08004e98 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e050      	b.n	8004f4c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d101      	bne.n	8004eba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e048      	b.n	8004f4c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0201 	bic.w	r2, r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2221      	movs	r2, #33	; 0x21
 8004ef8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 faaa 	bl	8005454 <DMA_CalcBaseAndBitshift>
 8004f00:	4603      	mov	r3, r0
 8004f02:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2c:	223f      	movs	r2, #63	; 0x3f
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_DMA_Start_IT+0x26>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e040      	b.n	8004ffc <HAL_DMA_Start_IT+0xa8>
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d12f      	bne.n	8004fee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2202      	movs	r2, #2
 8004f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fa28 	bl	80053f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fac:	223f      	movs	r2, #63	; 0x3f
 8004fae:	409a      	lsls	r2, r3
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0216 	orr.w	r2, r2, #22
 8004fc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0208 	orr.w	r2, r2, #8
 8004fda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	e005      	b.n	8004ffa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005010:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005012:	f7ff f8f3 	bl	80041fc <HAL_GetTick>
 8005016:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d008      	beq.n	8005036 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2280      	movs	r2, #128	; 0x80
 8005028:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e052      	b.n	80050dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0216 	bic.w	r2, r2, #22
 8005044:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695a      	ldr	r2, [r3, #20]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005054:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	2b00      	cmp	r3, #0
 800505c:	d103      	bne.n	8005066 <HAL_DMA_Abort+0x62>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0208 	bic.w	r2, r2, #8
 8005074:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0201 	bic.w	r2, r2, #1
 8005084:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005086:	e013      	b.n	80050b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005088:	f7ff f8b8 	bl	80041fc <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b05      	cmp	r3, #5
 8005094:	d90c      	bls.n	80050b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2203      	movs	r2, #3
 80050a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e015      	b.n	80050dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1e4      	bne.n	8005088 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c2:	223f      	movs	r2, #63	; 0x3f
 80050c4:	409a      	lsls	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b086      	sub	sp, #24
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80050f0:	4b8e      	ldr	r3, [pc, #568]	; (800532c <HAL_DMA_IRQHandler+0x248>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a8e      	ldr	r2, [pc, #568]	; (8005330 <HAL_DMA_IRQHandler+0x24c>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	0a9b      	lsrs	r3, r3, #10
 80050fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005102:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800510e:	2208      	movs	r2, #8
 8005110:	409a      	lsls	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4013      	ands	r3, r2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d01a      	beq.n	8005150 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	d013      	beq.n	8005150 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f022 0204 	bic.w	r2, r2, #4
 8005136:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800513c:	2208      	movs	r2, #8
 800513e:	409a      	lsls	r2, r3
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005148:	f043 0201 	orr.w	r2, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005154:	2201      	movs	r2, #1
 8005156:	409a      	lsls	r2, r3
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4013      	ands	r3, r2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d012      	beq.n	8005186 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00b      	beq.n	8005186 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005172:	2201      	movs	r2, #1
 8005174:	409a      	lsls	r2, r3
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	f043 0202 	orr.w	r2, r3, #2
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518a:	2204      	movs	r2, #4
 800518c:	409a      	lsls	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4013      	ands	r3, r2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d012      	beq.n	80051bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00b      	beq.n	80051bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a8:	2204      	movs	r2, #4
 80051aa:	409a      	lsls	r2, r3
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b4:	f043 0204 	orr.w	r2, r3, #4
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c0:	2210      	movs	r2, #16
 80051c2:	409a      	lsls	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d043      	beq.n	8005254 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d03c      	beq.n	8005254 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051de:	2210      	movs	r2, #16
 80051e0:	409a      	lsls	r2, r3
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d018      	beq.n	8005226 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d108      	bne.n	8005214 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d024      	beq.n	8005254 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	4798      	blx	r3
 8005212:	e01f      	b.n	8005254 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01b      	beq.n	8005254 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	4798      	blx	r3
 8005224:	e016      	b.n	8005254 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005230:	2b00      	cmp	r3, #0
 8005232:	d107      	bne.n	8005244 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f022 0208 	bic.w	r2, r2, #8
 8005242:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005258:	2220      	movs	r2, #32
 800525a:	409a      	lsls	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4013      	ands	r3, r2
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 808f 	beq.w	8005384 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8087 	beq.w	8005384 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800527a:	2220      	movs	r2, #32
 800527c:	409a      	lsls	r2, r3
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b05      	cmp	r3, #5
 800528c:	d136      	bne.n	80052fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0216 	bic.w	r2, r2, #22
 800529c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	695a      	ldr	r2, [r3, #20]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d103      	bne.n	80052be <HAL_DMA_IRQHandler+0x1da>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0208 	bic.w	r2, r2, #8
 80052cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052d2:	223f      	movs	r2, #63	; 0x3f
 80052d4:	409a      	lsls	r2, r3
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d07e      	beq.n	80053f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	4798      	blx	r3
        }
        return;
 80052fa:	e079      	b.n	80053f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d01d      	beq.n	8005346 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10d      	bne.n	8005334 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531c:	2b00      	cmp	r3, #0
 800531e:	d031      	beq.n	8005384 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4798      	blx	r3
 8005328:	e02c      	b.n	8005384 <HAL_DMA_IRQHandler+0x2a0>
 800532a:	bf00      	nop
 800532c:	20000000 	.word	0x20000000
 8005330:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d023      	beq.n	8005384 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	4798      	blx	r3
 8005344:	e01e      	b.n	8005384 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10f      	bne.n	8005374 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0210 	bic.w	r2, r2, #16
 8005362:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005388:	2b00      	cmp	r3, #0
 800538a:	d032      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d022      	beq.n	80053de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2205      	movs	r2, #5
 800539c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0201 	bic.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	3301      	adds	r3, #1
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d307      	bcc.n	80053cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f2      	bne.n	80053b0 <HAL_DMA_IRQHandler+0x2cc>
 80053ca:	e000      	b.n	80053ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80053cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	4798      	blx	r3
 80053ee:	e000      	b.n	80053f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80053f0:	bf00      	nop
    }
  }
}
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005414:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	2b40      	cmp	r3, #64	; 0x40
 8005424:	d108      	bne.n	8005438 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68ba      	ldr	r2, [r7, #8]
 8005434:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005436:	e007      	b.n	8005448 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	60da      	str	r2, [r3, #12]
}
 8005448:	bf00      	nop
 800544a:	3714      	adds	r7, #20
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	3b10      	subs	r3, #16
 8005464:	4a14      	ldr	r2, [pc, #80]	; (80054b8 <DMA_CalcBaseAndBitshift+0x64>)
 8005466:	fba2 2303 	umull	r2, r3, r2, r3
 800546a:	091b      	lsrs	r3, r3, #4
 800546c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800546e:	4a13      	ldr	r2, [pc, #76]	; (80054bc <DMA_CalcBaseAndBitshift+0x68>)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4413      	add	r3, r2
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b03      	cmp	r3, #3
 8005480:	d909      	bls.n	8005496 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800548a:	f023 0303 	bic.w	r3, r3, #3
 800548e:	1d1a      	adds	r2, r3, #4
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	659a      	str	r2, [r3, #88]	; 0x58
 8005494:	e007      	b.n	80054a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	aaaaaaab 	.word	0xaaaaaaab
 80054bc:	08082ca4 	.word	0x08082ca4

080054c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d11f      	bne.n	800551a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b03      	cmp	r3, #3
 80054de:	d856      	bhi.n	800558e <DMA_CheckFifoParam+0xce>
 80054e0:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <DMA_CheckFifoParam+0x28>)
 80054e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e6:	bf00      	nop
 80054e8:	080054f9 	.word	0x080054f9
 80054ec:	0800550b 	.word	0x0800550b
 80054f0:	080054f9 	.word	0x080054f9
 80054f4:	0800558f 	.word	0x0800558f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d046      	beq.n	8005592 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005508:	e043      	b.n	8005592 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005512:	d140      	bne.n	8005596 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005518:	e03d      	b.n	8005596 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005522:	d121      	bne.n	8005568 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b03      	cmp	r3, #3
 8005528:	d837      	bhi.n	800559a <DMA_CheckFifoParam+0xda>
 800552a:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <DMA_CheckFifoParam+0x70>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005541 	.word	0x08005541
 8005534:	08005547 	.word	0x08005547
 8005538:	08005541 	.word	0x08005541
 800553c:	08005559 	.word	0x08005559
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	73fb      	strb	r3, [r7, #15]
      break;
 8005544:	e030      	b.n	80055a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d025      	beq.n	800559e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005556:	e022      	b.n	800559e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005560:	d11f      	bne.n	80055a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005566:	e01c      	b.n	80055a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2b02      	cmp	r3, #2
 800556c:	d903      	bls.n	8005576 <DMA_CheckFifoParam+0xb6>
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2b03      	cmp	r3, #3
 8005572:	d003      	beq.n	800557c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005574:	e018      	b.n	80055a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	73fb      	strb	r3, [r7, #15]
      break;
 800557a:	e015      	b.n	80055a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00e      	beq.n	80055a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	73fb      	strb	r3, [r7, #15]
      break;
 800558c:	e00b      	b.n	80055a6 <DMA_CheckFifoParam+0xe6>
      break;
 800558e:	bf00      	nop
 8005590:	e00a      	b.n	80055a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005592:	bf00      	nop
 8005594:	e008      	b.n	80055a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005596:	bf00      	nop
 8005598:	e006      	b.n	80055a8 <DMA_CheckFifoParam+0xe8>
      break;
 800559a:	bf00      	nop
 800559c:	e004      	b.n	80055a8 <DMA_CheckFifoParam+0xe8>
      break;
 800559e:	bf00      	nop
 80055a0:	e002      	b.n	80055a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80055a2:	bf00      	nop
 80055a4:	e000      	b.n	80055a8 <DMA_CheckFifoParam+0xe8>
      break;
 80055a6:	bf00      	nop
    }
  } 
  
  return status; 
 80055a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop

080055b8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e03b      	b.n	8005642 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d106      	bne.n	80055e4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fc ff5a 	bl	8002498 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005608:	f023 0107 	bic.w	r1, r3, #7
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005622:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	68d1      	ldr	r1, [r2, #12]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	6812      	ldr	r2, [r2, #0]
 800562e:	430b      	orrs	r3, r1
 8005630:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b086      	sub	sp, #24
 800564e:	af02      	add	r7, sp, #8
 8005650:	60f8      	str	r0, [r7, #12]
 8005652:	60b9      	str	r1, [r7, #8]
 8005654:	607a      	str	r2, [r7, #4]
 8005656:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_DMA2D_Start+0x1c>
 8005662:	2302      	movs	r3, #2
 8005664:	e018      	b.n	8005698 <HAL_DMA2D_Start+0x4e>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2202      	movs	r2, #2
 8005672:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	68b9      	ldr	r1, [r7, #8]
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fa99 	bl	8005bb8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0201 	orr.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d056      	beq.n	800576a <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80056bc:	f7fe fd9e 	bl	80041fc <HAL_GetTick>
 80056c0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80056c2:	e04b      	b.n	800575c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d023      	beq.n	800571e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f003 0320 	and.w	r3, r3, #32
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e4:	f043 0202 	orr.w	r2, r3, #2
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fa:	f043 0201 	orr.w	r2, r3, #1
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2221      	movs	r2, #33	; 0x21
 8005708:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2204      	movs	r2, #4
 800570e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e0a5      	b.n	800586a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005724:	d01a      	beq.n	800575c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005726:	f7fe fd69 	bl	80041fc <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d302      	bcc.n	800573c <HAL_DMA2D_PollForTransfer+0x9c>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10f      	bne.n	800575c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005740:	f043 0220 	orr.w	r2, r3, #32
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2203      	movs	r2, #3
 800574c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e086      	b.n	800586a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f003 0302 	and.w	r3, r3, #2
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0ac      	beq.n	80056c4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577c:	f003 0320 	and.w	r3, r3, #32
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d061      	beq.n	8005850 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800578c:	f7fe fd36 	bl	80041fc <HAL_GetTick>
 8005790:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005792:	e056      	b.n	8005842 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d02e      	beq.n	8005804 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b4:	f043 0204 	orr.w	r2, r3, #4
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ca:	f043 0202 	orr.w	r2, r3, #2
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e0:	f043 0201 	orr.w	r2, r3, #1
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2229      	movs	r2, #41	; 0x29
 80057ee:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2204      	movs	r2, #4
 80057f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e032      	b.n	800586a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800580a:	d01a      	beq.n	8005842 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800580c:	f7fe fcf6 	bl	80041fc <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d302      	bcc.n	8005822 <HAL_DMA2D_PollForTransfer+0x182>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10f      	bne.n	8005842 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005826:	f043 0220 	orr.w	r2, r3, #32
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2203      	movs	r2, #3
 8005832:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e013      	b.n	800586a <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f003 0310 	and.w	r3, r3, #16
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0a1      	beq.n	8005794 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2212      	movs	r2, #18
 8005856:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b084      	sub	sp, #16
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b00      	cmp	r3, #0
 8005892:	d026      	beq.n	80058e2 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589a:	2b00      	cmp	r3, #0
 800589c:	d021      	beq.n	80058e2 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058ac:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	f043 0201 	orr.w	r2, r3, #1
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2201      	movs	r2, #1
 80058c0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2204      	movs	r2, #4
 80058c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d026      	beq.n	800593a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d021      	beq.n	800593a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005904:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2220      	movs	r2, #32
 800590c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005912:	f043 0202 	orr.w	r2, r3, #2
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2204      	movs	r2, #4
 800591e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d026      	beq.n	8005992 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800594a:	2b00      	cmp	r3, #0
 800594c:	d021      	beq.n	8005992 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800595c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2208      	movs	r2, #8
 8005964:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596a:	f043 0204 	orr.w	r2, r3, #4
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2204      	movs	r2, #4
 8005976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d013      	beq.n	80059c4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00e      	beq.n	80059c4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2204      	movs	r2, #4
 80059bc:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f853 	bl	8005a6a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d024      	beq.n	8005a18 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01f      	beq.n	8005a18 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059e6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2202      	movs	r2, #2
 80059ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f003 0310 	and.w	r3, r3, #16
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d01f      	beq.n	8005a62 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01a      	beq.n	8005a62 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a3a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2210      	movs	r2, #16
 8005a42:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f80e 	bl	8005a7e <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005a62:	bf00      	nop
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b083      	sub	sp, #12
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005a72:	bf00      	nop
 8005a74:	370c      	adds	r7, #12
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005a86:	bf00      	nop
 8005a88:	370c      	adds	r7, #12
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr
	...

08005a94 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d101      	bne.n	8005ab4 <HAL_DMA2D_ConfigLayer+0x20>
 8005ab0:	2302      	movs	r3, #2
 8005ab2:	e079      	b.n	8005ba8 <HAL_DMA2D_ConfigLayer+0x114>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2202      	movs	r2, #2
 8005ac0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	3318      	adds	r3, #24
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	4413      	add	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	685a      	ldr	r2, [r3, #4]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	041b      	lsls	r3, r3, #16
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005ade:	4b35      	ldr	r3, [pc, #212]	; (8005bb4 <HAL_DMA2D_ConfigLayer+0x120>)
 8005ae0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b0a      	cmp	r3, #10
 8005ae8:	d003      	beq.n	8005af2 <HAL_DMA2D_ConfigLayer+0x5e>
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b09      	cmp	r3, #9
 8005af0:	d107      	bne.n	8005b02 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
 8005b00:	e005      	b.n	8005b0e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	061b      	lsls	r3, r3, #24
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d120      	bne.n	8005b56 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	ea02 0103 	and.w	r1, r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b0a      	cmp	r3, #10
 8005b3c:	d003      	beq.n	8005b46 <HAL_DMA2D_ConfigLayer+0xb2>
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b09      	cmp	r3, #9
 8005b44:	d127      	bne.n	8005b96 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b52:	629a      	str	r2, [r3, #40]	; 0x28
 8005b54:	e01f      	b.n	8005b96 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	ea02 0103 	and.w	r1, r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	2b0a      	cmp	r3, #10
 8005b7e:	d003      	beq.n	8005b88 <HAL_DMA2D_ConfigLayer+0xf4>
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	2b09      	cmp	r3, #9
 8005b86:	d106      	bne.n	8005b96 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b94:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	ff03000f 	.word	0xff03000f

08005bb8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b08b      	sub	sp, #44	; 0x2c
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bcc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	041a      	lsls	r2, r3, #16
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bf0:	d174      	bne.n	8005cdc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005bf8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c00:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c08:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d108      	bne.n	8005c2a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
 8005c28:	e053      	b.n	8005cd2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d106      	bne.n	8005c40 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3e:	e048      	b.n	8005cd2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d111      	bne.n	8005c6c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	0cdb      	lsrs	r3, r3, #19
 8005c4c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	0a9b      	lsrs	r3, r3, #10
 8005c52:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	08db      	lsrs	r3, r3, #3
 8005c58:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	02db      	lsls	r3, r3, #11
 8005c62:	4313      	orrs	r3, r2
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6a:	e032      	b.n	8005cd2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d117      	bne.n	8005ca4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	0fdb      	lsrs	r3, r3, #31
 8005c78:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	0cdb      	lsrs	r3, r3, #19
 8005c7e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	0adb      	lsrs	r3, r3, #11
 8005c84:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	08db      	lsrs	r3, r3, #3
 8005c8a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	029b      	lsls	r3, r3, #10
 8005c94:	431a      	orrs	r2, r3
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	03db      	lsls	r3, r3, #15
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca2:	e016      	b.n	8005cd2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	0f1b      	lsrs	r3, r3, #28
 8005ca8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	0d1b      	lsrs	r3, r3, #20
 8005cae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	0b1b      	lsrs	r3, r3, #12
 8005cb4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	091b      	lsrs	r3, r3, #4
 8005cba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	011a      	lsls	r2, r3, #4
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	031b      	lsls	r3, r3, #12
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005cda:	e003      	b.n	8005ce4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	60da      	str	r2, [r3, #12]
}
 8005ce4:	bf00      	nop
 8005ce6:	372c      	adds	r7, #44	; 0x2c
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b089      	sub	sp, #36	; 0x24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d06:	2300      	movs	r3, #0
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	e177      	b.n	8005ffc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	f040 8166 	bne.w	8005ff6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d005      	beq.n	8005d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d130      	bne.n	8005da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	43db      	mvns	r3, r3
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4013      	ands	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d78:	2201      	movs	r2, #1
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	43db      	mvns	r3, r3
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	4013      	ands	r3, r2
 8005d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	091b      	lsrs	r3, r3, #4
 8005d8e:	f003 0201 	and.w	r2, r3, #1
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f003 0303 	and.w	r3, r3, #3
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d017      	beq.n	8005de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	2203      	movs	r2, #3
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	43db      	mvns	r3, r3
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f003 0303 	and.w	r3, r3, #3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d123      	bne.n	8005e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	08da      	lsrs	r2, r3, #3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3208      	adds	r2, #8
 8005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	220f      	movs	r2, #15
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	08da      	lsrs	r2, r3, #3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3208      	adds	r2, #8
 8005e2e:	69b9      	ldr	r1, [r7, #24]
 8005e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	2203      	movs	r2, #3
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	43db      	mvns	r3, r3
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f003 0203 	and.w	r2, r3, #3
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 80c0 	beq.w	8005ff6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	4b66      	ldr	r3, [pc, #408]	; (8006014 <HAL_GPIO_Init+0x324>)
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7e:	4a65      	ldr	r2, [pc, #404]	; (8006014 <HAL_GPIO_Init+0x324>)
 8005e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e84:	6453      	str	r3, [r2, #68]	; 0x44
 8005e86:	4b63      	ldr	r3, [pc, #396]	; (8006014 <HAL_GPIO_Init+0x324>)
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e92:	4a61      	ldr	r2, [pc, #388]	; (8006018 <HAL_GPIO_Init+0x328>)
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	089b      	lsrs	r3, r3, #2
 8005e98:	3302      	adds	r3, #2
 8005e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	220f      	movs	r2, #15
 8005eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005eae:	43db      	mvns	r3, r3
 8005eb0:	69ba      	ldr	r2, [r7, #24]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a58      	ldr	r2, [pc, #352]	; (800601c <HAL_GPIO_Init+0x32c>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d037      	beq.n	8005f2e <HAL_GPIO_Init+0x23e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a57      	ldr	r2, [pc, #348]	; (8006020 <HAL_GPIO_Init+0x330>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d031      	beq.n	8005f2a <HAL_GPIO_Init+0x23a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a56      	ldr	r2, [pc, #344]	; (8006024 <HAL_GPIO_Init+0x334>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d02b      	beq.n	8005f26 <HAL_GPIO_Init+0x236>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a55      	ldr	r2, [pc, #340]	; (8006028 <HAL_GPIO_Init+0x338>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d025      	beq.n	8005f22 <HAL_GPIO_Init+0x232>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a54      	ldr	r2, [pc, #336]	; (800602c <HAL_GPIO_Init+0x33c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d01f      	beq.n	8005f1e <HAL_GPIO_Init+0x22e>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a53      	ldr	r2, [pc, #332]	; (8006030 <HAL_GPIO_Init+0x340>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d019      	beq.n	8005f1a <HAL_GPIO_Init+0x22a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a52      	ldr	r2, [pc, #328]	; (8006034 <HAL_GPIO_Init+0x344>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d013      	beq.n	8005f16 <HAL_GPIO_Init+0x226>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a51      	ldr	r2, [pc, #324]	; (8006038 <HAL_GPIO_Init+0x348>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d00d      	beq.n	8005f12 <HAL_GPIO_Init+0x222>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a50      	ldr	r2, [pc, #320]	; (800603c <HAL_GPIO_Init+0x34c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d007      	beq.n	8005f0e <HAL_GPIO_Init+0x21e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a4f      	ldr	r2, [pc, #316]	; (8006040 <HAL_GPIO_Init+0x350>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d101      	bne.n	8005f0a <HAL_GPIO_Init+0x21a>
 8005f06:	2309      	movs	r3, #9
 8005f08:	e012      	b.n	8005f30 <HAL_GPIO_Init+0x240>
 8005f0a:	230a      	movs	r3, #10
 8005f0c:	e010      	b.n	8005f30 <HAL_GPIO_Init+0x240>
 8005f0e:	2308      	movs	r3, #8
 8005f10:	e00e      	b.n	8005f30 <HAL_GPIO_Init+0x240>
 8005f12:	2307      	movs	r3, #7
 8005f14:	e00c      	b.n	8005f30 <HAL_GPIO_Init+0x240>
 8005f16:	2306      	movs	r3, #6
 8005f18:	e00a      	b.n	8005f30 <HAL_GPIO_Init+0x240>
 8005f1a:	2305      	movs	r3, #5
 8005f1c:	e008      	b.n	8005f30 <HAL_GPIO_Init+0x240>
 8005f1e:	2304      	movs	r3, #4
 8005f20:	e006      	b.n	8005f30 <HAL_GPIO_Init+0x240>
 8005f22:	2303      	movs	r3, #3
 8005f24:	e004      	b.n	8005f30 <HAL_GPIO_Init+0x240>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e002      	b.n	8005f30 <HAL_GPIO_Init+0x240>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e000      	b.n	8005f30 <HAL_GPIO_Init+0x240>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	69fa      	ldr	r2, [r7, #28]
 8005f32:	f002 0203 	and.w	r2, r2, #3
 8005f36:	0092      	lsls	r2, r2, #2
 8005f38:	4093      	lsls	r3, r2
 8005f3a:	69ba      	ldr	r2, [r7, #24]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f40:	4935      	ldr	r1, [pc, #212]	; (8006018 <HAL_GPIO_Init+0x328>)
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	089b      	lsrs	r3, r3, #2
 8005f46:	3302      	adds	r3, #2
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f4e:	4b3d      	ldr	r3, [pc, #244]	; (8006044 <HAL_GPIO_Init+0x354>)
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	43db      	mvns	r3, r3
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f72:	4a34      	ldr	r2, [pc, #208]	; (8006044 <HAL_GPIO_Init+0x354>)
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f78:	4b32      	ldr	r3, [pc, #200]	; (8006044 <HAL_GPIO_Init+0x354>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	43db      	mvns	r3, r3
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	4013      	ands	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f9c:	4a29      	ldr	r2, [pc, #164]	; (8006044 <HAL_GPIO_Init+0x354>)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005fa2:	4b28      	ldr	r3, [pc, #160]	; (8006044 <HAL_GPIO_Init+0x354>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	43db      	mvns	r3, r3
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fc6:	4a1f      	ldr	r2, [pc, #124]	; (8006044 <HAL_GPIO_Init+0x354>)
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fcc:	4b1d      	ldr	r3, [pc, #116]	; (8006044 <HAL_GPIO_Init+0x354>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	43db      	mvns	r3, r3
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	4013      	ands	r3, r2
 8005fda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005fe8:	69ba      	ldr	r2, [r7, #24]
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ff0:	4a14      	ldr	r2, [pc, #80]	; (8006044 <HAL_GPIO_Init+0x354>)
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	2b0f      	cmp	r3, #15
 8006000:	f67f ae84 	bls.w	8005d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006004:	bf00      	nop
 8006006:	bf00      	nop
 8006008:	3724      	adds	r7, #36	; 0x24
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	40023800 	.word	0x40023800
 8006018:	40013800 	.word	0x40013800
 800601c:	40020000 	.word	0x40020000
 8006020:	40020400 	.word	0x40020400
 8006024:	40020800 	.word	0x40020800
 8006028:	40020c00 	.word	0x40020c00
 800602c:	40021000 	.word	0x40021000
 8006030:	40021400 	.word	0x40021400
 8006034:	40021800 	.word	0x40021800
 8006038:	40021c00 	.word	0x40021c00
 800603c:	40022000 	.word	0x40022000
 8006040:	40022400 	.word	0x40022400
 8006044:	40013c00 	.word	0x40013c00

08006048 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006052:	2300      	movs	r3, #0
 8006054:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006056:	2300      	movs	r3, #0
 8006058:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800605a:	2300      	movs	r3, #0
 800605c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800605e:	2300      	movs	r3, #0
 8006060:	617b      	str	r3, [r7, #20]
 8006062:	e0d9      	b.n	8006218 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006064:	2201      	movs	r2, #1
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	4013      	ands	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	429a      	cmp	r2, r3
 800607c:	f040 80c9 	bne.w	8006212 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006080:	4a6b      	ldr	r2, [pc, #428]	; (8006230 <HAL_GPIO_DeInit+0x1e8>)
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	089b      	lsrs	r3, r3, #2
 8006086:	3302      	adds	r3, #2
 8006088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800608c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f003 0303 	and.w	r3, r3, #3
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	220f      	movs	r2, #15
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	68ba      	ldr	r2, [r7, #8]
 800609e:	4013      	ands	r3, r2
 80060a0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a63      	ldr	r2, [pc, #396]	; (8006234 <HAL_GPIO_DeInit+0x1ec>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d037      	beq.n	800611a <HAL_GPIO_DeInit+0xd2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a62      	ldr	r2, [pc, #392]	; (8006238 <HAL_GPIO_DeInit+0x1f0>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d031      	beq.n	8006116 <HAL_GPIO_DeInit+0xce>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a61      	ldr	r2, [pc, #388]	; (800623c <HAL_GPIO_DeInit+0x1f4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d02b      	beq.n	8006112 <HAL_GPIO_DeInit+0xca>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a60      	ldr	r2, [pc, #384]	; (8006240 <HAL_GPIO_DeInit+0x1f8>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d025      	beq.n	800610e <HAL_GPIO_DeInit+0xc6>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a5f      	ldr	r2, [pc, #380]	; (8006244 <HAL_GPIO_DeInit+0x1fc>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d01f      	beq.n	800610a <HAL_GPIO_DeInit+0xc2>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a5e      	ldr	r2, [pc, #376]	; (8006248 <HAL_GPIO_DeInit+0x200>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d019      	beq.n	8006106 <HAL_GPIO_DeInit+0xbe>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a5d      	ldr	r2, [pc, #372]	; (800624c <HAL_GPIO_DeInit+0x204>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d013      	beq.n	8006102 <HAL_GPIO_DeInit+0xba>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a5c      	ldr	r2, [pc, #368]	; (8006250 <HAL_GPIO_DeInit+0x208>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00d      	beq.n	80060fe <HAL_GPIO_DeInit+0xb6>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a5b      	ldr	r2, [pc, #364]	; (8006254 <HAL_GPIO_DeInit+0x20c>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d007      	beq.n	80060fa <HAL_GPIO_DeInit+0xb2>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a5a      	ldr	r2, [pc, #360]	; (8006258 <HAL_GPIO_DeInit+0x210>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d101      	bne.n	80060f6 <HAL_GPIO_DeInit+0xae>
 80060f2:	2309      	movs	r3, #9
 80060f4:	e012      	b.n	800611c <HAL_GPIO_DeInit+0xd4>
 80060f6:	230a      	movs	r3, #10
 80060f8:	e010      	b.n	800611c <HAL_GPIO_DeInit+0xd4>
 80060fa:	2308      	movs	r3, #8
 80060fc:	e00e      	b.n	800611c <HAL_GPIO_DeInit+0xd4>
 80060fe:	2307      	movs	r3, #7
 8006100:	e00c      	b.n	800611c <HAL_GPIO_DeInit+0xd4>
 8006102:	2306      	movs	r3, #6
 8006104:	e00a      	b.n	800611c <HAL_GPIO_DeInit+0xd4>
 8006106:	2305      	movs	r3, #5
 8006108:	e008      	b.n	800611c <HAL_GPIO_DeInit+0xd4>
 800610a:	2304      	movs	r3, #4
 800610c:	e006      	b.n	800611c <HAL_GPIO_DeInit+0xd4>
 800610e:	2303      	movs	r3, #3
 8006110:	e004      	b.n	800611c <HAL_GPIO_DeInit+0xd4>
 8006112:	2302      	movs	r3, #2
 8006114:	e002      	b.n	800611c <HAL_GPIO_DeInit+0xd4>
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <HAL_GPIO_DeInit+0xd4>
 800611a:	2300      	movs	r3, #0
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	f002 0203 	and.w	r2, r2, #3
 8006122:	0092      	lsls	r2, r2, #2
 8006124:	4093      	lsls	r3, r2
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	429a      	cmp	r2, r3
 800612a:	d132      	bne.n	8006192 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800612c:	4b4b      	ldr	r3, [pc, #300]	; (800625c <HAL_GPIO_DeInit+0x214>)
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	43db      	mvns	r3, r3
 8006134:	4949      	ldr	r1, [pc, #292]	; (800625c <HAL_GPIO_DeInit+0x214>)
 8006136:	4013      	ands	r3, r2
 8006138:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800613a:	4b48      	ldr	r3, [pc, #288]	; (800625c <HAL_GPIO_DeInit+0x214>)
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	43db      	mvns	r3, r3
 8006142:	4946      	ldr	r1, [pc, #280]	; (800625c <HAL_GPIO_DeInit+0x214>)
 8006144:	4013      	ands	r3, r2
 8006146:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006148:	4b44      	ldr	r3, [pc, #272]	; (800625c <HAL_GPIO_DeInit+0x214>)
 800614a:	68da      	ldr	r2, [r3, #12]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	43db      	mvns	r3, r3
 8006150:	4942      	ldr	r1, [pc, #264]	; (800625c <HAL_GPIO_DeInit+0x214>)
 8006152:	4013      	ands	r3, r2
 8006154:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006156:	4b41      	ldr	r3, [pc, #260]	; (800625c <HAL_GPIO_DeInit+0x214>)
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	43db      	mvns	r3, r3
 800615e:	493f      	ldr	r1, [pc, #252]	; (800625c <HAL_GPIO_DeInit+0x214>)
 8006160:	4013      	ands	r3, r2
 8006162:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	220f      	movs	r2, #15
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006174:	4a2e      	ldr	r2, [pc, #184]	; (8006230 <HAL_GPIO_DeInit+0x1e8>)
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	089b      	lsrs	r3, r3, #2
 800617a:	3302      	adds	r3, #2
 800617c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	43da      	mvns	r2, r3
 8006184:	482a      	ldr	r0, [pc, #168]	; (8006230 <HAL_GPIO_DeInit+0x1e8>)
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	089b      	lsrs	r3, r3, #2
 800618a:	400a      	ands	r2, r1
 800618c:	3302      	adds	r3, #2
 800618e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	2103      	movs	r1, #3
 800619c:	fa01 f303 	lsl.w	r3, r1, r3
 80061a0:	43db      	mvns	r3, r3
 80061a2:	401a      	ands	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	08da      	lsrs	r2, r3, #3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3208      	adds	r2, #8
 80061b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	220f      	movs	r2, #15
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	43db      	mvns	r3, r3
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	08d2      	lsrs	r2, r2, #3
 80061c8:	4019      	ands	r1, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3208      	adds	r2, #8
 80061ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	005b      	lsls	r3, r3, #1
 80061da:	2103      	movs	r1, #3
 80061dc:	fa01 f303 	lsl.w	r3, r1, r3
 80061e0:	43db      	mvns	r3, r3
 80061e2:	401a      	ands	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	2101      	movs	r1, #1
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	fa01 f303 	lsl.w	r3, r1, r3
 80061f4:	43db      	mvns	r3, r3
 80061f6:	401a      	ands	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	005b      	lsls	r3, r3, #1
 8006204:	2103      	movs	r1, #3
 8006206:	fa01 f303 	lsl.w	r3, r1, r3
 800620a:	43db      	mvns	r3, r3
 800620c:	401a      	ands	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	3301      	adds	r3, #1
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2b0f      	cmp	r3, #15
 800621c:	f67f af22 	bls.w	8006064 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40013800 	.word	0x40013800
 8006234:	40020000 	.word	0x40020000
 8006238:	40020400 	.word	0x40020400
 800623c:	40020800 	.word	0x40020800
 8006240:	40020c00 	.word	0x40020c00
 8006244:	40021000 	.word	0x40021000
 8006248:	40021400 	.word	0x40021400
 800624c:	40021800 	.word	0x40021800
 8006250:	40021c00 	.word	0x40021c00
 8006254:	40022000 	.word	0x40022000
 8006258:	40022400 	.word	0x40022400
 800625c:	40013c00 	.word	0x40013c00

08006260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691a      	ldr	r2, [r3, #16]
 8006270:	887b      	ldrh	r3, [r7, #2]
 8006272:	4013      	ands	r3, r2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006278:	2301      	movs	r3, #1
 800627a:	73fb      	strb	r3, [r7, #15]
 800627c:	e001      	b.n	8006282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3714      	adds	r7, #20
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	807b      	strh	r3, [r7, #2]
 800629c:	4613      	mov	r3, r2
 800629e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062a0:	787b      	ldrb	r3, [r7, #1]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062a6:	887a      	ldrh	r2, [r7, #2]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062ac:	e003      	b.n	80062b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062ae:	887b      	ldrh	r3, [r7, #2]
 80062b0:	041a      	lsls	r2, r3, #16
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	619a      	str	r2, [r3, #24]
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062c2:	b480      	push	{r7}
 80062c4:	b085      	sub	sp, #20
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062d4:	887a      	ldrh	r2, [r7, #2]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4013      	ands	r3, r2
 80062da:	041a      	lsls	r2, r3, #16
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	43d9      	mvns	r1, r3
 80062e0:	887b      	ldrh	r3, [r7, #2]
 80062e2:	400b      	ands	r3, r1
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	619a      	str	r2, [r3, #24]
}
 80062ea:	bf00      	nop
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80062f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062f8:	b08f      	sub	sp, #60	; 0x3c
 80062fa:	af0a      	add	r7, sp, #40	; 0x28
 80062fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e054      	b.n	80063b2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d106      	bne.n	8006328 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f008 fb02 	bl	800e92c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2203      	movs	r2, #3
 800632c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006338:	2b00      	cmp	r3, #0
 800633a:	d102      	bne.n	8006342 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f005 fb30 	bl	800b9ac <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	603b      	str	r3, [r7, #0]
 8006352:	687e      	ldr	r6, [r7, #4]
 8006354:	466d      	mov	r5, sp
 8006356:	f106 0410 	add.w	r4, r6, #16
 800635a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800635c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800635e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006362:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006366:	e885 0003 	stmia.w	r5, {r0, r1}
 800636a:	1d33      	adds	r3, r6, #4
 800636c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800636e:	6838      	ldr	r0, [r7, #0]
 8006370:	f005 faaa 	bl	800b8c8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2101      	movs	r1, #1
 800637a:	4618      	mov	r0, r3
 800637c:	f005 fb27 	bl	800b9ce <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	603b      	str	r3, [r7, #0]
 8006386:	687e      	ldr	r6, [r7, #4]
 8006388:	466d      	mov	r5, sp
 800638a:	f106 0410 	add.w	r4, r6, #16
 800638e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006396:	e894 0003 	ldmia.w	r4, {r0, r1}
 800639a:	e885 0003 	stmia.w	r5, {r0, r1}
 800639e:	1d33      	adds	r3, r6, #4
 80063a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063a2:	6838      	ldr	r0, [r7, #0]
 80063a4:	f005 fcb0 	bl	800bd08 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080063ba <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80063ba:	b590      	push	{r4, r7, lr}
 80063bc:	b089      	sub	sp, #36	; 0x24
 80063be:	af04      	add	r7, sp, #16
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	4608      	mov	r0, r1
 80063c4:	4611      	mov	r1, r2
 80063c6:	461a      	mov	r2, r3
 80063c8:	4603      	mov	r3, r0
 80063ca:	70fb      	strb	r3, [r7, #3]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70bb      	strb	r3, [r7, #2]
 80063d0:	4613      	mov	r3, r2
 80063d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_HCD_HC_Init+0x28>
 80063de:	2302      	movs	r3, #2
 80063e0:	e076      	b.n	80064d0 <HAL_HCD_HC_Init+0x116>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80063ea:	78fb      	ldrb	r3, [r7, #3]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	212c      	movs	r1, #44	; 0x2c
 80063f0:	fb01 f303 	mul.w	r3, r1, r3
 80063f4:	4413      	add	r3, r2
 80063f6:	333d      	adds	r3, #61	; 0x3d
 80063f8:	2200      	movs	r2, #0
 80063fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80063fc:	78fb      	ldrb	r3, [r7, #3]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	212c      	movs	r1, #44	; 0x2c
 8006402:	fb01 f303 	mul.w	r3, r1, r3
 8006406:	4413      	add	r3, r2
 8006408:	3338      	adds	r3, #56	; 0x38
 800640a:	787a      	ldrb	r2, [r7, #1]
 800640c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	212c      	movs	r1, #44	; 0x2c
 8006414:	fb01 f303 	mul.w	r3, r1, r3
 8006418:	4413      	add	r3, r2
 800641a:	3340      	adds	r3, #64	; 0x40
 800641c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800641e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	212c      	movs	r1, #44	; 0x2c
 8006426:	fb01 f303 	mul.w	r3, r1, r3
 800642a:	4413      	add	r3, r2
 800642c:	3339      	adds	r3, #57	; 0x39
 800642e:	78fa      	ldrb	r2, [r7, #3]
 8006430:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8006432:	78fb      	ldrb	r3, [r7, #3]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	212c      	movs	r1, #44	; 0x2c
 8006438:	fb01 f303 	mul.w	r3, r1, r3
 800643c:	4413      	add	r3, r2
 800643e:	333f      	adds	r3, #63	; 0x3f
 8006440:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8006444:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8006446:	78fb      	ldrb	r3, [r7, #3]
 8006448:	78ba      	ldrb	r2, [r7, #2]
 800644a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800644e:	b2d0      	uxtb	r0, r2
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	212c      	movs	r1, #44	; 0x2c
 8006454:	fb01 f303 	mul.w	r3, r1, r3
 8006458:	4413      	add	r3, r2
 800645a:	333a      	adds	r3, #58	; 0x3a
 800645c:	4602      	mov	r2, r0
 800645e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8006460:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006464:	2b00      	cmp	r3, #0
 8006466:	da09      	bge.n	800647c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8006468:	78fb      	ldrb	r3, [r7, #3]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	212c      	movs	r1, #44	; 0x2c
 800646e:	fb01 f303 	mul.w	r3, r1, r3
 8006472:	4413      	add	r3, r2
 8006474:	333b      	adds	r3, #59	; 0x3b
 8006476:	2201      	movs	r2, #1
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	e008      	b.n	800648e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	212c      	movs	r1, #44	; 0x2c
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	4413      	add	r3, r2
 8006488:	333b      	adds	r3, #59	; 0x3b
 800648a:	2200      	movs	r2, #0
 800648c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	212c      	movs	r1, #44	; 0x2c
 8006494:	fb01 f303 	mul.w	r3, r1, r3
 8006498:	4413      	add	r3, r2
 800649a:	333c      	adds	r3, #60	; 0x3c
 800649c:	f897 2020 	ldrb.w	r2, [r7, #32]
 80064a0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	787c      	ldrb	r4, [r7, #1]
 80064a8:	78ba      	ldrb	r2, [r7, #2]
 80064aa:	78f9      	ldrb	r1, [r7, #3]
 80064ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80064ae:	9302      	str	r3, [sp, #8]
 80064b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	4623      	mov	r3, r4
 80064be:	f005 fda9 	bl	800c014 <USB_HC_Init>
 80064c2:	4603      	mov	r3, r0
 80064c4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd90      	pop	{r4, r7, pc}

080064d8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80064e4:	2300      	movs	r3, #0
 80064e6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d101      	bne.n	80064f6 <HAL_HCD_HC_Halt+0x1e>
 80064f2:	2302      	movs	r3, #2
 80064f4:	e00f      	b.n	8006516 <HAL_HCD_HC_Halt+0x3e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2201      	movs	r2, #1
 80064fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	78fa      	ldrb	r2, [r7, #3]
 8006504:	4611      	mov	r1, r2
 8006506:	4618      	mov	r0, r3
 8006508:	f005 fff9 	bl	800c4fe <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8006514:	7bfb      	ldrb	r3, [r7, #15]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	4608      	mov	r0, r1
 800652a:	4611      	mov	r1, r2
 800652c:	461a      	mov	r2, r3
 800652e:	4603      	mov	r3, r0
 8006530:	70fb      	strb	r3, [r7, #3]
 8006532:	460b      	mov	r3, r1
 8006534:	70bb      	strb	r3, [r7, #2]
 8006536:	4613      	mov	r3, r2
 8006538:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	212c      	movs	r1, #44	; 0x2c
 8006540:	fb01 f303 	mul.w	r3, r1, r3
 8006544:	4413      	add	r3, r2
 8006546:	333b      	adds	r3, #59	; 0x3b
 8006548:	78ba      	ldrb	r2, [r7, #2]
 800654a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	212c      	movs	r1, #44	; 0x2c
 8006552:	fb01 f303 	mul.w	r3, r1, r3
 8006556:	4413      	add	r3, r2
 8006558:	333f      	adds	r3, #63	; 0x3f
 800655a:	787a      	ldrb	r2, [r7, #1]
 800655c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800655e:	7c3b      	ldrb	r3, [r7, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d112      	bne.n	800658a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	212c      	movs	r1, #44	; 0x2c
 800656a:	fb01 f303 	mul.w	r3, r1, r3
 800656e:	4413      	add	r3, r2
 8006570:	3342      	adds	r3, #66	; 0x42
 8006572:	2203      	movs	r2, #3
 8006574:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8006576:	78fb      	ldrb	r3, [r7, #3]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	212c      	movs	r1, #44	; 0x2c
 800657c:	fb01 f303 	mul.w	r3, r1, r3
 8006580:	4413      	add	r3, r2
 8006582:	333d      	adds	r3, #61	; 0x3d
 8006584:	7f3a      	ldrb	r2, [r7, #28]
 8006586:	701a      	strb	r2, [r3, #0]
 8006588:	e008      	b.n	800659c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800658a:	78fb      	ldrb	r3, [r7, #3]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	212c      	movs	r1, #44	; 0x2c
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	4413      	add	r3, r2
 8006596:	3342      	adds	r3, #66	; 0x42
 8006598:	2202      	movs	r2, #2
 800659a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800659c:	787b      	ldrb	r3, [r7, #1]
 800659e:	2b03      	cmp	r3, #3
 80065a0:	f200 80c6 	bhi.w	8006730 <HAL_HCD_HC_SubmitRequest+0x210>
 80065a4:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <HAL_HCD_HC_SubmitRequest+0x8c>)
 80065a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065aa:	bf00      	nop
 80065ac:	080065bd 	.word	0x080065bd
 80065b0:	0800671d 	.word	0x0800671d
 80065b4:	08006621 	.word	0x08006621
 80065b8:	0800669f 	.word	0x0800669f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80065bc:	7c3b      	ldrb	r3, [r7, #16]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	f040 80b8 	bne.w	8006734 <HAL_HCD_HC_SubmitRequest+0x214>
 80065c4:	78bb      	ldrb	r3, [r7, #2]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	f040 80b4 	bne.w	8006734 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80065cc:	8b3b      	ldrh	r3, [r7, #24]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d108      	bne.n	80065e4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80065d2:	78fb      	ldrb	r3, [r7, #3]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	212c      	movs	r1, #44	; 0x2c
 80065d8:	fb01 f303 	mul.w	r3, r1, r3
 80065dc:	4413      	add	r3, r2
 80065de:	3355      	adds	r3, #85	; 0x55
 80065e0:	2201      	movs	r2, #1
 80065e2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	212c      	movs	r1, #44	; 0x2c
 80065ea:	fb01 f303 	mul.w	r3, r1, r3
 80065ee:	4413      	add	r3, r2
 80065f0:	3355      	adds	r3, #85	; 0x55
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d109      	bne.n	800660c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	212c      	movs	r1, #44	; 0x2c
 80065fe:	fb01 f303 	mul.w	r3, r1, r3
 8006602:	4413      	add	r3, r2
 8006604:	3342      	adds	r3, #66	; 0x42
 8006606:	2200      	movs	r2, #0
 8006608:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800660a:	e093      	b.n	8006734 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	212c      	movs	r1, #44	; 0x2c
 8006612:	fb01 f303 	mul.w	r3, r1, r3
 8006616:	4413      	add	r3, r2
 8006618:	3342      	adds	r3, #66	; 0x42
 800661a:	2202      	movs	r2, #2
 800661c:	701a      	strb	r2, [r3, #0]
      break;
 800661e:	e089      	b.n	8006734 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8006620:	78bb      	ldrb	r3, [r7, #2]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d11d      	bne.n	8006662 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006626:	78fb      	ldrb	r3, [r7, #3]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	212c      	movs	r1, #44	; 0x2c
 800662c:	fb01 f303 	mul.w	r3, r1, r3
 8006630:	4413      	add	r3, r2
 8006632:	3355      	adds	r3, #85	; 0x55
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d109      	bne.n	800664e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800663a:	78fb      	ldrb	r3, [r7, #3]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	212c      	movs	r1, #44	; 0x2c
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	4413      	add	r3, r2
 8006646:	3342      	adds	r3, #66	; 0x42
 8006648:	2200      	movs	r2, #0
 800664a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800664c:	e073      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	212c      	movs	r1, #44	; 0x2c
 8006654:	fb01 f303 	mul.w	r3, r1, r3
 8006658:	4413      	add	r3, r2
 800665a:	3342      	adds	r3, #66	; 0x42
 800665c:	2202      	movs	r2, #2
 800665e:	701a      	strb	r2, [r3, #0]
      break;
 8006660:	e069      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006662:	78fb      	ldrb	r3, [r7, #3]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	212c      	movs	r1, #44	; 0x2c
 8006668:	fb01 f303 	mul.w	r3, r1, r3
 800666c:	4413      	add	r3, r2
 800666e:	3354      	adds	r3, #84	; 0x54
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d109      	bne.n	800668a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	212c      	movs	r1, #44	; 0x2c
 800667c:	fb01 f303 	mul.w	r3, r1, r3
 8006680:	4413      	add	r3, r2
 8006682:	3342      	adds	r3, #66	; 0x42
 8006684:	2200      	movs	r2, #0
 8006686:	701a      	strb	r2, [r3, #0]
      break;
 8006688:	e055      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800668a:	78fb      	ldrb	r3, [r7, #3]
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	212c      	movs	r1, #44	; 0x2c
 8006690:	fb01 f303 	mul.w	r3, r1, r3
 8006694:	4413      	add	r3, r2
 8006696:	3342      	adds	r3, #66	; 0x42
 8006698:	2202      	movs	r2, #2
 800669a:	701a      	strb	r2, [r3, #0]
      break;
 800669c:	e04b      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800669e:	78bb      	ldrb	r3, [r7, #2]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d11d      	bne.n	80066e0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	212c      	movs	r1, #44	; 0x2c
 80066aa:	fb01 f303 	mul.w	r3, r1, r3
 80066ae:	4413      	add	r3, r2
 80066b0:	3355      	adds	r3, #85	; 0x55
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d109      	bne.n	80066cc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80066b8:	78fb      	ldrb	r3, [r7, #3]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	212c      	movs	r1, #44	; 0x2c
 80066be:	fb01 f303 	mul.w	r3, r1, r3
 80066c2:	4413      	add	r3, r2
 80066c4:	3342      	adds	r3, #66	; 0x42
 80066c6:	2200      	movs	r2, #0
 80066c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80066ca:	e034      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	212c      	movs	r1, #44	; 0x2c
 80066d2:	fb01 f303 	mul.w	r3, r1, r3
 80066d6:	4413      	add	r3, r2
 80066d8:	3342      	adds	r3, #66	; 0x42
 80066da:	2202      	movs	r2, #2
 80066dc:	701a      	strb	r2, [r3, #0]
      break;
 80066de:	e02a      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	212c      	movs	r1, #44	; 0x2c
 80066e6:	fb01 f303 	mul.w	r3, r1, r3
 80066ea:	4413      	add	r3, r2
 80066ec:	3354      	adds	r3, #84	; 0x54
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d109      	bne.n	8006708 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80066f4:	78fb      	ldrb	r3, [r7, #3]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	212c      	movs	r1, #44	; 0x2c
 80066fa:	fb01 f303 	mul.w	r3, r1, r3
 80066fe:	4413      	add	r3, r2
 8006700:	3342      	adds	r3, #66	; 0x42
 8006702:	2200      	movs	r2, #0
 8006704:	701a      	strb	r2, [r3, #0]
      break;
 8006706:	e016      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006708:	78fb      	ldrb	r3, [r7, #3]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	212c      	movs	r1, #44	; 0x2c
 800670e:	fb01 f303 	mul.w	r3, r1, r3
 8006712:	4413      	add	r3, r2
 8006714:	3342      	adds	r3, #66	; 0x42
 8006716:	2202      	movs	r2, #2
 8006718:	701a      	strb	r2, [r3, #0]
      break;
 800671a:	e00c      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	212c      	movs	r1, #44	; 0x2c
 8006722:	fb01 f303 	mul.w	r3, r1, r3
 8006726:	4413      	add	r3, r2
 8006728:	3342      	adds	r3, #66	; 0x42
 800672a:	2200      	movs	r2, #0
 800672c:	701a      	strb	r2, [r3, #0]
      break;
 800672e:	e002      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8006730:	bf00      	nop
 8006732:	e000      	b.n	8006736 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8006734:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8006736:	78fb      	ldrb	r3, [r7, #3]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	212c      	movs	r1, #44	; 0x2c
 800673c:	fb01 f303 	mul.w	r3, r1, r3
 8006740:	4413      	add	r3, r2
 8006742:	3344      	adds	r3, #68	; 0x44
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006748:	78fb      	ldrb	r3, [r7, #3]
 800674a:	8b3a      	ldrh	r2, [r7, #24]
 800674c:	6879      	ldr	r1, [r7, #4]
 800674e:	202c      	movs	r0, #44	; 0x2c
 8006750:	fb00 f303 	mul.w	r3, r0, r3
 8006754:	440b      	add	r3, r1
 8006756:	334c      	adds	r3, #76	; 0x4c
 8006758:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	212c      	movs	r1, #44	; 0x2c
 8006760:	fb01 f303 	mul.w	r3, r1, r3
 8006764:	4413      	add	r3, r2
 8006766:	3360      	adds	r3, #96	; 0x60
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	212c      	movs	r1, #44	; 0x2c
 8006772:	fb01 f303 	mul.w	r3, r1, r3
 8006776:	4413      	add	r3, r2
 8006778:	3350      	adds	r3, #80	; 0x50
 800677a:	2200      	movs	r2, #0
 800677c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800677e:	78fb      	ldrb	r3, [r7, #3]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	212c      	movs	r1, #44	; 0x2c
 8006784:	fb01 f303 	mul.w	r3, r1, r3
 8006788:	4413      	add	r3, r2
 800678a:	3339      	adds	r3, #57	; 0x39
 800678c:	78fa      	ldrb	r2, [r7, #3]
 800678e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	212c      	movs	r1, #44	; 0x2c
 8006796:	fb01 f303 	mul.w	r3, r1, r3
 800679a:	4413      	add	r3, r2
 800679c:	3361      	adds	r3, #97	; 0x61
 800679e:	2200      	movs	r2, #0
 80067a0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6818      	ldr	r0, [r3, #0]
 80067a6:	78fb      	ldrb	r3, [r7, #3]
 80067a8:	222c      	movs	r2, #44	; 0x2c
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
 80067ae:	3338      	adds	r3, #56	; 0x38
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	18d1      	adds	r1, r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	f005 fd4c 	bl	800c258 <USB_HC_StartXfer>
 80067c0:	4603      	mov	r3, r0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop

080067cc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f005 fa4d 	bl	800bc82 <USB_GetMode>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	f040 80f6 	bne.w	80069dc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f005 fa31 	bl	800bc5c <USB_ReadInterrupts>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 80ec 	beq.w	80069da <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f005 fa28 	bl	800bc5c <USB_ReadInterrupts>
 800680c:	4603      	mov	r3, r0
 800680e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006812:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006816:	d104      	bne.n	8006822 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006820:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f005 fa18 	bl	800bc5c <USB_ReadInterrupts>
 800682c:	4603      	mov	r3, r0
 800682e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006836:	d104      	bne.n	8006842 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006840:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f005 fa08 	bl	800bc5c <USB_ReadInterrupts>
 800684c:	4603      	mov	r3, r0
 800684e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006852:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006856:	d104      	bne.n	8006862 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006860:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f005 f9f8 	bl	800bc5c <USB_ReadInterrupts>
 800686c:	4603      	mov	r3, r0
 800686e:	f003 0302 	and.w	r3, r3, #2
 8006872:	2b02      	cmp	r3, #2
 8006874:	d103      	bne.n	800687e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2202      	movs	r2, #2
 800687c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f005 f9ea 	bl	800bc5c <USB_ReadInterrupts>
 8006888:	4603      	mov	r3, r0
 800688a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800688e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006892:	d11c      	bne.n	80068ce <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800689c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10f      	bne.n	80068ce <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80068ae:	2110      	movs	r1, #16
 80068b0:	6938      	ldr	r0, [r7, #16]
 80068b2:	f005 f8d9 	bl	800ba68 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80068b6:	6938      	ldr	r0, [r7, #16]
 80068b8:	f005 f90a 	bl	800bad0 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2101      	movs	r1, #1
 80068c2:	4618      	mov	r0, r3
 80068c4:	f005 fae0 	bl	800be88 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f008 f8a9 	bl	800ea20 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f005 f9c2 	bl	800bc5c <USB_ReadInterrupts>
 80068d8:	4603      	mov	r3, r0
 80068da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068e2:	d102      	bne.n	80068ea <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 f89e 	bl	8007a26 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f005 f9b4 	bl	800bc5c <USB_ReadInterrupts>
 80068f4:	4603      	mov	r3, r0
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b08      	cmp	r3, #8
 80068fc:	d106      	bne.n	800690c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f008 f872 	bl	800e9e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2208      	movs	r2, #8
 800690a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f005 f9a3 	bl	800bc5c <USB_ReadInterrupts>
 8006916:	4603      	mov	r3, r0
 8006918:	f003 0310 	and.w	r3, r3, #16
 800691c:	2b10      	cmp	r3, #16
 800691e:	d101      	bne.n	8006924 <HAL_HCD_IRQHandler+0x158>
 8006920:	2301      	movs	r3, #1
 8006922:	e000      	b.n	8006926 <HAL_HCD_IRQHandler+0x15a>
 8006924:	2300      	movs	r3, #0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d012      	beq.n	8006950 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	699a      	ldr	r2, [r3, #24]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0210 	bic.w	r2, r2, #16
 8006938:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 ffa1 	bl	8007882 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0210 	orr.w	r2, r2, #16
 800694e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4618      	mov	r0, r3
 8006956:	f005 f981 	bl	800bc5c <USB_ReadInterrupts>
 800695a:	4603      	mov	r3, r0
 800695c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006964:	d13a      	bne.n	80069dc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4618      	mov	r0, r3
 800696c:	f005 fdb6 	bl	800c4dc <USB_HC_ReadInterrupt>
 8006970:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006972:	2300      	movs	r3, #0
 8006974:	617b      	str	r3, [r7, #20]
 8006976:	e025      	b.n	80069c4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	fa22 f303 	lsr.w	r3, r2, r3
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	d018      	beq.n	80069be <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800699e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069a2:	d106      	bne.n	80069b2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	4619      	mov	r1, r3
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f8ab 	bl	8006b06 <HCD_HC_IN_IRQHandler>
 80069b0:	e005      	b.n	80069be <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	4619      	mov	r1, r3
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fbf9 	bl	80071b0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	3301      	adds	r3, #1
 80069c2:	617b      	str	r3, [r7, #20]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d3d4      	bcc.n	8006978 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80069d6:	615a      	str	r2, [r3, #20]
 80069d8:	e000      	b.n	80069dc <HAL_HCD_IRQHandler+0x210>
      return;
 80069da:	bf00      	nop
    }
  }
}
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_HCD_Start+0x16>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e013      	b.n	8006a20 <HAL_HCD_Start+0x3e>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2101      	movs	r1, #1
 8006a06:	4618      	mov	r0, r3
 8006a08:	f005 faa2 	bl	800bf50 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f004 ffba 	bl	800b98a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d101      	bne.n	8006a3e <HAL_HCD_Stop+0x16>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e00d      	b.n	8006a5a <HAL_HCD_Stop+0x32>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f005 fe90 	bl	800c770 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b082      	sub	sp, #8
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f005 fa44 	bl	800befc <USB_ResetPort>
 8006a74:	4603      	mov	r3, r0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	460b      	mov	r3, r1
 8006a88:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006a8a:	78fb      	ldrb	r3, [r7, #3]
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	212c      	movs	r1, #44	; 0x2c
 8006a90:	fb01 f303 	mul.w	r3, r1, r3
 8006a94:	4413      	add	r3, r2
 8006a96:	3360      	adds	r3, #96	; 0x60
 8006a98:	781b      	ldrb	r3, [r3, #0]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b083      	sub	sp, #12
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
 8006aae:	460b      	mov	r3, r1
 8006ab0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8006ab2:	78fb      	ldrb	r3, [r7, #3]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	212c      	movs	r1, #44	; 0x2c
 8006ab8:	fb01 f303 	mul.w	r3, r1, r3
 8006abc:	4413      	add	r3, r2
 8006abe:	3350      	adds	r3, #80	; 0x50
 8006ac0:	681b      	ldr	r3, [r3, #0]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr

08006ace <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b082      	sub	sp, #8
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f005 fa88 	bl	800bff0 <USB_GetCurrentFrame>
 8006ae0:	4603      	mov	r3, r0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f005 fa63 	bl	800bfc2 <USB_GetHostSpeed>
 8006afc:	4603      	mov	r3, r0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b086      	sub	sp, #24
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8006b1c:	78fb      	ldrb	r3, [r7, #3]
 8006b1e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f003 0304 	and.w	r3, r3, #4
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d11a      	bne.n	8006b6c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b42:	461a      	mov	r2, r3
 8006b44:	2304      	movs	r3, #4
 8006b46:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	212c      	movs	r1, #44	; 0x2c
 8006b4e:	fb01 f303 	mul.w	r3, r1, r3
 8006b52:	4413      	add	r3, r2
 8006b54:	3361      	adds	r3, #97	; 0x61
 8006b56:	2206      	movs	r2, #6
 8006b58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	b2d2      	uxtb	r2, r2
 8006b62:	4611      	mov	r1, r2
 8006b64:	4618      	mov	r0, r3
 8006b66:	f005 fcca 	bl	800c4fe <USB_HC_Halt>
 8006b6a:	e0af      	b.n	8006ccc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b82:	d11b      	bne.n	8006bbc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b90:	461a      	mov	r2, r3
 8006b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	212c      	movs	r1, #44	; 0x2c
 8006b9e:	fb01 f303 	mul.w	r3, r1, r3
 8006ba2:	4413      	add	r3, r2
 8006ba4:	3361      	adds	r3, #97	; 0x61
 8006ba6:	2207      	movs	r2, #7
 8006ba8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f005 fca2 	bl	800c4fe <USB_HC_Halt>
 8006bba:	e087      	b.n	8006ccc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 0320 	and.w	r3, r3, #32
 8006bce:	2b20      	cmp	r3, #32
 8006bd0:	d109      	bne.n	8006be6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bde:	461a      	mov	r2, r3
 8006be0:	2320      	movs	r3, #32
 8006be2:	6093      	str	r3, [r2, #8]
 8006be4:	e072      	b.n	8006ccc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f003 0308 	and.w	r3, r3, #8
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d11a      	bne.n	8006c32 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c08:	461a      	mov	r2, r3
 8006c0a:	2308      	movs	r3, #8
 8006c0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	212c      	movs	r1, #44	; 0x2c
 8006c14:	fb01 f303 	mul.w	r3, r1, r3
 8006c18:	4413      	add	r3, r2
 8006c1a:	3361      	adds	r3, #97	; 0x61
 8006c1c:	2205      	movs	r2, #5
 8006c1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	4611      	mov	r1, r2
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f005 fc67 	bl	800c4fe <USB_HC_Halt>
 8006c30:	e04c      	b.n	8006ccc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	015a      	lsls	r2, r3, #5
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	4413      	add	r3, r2
 8006c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c48:	d11b      	bne.n	8006c82 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c56:	461a      	mov	r2, r3
 8006c58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	212c      	movs	r1, #44	; 0x2c
 8006c64:	fb01 f303 	mul.w	r3, r1, r3
 8006c68:	4413      	add	r3, r2
 8006c6a:	3361      	adds	r3, #97	; 0x61
 8006c6c:	2208      	movs	r2, #8
 8006c6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	4611      	mov	r1, r2
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f005 fc3f 	bl	800c4fe <USB_HC_Halt>
 8006c80:	e024      	b.n	8006ccc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c94:	2b80      	cmp	r3, #128	; 0x80
 8006c96:	d119      	bne.n	8006ccc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	2380      	movs	r3, #128	; 0x80
 8006ca8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	212c      	movs	r1, #44	; 0x2c
 8006cb0:	fb01 f303 	mul.w	r3, r1, r3
 8006cb4:	4413      	add	r3, r2
 8006cb6:	3361      	adds	r3, #97	; 0x61
 8006cb8:	2206      	movs	r2, #6
 8006cba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	b2d2      	uxtb	r2, r2
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f005 fc19 	bl	800c4fe <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ce2:	d112      	bne.n	8006d0a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68fa      	ldr	r2, [r7, #12]
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	4611      	mov	r1, r2
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f005 fc05 	bl	800c4fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d00:	461a      	mov	r2, r3
 8006d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d06:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8006d08:	e24e      	b.n	80071a8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	f040 80df 	bne.w	8006ee0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d019      	beq.n	8006d5e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	212c      	movs	r1, #44	; 0x2c
 8006d30:	fb01 f303 	mul.w	r3, r1, r3
 8006d34:	4413      	add	r3, r2
 8006d36:	3348      	adds	r3, #72	; 0x48
 8006d38:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	0159      	lsls	r1, r3, #5
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	440b      	add	r3, r1
 8006d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8006d4c:	1ad2      	subs	r2, r2, r3
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	202c      	movs	r0, #44	; 0x2c
 8006d54:	fb00 f303 	mul.w	r3, r0, r3
 8006d58:	440b      	add	r3, r1
 8006d5a:	3350      	adds	r3, #80	; 0x50
 8006d5c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	212c      	movs	r1, #44	; 0x2c
 8006d64:	fb01 f303 	mul.w	r3, r1, r3
 8006d68:	4413      	add	r3, r2
 8006d6a:	3361      	adds	r3, #97	; 0x61
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	212c      	movs	r1, #44	; 0x2c
 8006d76:	fb01 f303 	mul.w	r3, r1, r3
 8006d7a:	4413      	add	r3, r2
 8006d7c:	335c      	adds	r3, #92	; 0x5c
 8006d7e:	2200      	movs	r2, #0
 8006d80:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8e:	461a      	mov	r2, r3
 8006d90:	2301      	movs	r3, #1
 8006d92:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	212c      	movs	r1, #44	; 0x2c
 8006d9a:	fb01 f303 	mul.w	r3, r1, r3
 8006d9e:	4413      	add	r3, r2
 8006da0:	333f      	adds	r3, #63	; 0x3f
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d009      	beq.n	8006dbc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	212c      	movs	r1, #44	; 0x2c
 8006dae:	fb01 f303 	mul.w	r3, r1, r3
 8006db2:	4413      	add	r3, r2
 8006db4:	333f      	adds	r3, #63	; 0x3f
 8006db6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8006db8:	2b02      	cmp	r3, #2
 8006dba:	d111      	bne.n	8006de0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	b2d2      	uxtb	r2, r2
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f005 fb99 	bl	800c4fe <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd8:	461a      	mov	r2, r3
 8006dda:	2310      	movs	r3, #16
 8006ddc:	6093      	str	r3, [r2, #8]
 8006dde:	e03a      	b.n	8006e56 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	212c      	movs	r1, #44	; 0x2c
 8006de6:	fb01 f303 	mul.w	r3, r1, r3
 8006dea:	4413      	add	r3, r2
 8006dec:	333f      	adds	r3, #63	; 0x3f
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d009      	beq.n	8006e08 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	212c      	movs	r1, #44	; 0x2c
 8006dfa:	fb01 f303 	mul.w	r3, r1, r3
 8006dfe:	4413      	add	r3, r2
 8006e00:	333f      	adds	r3, #63	; 0x3f
 8006e02:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d126      	bne.n	8006e56 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	0151      	lsls	r1, r2, #5
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e26:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	212c      	movs	r1, #44	; 0x2c
 8006e2e:	fb01 f303 	mul.w	r3, r1, r3
 8006e32:	4413      	add	r3, r2
 8006e34:	3360      	adds	r3, #96	; 0x60
 8006e36:	2201      	movs	r2, #1
 8006e38:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	b2d9      	uxtb	r1, r3
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	202c      	movs	r0, #44	; 0x2c
 8006e44:	fb00 f303 	mul.w	r3, r0, r3
 8006e48:	4413      	add	r3, r2
 8006e4a:	3360      	adds	r3, #96	; 0x60
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f007 fdf3 	bl	800ea3c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d12b      	bne.n	8006eb6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	212c      	movs	r1, #44	; 0x2c
 8006e64:	fb01 f303 	mul.w	r3, r1, r3
 8006e68:	4413      	add	r3, r2
 8006e6a:	3348      	adds	r3, #72	; 0x48
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6879      	ldr	r1, [r7, #4]
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	202c      	movs	r0, #44	; 0x2c
 8006e74:	fb00 f202 	mul.w	r2, r0, r2
 8006e78:	440a      	add	r2, r1
 8006e7a:	3240      	adds	r2, #64	; 0x40
 8006e7c:	8812      	ldrh	r2, [r2, #0]
 8006e7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f000 818e 	beq.w	80071a8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	212c      	movs	r1, #44	; 0x2c
 8006e92:	fb01 f303 	mul.w	r3, r1, r3
 8006e96:	4413      	add	r3, r2
 8006e98:	3354      	adds	r3, #84	; 0x54
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	f083 0301 	eor.w	r3, r3, #1
 8006ea0:	b2d8      	uxtb	r0, r3
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	212c      	movs	r1, #44	; 0x2c
 8006ea8:	fb01 f303 	mul.w	r3, r1, r3
 8006eac:	4413      	add	r3, r2
 8006eae:	3354      	adds	r3, #84	; 0x54
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	701a      	strb	r2, [r3, #0]
}
 8006eb4:	e178      	b.n	80071a8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	212c      	movs	r1, #44	; 0x2c
 8006ebc:	fb01 f303 	mul.w	r3, r1, r3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	3354      	adds	r3, #84	; 0x54
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	f083 0301 	eor.w	r3, r3, #1
 8006eca:	b2d8      	uxtb	r0, r3
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	212c      	movs	r1, #44	; 0x2c
 8006ed2:	fb01 f303 	mul.w	r3, r1, r3
 8006ed6:	4413      	add	r3, r2
 8006ed8:	3354      	adds	r3, #84	; 0x54
 8006eda:	4602      	mov	r2, r0
 8006edc:	701a      	strb	r2, [r3, #0]
}
 8006ede:	e163      	b.n	80071a8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	015a      	lsls	r2, r3, #5
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	f040 80f6 	bne.w	80070e4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	212c      	movs	r1, #44	; 0x2c
 8006efe:	fb01 f303 	mul.w	r3, r1, r3
 8006f02:	4413      	add	r3, r2
 8006f04:	3361      	adds	r3, #97	; 0x61
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d109      	bne.n	8006f20 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	212c      	movs	r1, #44	; 0x2c
 8006f12:	fb01 f303 	mul.w	r3, r1, r3
 8006f16:	4413      	add	r3, r2
 8006f18:	3360      	adds	r3, #96	; 0x60
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	e0c9      	b.n	80070b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	212c      	movs	r1, #44	; 0x2c
 8006f26:	fb01 f303 	mul.w	r3, r1, r3
 8006f2a:	4413      	add	r3, r2
 8006f2c:	3361      	adds	r3, #97	; 0x61
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b05      	cmp	r3, #5
 8006f32:	d109      	bne.n	8006f48 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	212c      	movs	r1, #44	; 0x2c
 8006f3a:	fb01 f303 	mul.w	r3, r1, r3
 8006f3e:	4413      	add	r3, r2
 8006f40:	3360      	adds	r3, #96	; 0x60
 8006f42:	2205      	movs	r2, #5
 8006f44:	701a      	strb	r2, [r3, #0]
 8006f46:	e0b5      	b.n	80070b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	212c      	movs	r1, #44	; 0x2c
 8006f4e:	fb01 f303 	mul.w	r3, r1, r3
 8006f52:	4413      	add	r3, r2
 8006f54:	3361      	adds	r3, #97	; 0x61
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b06      	cmp	r3, #6
 8006f5a:	d009      	beq.n	8006f70 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	212c      	movs	r1, #44	; 0x2c
 8006f62:	fb01 f303 	mul.w	r3, r1, r3
 8006f66:	4413      	add	r3, r2
 8006f68:	3361      	adds	r3, #97	; 0x61
 8006f6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006f6c:	2b08      	cmp	r3, #8
 8006f6e:	d150      	bne.n	8007012 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	212c      	movs	r1, #44	; 0x2c
 8006f76:	fb01 f303 	mul.w	r3, r1, r3
 8006f7a:	4413      	add	r3, r2
 8006f7c:	335c      	adds	r3, #92	; 0x5c
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	202c      	movs	r0, #44	; 0x2c
 8006f88:	fb00 f303 	mul.w	r3, r0, r3
 8006f8c:	440b      	add	r3, r1
 8006f8e:	335c      	adds	r3, #92	; 0x5c
 8006f90:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	212c      	movs	r1, #44	; 0x2c
 8006f98:	fb01 f303 	mul.w	r3, r1, r3
 8006f9c:	4413      	add	r3, r2
 8006f9e:	335c      	adds	r3, #92	; 0x5c
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d912      	bls.n	8006fcc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	212c      	movs	r1, #44	; 0x2c
 8006fac:	fb01 f303 	mul.w	r3, r1, r3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	335c      	adds	r3, #92	; 0x5c
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	212c      	movs	r1, #44	; 0x2c
 8006fbe:	fb01 f303 	mul.w	r3, r1, r3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	3360      	adds	r3, #96	; 0x60
 8006fc6:	2204      	movs	r2, #4
 8006fc8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006fca:	e073      	b.n	80070b4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	212c      	movs	r1, #44	; 0x2c
 8006fd2:	fb01 f303 	mul.w	r3, r1, r3
 8006fd6:	4413      	add	r3, r2
 8006fd8:	3360      	adds	r3, #96	; 0x60
 8006fda:	2202      	movs	r2, #2
 8006fdc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	015a      	lsls	r2, r3, #5
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ff4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ffc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	4413      	add	r3, r2
 8007006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800700a:	461a      	mov	r2, r3
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007010:	e050      	b.n	80070b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	212c      	movs	r1, #44	; 0x2c
 8007018:	fb01 f303 	mul.w	r3, r1, r3
 800701c:	4413      	add	r3, r2
 800701e:	3361      	adds	r3, #97	; 0x61
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	2b03      	cmp	r3, #3
 8007024:	d122      	bne.n	800706c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	212c      	movs	r1, #44	; 0x2c
 800702c:	fb01 f303 	mul.w	r3, r1, r3
 8007030:	4413      	add	r3, r2
 8007032:	3360      	adds	r3, #96	; 0x60
 8007034:	2202      	movs	r2, #2
 8007036:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	4413      	add	r3, r2
 8007040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800704e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007056:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4413      	add	r3, r2
 8007060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007064:	461a      	mov	r2, r3
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	e023      	b.n	80070b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	212c      	movs	r1, #44	; 0x2c
 8007072:	fb01 f303 	mul.w	r3, r1, r3
 8007076:	4413      	add	r3, r2
 8007078:	3361      	adds	r3, #97	; 0x61
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2b07      	cmp	r3, #7
 800707e:	d119      	bne.n	80070b4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	212c      	movs	r1, #44	; 0x2c
 8007086:	fb01 f303 	mul.w	r3, r1, r3
 800708a:	4413      	add	r3, r2
 800708c:	335c      	adds	r3, #92	; 0x5c
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	202c      	movs	r0, #44	; 0x2c
 8007098:	fb00 f303 	mul.w	r3, r0, r3
 800709c:	440b      	add	r3, r1
 800709e:	335c      	adds	r3, #92	; 0x5c
 80070a0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	212c      	movs	r1, #44	; 0x2c
 80070a8:	fb01 f303 	mul.w	r3, r1, r3
 80070ac:	4413      	add	r3, r2
 80070ae:	3360      	adds	r3, #96	; 0x60
 80070b0:	2204      	movs	r2, #4
 80070b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070c0:	461a      	mov	r2, r3
 80070c2:	2302      	movs	r3, #2
 80070c4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	b2d9      	uxtb	r1, r3
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	202c      	movs	r0, #44	; 0x2c
 80070d0:	fb00 f303 	mul.w	r3, r0, r3
 80070d4:	4413      	add	r3, r2
 80070d6:	3360      	adds	r3, #96	; 0x60
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f007 fcad 	bl	800ea3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80070e2:	e061      	b.n	80071a8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 0310 	and.w	r3, r3, #16
 80070f6:	2b10      	cmp	r3, #16
 80070f8:	d156      	bne.n	80071a8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	212c      	movs	r1, #44	; 0x2c
 8007100:	fb01 f303 	mul.w	r3, r1, r3
 8007104:	4413      	add	r3, r2
 8007106:	333f      	adds	r3, #63	; 0x3f
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b03      	cmp	r3, #3
 800710c:	d111      	bne.n	8007132 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	212c      	movs	r1, #44	; 0x2c
 8007114:	fb01 f303 	mul.w	r3, r1, r3
 8007118:	4413      	add	r3, r2
 800711a:	335c      	adds	r3, #92	; 0x5c
 800711c:	2200      	movs	r2, #0
 800711e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	b2d2      	uxtb	r2, r2
 8007128:	4611      	mov	r1, r2
 800712a:	4618      	mov	r0, r3
 800712c:	f005 f9e7 	bl	800c4fe <USB_HC_Halt>
 8007130:	e031      	b.n	8007196 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	212c      	movs	r1, #44	; 0x2c
 8007138:	fb01 f303 	mul.w	r3, r1, r3
 800713c:	4413      	add	r3, r2
 800713e:	333f      	adds	r3, #63	; 0x3f
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d009      	beq.n	800715a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	212c      	movs	r1, #44	; 0x2c
 800714c:	fb01 f303 	mul.w	r3, r1, r3
 8007150:	4413      	add	r3, r2
 8007152:	333f      	adds	r3, #63	; 0x3f
 8007154:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8007156:	2b02      	cmp	r3, #2
 8007158:	d11d      	bne.n	8007196 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	212c      	movs	r1, #44	; 0x2c
 8007160:	fb01 f303 	mul.w	r3, r1, r3
 8007164:	4413      	add	r3, r2
 8007166:	335c      	adds	r3, #92	; 0x5c
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d110      	bne.n	8007196 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	212c      	movs	r1, #44	; 0x2c
 800717a:	fb01 f303 	mul.w	r3, r1, r3
 800717e:	4413      	add	r3, r2
 8007180:	3361      	adds	r3, #97	; 0x61
 8007182:	2203      	movs	r2, #3
 8007184:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	b2d2      	uxtb	r2, r2
 800718e:	4611      	mov	r1, r2
 8007190:	4618      	mov	r0, r3
 8007192:	f005 f9b4 	bl	800c4fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	4413      	add	r3, r2
 800719e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a2:	461a      	mov	r2, r3
 80071a4:	2310      	movs	r3, #16
 80071a6:	6093      	str	r3, [r2, #8]
}
 80071a8:	bf00      	nop
 80071aa:	3718      	adds	r7, #24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80071c6:	78fb      	ldrb	r3, [r7, #3]
 80071c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d11a      	bne.n	8007216 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ec:	461a      	mov	r2, r3
 80071ee:	2304      	movs	r3, #4
 80071f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	212c      	movs	r1, #44	; 0x2c
 80071f8:	fb01 f303 	mul.w	r3, r1, r3
 80071fc:	4413      	add	r3, r2
 80071fe:	3361      	adds	r3, #97	; 0x61
 8007200:	2206      	movs	r2, #6
 8007202:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	b2d2      	uxtb	r2, r2
 800720c:	4611      	mov	r1, r2
 800720e:	4618      	mov	r0, r3
 8007210:	f005 f975 	bl	800c4fe <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8007214:	e331      	b.n	800787a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	4413      	add	r3, r2
 800721e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	f003 0320 	and.w	r3, r3, #32
 8007228:	2b20      	cmp	r3, #32
 800722a:	d12e      	bne.n	800728a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	4413      	add	r3, r2
 8007234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007238:	461a      	mov	r2, r3
 800723a:	2320      	movs	r3, #32
 800723c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	212c      	movs	r1, #44	; 0x2c
 8007244:	fb01 f303 	mul.w	r3, r1, r3
 8007248:	4413      	add	r3, r2
 800724a:	333d      	adds	r3, #61	; 0x3d
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b01      	cmp	r3, #1
 8007250:	f040 8313 	bne.w	800787a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	212c      	movs	r1, #44	; 0x2c
 800725a:	fb01 f303 	mul.w	r3, r1, r3
 800725e:	4413      	add	r3, r2
 8007260:	333d      	adds	r3, #61	; 0x3d
 8007262:	2200      	movs	r2, #0
 8007264:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	212c      	movs	r1, #44	; 0x2c
 800726c:	fb01 f303 	mul.w	r3, r1, r3
 8007270:	4413      	add	r3, r2
 8007272:	3360      	adds	r3, #96	; 0x60
 8007274:	2202      	movs	r2, #2
 8007276:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	b2d2      	uxtb	r2, r2
 8007280:	4611      	mov	r1, r2
 8007282:	4618      	mov	r0, r3
 8007284:	f005 f93b 	bl	800c4fe <USB_HC_Halt>
}
 8007288:	e2f7      	b.n	800787a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	4413      	add	r3, r2
 8007292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800729c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a0:	d112      	bne.n	80072c8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	015a      	lsls	r2, r3, #5
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	4413      	add	r3, r2
 80072aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ae:	461a      	mov	r2, r3
 80072b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072b4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	b2d2      	uxtb	r2, r2
 80072be:	4611      	mov	r1, r2
 80072c0:	4618      	mov	r0, r3
 80072c2:	f005 f91c 	bl	800c4fe <USB_HC_Halt>
}
 80072c6:	e2d8      	b.n	800787a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d140      	bne.n	8007360 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	212c      	movs	r1, #44	; 0x2c
 80072e4:	fb01 f303 	mul.w	r3, r1, r3
 80072e8:	4413      	add	r3, r2
 80072ea:	335c      	adds	r3, #92	; 0x5c
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007302:	2b40      	cmp	r3, #64	; 0x40
 8007304:	d111      	bne.n	800732a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	212c      	movs	r1, #44	; 0x2c
 800730c:	fb01 f303 	mul.w	r3, r1, r3
 8007310:	4413      	add	r3, r2
 8007312:	333d      	adds	r3, #61	; 0x3d
 8007314:	2201      	movs	r2, #1
 8007316:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	4413      	add	r3, r2
 8007320:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007324:	461a      	mov	r2, r3
 8007326:	2340      	movs	r3, #64	; 0x40
 8007328:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	015a      	lsls	r2, r3, #5
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	4413      	add	r3, r2
 8007332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007336:	461a      	mov	r2, r3
 8007338:	2301      	movs	r3, #1
 800733a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	212c      	movs	r1, #44	; 0x2c
 8007342:	fb01 f303 	mul.w	r3, r1, r3
 8007346:	4413      	add	r3, r2
 8007348:	3361      	adds	r3, #97	; 0x61
 800734a:	2201      	movs	r2, #1
 800734c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	b2d2      	uxtb	r2, r2
 8007356:	4611      	mov	r1, r2
 8007358:	4618      	mov	r0, r3
 800735a:	f005 f8d0 	bl	800c4fe <USB_HC_Halt>
}
 800735e:	e28c      	b.n	800787a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	015a      	lsls	r2, r3, #5
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	4413      	add	r3, r2
 8007368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d12c      	bne.n	80073d0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	212c      	movs	r1, #44	; 0x2c
 800737c:	fb01 f303 	mul.w	r3, r1, r3
 8007380:	4413      	add	r3, r2
 8007382:	3361      	adds	r3, #97	; 0x61
 8007384:	2204      	movs	r2, #4
 8007386:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	212c      	movs	r1, #44	; 0x2c
 800738e:	fb01 f303 	mul.w	r3, r1, r3
 8007392:	4413      	add	r3, r2
 8007394:	333d      	adds	r3, #61	; 0x3d
 8007396:	2201      	movs	r2, #1
 8007398:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	212c      	movs	r1, #44	; 0x2c
 80073a0:	fb01 f303 	mul.w	r3, r1, r3
 80073a4:	4413      	add	r3, r2
 80073a6:	335c      	adds	r3, #92	; 0x5c
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	697a      	ldr	r2, [r7, #20]
 80073b2:	b2d2      	uxtb	r2, r2
 80073b4:	4611      	mov	r1, r2
 80073b6:	4618      	mov	r0, r3
 80073b8:	f005 f8a1 	bl	800c4fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	015a      	lsls	r2, r3, #5
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	4413      	add	r3, r2
 80073c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c8:	461a      	mov	r2, r3
 80073ca:	2340      	movs	r3, #64	; 0x40
 80073cc:	6093      	str	r3, [r2, #8]
}
 80073ce:	e254      	b.n	800787a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f003 0308 	and.w	r3, r3, #8
 80073e2:	2b08      	cmp	r3, #8
 80073e4:	d11a      	bne.n	800741c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073f2:	461a      	mov	r2, r3
 80073f4:	2308      	movs	r3, #8
 80073f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	212c      	movs	r1, #44	; 0x2c
 80073fe:	fb01 f303 	mul.w	r3, r1, r3
 8007402:	4413      	add	r3, r2
 8007404:	3361      	adds	r3, #97	; 0x61
 8007406:	2205      	movs	r2, #5
 8007408:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	b2d2      	uxtb	r2, r2
 8007412:	4611      	mov	r1, r2
 8007414:	4618      	mov	r0, r3
 8007416:	f005 f872 	bl	800c4fe <USB_HC_Halt>
}
 800741a:	e22e      	b.n	800787a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	4413      	add	r3, r2
 8007424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f003 0310 	and.w	r3, r3, #16
 800742e:	2b10      	cmp	r3, #16
 8007430:	d140      	bne.n	80074b4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	212c      	movs	r1, #44	; 0x2c
 8007438:	fb01 f303 	mul.w	r3, r1, r3
 800743c:	4413      	add	r3, r2
 800743e:	335c      	adds	r3, #92	; 0x5c
 8007440:	2200      	movs	r2, #0
 8007442:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	212c      	movs	r1, #44	; 0x2c
 800744a:	fb01 f303 	mul.w	r3, r1, r3
 800744e:	4413      	add	r3, r2
 8007450:	3361      	adds	r3, #97	; 0x61
 8007452:	2203      	movs	r2, #3
 8007454:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	212c      	movs	r1, #44	; 0x2c
 800745c:	fb01 f303 	mul.w	r3, r1, r3
 8007460:	4413      	add	r3, r2
 8007462:	333d      	adds	r3, #61	; 0x3d
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d112      	bne.n	8007490 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	212c      	movs	r1, #44	; 0x2c
 8007470:	fb01 f303 	mul.w	r3, r1, r3
 8007474:	4413      	add	r3, r2
 8007476:	333c      	adds	r3, #60	; 0x3c
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d108      	bne.n	8007490 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	212c      	movs	r1, #44	; 0x2c
 8007484:	fb01 f303 	mul.w	r3, r1, r3
 8007488:	4413      	add	r3, r2
 800748a:	333d      	adds	r3, #61	; 0x3d
 800748c:	2201      	movs	r2, #1
 800748e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	4611      	mov	r1, r2
 800749a:	4618      	mov	r0, r3
 800749c:	f005 f82f 	bl	800c4fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ac:	461a      	mov	r2, r3
 80074ae:	2310      	movs	r3, #16
 80074b0:	6093      	str	r3, [r2, #8]
}
 80074b2:	e1e2      	b.n	800787a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	015a      	lsls	r2, r3, #5
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	4413      	add	r3, r2
 80074bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c6:	2b80      	cmp	r3, #128	; 0x80
 80074c8:	d164      	bne.n	8007594 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d111      	bne.n	80074f6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	212c      	movs	r1, #44	; 0x2c
 80074d8:	fb01 f303 	mul.w	r3, r1, r3
 80074dc:	4413      	add	r3, r2
 80074de:	3361      	adds	r3, #97	; 0x61
 80074e0:	2206      	movs	r2, #6
 80074e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	4611      	mov	r1, r2
 80074ee:	4618      	mov	r0, r3
 80074f0:	f005 f805 	bl	800c4fe <USB_HC_Halt>
 80074f4:	e044      	b.n	8007580 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	212c      	movs	r1, #44	; 0x2c
 80074fc:	fb01 f303 	mul.w	r3, r1, r3
 8007500:	4413      	add	r3, r2
 8007502:	335c      	adds	r3, #92	; 0x5c
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	202c      	movs	r0, #44	; 0x2c
 800750e:	fb00 f303 	mul.w	r3, r0, r3
 8007512:	440b      	add	r3, r1
 8007514:	335c      	adds	r3, #92	; 0x5c
 8007516:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	212c      	movs	r1, #44	; 0x2c
 800751e:	fb01 f303 	mul.w	r3, r1, r3
 8007522:	4413      	add	r3, r2
 8007524:	335c      	adds	r3, #92	; 0x5c
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b02      	cmp	r3, #2
 800752a:	d920      	bls.n	800756e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	212c      	movs	r1, #44	; 0x2c
 8007532:	fb01 f303 	mul.w	r3, r1, r3
 8007536:	4413      	add	r3, r2
 8007538:	335c      	adds	r3, #92	; 0x5c
 800753a:	2200      	movs	r2, #0
 800753c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	212c      	movs	r1, #44	; 0x2c
 8007544:	fb01 f303 	mul.w	r3, r1, r3
 8007548:	4413      	add	r3, r2
 800754a:	3360      	adds	r3, #96	; 0x60
 800754c:	2204      	movs	r2, #4
 800754e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	b2d9      	uxtb	r1, r3
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	202c      	movs	r0, #44	; 0x2c
 800755a:	fb00 f303 	mul.w	r3, r0, r3
 800755e:	4413      	add	r3, r2
 8007560:	3360      	adds	r3, #96	; 0x60
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	461a      	mov	r2, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f007 fa68 	bl	800ea3c <HAL_HCD_HC_NotifyURBChange_Callback>
 800756c:	e008      	b.n	8007580 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	212c      	movs	r1, #44	; 0x2c
 8007574:	fb01 f303 	mul.w	r3, r1, r3
 8007578:	4413      	add	r3, r2
 800757a:	3360      	adds	r3, #96	; 0x60
 800757c:	2202      	movs	r2, #2
 800757e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	015a      	lsls	r2, r3, #5
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	4413      	add	r3, r2
 8007588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800758c:	461a      	mov	r2, r3
 800758e:	2380      	movs	r3, #128	; 0x80
 8007590:	6093      	str	r3, [r2, #8]
}
 8007592:	e172      	b.n	800787a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	4413      	add	r3, r2
 800759c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075aa:	d11b      	bne.n	80075e4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	212c      	movs	r1, #44	; 0x2c
 80075b2:	fb01 f303 	mul.w	r3, r1, r3
 80075b6:	4413      	add	r3, r2
 80075b8:	3361      	adds	r3, #97	; 0x61
 80075ba:	2208      	movs	r2, #8
 80075bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	b2d2      	uxtb	r2, r2
 80075c6:	4611      	mov	r1, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f004 ff98 	bl	800c4fe <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075da:	461a      	mov	r2, r3
 80075dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075e0:	6093      	str	r3, [r2, #8]
}
 80075e2:	e14a      	b.n	800787a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	f040 813f 	bne.w	800787a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	212c      	movs	r1, #44	; 0x2c
 8007602:	fb01 f303 	mul.w	r3, r1, r3
 8007606:	4413      	add	r3, r2
 8007608:	3361      	adds	r3, #97	; 0x61
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d17d      	bne.n	800770c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	212c      	movs	r1, #44	; 0x2c
 8007616:	fb01 f303 	mul.w	r3, r1, r3
 800761a:	4413      	add	r3, r2
 800761c:	3360      	adds	r3, #96	; 0x60
 800761e:	2201      	movs	r2, #1
 8007620:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	212c      	movs	r1, #44	; 0x2c
 8007628:	fb01 f303 	mul.w	r3, r1, r3
 800762c:	4413      	add	r3, r2
 800762e:	333f      	adds	r3, #63	; 0x3f
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	2b02      	cmp	r3, #2
 8007634:	d00a      	beq.n	800764c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	212c      	movs	r1, #44	; 0x2c
 800763c:	fb01 f303 	mul.w	r3, r1, r3
 8007640:	4413      	add	r3, r2
 8007642:	333f      	adds	r3, #63	; 0x3f
 8007644:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8007646:	2b03      	cmp	r3, #3
 8007648:	f040 8100 	bne.w	800784c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d113      	bne.n	800767c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	212c      	movs	r1, #44	; 0x2c
 800765a:	fb01 f303 	mul.w	r3, r1, r3
 800765e:	4413      	add	r3, r2
 8007660:	3355      	adds	r3, #85	; 0x55
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	f083 0301 	eor.w	r3, r3, #1
 8007668:	b2d8      	uxtb	r0, r3
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	212c      	movs	r1, #44	; 0x2c
 8007670:	fb01 f303 	mul.w	r3, r1, r3
 8007674:	4413      	add	r3, r2
 8007676:	3355      	adds	r3, #85	; 0x55
 8007678:	4602      	mov	r2, r0
 800767a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	2b01      	cmp	r3, #1
 8007682:	f040 80e3 	bne.w	800784c <HCD_HC_OUT_IRQHandler+0x69c>
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	212c      	movs	r1, #44	; 0x2c
 800768c:	fb01 f303 	mul.w	r3, r1, r3
 8007690:	4413      	add	r3, r2
 8007692:	334c      	adds	r3, #76	; 0x4c
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 80d8 	beq.w	800784c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	212c      	movs	r1, #44	; 0x2c
 80076a2:	fb01 f303 	mul.w	r3, r1, r3
 80076a6:	4413      	add	r3, r2
 80076a8:	334c      	adds	r3, #76	; 0x4c
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6879      	ldr	r1, [r7, #4]
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	202c      	movs	r0, #44	; 0x2c
 80076b2:	fb00 f202 	mul.w	r2, r0, r2
 80076b6:	440a      	add	r2, r1
 80076b8:	3240      	adds	r2, #64	; 0x40
 80076ba:	8812      	ldrh	r2, [r2, #0]
 80076bc:	4413      	add	r3, r2
 80076be:	3b01      	subs	r3, #1
 80076c0:	6879      	ldr	r1, [r7, #4]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	202c      	movs	r0, #44	; 0x2c
 80076c6:	fb00 f202 	mul.w	r2, r0, r2
 80076ca:	440a      	add	r2, r1
 80076cc:	3240      	adds	r2, #64	; 0x40
 80076ce:	8812      	ldrh	r2, [r2, #0]
 80076d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80076d4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 80b5 	beq.w	800784c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	212c      	movs	r1, #44	; 0x2c
 80076e8:	fb01 f303 	mul.w	r3, r1, r3
 80076ec:	4413      	add	r3, r2
 80076ee:	3355      	adds	r3, #85	; 0x55
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	f083 0301 	eor.w	r3, r3, #1
 80076f6:	b2d8      	uxtb	r0, r3
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	212c      	movs	r1, #44	; 0x2c
 80076fe:	fb01 f303 	mul.w	r3, r1, r3
 8007702:	4413      	add	r3, r2
 8007704:	3355      	adds	r3, #85	; 0x55
 8007706:	4602      	mov	r2, r0
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	e09f      	b.n	800784c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	212c      	movs	r1, #44	; 0x2c
 8007712:	fb01 f303 	mul.w	r3, r1, r3
 8007716:	4413      	add	r3, r2
 8007718:	3361      	adds	r3, #97	; 0x61
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b03      	cmp	r3, #3
 800771e:	d109      	bne.n	8007734 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	212c      	movs	r1, #44	; 0x2c
 8007726:	fb01 f303 	mul.w	r3, r1, r3
 800772a:	4413      	add	r3, r2
 800772c:	3360      	adds	r3, #96	; 0x60
 800772e:	2202      	movs	r2, #2
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	e08b      	b.n	800784c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	212c      	movs	r1, #44	; 0x2c
 800773a:	fb01 f303 	mul.w	r3, r1, r3
 800773e:	4413      	add	r3, r2
 8007740:	3361      	adds	r3, #97	; 0x61
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	2b04      	cmp	r3, #4
 8007746:	d109      	bne.n	800775c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	212c      	movs	r1, #44	; 0x2c
 800774e:	fb01 f303 	mul.w	r3, r1, r3
 8007752:	4413      	add	r3, r2
 8007754:	3360      	adds	r3, #96	; 0x60
 8007756:	2202      	movs	r2, #2
 8007758:	701a      	strb	r2, [r3, #0]
 800775a:	e077      	b.n	800784c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	212c      	movs	r1, #44	; 0x2c
 8007762:	fb01 f303 	mul.w	r3, r1, r3
 8007766:	4413      	add	r3, r2
 8007768:	3361      	adds	r3, #97	; 0x61
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	2b05      	cmp	r3, #5
 800776e:	d109      	bne.n	8007784 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	212c      	movs	r1, #44	; 0x2c
 8007776:	fb01 f303 	mul.w	r3, r1, r3
 800777a:	4413      	add	r3, r2
 800777c:	3360      	adds	r3, #96	; 0x60
 800777e:	2205      	movs	r2, #5
 8007780:	701a      	strb	r2, [r3, #0]
 8007782:	e063      	b.n	800784c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	212c      	movs	r1, #44	; 0x2c
 800778a:	fb01 f303 	mul.w	r3, r1, r3
 800778e:	4413      	add	r3, r2
 8007790:	3361      	adds	r3, #97	; 0x61
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b06      	cmp	r3, #6
 8007796:	d009      	beq.n	80077ac <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	212c      	movs	r1, #44	; 0x2c
 800779e:	fb01 f303 	mul.w	r3, r1, r3
 80077a2:	4413      	add	r3, r2
 80077a4:	3361      	adds	r3, #97	; 0x61
 80077a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d14f      	bne.n	800784c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	212c      	movs	r1, #44	; 0x2c
 80077b2:	fb01 f303 	mul.w	r3, r1, r3
 80077b6:	4413      	add	r3, r2
 80077b8:	335c      	adds	r3, #92	; 0x5c
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	6879      	ldr	r1, [r7, #4]
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	202c      	movs	r0, #44	; 0x2c
 80077c4:	fb00 f303 	mul.w	r3, r0, r3
 80077c8:	440b      	add	r3, r1
 80077ca:	335c      	adds	r3, #92	; 0x5c
 80077cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	212c      	movs	r1, #44	; 0x2c
 80077d4:	fb01 f303 	mul.w	r3, r1, r3
 80077d8:	4413      	add	r3, r2
 80077da:	335c      	adds	r3, #92	; 0x5c
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d912      	bls.n	8007808 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	212c      	movs	r1, #44	; 0x2c
 80077e8:	fb01 f303 	mul.w	r3, r1, r3
 80077ec:	4413      	add	r3, r2
 80077ee:	335c      	adds	r3, #92	; 0x5c
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	212c      	movs	r1, #44	; 0x2c
 80077fa:	fb01 f303 	mul.w	r3, r1, r3
 80077fe:	4413      	add	r3, r2
 8007800:	3360      	adds	r3, #96	; 0x60
 8007802:	2204      	movs	r2, #4
 8007804:	701a      	strb	r2, [r3, #0]
 8007806:	e021      	b.n	800784c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	212c      	movs	r1, #44	; 0x2c
 800780e:	fb01 f303 	mul.w	r3, r1, r3
 8007812:	4413      	add	r3, r2
 8007814:	3360      	adds	r3, #96	; 0x60
 8007816:	2202      	movs	r2, #2
 8007818:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	4413      	add	r3, r2
 8007822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007830:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007838:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	015a      	lsls	r2, r3, #5
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	4413      	add	r3, r2
 8007842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007846:	461a      	mov	r2, r3
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	4413      	add	r3, r2
 8007854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007858:	461a      	mov	r2, r3
 800785a:	2302      	movs	r3, #2
 800785c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	b2d9      	uxtb	r1, r3
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	202c      	movs	r0, #44	; 0x2c
 8007868:	fb00 f303 	mul.w	r3, r0, r3
 800786c:	4413      	add	r3, r2
 800786e:	3360      	adds	r3, #96	; 0x60
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f007 f8e1 	bl	800ea3c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800787a:	bf00      	nop
 800787c:	3720      	adds	r7, #32
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}

08007882 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007882:	b580      	push	{r7, lr}
 8007884:	b08a      	sub	sp, #40	; 0x28
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	f003 030f 	and.w	r3, r3, #15
 80078a2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	0c5b      	lsrs	r3, r3, #17
 80078a8:	f003 030f 	and.w	r3, r3, #15
 80078ac:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	091b      	lsrs	r3, r3, #4
 80078b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078b6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d004      	beq.n	80078c8 <HCD_RXQLVL_IRQHandler+0x46>
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2b05      	cmp	r3, #5
 80078c2:	f000 80a9 	beq.w	8007a18 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80078c6:	e0aa      	b.n	8007a1e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	f000 80a6 	beq.w	8007a1c <HCD_RXQLVL_IRQHandler+0x19a>
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	212c      	movs	r1, #44	; 0x2c
 80078d6:	fb01 f303 	mul.w	r3, r1, r3
 80078da:	4413      	add	r3, r2
 80078dc:	3344      	adds	r3, #68	; 0x44
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 809b 	beq.w	8007a1c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	212c      	movs	r1, #44	; 0x2c
 80078ec:	fb01 f303 	mul.w	r3, r1, r3
 80078f0:	4413      	add	r3, r2
 80078f2:	3350      	adds	r3, #80	; 0x50
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	441a      	add	r2, r3
 80078fa:	6879      	ldr	r1, [r7, #4]
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	202c      	movs	r0, #44	; 0x2c
 8007900:	fb00 f303 	mul.w	r3, r0, r3
 8007904:	440b      	add	r3, r1
 8007906:	334c      	adds	r3, #76	; 0x4c
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d87a      	bhi.n	8007a04 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6818      	ldr	r0, [r3, #0]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	212c      	movs	r1, #44	; 0x2c
 8007918:	fb01 f303 	mul.w	r3, r1, r3
 800791c:	4413      	add	r3, r2
 800791e:	3344      	adds	r3, #68	; 0x44
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	b292      	uxth	r2, r2
 8007926:	4619      	mov	r1, r3
 8007928:	f004 f940 	bl	800bbac <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	212c      	movs	r1, #44	; 0x2c
 8007932:	fb01 f303 	mul.w	r3, r1, r3
 8007936:	4413      	add	r3, r2
 8007938:	3344      	adds	r3, #68	; 0x44
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	441a      	add	r2, r3
 8007940:	6879      	ldr	r1, [r7, #4]
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	202c      	movs	r0, #44	; 0x2c
 8007946:	fb00 f303 	mul.w	r3, r0, r3
 800794a:	440b      	add	r3, r1
 800794c:	3344      	adds	r3, #68	; 0x44
 800794e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	212c      	movs	r1, #44	; 0x2c
 8007956:	fb01 f303 	mul.w	r3, r1, r3
 800795a:	4413      	add	r3, r2
 800795c:	3350      	adds	r3, #80	; 0x50
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	441a      	add	r2, r3
 8007964:	6879      	ldr	r1, [r7, #4]
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	202c      	movs	r0, #44	; 0x2c
 800796a:	fb00 f303 	mul.w	r3, r0, r3
 800796e:	440b      	add	r3, r1
 8007970:	3350      	adds	r3, #80	; 0x50
 8007972:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	4413      	add	r3, r2
 800797c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	0cdb      	lsrs	r3, r3, #19
 8007984:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007988:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	212c      	movs	r1, #44	; 0x2c
 8007990:	fb01 f303 	mul.w	r3, r1, r3
 8007994:	4413      	add	r3, r2
 8007996:	3340      	adds	r3, #64	; 0x40
 8007998:	881b      	ldrh	r3, [r3, #0]
 800799a:	461a      	mov	r2, r3
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	4293      	cmp	r3, r2
 80079a0:	d13c      	bne.n	8007a1c <HCD_RXQLVL_IRQHandler+0x19a>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d039      	beq.n	8007a1c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079be:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079c6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	015a      	lsls	r2, r3, #5
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	4413      	add	r3, r2
 80079d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079d4:	461a      	mov	r2, r3
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	212c      	movs	r1, #44	; 0x2c
 80079e0:	fb01 f303 	mul.w	r3, r1, r3
 80079e4:	4413      	add	r3, r2
 80079e6:	3354      	adds	r3, #84	; 0x54
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	f083 0301 	eor.w	r3, r3, #1
 80079ee:	b2d8      	uxtb	r0, r3
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	212c      	movs	r1, #44	; 0x2c
 80079f6:	fb01 f303 	mul.w	r3, r1, r3
 80079fa:	4413      	add	r3, r2
 80079fc:	3354      	adds	r3, #84	; 0x54
 80079fe:	4602      	mov	r2, r0
 8007a00:	701a      	strb	r2, [r3, #0]
      break;
 8007a02:	e00b      	b.n	8007a1c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	212c      	movs	r1, #44	; 0x2c
 8007a0a:	fb01 f303 	mul.w	r3, r1, r3
 8007a0e:	4413      	add	r3, r2
 8007a10:	3360      	adds	r3, #96	; 0x60
 8007a12:	2204      	movs	r2, #4
 8007a14:	701a      	strb	r2, [r3, #0]
      break;
 8007a16:	e001      	b.n	8007a1c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8007a18:	bf00      	nop
 8007a1a:	e000      	b.n	8007a1e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8007a1c:	bf00      	nop
  }
}
 8007a1e:	bf00      	nop
 8007a20:	3728      	adds	r7, #40	; 0x28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b086      	sub	sp, #24
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007a52:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d10b      	bne.n	8007a76 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d102      	bne.n	8007a6e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f006 ffcb 	bl	800ea04 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f043 0302 	orr.w	r3, r3, #2
 8007a74:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f003 0308 	and.w	r3, r3, #8
 8007a7c:	2b08      	cmp	r3, #8
 8007a7e:	d132      	bne.n	8007ae6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	f043 0308 	orr.w	r3, r3, #8
 8007a86:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f003 0304 	and.w	r3, r3, #4
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d126      	bne.n	8007ae0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d113      	bne.n	8007ac2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007aa0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007aa4:	d106      	bne.n	8007ab4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2102      	movs	r1, #2
 8007aac:	4618      	mov	r0, r3
 8007aae:	f004 f9eb 	bl	800be88 <USB_InitFSLSPClkSel>
 8007ab2:	e011      	b.n	8007ad8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2101      	movs	r1, #1
 8007aba:	4618      	mov	r0, r3
 8007abc:	f004 f9e4 	bl	800be88 <USB_InitFSLSPClkSel>
 8007ac0:	e00a      	b.n	8007ad8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d106      	bne.n	8007ad8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8007ad6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f006 ffbd 	bl	800ea58 <HAL_HCD_PortEnabled_Callback>
 8007ade:	e002      	b.n	8007ae6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f006 ffc7 	bl	800ea74 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	f003 0320 	and.w	r3, r3, #32
 8007aec:	2b20      	cmp	r3, #32
 8007aee:	d103      	bne.n	8007af8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f043 0320 	orr.w	r3, r3, #32
 8007af6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007afe:	461a      	mov	r2, r3
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	6013      	str	r3, [r2, #0]
}
 8007b04:	bf00      	nop
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d101      	bne.n	8007b1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e12b      	b.n	8007d76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d106      	bne.n	8007b38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7fa fcd8 	bl	80024e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2224      	movs	r2, #36	; 0x24
 8007b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 0201 	bic.w	r2, r2, #1
 8007b4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007b70:	f001 f9de 	bl	8008f30 <HAL_RCC_GetPCLK1Freq>
 8007b74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	4a81      	ldr	r2, [pc, #516]	; (8007d80 <HAL_I2C_Init+0x274>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d807      	bhi.n	8007b90 <HAL_I2C_Init+0x84>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4a80      	ldr	r2, [pc, #512]	; (8007d84 <HAL_I2C_Init+0x278>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	bf94      	ite	ls
 8007b88:	2301      	movls	r3, #1
 8007b8a:	2300      	movhi	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	e006      	b.n	8007b9e <HAL_I2C_Init+0x92>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4a7d      	ldr	r2, [pc, #500]	; (8007d88 <HAL_I2C_Init+0x27c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	bf94      	ite	ls
 8007b98:	2301      	movls	r3, #1
 8007b9a:	2300      	movhi	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e0e7      	b.n	8007d76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4a78      	ldr	r2, [pc, #480]	; (8007d8c <HAL_I2C_Init+0x280>)
 8007baa:	fba2 2303 	umull	r2, r3, r2, r3
 8007bae:	0c9b      	lsrs	r3, r3, #18
 8007bb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	4a6a      	ldr	r2, [pc, #424]	; (8007d80 <HAL_I2C_Init+0x274>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d802      	bhi.n	8007be0 <HAL_I2C_Init+0xd4>
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	e009      	b.n	8007bf4 <HAL_I2C_Init+0xe8>
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007be6:	fb02 f303 	mul.w	r3, r2, r3
 8007bea:	4a69      	ldr	r2, [pc, #420]	; (8007d90 <HAL_I2C_Init+0x284>)
 8007bec:	fba2 2303 	umull	r2, r3, r2, r3
 8007bf0:	099b      	lsrs	r3, r3, #6
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	6812      	ldr	r2, [r2, #0]
 8007bf8:	430b      	orrs	r3, r1
 8007bfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007c06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	495c      	ldr	r1, [pc, #368]	; (8007d80 <HAL_I2C_Init+0x274>)
 8007c10:	428b      	cmp	r3, r1
 8007c12:	d819      	bhi.n	8007c48 <HAL_I2C_Init+0x13c>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	1e59      	subs	r1, r3, #1
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	005b      	lsls	r3, r3, #1
 8007c1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c22:	1c59      	adds	r1, r3, #1
 8007c24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007c28:	400b      	ands	r3, r1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <HAL_I2C_Init+0x138>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	1e59      	subs	r1, r3, #1
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c42:	e051      	b.n	8007ce8 <HAL_I2C_Init+0x1dc>
 8007c44:	2304      	movs	r3, #4
 8007c46:	e04f      	b.n	8007ce8 <HAL_I2C_Init+0x1dc>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d111      	bne.n	8007c74 <HAL_I2C_Init+0x168>
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	1e58      	subs	r0, r3, #1
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6859      	ldr	r1, [r3, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	440b      	add	r3, r1
 8007c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c62:	3301      	adds	r3, #1
 8007c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bf0c      	ite	eq
 8007c6c:	2301      	moveq	r3, #1
 8007c6e:	2300      	movne	r3, #0
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	e012      	b.n	8007c9a <HAL_I2C_Init+0x18e>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	1e58      	subs	r0, r3, #1
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6859      	ldr	r1, [r3, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	440b      	add	r3, r1
 8007c82:	0099      	lsls	r1, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	bf0c      	ite	eq
 8007c94:	2301      	moveq	r3, #1
 8007c96:	2300      	movne	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <HAL_I2C_Init+0x196>
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e022      	b.n	8007ce8 <HAL_I2C_Init+0x1dc>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d10e      	bne.n	8007cc8 <HAL_I2C_Init+0x1bc>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	1e58      	subs	r0, r3, #1
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6859      	ldr	r1, [r3, #4]
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	440b      	add	r3, r1
 8007cb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cc6:	e00f      	b.n	8007ce8 <HAL_I2C_Init+0x1dc>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	1e58      	subs	r0, r3, #1
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6859      	ldr	r1, [r3, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	440b      	add	r3, r1
 8007cd6:	0099      	lsls	r1, r3, #2
 8007cd8:	440b      	add	r3, r1
 8007cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cde:	3301      	adds	r3, #1
 8007ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ce8:	6879      	ldr	r1, [r7, #4]
 8007cea:	6809      	ldr	r1, [r1, #0]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69da      	ldr	r2, [r3, #28]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007d16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6911      	ldr	r1, [r2, #16]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	68d2      	ldr	r2, [r2, #12]
 8007d22:	4311      	orrs	r1, r2
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	6812      	ldr	r2, [r2, #0]
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	695a      	ldr	r2, [r3, #20]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0201 	orr.w	r2, r2, #1
 8007d56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2220      	movs	r2, #32
 8007d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	000186a0 	.word	0x000186a0
 8007d84:	001e847f 	.word	0x001e847f
 8007d88:	003d08ff 	.word	0x003d08ff
 8007d8c:	431bde83 	.word	0x431bde83
 8007d90:	10624dd3 	.word	0x10624dd3

08007d94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b20      	cmp	r3, #32
 8007da8:	d129      	bne.n	8007dfe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2224      	movs	r2, #36	; 0x24
 8007dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 0201 	bic.w	r2, r2, #1
 8007dc0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0210 	bic.w	r2, r2, #16
 8007dd0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f042 0201 	orr.w	r2, r2, #1
 8007df0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2220      	movs	r2, #32
 8007df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	e000      	b.n	8007e00 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007dfe:	2302      	movs	r3, #2
  }
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8007e16:	2300      	movs	r3, #0
 8007e18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b20      	cmp	r3, #32
 8007e24:	d12a      	bne.n	8007e7c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2224      	movs	r2, #36	; 0x24
 8007e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 0201 	bic.w	r2, r2, #1
 8007e3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8007e46:	89fb      	ldrh	r3, [r7, #14]
 8007e48:	f023 030f 	bic.w	r3, r3, #15
 8007e4c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	89fb      	ldrh	r3, [r7, #14]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	89fa      	ldrh	r2, [r7, #14]
 8007e5e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f042 0201 	orr.w	r2, r2, #1
 8007e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2220      	movs	r2, #32
 8007e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	e000      	b.n	8007e7e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8007e7c:	2302      	movs	r3, #2
  }
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
	...

08007e8c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e0bf      	b.n	800801e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d106      	bne.n	8007eb8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7fa fb82 	bl	80025bc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	699a      	ldr	r2, [r3, #24]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007ece:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6999      	ldr	r1, [r3, #24]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ee4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	430a      	orrs	r2, r1
 8007ef2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6899      	ldr	r1, [r3, #8]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	4b4a      	ldr	r3, [pc, #296]	; (8008028 <HAL_LTDC_Init+0x19c>)
 8007f00:	400b      	ands	r3, r1
 8007f02:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	695b      	ldr	r3, [r3, #20]
 8007f08:	041b      	lsls	r3, r3, #16
 8007f0a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6899      	ldr	r1, [r3, #8]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	699a      	ldr	r2, [r3, #24]
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68d9      	ldr	r1, [r3, #12]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	4b3e      	ldr	r3, [pc, #248]	; (8008028 <HAL_LTDC_Init+0x19c>)
 8007f2e:	400b      	ands	r3, r1
 8007f30:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	041b      	lsls	r3, r3, #16
 8007f38:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68d9      	ldr	r1, [r3, #12]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a1a      	ldr	r2, [r3, #32]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	431a      	orrs	r2, r3
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6919      	ldr	r1, [r3, #16]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	4b33      	ldr	r3, [pc, #204]	; (8008028 <HAL_LTDC_Init+0x19c>)
 8007f5c:	400b      	ands	r3, r1
 8007f5e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	041b      	lsls	r3, r3, #16
 8007f66:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6919      	ldr	r1, [r3, #16]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	431a      	orrs	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	6959      	ldr	r1, [r3, #20]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	4b27      	ldr	r3, [pc, #156]	; (8008028 <HAL_LTDC_Init+0x19c>)
 8007f8a:	400b      	ands	r3, r1
 8007f8c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f92:	041b      	lsls	r3, r3, #16
 8007f94:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	6959      	ldr	r1, [r3, #20]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	430a      	orrs	r2, r1
 8007faa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fb2:	021b      	lsls	r3, r3, #8
 8007fb4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007fbc:	041b      	lsls	r3, r3, #16
 8007fbe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007fce:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0206 	orr.w	r2, r2, #6
 8007ffa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699a      	ldr	r2, [r3, #24]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0201 	orr.w	r2, r2, #1
 800800a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	f000f800 	.word	0xf000f800

0800802c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008042:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	2b00      	cmp	r3, #0
 800804c:	d023      	beq.n	8008096 <HAL_LTDC_IRQHandler+0x6a>
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f003 0304 	and.w	r3, r3, #4
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01e      	beq.n	8008096 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 0204 	bic.w	r2, r2, #4
 8008066:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2204      	movs	r2, #4
 800806e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008076:	f043 0201 	orr.w	r2, r3, #1
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2204      	movs	r2, #4
 8008084:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f86f 	bl	8008174 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	2b00      	cmp	r3, #0
 800809e:	d023      	beq.n	80080e8 <HAL_LTDC_IRQHandler+0xbc>
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	f003 0302 	and.w	r3, r3, #2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d01e      	beq.n	80080e8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0202 	bic.w	r2, r2, #2
 80080b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2202      	movs	r2, #2
 80080c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80080c8:	f043 0202 	orr.w	r2, r3, #2
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2204      	movs	r2, #4
 80080d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f846 	bl	8008174 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d01b      	beq.n	800812a <HAL_LTDC_IRQHandler+0xfe>
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	f003 0301 	and.w	r3, r3, #1
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d016      	beq.n	800812a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 0201 	bic.w	r2, r2, #1
 800810a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2201      	movs	r2, #1
 8008112:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f82f 	bl	8008188 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f003 0308 	and.w	r3, r3, #8
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01b      	beq.n	800816c <HAL_LTDC_IRQHandler+0x140>
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	f003 0308 	and.w	r3, r3, #8
 800813a:	2b00      	cmp	r3, #0
 800813c:	d016      	beq.n	800816c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f022 0208 	bic.w	r2, r2, #8
 800814c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2208      	movs	r2, #8
 8008154:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f818 	bl	800819c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800816c:	bf00      	nop
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80081b0:	b5b0      	push	{r4, r5, r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d101      	bne.n	80081ca <HAL_LTDC_ConfigLayer+0x1a>
 80081c6:	2302      	movs	r3, #2
 80081c8:	e02c      	b.n	8008224 <HAL_LTDC_ConfigLayer+0x74>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2202      	movs	r2, #2
 80081d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80081da:	68fa      	ldr	r2, [r7, #12]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2134      	movs	r1, #52	; 0x34
 80081e0:	fb01 f303 	mul.w	r3, r1, r3
 80081e4:	4413      	add	r3, r2
 80081e6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	4614      	mov	r4, r2
 80081ee:	461d      	mov	r5, r3
 80081f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80081fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	68b9      	ldr	r1, [r7, #8]
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 f83b 	bl	8008280 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2201      	movs	r2, #1
 8008210:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bdb0      	pop	{r4, r5, r7, pc}

0800822c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800823a:	2b01      	cmp	r3, #1
 800823c:	d101      	bne.n	8008242 <HAL_LTDC_EnableDither+0x16>
 800823e:	2302      	movs	r3, #2
 8008240:	e016      	b.n	8008270 <HAL_LTDC_EnableDither+0x44>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2202      	movs	r2, #2
 800824e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8008252:	4b0a      	ldr	r3, [pc, #40]	; (800827c <HAL_LTDC_EnableDither+0x50>)
 8008254:	699b      	ldr	r3, [r3, #24]
 8008256:	4a09      	ldr	r2, [pc, #36]	; (800827c <HAL_LTDC_EnableDither+0x50>)
 8008258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800825c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	40016800 	.word	0x40016800

08008280 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008280:	b480      	push	{r7}
 8008282:	b089      	sub	sp, #36	; 0x24
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	0c1b      	lsrs	r3, r3, #16
 8008298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800829c:	4413      	add	r3, r2
 800829e:	041b      	lsls	r3, r3, #16
 80082a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	01db      	lsls	r3, r3, #7
 80082ac:	4413      	add	r3, r2
 80082ae:	3384      	adds	r3, #132	; 0x84
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	6812      	ldr	r2, [r2, #0]
 80082b6:	4611      	mov	r1, r2
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	01d2      	lsls	r2, r2, #7
 80082bc:	440a      	add	r2, r1
 80082be:	3284      	adds	r2, #132	; 0x84
 80082c0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80082c4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	0c1b      	lsrs	r3, r3, #16
 80082d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80082d6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80082d8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4619      	mov	r1, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	01db      	lsls	r3, r3, #7
 80082e4:	440b      	add	r3, r1
 80082e6:	3384      	adds	r3, #132	; 0x84
 80082e8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80082ee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80082fe:	4413      	add	r3, r2
 8008300:	041b      	lsls	r3, r3, #16
 8008302:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	461a      	mov	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	01db      	lsls	r3, r3, #7
 800830e:	4413      	add	r3, r2
 8008310:	3384      	adds	r3, #132	; 0x84
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	6812      	ldr	r2, [r2, #0]
 8008318:	4611      	mov	r1, r2
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	01d2      	lsls	r2, r2, #7
 800831e:	440a      	add	r2, r1
 8008320:	3284      	adds	r2, #132	; 0x84
 8008322:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008326:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	689a      	ldr	r2, [r3, #8]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008336:	4413      	add	r3, r2
 8008338:	1c5a      	adds	r2, r3, #1
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4619      	mov	r1, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	01db      	lsls	r3, r3, #7
 8008344:	440b      	add	r3, r1
 8008346:	3384      	adds	r3, #132	; 0x84
 8008348:	4619      	mov	r1, r3
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	4313      	orrs	r3, r2
 800834e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	461a      	mov	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	01db      	lsls	r3, r3, #7
 800835a:	4413      	add	r3, r2
 800835c:	3384      	adds	r3, #132	; 0x84
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	6812      	ldr	r2, [r2, #0]
 8008364:	4611      	mov	r1, r2
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	01d2      	lsls	r2, r2, #7
 800836a:	440a      	add	r2, r1
 800836c:	3284      	adds	r2, #132	; 0x84
 800836e:	f023 0307 	bic.w	r3, r3, #7
 8008372:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	461a      	mov	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	01db      	lsls	r3, r3, #7
 800837e:	4413      	add	r3, r2
 8008380:	3384      	adds	r3, #132	; 0x84
 8008382:	461a      	mov	r2, r3
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008390:	021b      	lsls	r3, r3, #8
 8008392:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800839a:	041b      	lsls	r3, r3, #16
 800839c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	061b      	lsls	r3, r3, #24
 80083a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	01db      	lsls	r3, r3, #7
 80083b0:	4413      	add	r3, r2
 80083b2:	3384      	adds	r3, #132	; 0x84
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	01db      	lsls	r3, r3, #7
 80083c0:	4413      	add	r3, r2
 80083c2:	3384      	adds	r3, #132	; 0x84
 80083c4:	461a      	mov	r2, r3
 80083c6:	2300      	movs	r3, #0
 80083c8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083d0:	461a      	mov	r2, r3
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	431a      	orrs	r2, r3
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	431a      	orrs	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4619      	mov	r1, r3
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	01db      	lsls	r3, r3, #7
 80083e4:	440b      	add	r3, r1
 80083e6:	3384      	adds	r3, #132	; 0x84
 80083e8:	4619      	mov	r1, r3
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	461a      	mov	r2, r3
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	01db      	lsls	r3, r3, #7
 80083fa:	4413      	add	r3, r2
 80083fc:	3384      	adds	r3, #132	; 0x84
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	6812      	ldr	r2, [r2, #0]
 8008404:	4611      	mov	r1, r2
 8008406:	687a      	ldr	r2, [r7, #4]
 8008408:	01d2      	lsls	r2, r2, #7
 800840a:	440a      	add	r2, r1
 800840c:	3284      	adds	r2, #132	; 0x84
 800840e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008412:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	461a      	mov	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	01db      	lsls	r3, r3, #7
 800841e:	4413      	add	r3, r2
 8008420:	3384      	adds	r3, #132	; 0x84
 8008422:	461a      	mov	r2, r3
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	695b      	ldr	r3, [r3, #20]
 8008428:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	461a      	mov	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	01db      	lsls	r3, r3, #7
 8008434:	4413      	add	r3, r2
 8008436:	3384      	adds	r3, #132	; 0x84
 8008438:	69db      	ldr	r3, [r3, #28]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	6812      	ldr	r2, [r2, #0]
 800843e:	4611      	mov	r1, r2
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	01d2      	lsls	r2, r2, #7
 8008444:	440a      	add	r2, r1
 8008446:	3284      	adds	r2, #132	; 0x84
 8008448:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800844c:	f023 0307 	bic.w	r3, r3, #7
 8008450:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	69da      	ldr	r2, [r3, #28]
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	68f9      	ldr	r1, [r7, #12]
 800845c:	6809      	ldr	r1, [r1, #0]
 800845e:	4608      	mov	r0, r1
 8008460:	6879      	ldr	r1, [r7, #4]
 8008462:	01c9      	lsls	r1, r1, #7
 8008464:	4401      	add	r1, r0
 8008466:	3184      	adds	r1, #132	; 0x84
 8008468:	4313      	orrs	r3, r2
 800846a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	461a      	mov	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	01db      	lsls	r3, r3, #7
 8008476:	4413      	add	r3, r2
 8008478:	3384      	adds	r3, #132	; 0x84
 800847a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	461a      	mov	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	01db      	lsls	r3, r3, #7
 8008486:	4413      	add	r3, r2
 8008488:	3384      	adds	r3, #132	; 0x84
 800848a:	461a      	mov	r2, r3
 800848c:	2300      	movs	r3, #0
 800848e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	461a      	mov	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	01db      	lsls	r3, r3, #7
 800849a:	4413      	add	r3, r2
 800849c:	3384      	adds	r3, #132	; 0x84
 800849e:	461a      	mov	r2, r3
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d102      	bne.n	80084b4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80084ae:	2304      	movs	r3, #4
 80084b0:	61fb      	str	r3, [r7, #28]
 80084b2:	e01b      	b.n	80084ec <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d102      	bne.n	80084c2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80084bc:	2303      	movs	r3, #3
 80084be:	61fb      	str	r3, [r7, #28]
 80084c0:	e014      	b.n	80084ec <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	2b04      	cmp	r3, #4
 80084c8:	d00b      	beq.n	80084e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d007      	beq.n	80084e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80084d6:	2b03      	cmp	r3, #3
 80084d8:	d003      	beq.n	80084e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80084de:	2b07      	cmp	r3, #7
 80084e0:	d102      	bne.n	80084e8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80084e2:	2302      	movs	r3, #2
 80084e4:	61fb      	str	r3, [r7, #28]
 80084e6:	e001      	b.n	80084ec <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80084e8:	2301      	movs	r3, #1
 80084ea:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	461a      	mov	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	01db      	lsls	r3, r3, #7
 80084f6:	4413      	add	r3, r2
 80084f8:	3384      	adds	r3, #132	; 0x84
 80084fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	6812      	ldr	r2, [r2, #0]
 8008500:	4611      	mov	r1, r2
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	01d2      	lsls	r2, r2, #7
 8008506:	440a      	add	r2, r1
 8008508:	3284      	adds	r2, #132	; 0x84
 800850a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800850e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008514:	69fa      	ldr	r2, [r7, #28]
 8008516:	fb02 f303 	mul.w	r3, r2, r3
 800851a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	6859      	ldr	r1, [r3, #4]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	1acb      	subs	r3, r1, r3
 8008526:	69f9      	ldr	r1, [r7, #28]
 8008528:	fb01 f303 	mul.w	r3, r1, r3
 800852c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800852e:	68f9      	ldr	r1, [r7, #12]
 8008530:	6809      	ldr	r1, [r1, #0]
 8008532:	4608      	mov	r0, r1
 8008534:	6879      	ldr	r1, [r7, #4]
 8008536:	01c9      	lsls	r1, r1, #7
 8008538:	4401      	add	r1, r0
 800853a:	3184      	adds	r1, #132	; 0x84
 800853c:	4313      	orrs	r3, r2
 800853e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	01db      	lsls	r3, r3, #7
 800854a:	4413      	add	r3, r2
 800854c:	3384      	adds	r3, #132	; 0x84
 800854e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	6812      	ldr	r2, [r2, #0]
 8008554:	4611      	mov	r1, r2
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	01d2      	lsls	r2, r2, #7
 800855a:	440a      	add	r2, r1
 800855c:	3284      	adds	r2, #132	; 0x84
 800855e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008562:	f023 0307 	bic.w	r3, r3, #7
 8008566:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	461a      	mov	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	01db      	lsls	r3, r3, #7
 8008572:	4413      	add	r3, r2
 8008574:	3384      	adds	r3, #132	; 0x84
 8008576:	461a      	mov	r2, r3
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	01db      	lsls	r3, r3, #7
 8008588:	4413      	add	r3, r2
 800858a:	3384      	adds	r3, #132	; 0x84
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	6812      	ldr	r2, [r2, #0]
 8008592:	4611      	mov	r1, r2
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	01d2      	lsls	r2, r2, #7
 8008598:	440a      	add	r2, r1
 800859a:	3284      	adds	r2, #132	; 0x84
 800859c:	f043 0301 	orr.w	r3, r3, #1
 80085a0:	6013      	str	r3, [r2, #0]
}
 80085a2:	bf00      	nop
 80085a4:	3724      	adds	r7, #36	; 0x24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
	...

080085b0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80085ba:	2300      	movs	r3, #0
 80085bc:	603b      	str	r3, [r7, #0]
 80085be:	4b20      	ldr	r3, [pc, #128]	; (8008640 <HAL_PWREx_EnableOverDrive+0x90>)
 80085c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c2:	4a1f      	ldr	r2, [pc, #124]	; (8008640 <HAL_PWREx_EnableOverDrive+0x90>)
 80085c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085c8:	6413      	str	r3, [r2, #64]	; 0x40
 80085ca:	4b1d      	ldr	r3, [pc, #116]	; (8008640 <HAL_PWREx_EnableOverDrive+0x90>)
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085d2:	603b      	str	r3, [r7, #0]
 80085d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80085d6:	4b1b      	ldr	r3, [pc, #108]	; (8008644 <HAL_PWREx_EnableOverDrive+0x94>)
 80085d8:	2201      	movs	r2, #1
 80085da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80085dc:	f7fb fe0e 	bl	80041fc <HAL_GetTick>
 80085e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80085e2:	e009      	b.n	80085f8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80085e4:	f7fb fe0a 	bl	80041fc <HAL_GetTick>
 80085e8:	4602      	mov	r2, r0
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085f2:	d901      	bls.n	80085f8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80085f4:	2303      	movs	r3, #3
 80085f6:	e01f      	b.n	8008638 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80085f8:	4b13      	ldr	r3, [pc, #76]	; (8008648 <HAL_PWREx_EnableOverDrive+0x98>)
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008604:	d1ee      	bne.n	80085e4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008606:	4b11      	ldr	r3, [pc, #68]	; (800864c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008608:	2201      	movs	r2, #1
 800860a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800860c:	f7fb fdf6 	bl	80041fc <HAL_GetTick>
 8008610:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008612:	e009      	b.n	8008628 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008614:	f7fb fdf2 	bl	80041fc <HAL_GetTick>
 8008618:	4602      	mov	r2, r0
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008622:	d901      	bls.n	8008628 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e007      	b.n	8008638 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008628:	4b07      	ldr	r3, [pc, #28]	; (8008648 <HAL_PWREx_EnableOverDrive+0x98>)
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008630:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008634:	d1ee      	bne.n	8008614 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	40023800 	.word	0x40023800
 8008644:	420e0040 	.word	0x420e0040
 8008648:	40007000 	.word	0x40007000
 800864c:	420e0044 	.word	0x420e0044

08008650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e267      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d075      	beq.n	800875a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800866e:	4b88      	ldr	r3, [pc, #544]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f003 030c 	and.w	r3, r3, #12
 8008676:	2b04      	cmp	r3, #4
 8008678:	d00c      	beq.n	8008694 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800867a:	4b85      	ldr	r3, [pc, #532]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008682:	2b08      	cmp	r3, #8
 8008684:	d112      	bne.n	80086ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008686:	4b82      	ldr	r3, [pc, #520]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800868e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008692:	d10b      	bne.n	80086ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008694:	4b7e      	ldr	r3, [pc, #504]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d05b      	beq.n	8008758 <HAL_RCC_OscConfig+0x108>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d157      	bne.n	8008758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	e242      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086b4:	d106      	bne.n	80086c4 <HAL_RCC_OscConfig+0x74>
 80086b6:	4b76      	ldr	r3, [pc, #472]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a75      	ldr	r2, [pc, #468]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 80086bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086c0:	6013      	str	r3, [r2, #0]
 80086c2:	e01d      	b.n	8008700 <HAL_RCC_OscConfig+0xb0>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80086cc:	d10c      	bne.n	80086e8 <HAL_RCC_OscConfig+0x98>
 80086ce:	4b70      	ldr	r3, [pc, #448]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a6f      	ldr	r2, [pc, #444]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 80086d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80086d8:	6013      	str	r3, [r2, #0]
 80086da:	4b6d      	ldr	r3, [pc, #436]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a6c      	ldr	r2, [pc, #432]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 80086e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086e4:	6013      	str	r3, [r2, #0]
 80086e6:	e00b      	b.n	8008700 <HAL_RCC_OscConfig+0xb0>
 80086e8:	4b69      	ldr	r3, [pc, #420]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a68      	ldr	r2, [pc, #416]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 80086ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086f2:	6013      	str	r3, [r2, #0]
 80086f4:	4b66      	ldr	r3, [pc, #408]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a65      	ldr	r2, [pc, #404]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 80086fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d013      	beq.n	8008730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008708:	f7fb fd78 	bl	80041fc <HAL_GetTick>
 800870c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800870e:	e008      	b.n	8008722 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008710:	f7fb fd74 	bl	80041fc <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	2b64      	cmp	r3, #100	; 0x64
 800871c:	d901      	bls.n	8008722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e207      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008722:	4b5b      	ldr	r3, [pc, #364]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0f0      	beq.n	8008710 <HAL_RCC_OscConfig+0xc0>
 800872e:	e014      	b.n	800875a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008730:	f7fb fd64 	bl	80041fc <HAL_GetTick>
 8008734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008736:	e008      	b.n	800874a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008738:	f7fb fd60 	bl	80041fc <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	2b64      	cmp	r3, #100	; 0x64
 8008744:	d901      	bls.n	800874a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008746:	2303      	movs	r3, #3
 8008748:	e1f3      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800874a:	4b51      	ldr	r3, [pc, #324]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1f0      	bne.n	8008738 <HAL_RCC_OscConfig+0xe8>
 8008756:	e000      	b.n	800875a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d063      	beq.n	800882e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008766:	4b4a      	ldr	r3, [pc, #296]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f003 030c 	and.w	r3, r3, #12
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00b      	beq.n	800878a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008772:	4b47      	ldr	r3, [pc, #284]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800877a:	2b08      	cmp	r3, #8
 800877c:	d11c      	bne.n	80087b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800877e:	4b44      	ldr	r3, [pc, #272]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d116      	bne.n	80087b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800878a:	4b41      	ldr	r3, [pc, #260]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f003 0302 	and.w	r3, r3, #2
 8008792:	2b00      	cmp	r3, #0
 8008794:	d005      	beq.n	80087a2 <HAL_RCC_OscConfig+0x152>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d001      	beq.n	80087a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e1c7      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087a2:	4b3b      	ldr	r3, [pc, #236]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	00db      	lsls	r3, r3, #3
 80087b0:	4937      	ldr	r1, [pc, #220]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 80087b2:	4313      	orrs	r3, r2
 80087b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087b6:	e03a      	b.n	800882e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d020      	beq.n	8008802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80087c0:	4b34      	ldr	r3, [pc, #208]	; (8008894 <HAL_RCC_OscConfig+0x244>)
 80087c2:	2201      	movs	r2, #1
 80087c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c6:	f7fb fd19 	bl	80041fc <HAL_GetTick>
 80087ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087cc:	e008      	b.n	80087e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087ce:	f7fb fd15 	bl	80041fc <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d901      	bls.n	80087e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e1a8      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80087e0:	4b2b      	ldr	r3, [pc, #172]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0302 	and.w	r3, r3, #2
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0f0      	beq.n	80087ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087ec:	4b28      	ldr	r3, [pc, #160]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	691b      	ldr	r3, [r3, #16]
 80087f8:	00db      	lsls	r3, r3, #3
 80087fa:	4925      	ldr	r1, [pc, #148]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	600b      	str	r3, [r1, #0]
 8008800:	e015      	b.n	800882e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008802:	4b24      	ldr	r3, [pc, #144]	; (8008894 <HAL_RCC_OscConfig+0x244>)
 8008804:	2200      	movs	r2, #0
 8008806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008808:	f7fb fcf8 	bl	80041fc <HAL_GetTick>
 800880c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800880e:	e008      	b.n	8008822 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008810:	f7fb fcf4 	bl	80041fc <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	2b02      	cmp	r3, #2
 800881c:	d901      	bls.n	8008822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e187      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008822:	4b1b      	ldr	r3, [pc, #108]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0302 	and.w	r3, r3, #2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1f0      	bne.n	8008810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0308 	and.w	r3, r3, #8
 8008836:	2b00      	cmp	r3, #0
 8008838:	d036      	beq.n	80088a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d016      	beq.n	8008870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008842:	4b15      	ldr	r3, [pc, #84]	; (8008898 <HAL_RCC_OscConfig+0x248>)
 8008844:	2201      	movs	r2, #1
 8008846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008848:	f7fb fcd8 	bl	80041fc <HAL_GetTick>
 800884c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800884e:	e008      	b.n	8008862 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008850:	f7fb fcd4 	bl	80041fc <HAL_GetTick>
 8008854:	4602      	mov	r2, r0
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	2b02      	cmp	r3, #2
 800885c:	d901      	bls.n	8008862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e167      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008862:	4b0b      	ldr	r3, [pc, #44]	; (8008890 <HAL_RCC_OscConfig+0x240>)
 8008864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0f0      	beq.n	8008850 <HAL_RCC_OscConfig+0x200>
 800886e:	e01b      	b.n	80088a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008870:	4b09      	ldr	r3, [pc, #36]	; (8008898 <HAL_RCC_OscConfig+0x248>)
 8008872:	2200      	movs	r2, #0
 8008874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008876:	f7fb fcc1 	bl	80041fc <HAL_GetTick>
 800887a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800887c:	e00e      	b.n	800889c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800887e:	f7fb fcbd 	bl	80041fc <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	2b02      	cmp	r3, #2
 800888a:	d907      	bls.n	800889c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e150      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
 8008890:	40023800 	.word	0x40023800
 8008894:	42470000 	.word	0x42470000
 8008898:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800889c:	4b88      	ldr	r3, [pc, #544]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 800889e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088a0:	f003 0302 	and.w	r3, r3, #2
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1ea      	bne.n	800887e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0304 	and.w	r3, r3, #4
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 8097 	beq.w	80089e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088b6:	2300      	movs	r3, #0
 80088b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088ba:	4b81      	ldr	r3, [pc, #516]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 80088bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d10f      	bne.n	80088e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088c6:	2300      	movs	r3, #0
 80088c8:	60bb      	str	r3, [r7, #8]
 80088ca:	4b7d      	ldr	r3, [pc, #500]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 80088cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ce:	4a7c      	ldr	r2, [pc, #496]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 80088d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088d4:	6413      	str	r3, [r2, #64]	; 0x40
 80088d6:	4b7a      	ldr	r3, [pc, #488]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 80088d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088de:	60bb      	str	r3, [r7, #8]
 80088e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088e2:	2301      	movs	r3, #1
 80088e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088e6:	4b77      	ldr	r3, [pc, #476]	; (8008ac4 <HAL_RCC_OscConfig+0x474>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d118      	bne.n	8008924 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80088f2:	4b74      	ldr	r3, [pc, #464]	; (8008ac4 <HAL_RCC_OscConfig+0x474>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a73      	ldr	r2, [pc, #460]	; (8008ac4 <HAL_RCC_OscConfig+0x474>)
 80088f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088fe:	f7fb fc7d 	bl	80041fc <HAL_GetTick>
 8008902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008904:	e008      	b.n	8008918 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008906:	f7fb fc79 	bl	80041fc <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	2b02      	cmp	r3, #2
 8008912:	d901      	bls.n	8008918 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e10c      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008918:	4b6a      	ldr	r3, [pc, #424]	; (8008ac4 <HAL_RCC_OscConfig+0x474>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008920:	2b00      	cmp	r3, #0
 8008922:	d0f0      	beq.n	8008906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d106      	bne.n	800893a <HAL_RCC_OscConfig+0x2ea>
 800892c:	4b64      	ldr	r3, [pc, #400]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 800892e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008930:	4a63      	ldr	r2, [pc, #396]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 8008932:	f043 0301 	orr.w	r3, r3, #1
 8008936:	6713      	str	r3, [r2, #112]	; 0x70
 8008938:	e01c      	b.n	8008974 <HAL_RCC_OscConfig+0x324>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	2b05      	cmp	r3, #5
 8008940:	d10c      	bne.n	800895c <HAL_RCC_OscConfig+0x30c>
 8008942:	4b5f      	ldr	r3, [pc, #380]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 8008944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008946:	4a5e      	ldr	r2, [pc, #376]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 8008948:	f043 0304 	orr.w	r3, r3, #4
 800894c:	6713      	str	r3, [r2, #112]	; 0x70
 800894e:	4b5c      	ldr	r3, [pc, #368]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 8008950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008952:	4a5b      	ldr	r2, [pc, #364]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 8008954:	f043 0301 	orr.w	r3, r3, #1
 8008958:	6713      	str	r3, [r2, #112]	; 0x70
 800895a:	e00b      	b.n	8008974 <HAL_RCC_OscConfig+0x324>
 800895c:	4b58      	ldr	r3, [pc, #352]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 800895e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008960:	4a57      	ldr	r2, [pc, #348]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 8008962:	f023 0301 	bic.w	r3, r3, #1
 8008966:	6713      	str	r3, [r2, #112]	; 0x70
 8008968:	4b55      	ldr	r3, [pc, #340]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 800896a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800896c:	4a54      	ldr	r2, [pc, #336]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 800896e:	f023 0304 	bic.w	r3, r3, #4
 8008972:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d015      	beq.n	80089a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800897c:	f7fb fc3e 	bl	80041fc <HAL_GetTick>
 8008980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008982:	e00a      	b.n	800899a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008984:	f7fb fc3a 	bl	80041fc <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008992:	4293      	cmp	r3, r2
 8008994:	d901      	bls.n	800899a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008996:	2303      	movs	r3, #3
 8008998:	e0cb      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800899a:	4b49      	ldr	r3, [pc, #292]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 800899c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0ee      	beq.n	8008984 <HAL_RCC_OscConfig+0x334>
 80089a6:	e014      	b.n	80089d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80089a8:	f7fb fc28 	bl	80041fc <HAL_GetTick>
 80089ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089ae:	e00a      	b.n	80089c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80089b0:	f7fb fc24 	bl	80041fc <HAL_GetTick>
 80089b4:	4602      	mov	r2, r0
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	1ad3      	subs	r3, r2, r3
 80089ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80089be:	4293      	cmp	r3, r2
 80089c0:	d901      	bls.n	80089c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e0b5      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80089c6:	4b3e      	ldr	r3, [pc, #248]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 80089c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089ca:	f003 0302 	and.w	r3, r3, #2
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d1ee      	bne.n	80089b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d105      	bne.n	80089e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089d8:	4b39      	ldr	r3, [pc, #228]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 80089da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089dc:	4a38      	ldr	r2, [pc, #224]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 80089de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 80a1 	beq.w	8008b30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80089ee:	4b34      	ldr	r3, [pc, #208]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f003 030c 	and.w	r3, r3, #12
 80089f6:	2b08      	cmp	r3, #8
 80089f8:	d05c      	beq.n	8008ab4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	699b      	ldr	r3, [r3, #24]
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d141      	bne.n	8008a86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a02:	4b31      	ldr	r3, [pc, #196]	; (8008ac8 <HAL_RCC_OscConfig+0x478>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a08:	f7fb fbf8 	bl	80041fc <HAL_GetTick>
 8008a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a0e:	e008      	b.n	8008a22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a10:	f7fb fbf4 	bl	80041fc <HAL_GetTick>
 8008a14:	4602      	mov	r2, r0
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d901      	bls.n	8008a22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e087      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a22:	4b27      	ldr	r3, [pc, #156]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1f0      	bne.n	8008a10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	69da      	ldr	r2, [r3, #28]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a1b      	ldr	r3, [r3, #32]
 8008a36:	431a      	orrs	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3c:	019b      	lsls	r3, r3, #6
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a44:	085b      	lsrs	r3, r3, #1
 8008a46:	3b01      	subs	r3, #1
 8008a48:	041b      	lsls	r3, r3, #16
 8008a4a:	431a      	orrs	r2, r3
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a50:	061b      	lsls	r3, r3, #24
 8008a52:	491b      	ldr	r1, [pc, #108]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a58:	4b1b      	ldr	r3, [pc, #108]	; (8008ac8 <HAL_RCC_OscConfig+0x478>)
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a5e:	f7fb fbcd 	bl	80041fc <HAL_GetTick>
 8008a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a64:	e008      	b.n	8008a78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a66:	f7fb fbc9 	bl	80041fc <HAL_GetTick>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d901      	bls.n	8008a78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e05c      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a78:	4b11      	ldr	r3, [pc, #68]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d0f0      	beq.n	8008a66 <HAL_RCC_OscConfig+0x416>
 8008a84:	e054      	b.n	8008b30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a86:	4b10      	ldr	r3, [pc, #64]	; (8008ac8 <HAL_RCC_OscConfig+0x478>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a8c:	f7fb fbb6 	bl	80041fc <HAL_GetTick>
 8008a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a92:	e008      	b.n	8008aa6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a94:	f7fb fbb2 	bl	80041fc <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	d901      	bls.n	8008aa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e045      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008aa6:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <HAL_RCC_OscConfig+0x470>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1f0      	bne.n	8008a94 <HAL_RCC_OscConfig+0x444>
 8008ab2:	e03d      	b.n	8008b30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d107      	bne.n	8008acc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e038      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
 8008ac0:	40023800 	.word	0x40023800
 8008ac4:	40007000 	.word	0x40007000
 8008ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008acc:	4b1b      	ldr	r3, [pc, #108]	; (8008b3c <HAL_RCC_OscConfig+0x4ec>)
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d028      	beq.n	8008b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d121      	bne.n	8008b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d11a      	bne.n	8008b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008afc:	4013      	ands	r3, r2
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d111      	bne.n	8008b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b12:	085b      	lsrs	r3, r3, #1
 8008b14:	3b01      	subs	r3, #1
 8008b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d107      	bne.n	8008b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d001      	beq.n	8008b30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e000      	b.n	8008b32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	40023800 	.word	0x40023800

08008b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d101      	bne.n	8008b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e0cc      	b.n	8008cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b54:	4b68      	ldr	r3, [pc, #416]	; (8008cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 030f 	and.w	r3, r3, #15
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d90c      	bls.n	8008b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b62:	4b65      	ldr	r3, [pc, #404]	; (8008cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8008b64:	683a      	ldr	r2, [r7, #0]
 8008b66:	b2d2      	uxtb	r2, r2
 8008b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b6a:	4b63      	ldr	r3, [pc, #396]	; (8008cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 030f 	and.w	r3, r3, #15
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d001      	beq.n	8008b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e0b8      	b.n	8008cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0302 	and.w	r3, r3, #2
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d020      	beq.n	8008bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0304 	and.w	r3, r3, #4
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d005      	beq.n	8008ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b94:	4b59      	ldr	r3, [pc, #356]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	4a58      	ldr	r2, [pc, #352]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008b9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 0308 	and.w	r3, r3, #8
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d005      	beq.n	8008bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008bac:	4b53      	ldr	r3, [pc, #332]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	4a52      	ldr	r2, [pc, #328]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008bb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bb8:	4b50      	ldr	r3, [pc, #320]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	494d      	ldr	r1, [pc, #308]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d044      	beq.n	8008c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d107      	bne.n	8008bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008bde:	4b47      	ldr	r3, [pc, #284]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d119      	bne.n	8008c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e07f      	b.n	8008cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d003      	beq.n	8008bfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008bfa:	2b03      	cmp	r3, #3
 8008bfc:	d107      	bne.n	8008c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008bfe:	4b3f      	ldr	r3, [pc, #252]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d109      	bne.n	8008c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e06f      	b.n	8008cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c0e:	4b3b      	ldr	r3, [pc, #236]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 0302 	and.w	r3, r3, #2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d101      	bne.n	8008c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e067      	b.n	8008cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c1e:	4b37      	ldr	r3, [pc, #220]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	f023 0203 	bic.w	r2, r3, #3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	4934      	ldr	r1, [pc, #208]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c30:	f7fb fae4 	bl	80041fc <HAL_GetTick>
 8008c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c36:	e00a      	b.n	8008c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c38:	f7fb fae0 	bl	80041fc <HAL_GetTick>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d901      	bls.n	8008c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e04f      	b.n	8008cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c4e:	4b2b      	ldr	r3, [pc, #172]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f003 020c 	and.w	r2, r3, #12
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d1eb      	bne.n	8008c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c60:	4b25      	ldr	r3, [pc, #148]	; (8008cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 030f 	and.w	r3, r3, #15
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d20c      	bcs.n	8008c88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c6e:	4b22      	ldr	r3, [pc, #136]	; (8008cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8008c70:	683a      	ldr	r2, [r7, #0]
 8008c72:	b2d2      	uxtb	r2, r2
 8008c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c76:	4b20      	ldr	r3, [pc, #128]	; (8008cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 030f 	and.w	r3, r3, #15
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d001      	beq.n	8008c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e032      	b.n	8008cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 0304 	and.w	r3, r3, #4
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d008      	beq.n	8008ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c94:	4b19      	ldr	r3, [pc, #100]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	4916      	ldr	r1, [pc, #88]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0308 	and.w	r3, r3, #8
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d009      	beq.n	8008cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008cb2:	4b12      	ldr	r3, [pc, #72]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	490e      	ldr	r1, [pc, #56]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008cc6:	f000 f821 	bl	8008d0c <HAL_RCC_GetSysClockFreq>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	4b0b      	ldr	r3, [pc, #44]	; (8008cfc <HAL_RCC_ClockConfig+0x1bc>)
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	091b      	lsrs	r3, r3, #4
 8008cd2:	f003 030f 	and.w	r3, r3, #15
 8008cd6:	490a      	ldr	r1, [pc, #40]	; (8008d00 <HAL_RCC_ClockConfig+0x1c0>)
 8008cd8:	5ccb      	ldrb	r3, [r1, r3]
 8008cda:	fa22 f303 	lsr.w	r3, r2, r3
 8008cde:	4a09      	ldr	r2, [pc, #36]	; (8008d04 <HAL_RCC_ClockConfig+0x1c4>)
 8008ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008ce2:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <HAL_RCC_ClockConfig+0x1c8>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7f9 ff58 	bl	8002b9c <HAL_InitTick>

  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	40023c00 	.word	0x40023c00
 8008cfc:	40023800 	.word	0x40023800
 8008d00:	080811d4 	.word	0x080811d4
 8008d04:	20000000 	.word	0x20000000
 8008d08:	2000004c 	.word	0x2000004c

08008d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d10:	b094      	sub	sp, #80	; 0x50
 8008d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008d14:	2300      	movs	r3, #0
 8008d16:	647b      	str	r3, [r7, #68]	; 0x44
 8008d18:	2300      	movs	r3, #0
 8008d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d24:	4b79      	ldr	r3, [pc, #484]	; (8008f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f003 030c 	and.w	r3, r3, #12
 8008d2c:	2b08      	cmp	r3, #8
 8008d2e:	d00d      	beq.n	8008d4c <HAL_RCC_GetSysClockFreq+0x40>
 8008d30:	2b08      	cmp	r3, #8
 8008d32:	f200 80e1 	bhi.w	8008ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d002      	beq.n	8008d40 <HAL_RCC_GetSysClockFreq+0x34>
 8008d3a:	2b04      	cmp	r3, #4
 8008d3c:	d003      	beq.n	8008d46 <HAL_RCC_GetSysClockFreq+0x3a>
 8008d3e:	e0db      	b.n	8008ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d40:	4b73      	ldr	r3, [pc, #460]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8008d42:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008d44:	e0db      	b.n	8008efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d46:	4b73      	ldr	r3, [pc, #460]	; (8008f14 <HAL_RCC_GetSysClockFreq+0x208>)
 8008d48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008d4a:	e0d8      	b.n	8008efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d4c:	4b6f      	ldr	r3, [pc, #444]	; (8008f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d54:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d56:	4b6d      	ldr	r3, [pc, #436]	; (8008f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d063      	beq.n	8008e2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d62:	4b6a      	ldr	r3, [pc, #424]	; (8008f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	099b      	lsrs	r3, r3, #6
 8008d68:	2200      	movs	r2, #0
 8008d6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d6c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d74:	633b      	str	r3, [r7, #48]	; 0x30
 8008d76:	2300      	movs	r3, #0
 8008d78:	637b      	str	r3, [r7, #52]	; 0x34
 8008d7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008d7e:	4622      	mov	r2, r4
 8008d80:	462b      	mov	r3, r5
 8008d82:	f04f 0000 	mov.w	r0, #0
 8008d86:	f04f 0100 	mov.w	r1, #0
 8008d8a:	0159      	lsls	r1, r3, #5
 8008d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d90:	0150      	lsls	r0, r2, #5
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	4621      	mov	r1, r4
 8008d98:	1a51      	subs	r1, r2, r1
 8008d9a:	6139      	str	r1, [r7, #16]
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8008da2:	617b      	str	r3, [r7, #20]
 8008da4:	f04f 0200 	mov.w	r2, #0
 8008da8:	f04f 0300 	mov.w	r3, #0
 8008dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008db0:	4659      	mov	r1, fp
 8008db2:	018b      	lsls	r3, r1, #6
 8008db4:	4651      	mov	r1, sl
 8008db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008dba:	4651      	mov	r1, sl
 8008dbc:	018a      	lsls	r2, r1, #6
 8008dbe:	4651      	mov	r1, sl
 8008dc0:	ebb2 0801 	subs.w	r8, r2, r1
 8008dc4:	4659      	mov	r1, fp
 8008dc6:	eb63 0901 	sbc.w	r9, r3, r1
 8008dca:	f04f 0200 	mov.w	r2, #0
 8008dce:	f04f 0300 	mov.w	r3, #0
 8008dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008dde:	4690      	mov	r8, r2
 8008de0:	4699      	mov	r9, r3
 8008de2:	4623      	mov	r3, r4
 8008de4:	eb18 0303 	adds.w	r3, r8, r3
 8008de8:	60bb      	str	r3, [r7, #8]
 8008dea:	462b      	mov	r3, r5
 8008dec:	eb49 0303 	adc.w	r3, r9, r3
 8008df0:	60fb      	str	r3, [r7, #12]
 8008df2:	f04f 0200 	mov.w	r2, #0
 8008df6:	f04f 0300 	mov.w	r3, #0
 8008dfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008dfe:	4629      	mov	r1, r5
 8008e00:	024b      	lsls	r3, r1, #9
 8008e02:	4621      	mov	r1, r4
 8008e04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008e08:	4621      	mov	r1, r4
 8008e0a:	024a      	lsls	r2, r1, #9
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	4619      	mov	r1, r3
 8008e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e12:	2200      	movs	r2, #0
 8008e14:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e1c:	f7f7 fecc 	bl	8000bb8 <__aeabi_uldivmod>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4613      	mov	r3, r2
 8008e26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e28:	e058      	b.n	8008edc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e2a:	4b38      	ldr	r3, [pc, #224]	; (8008f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	099b      	lsrs	r3, r3, #6
 8008e30:	2200      	movs	r2, #0
 8008e32:	4618      	mov	r0, r3
 8008e34:	4611      	mov	r1, r2
 8008e36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008e3a:	623b      	str	r3, [r7, #32]
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008e44:	4642      	mov	r2, r8
 8008e46:	464b      	mov	r3, r9
 8008e48:	f04f 0000 	mov.w	r0, #0
 8008e4c:	f04f 0100 	mov.w	r1, #0
 8008e50:	0159      	lsls	r1, r3, #5
 8008e52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e56:	0150      	lsls	r0, r2, #5
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	4641      	mov	r1, r8
 8008e5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008e62:	4649      	mov	r1, r9
 8008e64:	eb63 0b01 	sbc.w	fp, r3, r1
 8008e68:	f04f 0200 	mov.w	r2, #0
 8008e6c:	f04f 0300 	mov.w	r3, #0
 8008e70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008e74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008e78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008e7c:	ebb2 040a 	subs.w	r4, r2, sl
 8008e80:	eb63 050b 	sbc.w	r5, r3, fp
 8008e84:	f04f 0200 	mov.w	r2, #0
 8008e88:	f04f 0300 	mov.w	r3, #0
 8008e8c:	00eb      	lsls	r3, r5, #3
 8008e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e92:	00e2      	lsls	r2, r4, #3
 8008e94:	4614      	mov	r4, r2
 8008e96:	461d      	mov	r5, r3
 8008e98:	4643      	mov	r3, r8
 8008e9a:	18e3      	adds	r3, r4, r3
 8008e9c:	603b      	str	r3, [r7, #0]
 8008e9e:	464b      	mov	r3, r9
 8008ea0:	eb45 0303 	adc.w	r3, r5, r3
 8008ea4:	607b      	str	r3, [r7, #4]
 8008ea6:	f04f 0200 	mov.w	r2, #0
 8008eaa:	f04f 0300 	mov.w	r3, #0
 8008eae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	028b      	lsls	r3, r1, #10
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	028a      	lsls	r2, r1, #10
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	61bb      	str	r3, [r7, #24]
 8008eca:	61fa      	str	r2, [r7, #28]
 8008ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ed0:	f7f7 fe72 	bl	8000bb8 <__aeabi_uldivmod>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	460b      	mov	r3, r1
 8008ed8:	4613      	mov	r3, r2
 8008eda:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008edc:	4b0b      	ldr	r3, [pc, #44]	; (8008f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	0c1b      	lsrs	r3, r3, #16
 8008ee2:	f003 0303 	and.w	r3, r3, #3
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008eec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008ef6:	e002      	b.n	8008efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ef8:	4b05      	ldr	r3, [pc, #20]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8008efa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008efe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3750      	adds	r7, #80	; 0x50
 8008f04:	46bd      	mov	sp, r7
 8008f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f0a:	bf00      	nop
 8008f0c:	40023800 	.word	0x40023800
 8008f10:	00f42400 	.word	0x00f42400
 8008f14:	007a1200 	.word	0x007a1200

08008f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f1c:	4b03      	ldr	r3, [pc, #12]	; (8008f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	20000000 	.word	0x20000000

08008f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f34:	f7ff fff0 	bl	8008f18 <HAL_RCC_GetHCLKFreq>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	4b05      	ldr	r3, [pc, #20]	; (8008f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	0a9b      	lsrs	r3, r3, #10
 8008f40:	f003 0307 	and.w	r3, r3, #7
 8008f44:	4903      	ldr	r1, [pc, #12]	; (8008f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f46:	5ccb      	ldrb	r3, [r1, r3]
 8008f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	40023800 	.word	0x40023800
 8008f54:	080811e4 	.word	0x080811e4

08008f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f5c:	f7ff ffdc 	bl	8008f18 <HAL_RCC_GetHCLKFreq>
 8008f60:	4602      	mov	r2, r0
 8008f62:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f64:	689b      	ldr	r3, [r3, #8]
 8008f66:	0b5b      	lsrs	r3, r3, #13
 8008f68:	f003 0307 	and.w	r3, r3, #7
 8008f6c:	4903      	ldr	r1, [pc, #12]	; (8008f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f6e:	5ccb      	ldrb	r3, [r1, r3]
 8008f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	40023800 	.word	0x40023800
 8008f7c:	080811e4 	.word	0x080811e4

08008f80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	220f      	movs	r2, #15
 8008f8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008f90:	4b12      	ldr	r3, [pc, #72]	; (8008fdc <HAL_RCC_GetClockConfig+0x5c>)
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f003 0203 	and.w	r2, r3, #3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008f9c:	4b0f      	ldr	r3, [pc, #60]	; (8008fdc <HAL_RCC_GetClockConfig+0x5c>)
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008fa8:	4b0c      	ldr	r3, [pc, #48]	; (8008fdc <HAL_RCC_GetClockConfig+0x5c>)
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008fb4:	4b09      	ldr	r3, [pc, #36]	; (8008fdc <HAL_RCC_GetClockConfig+0x5c>)
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	08db      	lsrs	r3, r3, #3
 8008fba:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008fc2:	4b07      	ldr	r3, [pc, #28]	; (8008fe0 <HAL_RCC_GetClockConfig+0x60>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 020f 	and.w	r2, r3, #15
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	601a      	str	r2, [r3, #0]
}
 8008fce:	bf00      	nop
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	40023800 	.word	0x40023800
 8008fe0:	40023c00 	.word	0x40023c00

08008fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10b      	bne.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009008:	2b00      	cmp	r3, #0
 800900a:	d105      	bne.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009014:	2b00      	cmp	r3, #0
 8009016:	d075      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009018:	4b91      	ldr	r3, [pc, #580]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800901a:	2200      	movs	r2, #0
 800901c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800901e:	f7fb f8ed 	bl	80041fc <HAL_GetTick>
 8009022:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009024:	e008      	b.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009026:	f7fb f8e9 	bl	80041fc <HAL_GetTick>
 800902a:	4602      	mov	r2, r0
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	2b02      	cmp	r3, #2
 8009032:	d901      	bls.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e189      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009038:	4b8a      	ldr	r3, [pc, #552]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1f0      	bne.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0301 	and.w	r3, r3, #1
 800904c:	2b00      	cmp	r3, #0
 800904e:	d009      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	019a      	lsls	r2, r3, #6
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	071b      	lsls	r3, r3, #28
 800905c:	4981      	ldr	r1, [pc, #516]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800905e:	4313      	orrs	r3, r2
 8009060:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0302 	and.w	r3, r3, #2
 800906c:	2b00      	cmp	r3, #0
 800906e:	d01f      	beq.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009070:	4b7c      	ldr	r3, [pc, #496]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009076:	0f1b      	lsrs	r3, r3, #28
 8009078:	f003 0307 	and.w	r3, r3, #7
 800907c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	019a      	lsls	r2, r3, #6
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	061b      	lsls	r3, r3, #24
 800908a:	431a      	orrs	r2, r3
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	071b      	lsls	r3, r3, #28
 8009090:	4974      	ldr	r1, [pc, #464]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009092:	4313      	orrs	r3, r2
 8009094:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009098:	4b72      	ldr	r3, [pc, #456]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800909a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800909e:	f023 021f 	bic.w	r2, r3, #31
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	496e      	ldr	r1, [pc, #440]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090aa:	4313      	orrs	r3, r2
 80090ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00d      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	019a      	lsls	r2, r3, #6
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	061b      	lsls	r3, r3, #24
 80090c8:	431a      	orrs	r2, r3
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	071b      	lsls	r3, r3, #28
 80090d0:	4964      	ldr	r1, [pc, #400]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090d2:	4313      	orrs	r3, r2
 80090d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80090d8:	4b61      	ldr	r3, [pc, #388]	; (8009260 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80090da:	2201      	movs	r2, #1
 80090dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80090de:	f7fb f88d 	bl	80041fc <HAL_GetTick>
 80090e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80090e4:	e008      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80090e6:	f7fb f889 	bl	80041fc <HAL_GetTick>
 80090ea:	4602      	mov	r2, r0
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	1ad3      	subs	r3, r2, r3
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d901      	bls.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e129      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80090f8:	4b5a      	ldr	r3, [pc, #360]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009100:	2b00      	cmp	r3, #0
 8009102:	d0f0      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0304 	and.w	r3, r3, #4
 800910c:	2b00      	cmp	r3, #0
 800910e:	d105      	bne.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009118:	2b00      	cmp	r3, #0
 800911a:	d079      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800911c:	4b52      	ldr	r3, [pc, #328]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800911e:	2200      	movs	r2, #0
 8009120:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009122:	f7fb f86b 	bl	80041fc <HAL_GetTick>
 8009126:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009128:	e008      	b.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800912a:	f7fb f867 	bl	80041fc <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	2b02      	cmp	r3, #2
 8009136:	d901      	bls.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	e107      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800913c:	4b49      	ldr	r3, [pc, #292]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009148:	d0ef      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 0304 	and.w	r3, r3, #4
 8009152:	2b00      	cmp	r3, #0
 8009154:	d020      	beq.n	8009198 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009156:	4b43      	ldr	r3, [pc, #268]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800915c:	0f1b      	lsrs	r3, r3, #28
 800915e:	f003 0307 	and.w	r3, r3, #7
 8009162:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	019a      	lsls	r2, r3, #6
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	695b      	ldr	r3, [r3, #20]
 800916e:	061b      	lsls	r3, r3, #24
 8009170:	431a      	orrs	r2, r3
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	071b      	lsls	r3, r3, #28
 8009176:	493b      	ldr	r1, [pc, #236]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009178:	4313      	orrs	r3, r2
 800917a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800917e:	4b39      	ldr	r3, [pc, #228]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009184:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	3b01      	subs	r3, #1
 800918e:	021b      	lsls	r3, r3, #8
 8009190:	4934      	ldr	r1, [pc, #208]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009192:	4313      	orrs	r3, r2
 8009194:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0308 	and.w	r3, r3, #8
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d01e      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80091a4:	4b2f      	ldr	r3, [pc, #188]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091aa:	0e1b      	lsrs	r3, r3, #24
 80091ac:	f003 030f 	and.w	r3, r3, #15
 80091b0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	019a      	lsls	r2, r3, #6
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	061b      	lsls	r3, r3, #24
 80091bc:	431a      	orrs	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	071b      	lsls	r3, r3, #28
 80091c4:	4927      	ldr	r1, [pc, #156]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091c6:	4313      	orrs	r3, r2
 80091c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80091cc:	4b25      	ldr	r3, [pc, #148]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091da:	4922      	ldr	r1, [pc, #136]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80091dc:	4313      	orrs	r3, r2
 80091de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80091e2:	4b21      	ldr	r3, [pc, #132]	; (8009268 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80091e4:	2201      	movs	r2, #1
 80091e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80091e8:	f7fb f808 	bl	80041fc <HAL_GetTick>
 80091ec:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80091ee:	e008      	b.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80091f0:	f7fb f804 	bl	80041fc <HAL_GetTick>
 80091f4:	4602      	mov	r2, r0
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	2b02      	cmp	r3, #2
 80091fc:	d901      	bls.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	e0a4      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009202:	4b18      	ldr	r3, [pc, #96]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800920a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800920e:	d1ef      	bne.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0320 	and.w	r3, r3, #32
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 808b 	beq.w	8009334 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]
 8009222:	4b10      	ldr	r3, [pc, #64]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009226:	4a0f      	ldr	r2, [pc, #60]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800922c:	6413      	str	r3, [r2, #64]	; 0x40
 800922e:	4b0d      	ldr	r3, [pc, #52]	; (8009264 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009236:	60fb      	str	r3, [r7, #12]
 8009238:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800923a:	4b0c      	ldr	r3, [pc, #48]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a0b      	ldr	r2, [pc, #44]	; (800926c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009244:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009246:	f7fa ffd9 	bl	80041fc <HAL_GetTick>
 800924a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800924c:	e010      	b.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800924e:	f7fa ffd5 	bl	80041fc <HAL_GetTick>
 8009252:	4602      	mov	r2, r0
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	2b02      	cmp	r3, #2
 800925a:	d909      	bls.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e075      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8009260:	42470068 	.word	0x42470068
 8009264:	40023800 	.word	0x40023800
 8009268:	42470070 	.word	0x42470070
 800926c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009270:	4b38      	ldr	r3, [pc, #224]	; (8009354 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009278:	2b00      	cmp	r3, #0
 800927a:	d0e8      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800927c:	4b36      	ldr	r3, [pc, #216]	; (8009358 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800927e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009284:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d02f      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x308>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	429a      	cmp	r2, r3
 8009298:	d028      	beq.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800929a:	4b2f      	ldr	r3, [pc, #188]	; (8009358 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800929c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092a2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80092a4:	4b2d      	ldr	r3, [pc, #180]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80092a6:	2201      	movs	r2, #1
 80092a8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80092aa:	4b2c      	ldr	r3, [pc, #176]	; (800935c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80092b0:	4a29      	ldr	r2, [pc, #164]	; (8009358 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80092b6:	4b28      	ldr	r3, [pc, #160]	; (8009358 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80092b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ba:	f003 0301 	and.w	r3, r3, #1
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d114      	bne.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80092c2:	f7fa ff9b 	bl	80041fc <HAL_GetTick>
 80092c6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092c8:	e00a      	b.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092ca:	f7fa ff97 	bl	80041fc <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d8:	4293      	cmp	r3, r2
 80092da:	d901      	bls.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e035      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092e0:	4b1d      	ldr	r3, [pc, #116]	; (8009358 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80092e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d0ee      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092f8:	d10d      	bne.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80092fa:	4b17      	ldr	r3, [pc, #92]	; (8009358 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009306:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800930a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800930e:	4912      	ldr	r1, [pc, #72]	; (8009358 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009310:	4313      	orrs	r3, r2
 8009312:	608b      	str	r3, [r1, #8]
 8009314:	e005      	b.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8009316:	4b10      	ldr	r3, [pc, #64]	; (8009358 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	4a0f      	ldr	r2, [pc, #60]	; (8009358 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800931c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009320:	6093      	str	r3, [r2, #8]
 8009322:	4b0d      	ldr	r3, [pc, #52]	; (8009358 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009324:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800932e:	490a      	ldr	r1, [pc, #40]	; (8009358 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009330:	4313      	orrs	r3, r2
 8009332:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 0310 	and.w	r3, r3, #16
 800933c:	2b00      	cmp	r3, #0
 800933e:	d004      	beq.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009346:	4b06      	ldr	r3, [pc, #24]	; (8009360 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8009348:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3718      	adds	r7, #24
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	40007000 	.word	0x40007000
 8009358:	40023800 	.word	0x40023800
 800935c:	42470e40 	.word	0x42470e40
 8009360:	424711e0 	.word	0x424711e0

08009364 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e025      	b.n	80093c4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b00      	cmp	r3, #0
 8009382:	d106      	bne.n	8009392 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7f9 fbfb 	bl	8002b88 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2202      	movs	r2, #2
 8009396:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	3304      	adds	r3, #4
 80093a2:	4619      	mov	r1, r3
 80093a4:	4610      	mov	r0, r2
 80093a6:	f002 f975 	bl	800b694 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6818      	ldr	r0, [r3, #0]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	461a      	mov	r2, r3
 80093b4:	6839      	ldr	r1, [r7, #0]
 80093b6:	f002 f9ca 	bl	800b74e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2201      	movs	r2, #1
 80093be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093de:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d101      	bne.n	80093ea <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80093e6:	2302      	movs	r3, #2
 80093e8:	e021      	b.n	800942e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d002      	beq.n	80093f6 <HAL_SDRAM_SendCommand+0x2a>
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	2b05      	cmp	r3, #5
 80093f4:	d118      	bne.n	8009428 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2202      	movs	r2, #2
 80093fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	68b9      	ldr	r1, [r7, #8]
 8009406:	4618      	mov	r0, r3
 8009408:	f002 fa0a 	bl	800b820 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2b02      	cmp	r3, #2
 8009412:	d104      	bne.n	800941e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2205      	movs	r2, #5
 8009418:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800941c:	e006      	b.n	800942c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009426:	e001      	b.n	800942c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009428:	2301      	movs	r3, #1
 800942a:	e000      	b.n	800942e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b082      	sub	sp, #8
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009446:	b2db      	uxtb	r3, r3
 8009448:	2b02      	cmp	r3, #2
 800944a:	d101      	bne.n	8009450 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800944c:	2302      	movs	r3, #2
 800944e:	e016      	b.n	800947e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b01      	cmp	r3, #1
 800945a:	d10f      	bne.n	800947c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2202      	movs	r2, #2
 8009460:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	6839      	ldr	r1, [r7, #0]
 800946a:	4618      	mov	r0, r3
 800946c:	f002 fa15 	bl	800b89a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	e000      	b.n	800947e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
}
 800947e:	4618      	mov	r0, r3
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b082      	sub	sp, #8
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d101      	bne.n	8009498 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	e07b      	b.n	8009590 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949c:	2b00      	cmp	r3, #0
 800949e:	d108      	bne.n	80094b2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094a8:	d009      	beq.n	80094be <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	61da      	str	r2, [r3, #28]
 80094b0:	e005      	b.n	80094be <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d106      	bne.n	80094de <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f7f9 f9a7 	bl	800282c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2202      	movs	r2, #2
 80094e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009506:	431a      	orrs	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009510:	431a      	orrs	r2, r3
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	f003 0302 	and.w	r3, r3, #2
 800951a:	431a      	orrs	r2, r3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	f003 0301 	and.w	r3, r3, #1
 8009524:	431a      	orrs	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800952e:	431a      	orrs	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	69db      	ldr	r3, [r3, #28]
 8009534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009538:	431a      	orrs	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009542:	ea42 0103 	orr.w	r1, r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800954a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	430a      	orrs	r2, r1
 8009554:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	0c1b      	lsrs	r3, r3, #16
 800955c:	f003 0104 	and.w	r1, r3, #4
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009564:	f003 0210 	and.w	r2, r3, #16
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	430a      	orrs	r2, r1
 800956e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	69da      	ldr	r2, [r3, #28]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800957e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2201      	movs	r2, #1
 800958a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d101      	bne.n	80095aa <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e01a      	b.n	80095e0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2202      	movs	r2, #2
 80095ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095c0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f7f9 f97a 	bl	80028bc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3708      	adds	r7, #8
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b088      	sub	sp, #32
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	603b      	str	r3, [r7, #0]
 80095f4:	4613      	mov	r3, r2
 80095f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009602:	2b01      	cmp	r3, #1
 8009604:	d101      	bne.n	800960a <HAL_SPI_Transmit+0x22>
 8009606:	2302      	movs	r3, #2
 8009608:	e126      	b.n	8009858 <HAL_SPI_Transmit+0x270>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009612:	f7fa fdf3 	bl	80041fc <HAL_GetTick>
 8009616:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009618:	88fb      	ldrh	r3, [r7, #6]
 800961a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b01      	cmp	r3, #1
 8009626:	d002      	beq.n	800962e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009628:	2302      	movs	r3, #2
 800962a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800962c:	e10b      	b.n	8009846 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <HAL_SPI_Transmit+0x52>
 8009634:	88fb      	ldrh	r3, [r7, #6]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d102      	bne.n	8009640 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800963e:	e102      	b.n	8009846 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2203      	movs	r2, #3
 8009644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2200      	movs	r2, #0
 800964c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	88fa      	ldrh	r2, [r7, #6]
 8009658:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	88fa      	ldrh	r2, [r7, #6]
 800965e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2200      	movs	r2, #0
 8009664:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2200      	movs	r2, #0
 800966a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009686:	d10f      	bne.n	80096a8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009696:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096b2:	2b40      	cmp	r3, #64	; 0x40
 80096b4:	d007      	beq.n	80096c6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096ce:	d14b      	bne.n	8009768 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d002      	beq.n	80096de <HAL_SPI_Transmit+0xf6>
 80096d8:	8afb      	ldrh	r3, [r7, #22]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d13e      	bne.n	800975c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e2:	881a      	ldrh	r2, [r3, #0]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ee:	1c9a      	adds	r2, r3, #2
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	3b01      	subs	r3, #1
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009702:	e02b      	b.n	800975c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f003 0302 	and.w	r3, r3, #2
 800970e:	2b02      	cmp	r3, #2
 8009710:	d112      	bne.n	8009738 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009716:	881a      	ldrh	r2, [r3, #0]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009722:	1c9a      	adds	r2, r3, #2
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800972c:	b29b      	uxth	r3, r3
 800972e:	3b01      	subs	r3, #1
 8009730:	b29a      	uxth	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	86da      	strh	r2, [r3, #54]	; 0x36
 8009736:	e011      	b.n	800975c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009738:	f7fa fd60 	bl	80041fc <HAL_GetTick>
 800973c:	4602      	mov	r2, r0
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	683a      	ldr	r2, [r7, #0]
 8009744:	429a      	cmp	r2, r3
 8009746:	d803      	bhi.n	8009750 <HAL_SPI_Transmit+0x168>
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800974e:	d102      	bne.n	8009756 <HAL_SPI_Transmit+0x16e>
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d102      	bne.n	800975c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	77fb      	strb	r3, [r7, #31]
          goto error;
 800975a:	e074      	b.n	8009846 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009760:	b29b      	uxth	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d1ce      	bne.n	8009704 <HAL_SPI_Transmit+0x11c>
 8009766:	e04c      	b.n	8009802 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <HAL_SPI_Transmit+0x18e>
 8009770:	8afb      	ldrh	r3, [r7, #22]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d140      	bne.n	80097f8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	330c      	adds	r3, #12
 8009780:	7812      	ldrb	r2, [r2, #0]
 8009782:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009788:	1c5a      	adds	r2, r3, #1
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009792:	b29b      	uxth	r3, r3
 8009794:	3b01      	subs	r3, #1
 8009796:	b29a      	uxth	r2, r3
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800979c:	e02c      	b.n	80097f8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	f003 0302 	and.w	r3, r3, #2
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d113      	bne.n	80097d4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	330c      	adds	r3, #12
 80097b6:	7812      	ldrb	r2, [r2, #0]
 80097b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097be:	1c5a      	adds	r2, r3, #1
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097c8:	b29b      	uxth	r3, r3
 80097ca:	3b01      	subs	r3, #1
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80097d2:	e011      	b.n	80097f8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097d4:	f7fa fd12 	bl	80041fc <HAL_GetTick>
 80097d8:	4602      	mov	r2, r0
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	683a      	ldr	r2, [r7, #0]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d803      	bhi.n	80097ec <HAL_SPI_Transmit+0x204>
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097ea:	d102      	bne.n	80097f2 <HAL_SPI_Transmit+0x20a>
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d102      	bne.n	80097f8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80097f6:	e026      	b.n	8009846 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1cd      	bne.n	800979e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009802:	69ba      	ldr	r2, [r7, #24]
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f000 fbda 	bl	8009fc0 <SPI_EndRxTxTransaction>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d002      	beq.n	8009818 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2220      	movs	r2, #32
 8009816:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10a      	bne.n	8009836 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009820:	2300      	movs	r3, #0
 8009822:	613b      	str	r3, [r7, #16]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	613b      	str	r3, [r7, #16]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	613b      	str	r3, [r7, #16]
 8009834:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983a:	2b00      	cmp	r3, #0
 800983c:	d002      	beq.n	8009844 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	77fb      	strb	r3, [r7, #31]
 8009842:	e000      	b.n	8009846 <HAL_SPI_Transmit+0x25e>
  }

error:
 8009844:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2201      	movs	r2, #1
 800984a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009856:	7ffb      	ldrb	r3, [r7, #31]
}
 8009858:	4618      	mov	r0, r3
 800985a:	3720      	adds	r7, #32
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b088      	sub	sp, #32
 8009864:	af02      	add	r7, sp, #8
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	603b      	str	r3, [r7, #0]
 800986c:	4613      	mov	r3, r2
 800986e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800987c:	d112      	bne.n	80098a4 <HAL_SPI_Receive+0x44>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10e      	bne.n	80098a4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2204      	movs	r2, #4
 800988a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800988e:	88fa      	ldrh	r2, [r7, #6]
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	4613      	mov	r3, r2
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	68b9      	ldr	r1, [r7, #8]
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f000 f8f1 	bl	8009a82 <HAL_SPI_TransmitReceive>
 80098a0:	4603      	mov	r3, r0
 80098a2:	e0ea      	b.n	8009a7a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d101      	bne.n	80098b2 <HAL_SPI_Receive+0x52>
 80098ae:	2302      	movs	r3, #2
 80098b0:	e0e3      	b.n	8009a7a <HAL_SPI_Receive+0x21a>
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098ba:	f7fa fc9f 	bl	80041fc <HAL_GetTick>
 80098be:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d002      	beq.n	80098d2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80098cc:	2302      	movs	r3, #2
 80098ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80098d0:	e0ca      	b.n	8009a68 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d002      	beq.n	80098de <HAL_SPI_Receive+0x7e>
 80098d8:	88fb      	ldrh	r3, [r7, #6]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d102      	bne.n	80098e4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80098e2:	e0c1      	b.n	8009a68 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	2204      	movs	r2, #4
 80098e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	2200      	movs	r2, #0
 80098f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	88fa      	ldrh	r2, [r7, #6]
 80098fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	88fa      	ldrh	r2, [r7, #6]
 8009902:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2200      	movs	r2, #0
 800990e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2200      	movs	r2, #0
 800991a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2200      	movs	r2, #0
 8009920:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800992a:	d10f      	bne.n	800994c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800993a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800994a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009956:	2b40      	cmp	r3, #64	; 0x40
 8009958:	d007      	beq.n	800996a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009968:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d162      	bne.n	8009a38 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009972:	e02e      	b.n	80099d2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	2b01      	cmp	r3, #1
 8009980:	d115      	bne.n	80099ae <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f103 020c 	add.w	r2, r3, #12
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998e:	7812      	ldrb	r2, [r2, #0]
 8009990:	b2d2      	uxtb	r2, r2
 8009992:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009998:	1c5a      	adds	r2, r3, #1
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	3b01      	subs	r3, #1
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80099ac:	e011      	b.n	80099d2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099ae:	f7fa fc25 	bl	80041fc <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d803      	bhi.n	80099c6 <HAL_SPI_Receive+0x166>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099c4:	d102      	bne.n	80099cc <HAL_SPI_Receive+0x16c>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d102      	bne.n	80099d2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80099cc:	2303      	movs	r3, #3
 80099ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80099d0:	e04a      	b.n	8009a68 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1cb      	bne.n	8009974 <HAL_SPI_Receive+0x114>
 80099dc:	e031      	b.n	8009a42 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	f003 0301 	and.w	r3, r3, #1
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d113      	bne.n	8009a14 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68da      	ldr	r2, [r3, #12]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f6:	b292      	uxth	r2, r2
 80099f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fe:	1c9a      	adds	r2, r3, #2
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009a12:	e011      	b.n	8009a38 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a14:	f7fa fbf2 	bl	80041fc <HAL_GetTick>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d803      	bhi.n	8009a2c <HAL_SPI_Receive+0x1cc>
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a2a:	d102      	bne.n	8009a32 <HAL_SPI_Receive+0x1d2>
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d102      	bne.n	8009a38 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8009a32:	2303      	movs	r3, #3
 8009a34:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009a36:	e017      	b.n	8009a68 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1cd      	bne.n	80099de <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f000 fa54 	bl	8009ef4 <SPI_EndRxTransaction>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d002      	beq.n	8009a58 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2220      	movs	r2, #32
 8009a56:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d002      	beq.n	8009a66 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	75fb      	strb	r3, [r7, #23]
 8009a64:	e000      	b.n	8009a68 <HAL_SPI_Receive+0x208>
  }

error :
 8009a66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3718      	adds	r7, #24
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b08c      	sub	sp, #48	; 0x30
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	60f8      	str	r0, [r7, #12]
 8009a8a:	60b9      	str	r1, [r7, #8]
 8009a8c:	607a      	str	r2, [r7, #4]
 8009a8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009a90:	2301      	movs	r3, #1
 8009a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009a94:	2300      	movs	r3, #0
 8009a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d101      	bne.n	8009aa8 <HAL_SPI_TransmitReceive+0x26>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e18a      	b.n	8009dbe <HAL_SPI_TransmitReceive+0x33c>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ab0:	f7fa fba4 	bl	80041fc <HAL_GetTick>
 8009ab4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009ac6:	887b      	ldrh	r3, [r7, #2]
 8009ac8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009aca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d00f      	beq.n	8009af2 <HAL_SPI_TransmitReceive+0x70>
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ad8:	d107      	bne.n	8009aea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	689b      	ldr	r3, [r3, #8]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d103      	bne.n	8009aea <HAL_SPI_TransmitReceive+0x68>
 8009ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009ae6:	2b04      	cmp	r3, #4
 8009ae8:	d003      	beq.n	8009af2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009aea:	2302      	movs	r3, #2
 8009aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009af0:	e15b      	b.n	8009daa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d005      	beq.n	8009b04 <HAL_SPI_TransmitReceive+0x82>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <HAL_SPI_TransmitReceive+0x82>
 8009afe:	887b      	ldrh	r3, [r7, #2]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d103      	bne.n	8009b0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009b0a:	e14e      	b.n	8009daa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2b04      	cmp	r3, #4
 8009b16:	d003      	beq.n	8009b20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2205      	movs	r2, #5
 8009b1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2200      	movs	r2, #0
 8009b24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	887a      	ldrh	r2, [r7, #2]
 8009b30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	887a      	ldrh	r2, [r7, #2]
 8009b36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	68ba      	ldr	r2, [r7, #8]
 8009b3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	887a      	ldrh	r2, [r7, #2]
 8009b42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	887a      	ldrh	r2, [r7, #2]
 8009b48:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b60:	2b40      	cmp	r3, #64	; 0x40
 8009b62:	d007      	beq.n	8009b74 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b7c:	d178      	bne.n	8009c70 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d002      	beq.n	8009b8c <HAL_SPI_TransmitReceive+0x10a>
 8009b86:	8b7b      	ldrh	r3, [r7, #26]
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d166      	bne.n	8009c5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b90:	881a      	ldrh	r2, [r3, #0]
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9c:	1c9a      	adds	r2, r3, #2
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bb0:	e053      	b.n	8009c5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f003 0302 	and.w	r3, r3, #2
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d11b      	bne.n	8009bf8 <HAL_SPI_TransmitReceive+0x176>
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d016      	beq.n	8009bf8 <HAL_SPI_TransmitReceive+0x176>
 8009bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d113      	bne.n	8009bf8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd4:	881a      	ldrh	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be0:	1c9a      	adds	r2, r3, #2
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	3b01      	subs	r3, #1
 8009bee:	b29a      	uxth	r2, r3
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d119      	bne.n	8009c3a <HAL_SPI_TransmitReceive+0x1b8>
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d014      	beq.n	8009c3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68da      	ldr	r2, [r3, #12]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1a:	b292      	uxth	r2, r2
 8009c1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c22:	1c9a      	adds	r2, r3, #2
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c36:	2301      	movs	r3, #1
 8009c38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009c3a:	f7fa fadf 	bl	80041fc <HAL_GetTick>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d807      	bhi.n	8009c5a <HAL_SPI_TransmitReceive+0x1d8>
 8009c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c50:	d003      	beq.n	8009c5a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009c58:	e0a7      	b.n	8009daa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1a6      	bne.n	8009bb2 <HAL_SPI_TransmitReceive+0x130>
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1a1      	bne.n	8009bb2 <HAL_SPI_TransmitReceive+0x130>
 8009c6e:	e07c      	b.n	8009d6a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <HAL_SPI_TransmitReceive+0x1fc>
 8009c78:	8b7b      	ldrh	r3, [r7, #26]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d16b      	bne.n	8009d56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	330c      	adds	r3, #12
 8009c88:	7812      	ldrb	r2, [r2, #0]
 8009c8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c90:	1c5a      	adds	r2, r3, #1
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	b29a      	uxth	r2, r3
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ca4:	e057      	b.n	8009d56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f003 0302 	and.w	r3, r3, #2
 8009cb0:	2b02      	cmp	r3, #2
 8009cb2:	d11c      	bne.n	8009cee <HAL_SPI_TransmitReceive+0x26c>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d017      	beq.n	8009cee <HAL_SPI_TransmitReceive+0x26c>
 8009cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d114      	bne.n	8009cee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	330c      	adds	r3, #12
 8009cce:	7812      	ldrb	r2, [r2, #0]
 8009cd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd6:	1c5a      	adds	r2, r3, #1
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d119      	bne.n	8009d30 <HAL_SPI_TransmitReceive+0x2ae>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d014      	beq.n	8009d30 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68da      	ldr	r2, [r3, #12]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d10:	b2d2      	uxtb	r2, r2
 8009d12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d18:	1c5a      	adds	r2, r3, #1
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	3b01      	subs	r3, #1
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009d30:	f7fa fa64 	bl	80041fc <HAL_GetTick>
 8009d34:	4602      	mov	r2, r0
 8009d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d803      	bhi.n	8009d48 <HAL_SPI_TransmitReceive+0x2c6>
 8009d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d46:	d102      	bne.n	8009d4e <HAL_SPI_TransmitReceive+0x2cc>
 8009d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d103      	bne.n	8009d56 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009d54:	e029      	b.n	8009daa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1a2      	bne.n	8009ca6 <HAL_SPI_TransmitReceive+0x224>
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d64:	b29b      	uxth	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d19d      	bne.n	8009ca6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f000 f926 	bl	8009fc0 <SPI_EndRxTxTransaction>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d006      	beq.n	8009d88 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2220      	movs	r2, #32
 8009d84:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009d86:	e010      	b.n	8009daa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10b      	bne.n	8009da8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d90:	2300      	movs	r3, #0
 8009d92:	617b      	str	r3, [r7, #20]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	617b      	str	r3, [r7, #20]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	617b      	str	r3, [r7, #20]
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	e000      	b.n	8009daa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009da8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009dba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3730      	adds	r7, #48	; 0x30
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009dc6:	b480      	push	{r7}
 8009dc8:	b083      	sub	sp, #12
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009dd4:	b2db      	uxtb	r3, r3
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	370c      	adds	r7, #12
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
	...

08009de4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b088      	sub	sp, #32
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	603b      	str	r3, [r7, #0]
 8009df0:	4613      	mov	r3, r2
 8009df2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009df4:	f7fa fa02 	bl	80041fc <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfc:	1a9b      	subs	r3, r3, r2
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	4413      	add	r3, r2
 8009e02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009e04:	f7fa f9fa 	bl	80041fc <HAL_GetTick>
 8009e08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009e0a:	4b39      	ldr	r3, [pc, #228]	; (8009ef0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	015b      	lsls	r3, r3, #5
 8009e10:	0d1b      	lsrs	r3, r3, #20
 8009e12:	69fa      	ldr	r2, [r7, #28]
 8009e14:	fb02 f303 	mul.w	r3, r2, r3
 8009e18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e1a:	e054      	b.n	8009ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e22:	d050      	beq.n	8009ec6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e24:	f7fa f9ea 	bl	80041fc <HAL_GetTick>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	69fa      	ldr	r2, [r7, #28]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d902      	bls.n	8009e3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d13d      	bne.n	8009eb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e52:	d111      	bne.n	8009e78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e5c:	d004      	beq.n	8009e68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e66:	d107      	bne.n	8009e78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e80:	d10f      	bne.n	8009ea2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ea0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e017      	b.n	8009ee6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d101      	bne.n	8009ec0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009ec0:	697b      	ldr	r3, [r7, #20]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689a      	ldr	r2, [r3, #8]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	4013      	ands	r3, r2
 8009ed0:	68ba      	ldr	r2, [r7, #8]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	bf0c      	ite	eq
 8009ed6:	2301      	moveq	r3, #1
 8009ed8:	2300      	movne	r3, #0
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	461a      	mov	r2, r3
 8009ede:	79fb      	ldrb	r3, [r7, #7]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d19b      	bne.n	8009e1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3720      	adds	r7, #32
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20000000 	.word	0x20000000

08009ef4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af02      	add	r7, sp, #8
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f08:	d111      	bne.n	8009f2e <SPI_EndRxTransaction+0x3a>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f12:	d004      	beq.n	8009f1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f1c:	d107      	bne.n	8009f2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f2c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f36:	d12a      	bne.n	8009f8e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f40:	d012      	beq.n	8009f68 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	2180      	movs	r1, #128	; 0x80
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7ff ff49 	bl	8009de4 <SPI_WaitFlagStateUntilTimeout>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d02d      	beq.n	8009fb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f5c:	f043 0220 	orr.w	r2, r3, #32
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e026      	b.n	8009fb6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	2101      	movs	r1, #1
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f7ff ff36 	bl	8009de4 <SPI_WaitFlagStateUntilTimeout>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d01a      	beq.n	8009fb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f82:	f043 0220 	orr.w	r2, r3, #32
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	e013      	b.n	8009fb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2200      	movs	r2, #0
 8009f96:	2101      	movs	r1, #1
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f7ff ff23 	bl	8009de4 <SPI_WaitFlagStateUntilTimeout>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d007      	beq.n	8009fb4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fa8:	f043 0220 	orr.w	r2, r3, #32
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	e000      	b.n	8009fb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b088      	sub	sp, #32
 8009fc4:	af02      	add	r7, sp, #8
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009fcc:	4b1b      	ldr	r3, [pc, #108]	; (800a03c <SPI_EndRxTxTransaction+0x7c>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a1b      	ldr	r2, [pc, #108]	; (800a040 <SPI_EndRxTxTransaction+0x80>)
 8009fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd6:	0d5b      	lsrs	r3, r3, #21
 8009fd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009fdc:	fb02 f303 	mul.w	r3, r2, r3
 8009fe0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fea:	d112      	bne.n	800a012 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	9300      	str	r3, [sp, #0]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2180      	movs	r1, #128	; 0x80
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f7ff fef4 	bl	8009de4 <SPI_WaitFlagStateUntilTimeout>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d016      	beq.n	800a030 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a006:	f043 0220 	orr.w	r2, r3, #32
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a00e:	2303      	movs	r3, #3
 800a010:	e00f      	b.n	800a032 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d00a      	beq.n	800a02e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	3b01      	subs	r3, #1
 800a01c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a028:	2b80      	cmp	r3, #128	; 0x80
 800a02a:	d0f2      	beq.n	800a012 <SPI_EndRxTxTransaction+0x52>
 800a02c:	e000      	b.n	800a030 <SPI_EndRxTxTransaction+0x70>
        break;
 800a02e:	bf00      	nop
  }

  return HAL_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3718      	adds	r7, #24
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	20000000 	.word	0x20000000
 800a040:	165e9f81 	.word	0x165e9f81

0800a044 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	e041      	b.n	800a0da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d106      	bne.n	800a070 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7f8 fc44 	bl	80028f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2202      	movs	r2, #2
 800a074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3304      	adds	r3, #4
 800a080:	4619      	mov	r1, r3
 800a082:	4610      	mov	r0, r2
 800a084:	f000 fca4 	bl	800a9d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3708      	adds	r7, #8
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}
	...

0800a0e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b085      	sub	sp, #20
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d001      	beq.n	800a0fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e046      	b.n	800a18a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2202      	movs	r2, #2
 800a100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a23      	ldr	r2, [pc, #140]	; (800a198 <HAL_TIM_Base_Start+0xb4>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d022      	beq.n	800a154 <HAL_TIM_Base_Start+0x70>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a116:	d01d      	beq.n	800a154 <HAL_TIM_Base_Start+0x70>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a1f      	ldr	r2, [pc, #124]	; (800a19c <HAL_TIM_Base_Start+0xb8>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d018      	beq.n	800a154 <HAL_TIM_Base_Start+0x70>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a1e      	ldr	r2, [pc, #120]	; (800a1a0 <HAL_TIM_Base_Start+0xbc>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d013      	beq.n	800a154 <HAL_TIM_Base_Start+0x70>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a1c      	ldr	r2, [pc, #112]	; (800a1a4 <HAL_TIM_Base_Start+0xc0>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d00e      	beq.n	800a154 <HAL_TIM_Base_Start+0x70>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a1b      	ldr	r2, [pc, #108]	; (800a1a8 <HAL_TIM_Base_Start+0xc4>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d009      	beq.n	800a154 <HAL_TIM_Base_Start+0x70>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a19      	ldr	r2, [pc, #100]	; (800a1ac <HAL_TIM_Base_Start+0xc8>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d004      	beq.n	800a154 <HAL_TIM_Base_Start+0x70>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a18      	ldr	r2, [pc, #96]	; (800a1b0 <HAL_TIM_Base_Start+0xcc>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d111      	bne.n	800a178 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	f003 0307 	and.w	r3, r3, #7
 800a15e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2b06      	cmp	r3, #6
 800a164:	d010      	beq.n	800a188 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f042 0201 	orr.w	r2, r2, #1
 800a174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a176:	e007      	b.n	800a188 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f042 0201 	orr.w	r2, r2, #1
 800a186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a188:	2300      	movs	r3, #0
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	40010000 	.word	0x40010000
 800a19c:	40000400 	.word	0x40000400
 800a1a0:	40000800 	.word	0x40000800
 800a1a4:	40000c00 	.word	0x40000c00
 800a1a8:	40010400 	.word	0x40010400
 800a1ac:	40014000 	.word	0x40014000
 800a1b0:	40001800 	.word	0x40001800

0800a1b4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6a1a      	ldr	r2, [r3, #32]
 800a1c2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10f      	bne.n	800a1ec <HAL_TIM_Base_Stop+0x38>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	6a1a      	ldr	r2, [r3, #32]
 800a1d2:	f240 4344 	movw	r3, #1092	; 0x444
 800a1d6:	4013      	ands	r3, r2
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d107      	bne.n	800a1ec <HAL_TIM_Base_Stop+0x38>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f022 0201 	bic.w	r2, r2, #1
 800a1ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
	...

0800a204 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a204:	b480      	push	{r7}
 800a206:	b085      	sub	sp, #20
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a212:	b2db      	uxtb	r3, r3
 800a214:	2b01      	cmp	r3, #1
 800a216:	d001      	beq.n	800a21c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	e04e      	b.n	800a2ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2202      	movs	r2, #2
 800a220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68da      	ldr	r2, [r3, #12]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f042 0201 	orr.w	r2, r2, #1
 800a232:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a23      	ldr	r2, [pc, #140]	; (800a2c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d022      	beq.n	800a284 <HAL_TIM_Base_Start_IT+0x80>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a246:	d01d      	beq.n	800a284 <HAL_TIM_Base_Start_IT+0x80>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4a1f      	ldr	r2, [pc, #124]	; (800a2cc <HAL_TIM_Base_Start_IT+0xc8>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d018      	beq.n	800a284 <HAL_TIM_Base_Start_IT+0x80>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a1e      	ldr	r2, [pc, #120]	; (800a2d0 <HAL_TIM_Base_Start_IT+0xcc>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d013      	beq.n	800a284 <HAL_TIM_Base_Start_IT+0x80>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a1c      	ldr	r2, [pc, #112]	; (800a2d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d00e      	beq.n	800a284 <HAL_TIM_Base_Start_IT+0x80>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a1b      	ldr	r2, [pc, #108]	; (800a2d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d009      	beq.n	800a284 <HAL_TIM_Base_Start_IT+0x80>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a19      	ldr	r2, [pc, #100]	; (800a2dc <HAL_TIM_Base_Start_IT+0xd8>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d004      	beq.n	800a284 <HAL_TIM_Base_Start_IT+0x80>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4a18      	ldr	r2, [pc, #96]	; (800a2e0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d111      	bne.n	800a2a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	f003 0307 	and.w	r3, r3, #7
 800a28e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2b06      	cmp	r3, #6
 800a294:	d010      	beq.n	800a2b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f042 0201 	orr.w	r2, r2, #1
 800a2a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2a6:	e007      	b.n	800a2b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f042 0201 	orr.w	r2, r2, #1
 800a2b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3714      	adds	r7, #20
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	40010000 	.word	0x40010000
 800a2cc:	40000400 	.word	0x40000400
 800a2d0:	40000800 	.word	0x40000800
 800a2d4:	40000c00 	.word	0x40000c00
 800a2d8:	40010400 	.word	0x40010400
 800a2dc:	40014000 	.word	0x40014000
 800a2e0:	40001800 	.word	0x40001800

0800a2e4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d101      	bne.n	800a2f6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	e041      	b.n	800a37a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2fc:	b2db      	uxtb	r3, r3
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d106      	bne.n	800a310 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f839 	bl	800a382 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2202      	movs	r2, #2
 800a314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	3304      	adds	r3, #4
 800a320:	4619      	mov	r1, r3
 800a322:	4610      	mov	r0, r2
 800a324:	f000 fb54 	bl	800a9d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3708      	adds	r7, #8
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a382:	b480      	push	{r7}
 800a384:	b083      	sub	sp, #12
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a38a:	bf00      	nop
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
	...

0800a398 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d109      	bne.n	800a3bc <HAL_TIM_OC_Start+0x24>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	bf14      	ite	ne
 800a3b4:	2301      	movne	r3, #1
 800a3b6:	2300      	moveq	r3, #0
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	e022      	b.n	800a402 <HAL_TIM_OC_Start+0x6a>
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	2b04      	cmp	r3, #4
 800a3c0:	d109      	bne.n	800a3d6 <HAL_TIM_OC_Start+0x3e>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	bf14      	ite	ne
 800a3ce:	2301      	movne	r3, #1
 800a3d0:	2300      	moveq	r3, #0
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	e015      	b.n	800a402 <HAL_TIM_OC_Start+0x6a>
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	2b08      	cmp	r3, #8
 800a3da:	d109      	bne.n	800a3f0 <HAL_TIM_OC_Start+0x58>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	bf14      	ite	ne
 800a3e8:	2301      	movne	r3, #1
 800a3ea:	2300      	moveq	r3, #0
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	e008      	b.n	800a402 <HAL_TIM_OC_Start+0x6a>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	2b01      	cmp	r3, #1
 800a3fa:	bf14      	ite	ne
 800a3fc:	2301      	movne	r3, #1
 800a3fe:	2300      	moveq	r3, #0
 800a400:	b2db      	uxtb	r3, r3
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e07c      	b.n	800a504 <HAL_TIM_OC_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d104      	bne.n	800a41a <HAL_TIM_OC_Start+0x82>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2202      	movs	r2, #2
 800a414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a418:	e013      	b.n	800a442 <HAL_TIM_OC_Start+0xaa>
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	2b04      	cmp	r3, #4
 800a41e:	d104      	bne.n	800a42a <HAL_TIM_OC_Start+0x92>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2202      	movs	r2, #2
 800a424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a428:	e00b      	b.n	800a442 <HAL_TIM_OC_Start+0xaa>
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b08      	cmp	r3, #8
 800a42e:	d104      	bne.n	800a43a <HAL_TIM_OC_Start+0xa2>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2202      	movs	r2, #2
 800a434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a438:	e003      	b.n	800a442 <HAL_TIM_OC_Start+0xaa>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2202      	movs	r2, #2
 800a43e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2201      	movs	r2, #1
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	4618      	mov	r0, r3
 800a44c:	f000 fdaa 	bl	800afa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a2d      	ldr	r2, [pc, #180]	; (800a50c <HAL_TIM_OC_Start+0x174>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d004      	beq.n	800a464 <HAL_TIM_OC_Start+0xcc>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a2c      	ldr	r2, [pc, #176]	; (800a510 <HAL_TIM_OC_Start+0x178>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d101      	bne.n	800a468 <HAL_TIM_OC_Start+0xd0>
 800a464:	2301      	movs	r3, #1
 800a466:	e000      	b.n	800a46a <HAL_TIM_OC_Start+0xd2>
 800a468:	2300      	movs	r3, #0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d007      	beq.n	800a47e <HAL_TIM_OC_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a47c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a22      	ldr	r2, [pc, #136]	; (800a50c <HAL_TIM_OC_Start+0x174>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d022      	beq.n	800a4ce <HAL_TIM_OC_Start+0x136>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a490:	d01d      	beq.n	800a4ce <HAL_TIM_OC_Start+0x136>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a1f      	ldr	r2, [pc, #124]	; (800a514 <HAL_TIM_OC_Start+0x17c>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d018      	beq.n	800a4ce <HAL_TIM_OC_Start+0x136>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a1d      	ldr	r2, [pc, #116]	; (800a518 <HAL_TIM_OC_Start+0x180>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d013      	beq.n	800a4ce <HAL_TIM_OC_Start+0x136>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a1c      	ldr	r2, [pc, #112]	; (800a51c <HAL_TIM_OC_Start+0x184>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d00e      	beq.n	800a4ce <HAL_TIM_OC_Start+0x136>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a16      	ldr	r2, [pc, #88]	; (800a510 <HAL_TIM_OC_Start+0x178>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d009      	beq.n	800a4ce <HAL_TIM_OC_Start+0x136>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a18      	ldr	r2, [pc, #96]	; (800a520 <HAL_TIM_OC_Start+0x188>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d004      	beq.n	800a4ce <HAL_TIM_OC_Start+0x136>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a16      	ldr	r2, [pc, #88]	; (800a524 <HAL_TIM_OC_Start+0x18c>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d111      	bne.n	800a4f2 <HAL_TIM_OC_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f003 0307 	and.w	r3, r3, #7
 800a4d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2b06      	cmp	r3, #6
 800a4de:	d010      	beq.n	800a502 <HAL_TIM_OC_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f042 0201 	orr.w	r2, r2, #1
 800a4ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a4f0:	e007      	b.n	800a502 <HAL_TIM_OC_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f042 0201 	orr.w	r2, r2, #1
 800a500:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	40010000 	.word	0x40010000
 800a510:	40010400 	.word	0x40010400
 800a514:	40000400 	.word	0x40000400
 800a518:	40000800 	.word	0x40000800
 800a51c:	40000c00 	.word	0x40000c00
 800a520:	40014000 	.word	0x40014000
 800a524:	40001800 	.word	0x40001800

0800a528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d122      	bne.n	800a584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	f003 0302 	and.w	r3, r3, #2
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d11b      	bne.n	800a584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f06f 0202 	mvn.w	r2, #2
 800a554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	f003 0303 	and.w	r3, r3, #3
 800a566:	2b00      	cmp	r3, #0
 800a568:	d003      	beq.n	800a572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fa11 	bl	800a992 <HAL_TIM_IC_CaptureCallback>
 800a570:	e005      	b.n	800a57e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 fa03 	bl	800a97e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 fa14 	bl	800a9a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	f003 0304 	and.w	r3, r3, #4
 800a58e:	2b04      	cmp	r3, #4
 800a590:	d122      	bne.n	800a5d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	f003 0304 	and.w	r3, r3, #4
 800a59c:	2b04      	cmp	r3, #4
 800a59e:	d11b      	bne.n	800a5d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f06f 0204 	mvn.w	r2, #4
 800a5a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2202      	movs	r2, #2
 800a5ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	699b      	ldr	r3, [r3, #24]
 800a5b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d003      	beq.n	800a5c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f000 f9e7 	bl	800a992 <HAL_TIM_IC_CaptureCallback>
 800a5c4:	e005      	b.n	800a5d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 f9d9 	bl	800a97e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f9ea 	bl	800a9a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	691b      	ldr	r3, [r3, #16]
 800a5de:	f003 0308 	and.w	r3, r3, #8
 800a5e2:	2b08      	cmp	r3, #8
 800a5e4:	d122      	bne.n	800a62c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	f003 0308 	and.w	r3, r3, #8
 800a5f0:	2b08      	cmp	r3, #8
 800a5f2:	d11b      	bne.n	800a62c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f06f 0208 	mvn.w	r2, #8
 800a5fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2204      	movs	r2, #4
 800a602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	f003 0303 	and.w	r3, r3, #3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f9bd 	bl	800a992 <HAL_TIM_IC_CaptureCallback>
 800a618:	e005      	b.n	800a626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 f9af 	bl	800a97e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 f9c0 	bl	800a9a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	f003 0310 	and.w	r3, r3, #16
 800a636:	2b10      	cmp	r3, #16
 800a638:	d122      	bne.n	800a680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	f003 0310 	and.w	r3, r3, #16
 800a644:	2b10      	cmp	r3, #16
 800a646:	d11b      	bne.n	800a680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f06f 0210 	mvn.w	r2, #16
 800a650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2208      	movs	r2, #8
 800a656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	69db      	ldr	r3, [r3, #28]
 800a65e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a662:	2b00      	cmp	r3, #0
 800a664:	d003      	beq.n	800a66e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f000 f993 	bl	800a992 <HAL_TIM_IC_CaptureCallback>
 800a66c:	e005      	b.n	800a67a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 f985 	bl	800a97e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 f996 	bl	800a9a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	f003 0301 	and.w	r3, r3, #1
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d10e      	bne.n	800a6ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d107      	bne.n	800a6ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f06f 0201 	mvn.w	r2, #1
 800a6a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f7f7 fe1c 	bl	80022e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6b6:	2b80      	cmp	r3, #128	; 0x80
 800a6b8:	d10e      	bne.n	800a6d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6c4:	2b80      	cmp	r3, #128	; 0x80
 800a6c6:	d107      	bne.n	800a6d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a6d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 fd12 	bl	800b0fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6e2:	2b40      	cmp	r3, #64	; 0x40
 800a6e4:	d10e      	bne.n	800a704 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6f0:	2b40      	cmp	r3, #64	; 0x40
 800a6f2:	d107      	bne.n	800a704 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a6fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 f95b 	bl	800a9ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	f003 0320 	and.w	r3, r3, #32
 800a70e:	2b20      	cmp	r3, #32
 800a710:	d10e      	bne.n	800a730 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	f003 0320 	and.w	r3, r3, #32
 800a71c:	2b20      	cmp	r3, #32
 800a71e:	d107      	bne.n	800a730 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f06f 0220 	mvn.w	r2, #32
 800a728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fcdc 	bl	800b0e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a730:	bf00      	nop
 800a732:	3708      	adds	r7, #8
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}

0800a738 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b086      	sub	sp, #24
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a744:	2300      	movs	r3, #0
 800a746:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d101      	bne.n	800a756 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a752:	2302      	movs	r3, #2
 800a754:	e048      	b.n	800a7e8 <HAL_TIM_OC_ConfigChannel+0xb0>
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2201      	movs	r2, #1
 800a75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2b0c      	cmp	r3, #12
 800a762:	d839      	bhi.n	800a7d8 <HAL_TIM_OC_ConfigChannel+0xa0>
 800a764:	a201      	add	r2, pc, #4	; (adr r2, 800a76c <HAL_TIM_OC_ConfigChannel+0x34>)
 800a766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76a:	bf00      	nop
 800a76c:	0800a7a1 	.word	0x0800a7a1
 800a770:	0800a7d9 	.word	0x0800a7d9
 800a774:	0800a7d9 	.word	0x0800a7d9
 800a778:	0800a7d9 	.word	0x0800a7d9
 800a77c:	0800a7af 	.word	0x0800a7af
 800a780:	0800a7d9 	.word	0x0800a7d9
 800a784:	0800a7d9 	.word	0x0800a7d9
 800a788:	0800a7d9 	.word	0x0800a7d9
 800a78c:	0800a7bd 	.word	0x0800a7bd
 800a790:	0800a7d9 	.word	0x0800a7d9
 800a794:	0800a7d9 	.word	0x0800a7d9
 800a798:	0800a7d9 	.word	0x0800a7d9
 800a79c:	0800a7cb 	.word	0x0800a7cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68b9      	ldr	r1, [r7, #8]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 f9b2 	bl	800ab10 <TIM_OC1_SetConfig>
      break;
 800a7ac:	e017      	b.n	800a7de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68b9      	ldr	r1, [r7, #8]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f000 fa1b 	bl	800abf0 <TIM_OC2_SetConfig>
      break;
 800a7ba:	e010      	b.n	800a7de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	68b9      	ldr	r1, [r7, #8]
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f000 fa8a 	bl	800acdc <TIM_OC3_SetConfig>
      break;
 800a7c8:	e009      	b.n	800a7de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	68b9      	ldr	r1, [r7, #8]
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f000 faf7 	bl	800adc4 <TIM_OC4_SetConfig>
      break;
 800a7d6:	e002      	b.n	800a7de <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	75fb      	strb	r3, [r7, #23]
      break;
 800a7dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a804:	2b01      	cmp	r3, #1
 800a806:	d101      	bne.n	800a80c <HAL_TIM_ConfigClockSource+0x1c>
 800a808:	2302      	movs	r3, #2
 800a80a:	e0b4      	b.n	800a976 <HAL_TIM_ConfigClockSource+0x186>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2202      	movs	r2, #2
 800a818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a82a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a832:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68ba      	ldr	r2, [r7, #8]
 800a83a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a844:	d03e      	beq.n	800a8c4 <HAL_TIM_ConfigClockSource+0xd4>
 800a846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a84a:	f200 8087 	bhi.w	800a95c <HAL_TIM_ConfigClockSource+0x16c>
 800a84e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a852:	f000 8086 	beq.w	800a962 <HAL_TIM_ConfigClockSource+0x172>
 800a856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a85a:	d87f      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x16c>
 800a85c:	2b70      	cmp	r3, #112	; 0x70
 800a85e:	d01a      	beq.n	800a896 <HAL_TIM_ConfigClockSource+0xa6>
 800a860:	2b70      	cmp	r3, #112	; 0x70
 800a862:	d87b      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x16c>
 800a864:	2b60      	cmp	r3, #96	; 0x60
 800a866:	d050      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x11a>
 800a868:	2b60      	cmp	r3, #96	; 0x60
 800a86a:	d877      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x16c>
 800a86c:	2b50      	cmp	r3, #80	; 0x50
 800a86e:	d03c      	beq.n	800a8ea <HAL_TIM_ConfigClockSource+0xfa>
 800a870:	2b50      	cmp	r3, #80	; 0x50
 800a872:	d873      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x16c>
 800a874:	2b40      	cmp	r3, #64	; 0x40
 800a876:	d058      	beq.n	800a92a <HAL_TIM_ConfigClockSource+0x13a>
 800a878:	2b40      	cmp	r3, #64	; 0x40
 800a87a:	d86f      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x16c>
 800a87c:	2b30      	cmp	r3, #48	; 0x30
 800a87e:	d064      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x15a>
 800a880:	2b30      	cmp	r3, #48	; 0x30
 800a882:	d86b      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x16c>
 800a884:	2b20      	cmp	r3, #32
 800a886:	d060      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x15a>
 800a888:	2b20      	cmp	r3, #32
 800a88a:	d867      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x16c>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d05c      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x15a>
 800a890:	2b10      	cmp	r3, #16
 800a892:	d05a      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x15a>
 800a894:	e062      	b.n	800a95c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6818      	ldr	r0, [r3, #0]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	6899      	ldr	r1, [r3, #8]
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	f000 fb5d 	bl	800af64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a8b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	609a      	str	r2, [r3, #8]
      break;
 800a8c2:	e04f      	b.n	800a964 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6818      	ldr	r0, [r3, #0]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	6899      	ldr	r1, [r3, #8]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	685a      	ldr	r2, [r3, #4]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	f000 fb46 	bl	800af64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689a      	ldr	r2, [r3, #8]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a8e6:	609a      	str	r2, [r3, #8]
      break;
 800a8e8:	e03c      	b.n	800a964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6818      	ldr	r0, [r3, #0]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	6859      	ldr	r1, [r3, #4]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	f000 faba 	bl	800ae70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2150      	movs	r1, #80	; 0x50
 800a902:	4618      	mov	r0, r3
 800a904:	f000 fb13 	bl	800af2e <TIM_ITRx_SetConfig>
      break;
 800a908:	e02c      	b.n	800a964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6818      	ldr	r0, [r3, #0]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	6859      	ldr	r1, [r3, #4]
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	461a      	mov	r2, r3
 800a918:	f000 fad9 	bl	800aece <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2160      	movs	r1, #96	; 0x60
 800a922:	4618      	mov	r0, r3
 800a924:	f000 fb03 	bl	800af2e <TIM_ITRx_SetConfig>
      break;
 800a928:	e01c      	b.n	800a964 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6818      	ldr	r0, [r3, #0]
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	6859      	ldr	r1, [r3, #4]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	461a      	mov	r2, r3
 800a938:	f000 fa9a 	bl	800ae70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2140      	movs	r1, #64	; 0x40
 800a942:	4618      	mov	r0, r3
 800a944:	f000 faf3 	bl	800af2e <TIM_ITRx_SetConfig>
      break;
 800a948:	e00c      	b.n	800a964 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4619      	mov	r1, r3
 800a954:	4610      	mov	r0, r2
 800a956:	f000 faea 	bl	800af2e <TIM_ITRx_SetConfig>
      break;
 800a95a:	e003      	b.n	800a964 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	73fb      	strb	r3, [r7, #15]
      break;
 800a960:	e000      	b.n	800a964 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a962:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a974:	7bfb      	ldrb	r3, [r7, #15]
}
 800a976:	4618      	mov	r0, r3
 800a978:	3710      	adds	r7, #16
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}

0800a97e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a97e:	b480      	push	{r7}
 800a980:	b083      	sub	sp, #12
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a986:	bf00      	nop
 800a988:	370c      	adds	r7, #12
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a992:	b480      	push	{r7}
 800a994:	b083      	sub	sp, #12
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a99a:	bf00      	nop
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b083      	sub	sp, #12
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9ae:	bf00      	nop
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b8:	4770      	bx	lr

0800a9ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9ba:	b480      	push	{r7}
 800a9bc:	b083      	sub	sp, #12
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9c2:	bf00      	nop
 800a9c4:	370c      	adds	r7, #12
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
	...

0800a9d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4a40      	ldr	r2, [pc, #256]	; (800aae4 <TIM_Base_SetConfig+0x114>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d013      	beq.n	800aa10 <TIM_Base_SetConfig+0x40>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9ee:	d00f      	beq.n	800aa10 <TIM_Base_SetConfig+0x40>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a3d      	ldr	r2, [pc, #244]	; (800aae8 <TIM_Base_SetConfig+0x118>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d00b      	beq.n	800aa10 <TIM_Base_SetConfig+0x40>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a3c      	ldr	r2, [pc, #240]	; (800aaec <TIM_Base_SetConfig+0x11c>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d007      	beq.n	800aa10 <TIM_Base_SetConfig+0x40>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a3b      	ldr	r2, [pc, #236]	; (800aaf0 <TIM_Base_SetConfig+0x120>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d003      	beq.n	800aa10 <TIM_Base_SetConfig+0x40>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a3a      	ldr	r2, [pc, #232]	; (800aaf4 <TIM_Base_SetConfig+0x124>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d108      	bne.n	800aa22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4a2f      	ldr	r2, [pc, #188]	; (800aae4 <TIM_Base_SetConfig+0x114>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d02b      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa30:	d027      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a2c      	ldr	r2, [pc, #176]	; (800aae8 <TIM_Base_SetConfig+0x118>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d023      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4a2b      	ldr	r2, [pc, #172]	; (800aaec <TIM_Base_SetConfig+0x11c>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d01f      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a2a      	ldr	r2, [pc, #168]	; (800aaf0 <TIM_Base_SetConfig+0x120>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d01b      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a29      	ldr	r2, [pc, #164]	; (800aaf4 <TIM_Base_SetConfig+0x124>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d017      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a28      	ldr	r2, [pc, #160]	; (800aaf8 <TIM_Base_SetConfig+0x128>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d013      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a27      	ldr	r2, [pc, #156]	; (800aafc <TIM_Base_SetConfig+0x12c>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d00f      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a26      	ldr	r2, [pc, #152]	; (800ab00 <TIM_Base_SetConfig+0x130>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d00b      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a25      	ldr	r2, [pc, #148]	; (800ab04 <TIM_Base_SetConfig+0x134>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d007      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a24      	ldr	r2, [pc, #144]	; (800ab08 <TIM_Base_SetConfig+0x138>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d003      	beq.n	800aa82 <TIM_Base_SetConfig+0xb2>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a23      	ldr	r2, [pc, #140]	; (800ab0c <TIM_Base_SetConfig+0x13c>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d108      	bne.n	800aa94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	689a      	ldr	r2, [r3, #8]
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	4a0a      	ldr	r2, [pc, #40]	; (800aae4 <TIM_Base_SetConfig+0x114>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d003      	beq.n	800aac8 <TIM_Base_SetConfig+0xf8>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a0c      	ldr	r2, [pc, #48]	; (800aaf4 <TIM_Base_SetConfig+0x124>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d103      	bne.n	800aad0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	691a      	ldr	r2, [r3, #16]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	615a      	str	r2, [r3, #20]
}
 800aad6:	bf00      	nop
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	40010000 	.word	0x40010000
 800aae8:	40000400 	.word	0x40000400
 800aaec:	40000800 	.word	0x40000800
 800aaf0:	40000c00 	.word	0x40000c00
 800aaf4:	40010400 	.word	0x40010400
 800aaf8:	40014000 	.word	0x40014000
 800aafc:	40014400 	.word	0x40014400
 800ab00:	40014800 	.word	0x40014800
 800ab04:	40001800 	.word	0x40001800
 800ab08:	40001c00 	.word	0x40001c00
 800ab0c:	40002000 	.word	0x40002000

0800ab10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b087      	sub	sp, #28
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	f023 0201 	bic.w	r2, r3, #1
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	685b      	ldr	r3, [r3, #4]
 800ab30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	699b      	ldr	r3, [r3, #24]
 800ab36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f023 0303 	bic.w	r3, r3, #3
 800ab46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	f023 0302 	bic.w	r3, r3, #2
 800ab58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a20      	ldr	r2, [pc, #128]	; (800abe8 <TIM_OC1_SetConfig+0xd8>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d003      	beq.n	800ab74 <TIM_OC1_SetConfig+0x64>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a1f      	ldr	r2, [pc, #124]	; (800abec <TIM_OC1_SetConfig+0xdc>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d10c      	bne.n	800ab8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	f023 0308 	bic.w	r3, r3, #8
 800ab7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	697a      	ldr	r2, [r7, #20]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f023 0304 	bic.w	r3, r3, #4
 800ab8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	4a15      	ldr	r2, [pc, #84]	; (800abe8 <TIM_OC1_SetConfig+0xd8>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d003      	beq.n	800ab9e <TIM_OC1_SetConfig+0x8e>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a14      	ldr	r2, [pc, #80]	; (800abec <TIM_OC1_SetConfig+0xdc>)
 800ab9a:	4293      	cmp	r3, r2
 800ab9c:	d111      	bne.n	800abc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800abac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	699b      	ldr	r3, [r3, #24]
 800abbc:	693a      	ldr	r2, [r7, #16]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	693a      	ldr	r2, [r7, #16]
 800abc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	685a      	ldr	r2, [r3, #4]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	697a      	ldr	r2, [r7, #20]
 800abda:	621a      	str	r2, [r3, #32]
}
 800abdc:	bf00      	nop
 800abde:	371c      	adds	r7, #28
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr
 800abe8:	40010000 	.word	0x40010000
 800abec:	40010400 	.word	0x40010400

0800abf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6a1b      	ldr	r3, [r3, #32]
 800abfe:	f023 0210 	bic.w	r2, r3, #16
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	699b      	ldr	r3, [r3, #24]
 800ac16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	021b      	lsls	r3, r3, #8
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	4313      	orrs	r3, r2
 800ac32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	f023 0320 	bic.w	r3, r3, #32
 800ac3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	011b      	lsls	r3, r3, #4
 800ac42:	697a      	ldr	r2, [r7, #20]
 800ac44:	4313      	orrs	r3, r2
 800ac46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	4a22      	ldr	r2, [pc, #136]	; (800acd4 <TIM_OC2_SetConfig+0xe4>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d003      	beq.n	800ac58 <TIM_OC2_SetConfig+0x68>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	4a21      	ldr	r2, [pc, #132]	; (800acd8 <TIM_OC2_SetConfig+0xe8>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d10d      	bne.n	800ac74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	011b      	lsls	r3, r3, #4
 800ac66:	697a      	ldr	r2, [r7, #20]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a17      	ldr	r2, [pc, #92]	; (800acd4 <TIM_OC2_SetConfig+0xe4>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d003      	beq.n	800ac84 <TIM_OC2_SetConfig+0x94>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a16      	ldr	r2, [pc, #88]	; (800acd8 <TIM_OC2_SetConfig+0xe8>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d113      	bne.n	800acac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ac8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	695b      	ldr	r3, [r3, #20]
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	693a      	ldr	r2, [r7, #16]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	685a      	ldr	r2, [r3, #4]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	621a      	str	r2, [r3, #32]
}
 800acc6:	bf00      	nop
 800acc8:	371c      	adds	r7, #28
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	40010000 	.word	0x40010000
 800acd8:	40010400 	.word	0x40010400

0800acdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acdc:	b480      	push	{r7}
 800acde:	b087      	sub	sp, #28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a1b      	ldr	r3, [r3, #32]
 800acea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6a1b      	ldr	r3, [r3, #32]
 800acf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	685b      	ldr	r3, [r3, #4]
 800acfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	69db      	ldr	r3, [r3, #28]
 800ad02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f023 0303 	bic.w	r3, r3, #3
 800ad12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	021b      	lsls	r3, r3, #8
 800ad2c:	697a      	ldr	r2, [r7, #20]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	4a21      	ldr	r2, [pc, #132]	; (800adbc <TIM_OC3_SetConfig+0xe0>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	d003      	beq.n	800ad42 <TIM_OC3_SetConfig+0x66>
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a20      	ldr	r2, [pc, #128]	; (800adc0 <TIM_OC3_SetConfig+0xe4>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d10d      	bne.n	800ad5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ad48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	68db      	ldr	r3, [r3, #12]
 800ad4e:	021b      	lsls	r3, r3, #8
 800ad50:	697a      	ldr	r2, [r7, #20]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ad5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a16      	ldr	r2, [pc, #88]	; (800adbc <TIM_OC3_SetConfig+0xe0>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d003      	beq.n	800ad6e <TIM_OC3_SetConfig+0x92>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a15      	ldr	r2, [pc, #84]	; (800adc0 <TIM_OC3_SetConfig+0xe4>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d113      	bne.n	800ad96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	695b      	ldr	r3, [r3, #20]
 800ad82:	011b      	lsls	r3, r3, #4
 800ad84:	693a      	ldr	r2, [r7, #16]
 800ad86:	4313      	orrs	r3, r2
 800ad88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	011b      	lsls	r3, r3, #4
 800ad90:	693a      	ldr	r2, [r7, #16]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	685a      	ldr	r2, [r3, #4]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	621a      	str	r2, [r3, #32]
}
 800adb0:	bf00      	nop
 800adb2:	371c      	adds	r7, #28
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	40010000 	.word	0x40010000
 800adc0:	40010400 	.word	0x40010400

0800adc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b087      	sub	sp, #28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	69db      	ldr	r3, [r3, #28]
 800adea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	021b      	lsls	r3, r3, #8
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	4313      	orrs	r3, r2
 800ae06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ae0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	031b      	lsls	r3, r3, #12
 800ae16:	693a      	ldr	r2, [r7, #16]
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	4a12      	ldr	r2, [pc, #72]	; (800ae68 <TIM_OC4_SetConfig+0xa4>)
 800ae20:	4293      	cmp	r3, r2
 800ae22:	d003      	beq.n	800ae2c <TIM_OC4_SetConfig+0x68>
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a11      	ldr	r2, [pc, #68]	; (800ae6c <TIM_OC4_SetConfig+0xa8>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d109      	bne.n	800ae40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ae32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	695b      	ldr	r3, [r3, #20]
 800ae38:	019b      	lsls	r3, r3, #6
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	4313      	orrs	r3, r2
 800ae3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	697a      	ldr	r2, [r7, #20]
 800ae44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	685a      	ldr	r2, [r3, #4]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	621a      	str	r2, [r3, #32]
}
 800ae5a:	bf00      	nop
 800ae5c:	371c      	adds	r7, #28
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	40010000 	.word	0x40010000
 800ae6c:	40010400 	.word	0x40010400

0800ae70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b087      	sub	sp, #28
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6a1b      	ldr	r3, [r3, #32]
 800ae80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6a1b      	ldr	r3, [r3, #32]
 800ae86:	f023 0201 	bic.w	r2, r3, #1
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	699b      	ldr	r3, [r3, #24]
 800ae92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ae9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	011b      	lsls	r3, r3, #4
 800aea0:	693a      	ldr	r2, [r7, #16]
 800aea2:	4313      	orrs	r3, r2
 800aea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	f023 030a 	bic.w	r3, r3, #10
 800aeac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	693a      	ldr	r2, [r7, #16]
 800aeba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	697a      	ldr	r2, [r7, #20]
 800aec0:	621a      	str	r2, [r3, #32]
}
 800aec2:	bf00      	nop
 800aec4:	371c      	adds	r7, #28
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aece:	b480      	push	{r7}
 800aed0:	b087      	sub	sp, #28
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	60f8      	str	r0, [r7, #12]
 800aed6:	60b9      	str	r1, [r7, #8]
 800aed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6a1b      	ldr	r3, [r3, #32]
 800aede:	f023 0210 	bic.w	r2, r3, #16
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	6a1b      	ldr	r3, [r3, #32]
 800aef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aef8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	031b      	lsls	r3, r3, #12
 800aefe:	697a      	ldr	r2, [r7, #20]
 800af00:	4313      	orrs	r3, r2
 800af02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	011b      	lsls	r3, r3, #4
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	4313      	orrs	r3, r2
 800af14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	697a      	ldr	r2, [r7, #20]
 800af1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	693a      	ldr	r2, [r7, #16]
 800af20:	621a      	str	r2, [r3, #32]
}
 800af22:	bf00      	nop
 800af24:	371c      	adds	r7, #28
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af2e:	b480      	push	{r7}
 800af30:	b085      	sub	sp, #20
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
 800af36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	f043 0307 	orr.w	r3, r3, #7
 800af50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	609a      	str	r2, [r3, #8]
}
 800af58:	bf00      	nop
 800af5a:	3714      	adds	r7, #20
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800af64:	b480      	push	{r7}
 800af66:	b087      	sub	sp, #28
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
 800af70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	021a      	lsls	r2, r3, #8
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	431a      	orrs	r2, r3
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	4313      	orrs	r3, r2
 800af90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	697a      	ldr	r2, [r7, #20]
 800af96:	609a      	str	r2, [r3, #8]
}
 800af98:	bf00      	nop
 800af9a:	371c      	adds	r7, #28
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b087      	sub	sp, #28
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	60f8      	str	r0, [r7, #12]
 800afac:	60b9      	str	r1, [r7, #8]
 800afae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	f003 031f 	and.w	r3, r3, #31
 800afb6:	2201      	movs	r2, #1
 800afb8:	fa02 f303 	lsl.w	r3, r2, r3
 800afbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6a1a      	ldr	r2, [r3, #32]
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	43db      	mvns	r3, r3
 800afc6:	401a      	ands	r2, r3
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6a1a      	ldr	r2, [r3, #32]
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	f003 031f 	and.w	r3, r3, #31
 800afd6:	6879      	ldr	r1, [r7, #4]
 800afd8:	fa01 f303 	lsl.w	r3, r1, r3
 800afdc:	431a      	orrs	r2, r3
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	621a      	str	r2, [r3, #32]
}
 800afe2:	bf00      	nop
 800afe4:	371c      	adds	r7, #28
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr
	...

0800aff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b085      	sub	sp, #20
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b000:	2b01      	cmp	r3, #1
 800b002:	d101      	bne.n	800b008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b004:	2302      	movs	r3, #2
 800b006:	e05a      	b.n	800b0be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2202      	movs	r2, #2
 800b014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b02e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68fa      	ldr	r2, [r7, #12]
 800b036:	4313      	orrs	r3, r2
 800b038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a21      	ldr	r2, [pc, #132]	; (800b0cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d022      	beq.n	800b092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b054:	d01d      	beq.n	800b092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a1d      	ldr	r2, [pc, #116]	; (800b0d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d018      	beq.n	800b092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a1b      	ldr	r2, [pc, #108]	; (800b0d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d013      	beq.n	800b092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a1a      	ldr	r2, [pc, #104]	; (800b0d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d00e      	beq.n	800b092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a18      	ldr	r2, [pc, #96]	; (800b0dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d009      	beq.n	800b092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a17      	ldr	r2, [pc, #92]	; (800b0e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d004      	beq.n	800b092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a15      	ldr	r2, [pc, #84]	; (800b0e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d10c      	bne.n	800b0ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	4313      	orrs	r3, r2
 800b0a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68ba      	ldr	r2, [r7, #8]
 800b0aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	40010000 	.word	0x40010000
 800b0d0:	40000400 	.word	0x40000400
 800b0d4:	40000800 	.word	0x40000800
 800b0d8:	40000c00 	.word	0x40000c00
 800b0dc:	40010400 	.word	0x40010400
 800b0e0:	40014000 	.word	0x40014000
 800b0e4:	40001800 	.word	0x40001800

0800b0e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b0f0:	bf00      	nop
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b104:	bf00      	nop
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e03f      	b.n	800b1a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d106      	bne.n	800b13c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7f7 fc4c 	bl	80029d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2224      	movs	r2, #36	; 0x24
 800b140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	68da      	ldr	r2, [r3, #12]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f829 	bl	800b1ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	691a      	ldr	r2, [r3, #16]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	695a      	ldr	r2, [r3, #20]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	68da      	ldr	r2, [r3, #12]
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2220      	movs	r2, #32
 800b194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2220      	movs	r2, #32
 800b19c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
	...

0800b1ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1b0:	b0c0      	sub	sp, #256	; 0x100
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b1c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1c8:	68d9      	ldr	r1, [r3, #12]
 800b1ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	ea40 0301 	orr.w	r3, r0, r1
 800b1d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b1d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1da:	689a      	ldr	r2, [r3, #8]
 800b1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	431a      	orrs	r2, r3
 800b1e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1e8:	695b      	ldr	r3, [r3, #20]
 800b1ea:	431a      	orrs	r2, r3
 800b1ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1f0:	69db      	ldr	r3, [r3, #28]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68db      	ldr	r3, [r3, #12]
 800b200:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b204:	f021 010c 	bic.w	r1, r1, #12
 800b208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b212:	430b      	orrs	r3, r1
 800b214:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b226:	6999      	ldr	r1, [r3, #24]
 800b228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	ea40 0301 	orr.w	r3, r0, r1
 800b232:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	4b8f      	ldr	r3, [pc, #572]	; (800b478 <UART_SetConfig+0x2cc>)
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d005      	beq.n	800b24c <UART_SetConfig+0xa0>
 800b240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	4b8d      	ldr	r3, [pc, #564]	; (800b47c <UART_SetConfig+0x2d0>)
 800b248:	429a      	cmp	r2, r3
 800b24a:	d104      	bne.n	800b256 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b24c:	f7fd fe84 	bl	8008f58 <HAL_RCC_GetPCLK2Freq>
 800b250:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b254:	e003      	b.n	800b25e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b256:	f7fd fe6b 	bl	8008f30 <HAL_RCC_GetPCLK1Freq>
 800b25a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b25e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b262:	69db      	ldr	r3, [r3, #28]
 800b264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b268:	f040 810c 	bne.w	800b484 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b26c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b270:	2200      	movs	r2, #0
 800b272:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b276:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b27a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b27e:	4622      	mov	r2, r4
 800b280:	462b      	mov	r3, r5
 800b282:	1891      	adds	r1, r2, r2
 800b284:	65b9      	str	r1, [r7, #88]	; 0x58
 800b286:	415b      	adcs	r3, r3
 800b288:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b28a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b28e:	4621      	mov	r1, r4
 800b290:	eb12 0801 	adds.w	r8, r2, r1
 800b294:	4629      	mov	r1, r5
 800b296:	eb43 0901 	adc.w	r9, r3, r1
 800b29a:	f04f 0200 	mov.w	r2, #0
 800b29e:	f04f 0300 	mov.w	r3, #0
 800b2a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b2a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b2aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b2ae:	4690      	mov	r8, r2
 800b2b0:	4699      	mov	r9, r3
 800b2b2:	4623      	mov	r3, r4
 800b2b4:	eb18 0303 	adds.w	r3, r8, r3
 800b2b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2bc:	462b      	mov	r3, r5
 800b2be:	eb49 0303 	adc.w	r3, r9, r3
 800b2c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b2c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b2d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b2d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b2da:	460b      	mov	r3, r1
 800b2dc:	18db      	adds	r3, r3, r3
 800b2de:	653b      	str	r3, [r7, #80]	; 0x50
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	eb42 0303 	adc.w	r3, r2, r3
 800b2e6:	657b      	str	r3, [r7, #84]	; 0x54
 800b2e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b2ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b2f0:	f7f5 fc62 	bl	8000bb8 <__aeabi_uldivmod>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	4b61      	ldr	r3, [pc, #388]	; (800b480 <UART_SetConfig+0x2d4>)
 800b2fa:	fba3 2302 	umull	r2, r3, r3, r2
 800b2fe:	095b      	lsrs	r3, r3, #5
 800b300:	011c      	lsls	r4, r3, #4
 800b302:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b306:	2200      	movs	r2, #0
 800b308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b30c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b310:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b314:	4642      	mov	r2, r8
 800b316:	464b      	mov	r3, r9
 800b318:	1891      	adds	r1, r2, r2
 800b31a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b31c:	415b      	adcs	r3, r3
 800b31e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b320:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b324:	4641      	mov	r1, r8
 800b326:	eb12 0a01 	adds.w	sl, r2, r1
 800b32a:	4649      	mov	r1, r9
 800b32c:	eb43 0b01 	adc.w	fp, r3, r1
 800b330:	f04f 0200 	mov.w	r2, #0
 800b334:	f04f 0300 	mov.w	r3, #0
 800b338:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b33c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b344:	4692      	mov	sl, r2
 800b346:	469b      	mov	fp, r3
 800b348:	4643      	mov	r3, r8
 800b34a:	eb1a 0303 	adds.w	r3, sl, r3
 800b34e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b352:	464b      	mov	r3, r9
 800b354:	eb4b 0303 	adc.w	r3, fp, r3
 800b358:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b35c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	2200      	movs	r2, #0
 800b364:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b368:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b36c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b370:	460b      	mov	r3, r1
 800b372:	18db      	adds	r3, r3, r3
 800b374:	643b      	str	r3, [r7, #64]	; 0x40
 800b376:	4613      	mov	r3, r2
 800b378:	eb42 0303 	adc.w	r3, r2, r3
 800b37c:	647b      	str	r3, [r7, #68]	; 0x44
 800b37e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b382:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b386:	f7f5 fc17 	bl	8000bb8 <__aeabi_uldivmod>
 800b38a:	4602      	mov	r2, r0
 800b38c:	460b      	mov	r3, r1
 800b38e:	4611      	mov	r1, r2
 800b390:	4b3b      	ldr	r3, [pc, #236]	; (800b480 <UART_SetConfig+0x2d4>)
 800b392:	fba3 2301 	umull	r2, r3, r3, r1
 800b396:	095b      	lsrs	r3, r3, #5
 800b398:	2264      	movs	r2, #100	; 0x64
 800b39a:	fb02 f303 	mul.w	r3, r2, r3
 800b39e:	1acb      	subs	r3, r1, r3
 800b3a0:	00db      	lsls	r3, r3, #3
 800b3a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b3a6:	4b36      	ldr	r3, [pc, #216]	; (800b480 <UART_SetConfig+0x2d4>)
 800b3a8:	fba3 2302 	umull	r2, r3, r3, r2
 800b3ac:	095b      	lsrs	r3, r3, #5
 800b3ae:	005b      	lsls	r3, r3, #1
 800b3b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b3b4:	441c      	add	r4, r3
 800b3b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b3c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b3c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b3c8:	4642      	mov	r2, r8
 800b3ca:	464b      	mov	r3, r9
 800b3cc:	1891      	adds	r1, r2, r2
 800b3ce:	63b9      	str	r1, [r7, #56]	; 0x38
 800b3d0:	415b      	adcs	r3, r3
 800b3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b3d8:	4641      	mov	r1, r8
 800b3da:	1851      	adds	r1, r2, r1
 800b3dc:	6339      	str	r1, [r7, #48]	; 0x30
 800b3de:	4649      	mov	r1, r9
 800b3e0:	414b      	adcs	r3, r1
 800b3e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b3e4:	f04f 0200 	mov.w	r2, #0
 800b3e8:	f04f 0300 	mov.w	r3, #0
 800b3ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b3f0:	4659      	mov	r1, fp
 800b3f2:	00cb      	lsls	r3, r1, #3
 800b3f4:	4651      	mov	r1, sl
 800b3f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3fa:	4651      	mov	r1, sl
 800b3fc:	00ca      	lsls	r2, r1, #3
 800b3fe:	4610      	mov	r0, r2
 800b400:	4619      	mov	r1, r3
 800b402:	4603      	mov	r3, r0
 800b404:	4642      	mov	r2, r8
 800b406:	189b      	adds	r3, r3, r2
 800b408:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b40c:	464b      	mov	r3, r9
 800b40e:	460a      	mov	r2, r1
 800b410:	eb42 0303 	adc.w	r3, r2, r3
 800b414:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b424:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b428:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b42c:	460b      	mov	r3, r1
 800b42e:	18db      	adds	r3, r3, r3
 800b430:	62bb      	str	r3, [r7, #40]	; 0x28
 800b432:	4613      	mov	r3, r2
 800b434:	eb42 0303 	adc.w	r3, r2, r3
 800b438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b43a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b43e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b442:	f7f5 fbb9 	bl	8000bb8 <__aeabi_uldivmod>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	4b0d      	ldr	r3, [pc, #52]	; (800b480 <UART_SetConfig+0x2d4>)
 800b44c:	fba3 1302 	umull	r1, r3, r3, r2
 800b450:	095b      	lsrs	r3, r3, #5
 800b452:	2164      	movs	r1, #100	; 0x64
 800b454:	fb01 f303 	mul.w	r3, r1, r3
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	00db      	lsls	r3, r3, #3
 800b45c:	3332      	adds	r3, #50	; 0x32
 800b45e:	4a08      	ldr	r2, [pc, #32]	; (800b480 <UART_SetConfig+0x2d4>)
 800b460:	fba2 2303 	umull	r2, r3, r2, r3
 800b464:	095b      	lsrs	r3, r3, #5
 800b466:	f003 0207 	and.w	r2, r3, #7
 800b46a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4422      	add	r2, r4
 800b472:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b474:	e105      	b.n	800b682 <UART_SetConfig+0x4d6>
 800b476:	bf00      	nop
 800b478:	40011000 	.word	0x40011000
 800b47c:	40011400 	.word	0x40011400
 800b480:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b484:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b488:	2200      	movs	r2, #0
 800b48a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b48e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b492:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b496:	4642      	mov	r2, r8
 800b498:	464b      	mov	r3, r9
 800b49a:	1891      	adds	r1, r2, r2
 800b49c:	6239      	str	r1, [r7, #32]
 800b49e:	415b      	adcs	r3, r3
 800b4a0:	627b      	str	r3, [r7, #36]	; 0x24
 800b4a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b4a6:	4641      	mov	r1, r8
 800b4a8:	1854      	adds	r4, r2, r1
 800b4aa:	4649      	mov	r1, r9
 800b4ac:	eb43 0501 	adc.w	r5, r3, r1
 800b4b0:	f04f 0200 	mov.w	r2, #0
 800b4b4:	f04f 0300 	mov.w	r3, #0
 800b4b8:	00eb      	lsls	r3, r5, #3
 800b4ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b4be:	00e2      	lsls	r2, r4, #3
 800b4c0:	4614      	mov	r4, r2
 800b4c2:	461d      	mov	r5, r3
 800b4c4:	4643      	mov	r3, r8
 800b4c6:	18e3      	adds	r3, r4, r3
 800b4c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b4cc:	464b      	mov	r3, r9
 800b4ce:	eb45 0303 	adc.w	r3, r5, r3
 800b4d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b4d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b4e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b4e6:	f04f 0200 	mov.w	r2, #0
 800b4ea:	f04f 0300 	mov.w	r3, #0
 800b4ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b4f2:	4629      	mov	r1, r5
 800b4f4:	008b      	lsls	r3, r1, #2
 800b4f6:	4621      	mov	r1, r4
 800b4f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4fc:	4621      	mov	r1, r4
 800b4fe:	008a      	lsls	r2, r1, #2
 800b500:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b504:	f7f5 fb58 	bl	8000bb8 <__aeabi_uldivmod>
 800b508:	4602      	mov	r2, r0
 800b50a:	460b      	mov	r3, r1
 800b50c:	4b60      	ldr	r3, [pc, #384]	; (800b690 <UART_SetConfig+0x4e4>)
 800b50e:	fba3 2302 	umull	r2, r3, r3, r2
 800b512:	095b      	lsrs	r3, r3, #5
 800b514:	011c      	lsls	r4, r3, #4
 800b516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b51a:	2200      	movs	r2, #0
 800b51c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b520:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b524:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b528:	4642      	mov	r2, r8
 800b52a:	464b      	mov	r3, r9
 800b52c:	1891      	adds	r1, r2, r2
 800b52e:	61b9      	str	r1, [r7, #24]
 800b530:	415b      	adcs	r3, r3
 800b532:	61fb      	str	r3, [r7, #28]
 800b534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b538:	4641      	mov	r1, r8
 800b53a:	1851      	adds	r1, r2, r1
 800b53c:	6139      	str	r1, [r7, #16]
 800b53e:	4649      	mov	r1, r9
 800b540:	414b      	adcs	r3, r1
 800b542:	617b      	str	r3, [r7, #20]
 800b544:	f04f 0200 	mov.w	r2, #0
 800b548:	f04f 0300 	mov.w	r3, #0
 800b54c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b550:	4659      	mov	r1, fp
 800b552:	00cb      	lsls	r3, r1, #3
 800b554:	4651      	mov	r1, sl
 800b556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b55a:	4651      	mov	r1, sl
 800b55c:	00ca      	lsls	r2, r1, #3
 800b55e:	4610      	mov	r0, r2
 800b560:	4619      	mov	r1, r3
 800b562:	4603      	mov	r3, r0
 800b564:	4642      	mov	r2, r8
 800b566:	189b      	adds	r3, r3, r2
 800b568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b56c:	464b      	mov	r3, r9
 800b56e:	460a      	mov	r2, r1
 800b570:	eb42 0303 	adc.w	r3, r2, r3
 800b574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	67bb      	str	r3, [r7, #120]	; 0x78
 800b582:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b584:	f04f 0200 	mov.w	r2, #0
 800b588:	f04f 0300 	mov.w	r3, #0
 800b58c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b590:	4649      	mov	r1, r9
 800b592:	008b      	lsls	r3, r1, #2
 800b594:	4641      	mov	r1, r8
 800b596:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b59a:	4641      	mov	r1, r8
 800b59c:	008a      	lsls	r2, r1, #2
 800b59e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b5a2:	f7f5 fb09 	bl	8000bb8 <__aeabi_uldivmod>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	4b39      	ldr	r3, [pc, #228]	; (800b690 <UART_SetConfig+0x4e4>)
 800b5ac:	fba3 1302 	umull	r1, r3, r3, r2
 800b5b0:	095b      	lsrs	r3, r3, #5
 800b5b2:	2164      	movs	r1, #100	; 0x64
 800b5b4:	fb01 f303 	mul.w	r3, r1, r3
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	011b      	lsls	r3, r3, #4
 800b5bc:	3332      	adds	r3, #50	; 0x32
 800b5be:	4a34      	ldr	r2, [pc, #208]	; (800b690 <UART_SetConfig+0x4e4>)
 800b5c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b5c4:	095b      	lsrs	r3, r3, #5
 800b5c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b5ca:	441c      	add	r4, r3
 800b5cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	673b      	str	r3, [r7, #112]	; 0x70
 800b5d4:	677a      	str	r2, [r7, #116]	; 0x74
 800b5d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b5da:	4642      	mov	r2, r8
 800b5dc:	464b      	mov	r3, r9
 800b5de:	1891      	adds	r1, r2, r2
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	415b      	adcs	r3, r3
 800b5e4:	60fb      	str	r3, [r7, #12]
 800b5e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b5ea:	4641      	mov	r1, r8
 800b5ec:	1851      	adds	r1, r2, r1
 800b5ee:	6039      	str	r1, [r7, #0]
 800b5f0:	4649      	mov	r1, r9
 800b5f2:	414b      	adcs	r3, r1
 800b5f4:	607b      	str	r3, [r7, #4]
 800b5f6:	f04f 0200 	mov.w	r2, #0
 800b5fa:	f04f 0300 	mov.w	r3, #0
 800b5fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b602:	4659      	mov	r1, fp
 800b604:	00cb      	lsls	r3, r1, #3
 800b606:	4651      	mov	r1, sl
 800b608:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b60c:	4651      	mov	r1, sl
 800b60e:	00ca      	lsls	r2, r1, #3
 800b610:	4610      	mov	r0, r2
 800b612:	4619      	mov	r1, r3
 800b614:	4603      	mov	r3, r0
 800b616:	4642      	mov	r2, r8
 800b618:	189b      	adds	r3, r3, r2
 800b61a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b61c:	464b      	mov	r3, r9
 800b61e:	460a      	mov	r2, r1
 800b620:	eb42 0303 	adc.w	r3, r2, r3
 800b624:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	663b      	str	r3, [r7, #96]	; 0x60
 800b630:	667a      	str	r2, [r7, #100]	; 0x64
 800b632:	f04f 0200 	mov.w	r2, #0
 800b636:	f04f 0300 	mov.w	r3, #0
 800b63a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b63e:	4649      	mov	r1, r9
 800b640:	008b      	lsls	r3, r1, #2
 800b642:	4641      	mov	r1, r8
 800b644:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b648:	4641      	mov	r1, r8
 800b64a:	008a      	lsls	r2, r1, #2
 800b64c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b650:	f7f5 fab2 	bl	8000bb8 <__aeabi_uldivmod>
 800b654:	4602      	mov	r2, r0
 800b656:	460b      	mov	r3, r1
 800b658:	4b0d      	ldr	r3, [pc, #52]	; (800b690 <UART_SetConfig+0x4e4>)
 800b65a:	fba3 1302 	umull	r1, r3, r3, r2
 800b65e:	095b      	lsrs	r3, r3, #5
 800b660:	2164      	movs	r1, #100	; 0x64
 800b662:	fb01 f303 	mul.w	r3, r1, r3
 800b666:	1ad3      	subs	r3, r2, r3
 800b668:	011b      	lsls	r3, r3, #4
 800b66a:	3332      	adds	r3, #50	; 0x32
 800b66c:	4a08      	ldr	r2, [pc, #32]	; (800b690 <UART_SetConfig+0x4e4>)
 800b66e:	fba2 2303 	umull	r2, r3, r2, r3
 800b672:	095b      	lsrs	r3, r3, #5
 800b674:	f003 020f 	and.w	r2, r3, #15
 800b678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4422      	add	r2, r4
 800b680:	609a      	str	r2, [r3, #8]
}
 800b682:	bf00      	nop
 800b684:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b688:	46bd      	mov	sp, r7
 800b68a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b68e:	bf00      	nop
 800b690:	51eb851f 	.word	0x51eb851f

0800b694 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d123      	bne.n	800b6ee <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b6ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b6b2:	683a      	ldr	r2, [r7, #0]
 800b6b4:	6851      	ldr	r1, [r2, #4]
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	6892      	ldr	r2, [r2, #8]
 800b6ba:	4311      	orrs	r1, r2
 800b6bc:	683a      	ldr	r2, [r7, #0]
 800b6be:	68d2      	ldr	r2, [r2, #12]
 800b6c0:	4311      	orrs	r1, r2
 800b6c2:	683a      	ldr	r2, [r7, #0]
 800b6c4:	6912      	ldr	r2, [r2, #16]
 800b6c6:	4311      	orrs	r1, r2
 800b6c8:	683a      	ldr	r2, [r7, #0]
 800b6ca:	6952      	ldr	r2, [r2, #20]
 800b6cc:	4311      	orrs	r1, r2
 800b6ce:	683a      	ldr	r2, [r7, #0]
 800b6d0:	6992      	ldr	r2, [r2, #24]
 800b6d2:	4311      	orrs	r1, r2
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	69d2      	ldr	r2, [r2, #28]
 800b6d8:	4311      	orrs	r1, r2
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	6a12      	ldr	r2, [r2, #32]
 800b6de:	4311      	orrs	r1, r2
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b6e4:	430a      	orrs	r2, r1
 800b6e6:	431a      	orrs	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	601a      	str	r2, [r3, #0]
 800b6ec:	e028      	b.n	800b740 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	69d9      	ldr	r1, [r3, #28]
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	6a1b      	ldr	r3, [r3, #32]
 800b6fe:	4319      	orrs	r1, r3
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b704:	430b      	orrs	r3, r1
 800b706:	431a      	orrs	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b714:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b718:	683a      	ldr	r2, [r7, #0]
 800b71a:	6851      	ldr	r1, [r2, #4]
 800b71c:	683a      	ldr	r2, [r7, #0]
 800b71e:	6892      	ldr	r2, [r2, #8]
 800b720:	4311      	orrs	r1, r2
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	68d2      	ldr	r2, [r2, #12]
 800b726:	4311      	orrs	r1, r2
 800b728:	683a      	ldr	r2, [r7, #0]
 800b72a:	6912      	ldr	r2, [r2, #16]
 800b72c:	4311      	orrs	r1, r2
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	6952      	ldr	r2, [r2, #20]
 800b732:	4311      	orrs	r1, r2
 800b734:	683a      	ldr	r2, [r7, #0]
 800b736:	6992      	ldr	r2, [r2, #24]
 800b738:	430a      	orrs	r2, r1
 800b73a:	431a      	orrs	r2, r3
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr

0800b74e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b74e:	b480      	push	{r7}
 800b750:	b085      	sub	sp, #20
 800b752:	af00      	add	r7, sp, #0
 800b754:	60f8      	str	r0, [r7, #12]
 800b756:	60b9      	str	r1, [r7, #8]
 800b758:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d128      	bne.n	800b7b2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	1e59      	subs	r1, r3, #1
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	3b01      	subs	r3, #1
 800b774:	011b      	lsls	r3, r3, #4
 800b776:	4319      	orrs	r1, r3
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	689b      	ldr	r3, [r3, #8]
 800b77c:	3b01      	subs	r3, #1
 800b77e:	021b      	lsls	r3, r3, #8
 800b780:	4319      	orrs	r1, r3
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	3b01      	subs	r3, #1
 800b788:	031b      	lsls	r3, r3, #12
 800b78a:	4319      	orrs	r1, r3
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	691b      	ldr	r3, [r3, #16]
 800b790:	3b01      	subs	r3, #1
 800b792:	041b      	lsls	r3, r3, #16
 800b794:	4319      	orrs	r1, r3
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	695b      	ldr	r3, [r3, #20]
 800b79a:	3b01      	subs	r3, #1
 800b79c:	051b      	lsls	r3, r3, #20
 800b79e:	4319      	orrs	r1, r3
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	699b      	ldr	r3, [r3, #24]
 800b7a4:	3b01      	subs	r3, #1
 800b7a6:	061b      	lsls	r3, r3, #24
 800b7a8:	430b      	orrs	r3, r1
 800b7aa:	431a      	orrs	r2, r3
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	609a      	str	r2, [r3, #8]
 800b7b0:	e02f      	b.n	800b812 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b7ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	68d2      	ldr	r2, [r2, #12]
 800b7c2:	3a01      	subs	r2, #1
 800b7c4:	0311      	lsls	r1, r2, #12
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	6952      	ldr	r2, [r2, #20]
 800b7ca:	3a01      	subs	r2, #1
 800b7cc:	0512      	lsls	r2, r2, #20
 800b7ce:	430a      	orrs	r2, r1
 800b7d0:	431a      	orrs	r2, r3
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	1e59      	subs	r1, r3, #1
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	011b      	lsls	r3, r3, #4
 800b7ec:	4319      	orrs	r1, r3
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	021b      	lsls	r3, r3, #8
 800b7f6:	4319      	orrs	r1, r3
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	691b      	ldr	r3, [r3, #16]
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	041b      	lsls	r3, r3, #16
 800b800:	4319      	orrs	r1, r3
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	699b      	ldr	r3, [r3, #24]
 800b806:	3b01      	subs	r3, #1
 800b808:	061b      	lsls	r3, r3, #24
 800b80a:	430b      	orrs	r3, r1
 800b80c:	431a      	orrs	r2, r3
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	3714      	adds	r7, #20
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800b82c:	2300      	movs	r3, #0
 800b82e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	0d9b      	lsrs	r3, r3, #22
 800b836:	059b      	lsls	r3, r3, #22
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	6811      	ldr	r1, [r2, #0]
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	6852      	ldr	r2, [r2, #4]
 800b840:	4311      	orrs	r1, r2
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	6892      	ldr	r2, [r2, #8]
 800b846:	3a01      	subs	r2, #1
 800b848:	0152      	lsls	r2, r2, #5
 800b84a:	4311      	orrs	r1, r2
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	68d2      	ldr	r2, [r2, #12]
 800b850:	0252      	lsls	r2, r2, #9
 800b852:	430a      	orrs	r2, r1
 800b854:	431a      	orrs	r2, r3
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800b85a:	f7f8 fccf 	bl	80041fc <HAL_GetTick>
 800b85e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b860:	e010      	b.n	800b884 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b868:	d00c      	beq.n	800b884 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d007      	beq.n	800b880 <FMC_SDRAM_SendCommand+0x60>
 800b870:	f7f8 fcc4 	bl	80041fc <HAL_GetTick>
 800b874:	4602      	mov	r2, r0
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d201      	bcs.n	800b884 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800b880:	2303      	movs	r3, #3
 800b882:	e006      	b.n	800b892 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	699b      	ldr	r3, [r3, #24]
 800b888:	f003 0320 	and.w	r3, r3, #32
 800b88c:	2b20      	cmp	r3, #32
 800b88e:	d0e8      	beq.n	800b862 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800b890:	2300      	movs	r3, #0
}
 800b892:	4618      	mov	r0, r3
 800b894:	3718      	adds	r7, #24
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b89a:	b480      	push	{r7}
 800b89c:	b083      	sub	sp, #12
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
 800b8a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	695b      	ldr	r3, [r3, #20]
 800b8a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b8ac:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800b8b0:	683a      	ldr	r2, [r7, #0]
 800b8b2:	0052      	lsls	r2, r2, #1
 800b8b4:	431a      	orrs	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	370c      	adds	r7, #12
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8c8:	b084      	sub	sp, #16
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b084      	sub	sp, #16
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	f107 001c 	add.w	r0, r7, #28
 800b8d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d122      	bne.n	800b926 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b8f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d105      	bne.n	800b91a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 f9c0 	bl	800bca0 <USB_CoreReset>
 800b920:	4603      	mov	r3, r0
 800b922:	73fb      	strb	r3, [r7, #15]
 800b924:	e01a      	b.n	800b95c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 f9b4 	bl	800bca0 <USB_CoreReset>
 800b938:	4603      	mov	r3, r0
 800b93a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b93c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d106      	bne.n	800b950 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b946:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	639a      	str	r2, [r3, #56]	; 0x38
 800b94e:	e005      	b.n	800b95c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b954:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d10b      	bne.n	800b97a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	f043 0206 	orr.w	r2, r3, #6
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	f043 0220 	orr.w	r2, r3, #32
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b986:	b004      	add	sp, #16
 800b988:	4770      	bx	lr

0800b98a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b98a:	b480      	push	{r7}
 800b98c:	b083      	sub	sp, #12
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	f043 0201 	orr.w	r2, r3, #1
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	f023 0201 	bic.w	r2, r3, #1
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	370c      	adds	r7, #12
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b084      	sub	sp, #16
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b9ea:	78fb      	ldrb	r3, [r7, #3]
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d115      	bne.n	800ba1c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b9fc:	2001      	movs	r0, #1
 800b9fe:	f7f8 fc09 	bl	8004214 <HAL_Delay>
      ms++;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	3301      	adds	r3, #1
 800ba06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 f93a 	bl	800bc82 <USB_GetMode>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d01e      	beq.n	800ba52 <USB_SetCurrentMode+0x84>
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2b31      	cmp	r3, #49	; 0x31
 800ba18:	d9f0      	bls.n	800b9fc <USB_SetCurrentMode+0x2e>
 800ba1a:	e01a      	b.n	800ba52 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ba1c:	78fb      	ldrb	r3, [r7, #3]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d115      	bne.n	800ba4e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba2e:	2001      	movs	r0, #1
 800ba30:	f7f8 fbf0 	bl	8004214 <HAL_Delay>
      ms++;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	3301      	adds	r3, #1
 800ba38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 f921 	bl	800bc82 <USB_GetMode>
 800ba40:	4603      	mov	r3, r0
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d005      	beq.n	800ba52 <USB_SetCurrentMode+0x84>
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2b31      	cmp	r3, #49	; 0x31
 800ba4a:	d9f0      	bls.n	800ba2e <USB_SetCurrentMode+0x60>
 800ba4c:	e001      	b.n	800ba52 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e005      	b.n	800ba5e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2b32      	cmp	r3, #50	; 0x32
 800ba56:	d101      	bne.n	800ba5c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e000      	b.n	800ba5e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba5c:	2300      	movs	r3, #0
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
	...

0800ba68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ba72:	2300      	movs	r3, #0
 800ba74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	4a13      	ldr	r2, [pc, #76]	; (800bacc <USB_FlushTxFifo+0x64>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d901      	bls.n	800ba88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ba84:	2303      	movs	r3, #3
 800ba86:	e01b      	b.n	800bac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	691b      	ldr	r3, [r3, #16]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	daf2      	bge.n	800ba76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ba90:	2300      	movs	r3, #0
 800ba92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	019b      	lsls	r3, r3, #6
 800ba98:	f043 0220 	orr.w	r2, r3, #32
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	3301      	adds	r3, #1
 800baa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	4a08      	ldr	r2, [pc, #32]	; (800bacc <USB_FlushTxFifo+0x64>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d901      	bls.n	800bab2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800baae:	2303      	movs	r3, #3
 800bab0:	e006      	b.n	800bac0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	f003 0320 	and.w	r3, r3, #32
 800baba:	2b20      	cmp	r3, #32
 800babc:	d0f0      	beq.n	800baa0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3714      	adds	r7, #20
 800bac4:	46bd      	mov	sp, r7
 800bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baca:	4770      	bx	lr
 800bacc:	00030d40 	.word	0x00030d40

0800bad0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bad8:	2300      	movs	r3, #0
 800bada:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	3301      	adds	r3, #1
 800bae0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	4a11      	ldr	r2, [pc, #68]	; (800bb2c <USB_FlushRxFifo+0x5c>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d901      	bls.n	800baee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800baea:	2303      	movs	r3, #3
 800baec:	e018      	b.n	800bb20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	daf2      	bge.n	800badc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800baf6:	2300      	movs	r3, #0
 800baf8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2210      	movs	r2, #16
 800bafe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	3301      	adds	r3, #1
 800bb04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	4a08      	ldr	r2, [pc, #32]	; (800bb2c <USB_FlushRxFifo+0x5c>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d901      	bls.n	800bb12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bb0e:	2303      	movs	r3, #3
 800bb10:	e006      	b.n	800bb20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	f003 0310 	and.w	r3, r3, #16
 800bb1a:	2b10      	cmp	r3, #16
 800bb1c:	d0f0      	beq.n	800bb00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3714      	adds	r7, #20
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr
 800bb2c:	00030d40 	.word	0x00030d40

0800bb30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b089      	sub	sp, #36	; 0x24
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	4611      	mov	r1, r2
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	460b      	mov	r3, r1
 800bb40:	71fb      	strb	r3, [r7, #7]
 800bb42:	4613      	mov	r3, r2
 800bb44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bb4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d123      	bne.n	800bb9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bb56:	88bb      	ldrh	r3, [r7, #4]
 800bb58:	3303      	adds	r3, #3
 800bb5a:	089b      	lsrs	r3, r3, #2
 800bb5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bb5e:	2300      	movs	r3, #0
 800bb60:	61bb      	str	r3, [r7, #24]
 800bb62:	e018      	b.n	800bb96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bb64:	79fb      	ldrb	r3, [r7, #7]
 800bb66:	031a      	lsls	r2, r3, #12
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb70:	461a      	mov	r2, r3
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	3301      	adds	r3, #1
 800bb82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	3301      	adds	r3, #1
 800bb88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	3301      	adds	r3, #1
 800bb8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	3301      	adds	r3, #1
 800bb94:	61bb      	str	r3, [r7, #24]
 800bb96:	69ba      	ldr	r2, [r7, #24]
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d3e2      	bcc.n	800bb64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3724      	adds	r7, #36	; 0x24
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b08b      	sub	sp, #44	; 0x2c
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bbc2:	88fb      	ldrh	r3, [r7, #6]
 800bbc4:	089b      	lsrs	r3, r3, #2
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bbca:	88fb      	ldrh	r3, [r7, #6]
 800bbcc:	f003 0303 	and.w	r3, r3, #3
 800bbd0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	623b      	str	r3, [r7, #32]
 800bbd6:	e014      	b.n	800bc02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe2:	601a      	str	r2, [r3, #0]
    pDest++;
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe6:	3301      	adds	r3, #1
 800bbe8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbec:	3301      	adds	r3, #1
 800bbee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf8:	3301      	adds	r3, #1
 800bbfa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bbfc:	6a3b      	ldr	r3, [r7, #32]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	623b      	str	r3, [r7, #32]
 800bc02:	6a3a      	ldr	r2, [r7, #32]
 800bc04:	697b      	ldr	r3, [r7, #20]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d3e6      	bcc.n	800bbd8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bc0a:	8bfb      	ldrh	r3, [r7, #30]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d01e      	beq.n	800bc4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bc10:	2300      	movs	r3, #0
 800bc12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	f107 0310 	add.w	r3, r7, #16
 800bc20:	6812      	ldr	r2, [r2, #0]
 800bc22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	6a3b      	ldr	r3, [r7, #32]
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	00db      	lsls	r3, r3, #3
 800bc2c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc30:	b2da      	uxtb	r2, r3
 800bc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc34:	701a      	strb	r2, [r3, #0]
      i++;
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	623b      	str	r3, [r7, #32]
      pDest++;
 800bc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3e:	3301      	adds	r3, #1
 800bc40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bc42:	8bfb      	ldrh	r3, [r7, #30]
 800bc44:	3b01      	subs	r3, #1
 800bc46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bc48:	8bfb      	ldrh	r3, [r7, #30]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1ea      	bne.n	800bc24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	372c      	adds	r7, #44	; 0x2c
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b085      	sub	sp, #20
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	695b      	ldr	r3, [r3, #20]
 800bc68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	4013      	ands	r3, r2
 800bc72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bc74:	68fb      	ldr	r3, [r7, #12]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3714      	adds	r7, #20
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr

0800bc82 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bc82:	b480      	push	{r7}
 800bc84:	b083      	sub	sp, #12
 800bc86:	af00      	add	r7, sp, #0
 800bc88:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	695b      	ldr	r3, [r3, #20]
 800bc8e:	f003 0301 	and.w	r3, r3, #1
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	370c      	adds	r7, #12
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
	...

0800bca0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	3301      	adds	r3, #1
 800bcb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	4a13      	ldr	r2, [pc, #76]	; (800bd04 <USB_CoreReset+0x64>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d901      	bls.n	800bcbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bcba:	2303      	movs	r3, #3
 800bcbc:	e01b      	b.n	800bcf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	daf2      	bge.n	800bcac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	691b      	ldr	r3, [r3, #16]
 800bcce:	f043 0201 	orr.w	r2, r3, #1
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	4a09      	ldr	r2, [pc, #36]	; (800bd04 <USB_CoreReset+0x64>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d901      	bls.n	800bce8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bce4:	2303      	movs	r3, #3
 800bce6:	e006      	b.n	800bcf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	691b      	ldr	r3, [r3, #16]
 800bcec:	f003 0301 	and.w	r3, r3, #1
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d0f0      	beq.n	800bcd6 <USB_CoreReset+0x36>

  return HAL_OK;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3714      	adds	r7, #20
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	00030d40 	.word	0x00030d40

0800bd08 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bd08:	b084      	sub	sp, #16
 800bd0a:	b580      	push	{r7, lr}
 800bd0c:	b086      	sub	sp, #24
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	6078      	str	r0, [r7, #4]
 800bd12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bd16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd28:	461a      	mov	r2, r3
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d018      	beq.n	800bd90 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d10a      	bne.n	800bd7a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	68fa      	ldr	r2, [r7, #12]
 800bd6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd72:	f043 0304 	orr.w	r3, r3, #4
 800bd76:	6013      	str	r3, [r2, #0]
 800bd78:	e014      	b.n	800bda4 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68fa      	ldr	r2, [r7, #12]
 800bd84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd88:	f023 0304 	bic.w	r3, r3, #4
 800bd8c:	6013      	str	r3, [r2, #0]
 800bd8e:	e009      	b.n	800bda4 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd9e:	f023 0304 	bic.w	r3, r3, #4
 800bda2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bda4:	2110      	movs	r1, #16
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f7ff fe5e 	bl	800ba68 <USB_FlushTxFifo>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d001      	beq.n	800bdb6 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f7ff fe8a 	bl	800bad0 <USB_FlushRxFifo>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d001      	beq.n	800bdc6 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	613b      	str	r3, [r7, #16]
 800bdca:	e015      	b.n	800bdf8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	015a      	lsls	r2, r3, #5
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdd8:	461a      	mov	r2, r3
 800bdda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdde:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	015a      	lsls	r2, r3, #5
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	4413      	add	r3, r2
 800bde8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdec:	461a      	mov	r2, r3
 800bdee:	2300      	movs	r3, #0
 800bdf0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	613b      	str	r3, [r7, #16]
 800bdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfa:	693a      	ldr	r2, [r7, #16]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d3e5      	bcc.n	800bdcc <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2200      	movs	r2, #0
 800be04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be0c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be16:	2b00      	cmp	r3, #0
 800be18:	d00b      	beq.n	800be32 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be20:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4a13      	ldr	r2, [pc, #76]	; (800be74 <USB_HostInit+0x16c>)
 800be26:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	4a13      	ldr	r2, [pc, #76]	; (800be78 <USB_HostInit+0x170>)
 800be2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800be30:	e009      	b.n	800be46 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2280      	movs	r2, #128	; 0x80
 800be36:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4a10      	ldr	r2, [pc, #64]	; (800be7c <USB_HostInit+0x174>)
 800be3c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a0f      	ldr	r2, [pc, #60]	; (800be80 <USB_HostInit+0x178>)
 800be42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800be46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d105      	bne.n	800be58 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	699b      	ldr	r3, [r3, #24]
 800be50:	f043 0210 	orr.w	r2, r3, #16
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	699a      	ldr	r2, [r3, #24]
 800be5c:	4b09      	ldr	r3, [pc, #36]	; (800be84 <USB_HostInit+0x17c>)
 800be5e:	4313      	orrs	r3, r2
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800be64:	7dfb      	ldrb	r3, [r7, #23]
}
 800be66:	4618      	mov	r0, r3
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be70:	b004      	add	sp, #16
 800be72:	4770      	bx	lr
 800be74:	01000200 	.word	0x01000200
 800be78:	00e00300 	.word	0x00e00300
 800be7c:	00600080 	.word	0x00600080
 800be80:	004000e0 	.word	0x004000e0
 800be84:	a3200008 	.word	0xa3200008

0800be88 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800be88:	b480      	push	{r7}
 800be8a:	b085      	sub	sp, #20
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	460b      	mov	r3, r1
 800be92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68fa      	ldr	r2, [r7, #12]
 800bea2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bea6:	f023 0303 	bic.w	r3, r3, #3
 800beaa:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	78fb      	ldrb	r3, [r7, #3]
 800beb6:	f003 0303 	and.w	r3, r3, #3
 800beba:	68f9      	ldr	r1, [r7, #12]
 800bebc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bec0:	4313      	orrs	r3, r2
 800bec2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800bec4:	78fb      	ldrb	r3, [r7, #3]
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d107      	bne.n	800beda <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bed0:	461a      	mov	r2, r3
 800bed2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bed6:	6053      	str	r3, [r2, #4]
 800bed8:	e009      	b.n	800beee <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800beda:	78fb      	ldrb	r3, [r7, #3]
 800bedc:	2b02      	cmp	r3, #2
 800bede:	d106      	bne.n	800beee <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bee6:	461a      	mov	r2, r3
 800bee8:	f241 7370 	movw	r3, #6000	; 0x1770
 800beec:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800beee:	2300      	movs	r3, #0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3714      	adds	r7, #20
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bf1c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	68fa      	ldr	r2, [r7, #12]
 800bf22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf2a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800bf2c:	2064      	movs	r0, #100	; 0x64
 800bf2e:	f7f8 f971 	bl	8004214 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800bf32:	68bb      	ldr	r3, [r7, #8]
 800bf34:	68fa      	ldr	r2, [r7, #12]
 800bf36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf3e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800bf40:	200a      	movs	r0, #10
 800bf42:	f7f8 f967 	bl	8004214 <HAL_Delay>

  return HAL_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	460b      	mov	r3, r1
 800bf5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bf60:	2300      	movs	r3, #0
 800bf62:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bf74:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d109      	bne.n	800bf94 <USB_DriveVbus+0x44>
 800bf80:	78fb      	ldrb	r3, [r7, #3]
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d106      	bne.n	800bf94 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	68fa      	ldr	r2, [r7, #12]
 800bf8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bf8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bf92:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bf9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf9e:	d109      	bne.n	800bfb4 <USB_DriveVbus+0x64>
 800bfa0:	78fb      	ldrb	r3, [r7, #3]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d106      	bne.n	800bfb4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bfae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfb2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3714      	adds	r7, #20
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bfc2:	b480      	push	{r7}
 800bfc4:	b085      	sub	sp, #20
 800bfc6:	af00      	add	r7, sp, #0
 800bfc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	0c5b      	lsrs	r3, r3, #17
 800bfe0:	f003 0303 	and.w	r3, r3, #3
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3714      	adds	r7, #20
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	b29b      	uxth	r3, r3
}
 800c006:	4618      	mov	r0, r3
 800c008:	3714      	adds	r7, #20
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
	...

0800c014 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b088      	sub	sp, #32
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	4608      	mov	r0, r1
 800c01e:	4611      	mov	r1, r2
 800c020:	461a      	mov	r2, r3
 800c022:	4603      	mov	r3, r0
 800c024:	70fb      	strb	r3, [r7, #3]
 800c026:	460b      	mov	r3, r1
 800c028:	70bb      	strb	r3, [r7, #2]
 800c02a:	4613      	mov	r3, r2
 800c02c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c036:	78fb      	ldrb	r3, [r7, #3]
 800c038:	015a      	lsls	r2, r3, #5
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	4413      	add	r3, r2
 800c03e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c042:	461a      	mov	r2, r3
 800c044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c048:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c04a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c04e:	2b03      	cmp	r3, #3
 800c050:	d87e      	bhi.n	800c150 <USB_HC_Init+0x13c>
 800c052:	a201      	add	r2, pc, #4	; (adr r2, 800c058 <USB_HC_Init+0x44>)
 800c054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c058:	0800c069 	.word	0x0800c069
 800c05c:	0800c113 	.word	0x0800c113
 800c060:	0800c069 	.word	0x0800c069
 800c064:	0800c0d5 	.word	0x0800c0d5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c068:	78fb      	ldrb	r3, [r7, #3]
 800c06a:	015a      	lsls	r2, r3, #5
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	4413      	add	r3, r2
 800c070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c074:	461a      	mov	r2, r3
 800c076:	f240 439d 	movw	r3, #1181	; 0x49d
 800c07a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c07c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c080:	2b00      	cmp	r3, #0
 800c082:	da10      	bge.n	800c0a6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c084:	78fb      	ldrb	r3, [r7, #3]
 800c086:	015a      	lsls	r2, r3, #5
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	4413      	add	r3, r2
 800c08c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	78fa      	ldrb	r2, [r7, #3]
 800c094:	0151      	lsls	r1, r2, #5
 800c096:	693a      	ldr	r2, [r7, #16]
 800c098:	440a      	add	r2, r1
 800c09a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c09e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0a2:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c0a4:	e057      	b.n	800c156 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d051      	beq.n	800c156 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c0b2:	78fb      	ldrb	r3, [r7, #3]
 800c0b4:	015a      	lsls	r2, r3, #5
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	78fa      	ldrb	r2, [r7, #3]
 800c0c2:	0151      	lsls	r1, r2, #5
 800c0c4:	693a      	ldr	r2, [r7, #16]
 800c0c6:	440a      	add	r2, r1
 800c0c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c0d0:	60d3      	str	r3, [r2, #12]
      break;
 800c0d2:	e040      	b.n	800c156 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c0d4:	78fb      	ldrb	r3, [r7, #3]
 800c0d6:	015a      	lsls	r2, r3, #5
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	4413      	add	r3, r2
 800c0dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	f240 639d 	movw	r3, #1693	; 0x69d
 800c0e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c0e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	da34      	bge.n	800c15a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c0f0:	78fb      	ldrb	r3, [r7, #3]
 800c0f2:	015a      	lsls	r2, r3, #5
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	78fa      	ldrb	r2, [r7, #3]
 800c100:	0151      	lsls	r1, r2, #5
 800c102:	693a      	ldr	r2, [r7, #16]
 800c104:	440a      	add	r2, r1
 800c106:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c10a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c10e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c110:	e023      	b.n	800c15a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c112:	78fb      	ldrb	r3, [r7, #3]
 800c114:	015a      	lsls	r2, r3, #5
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	4413      	add	r3, r2
 800c11a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c11e:	461a      	mov	r2, r3
 800c120:	f240 2325 	movw	r3, #549	; 0x225
 800c124:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c126:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	da17      	bge.n	800c15e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c12e:	78fb      	ldrb	r3, [r7, #3]
 800c130:	015a      	lsls	r2, r3, #5
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	4413      	add	r3, r2
 800c136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	78fa      	ldrb	r2, [r7, #3]
 800c13e:	0151      	lsls	r1, r2, #5
 800c140:	693a      	ldr	r2, [r7, #16]
 800c142:	440a      	add	r2, r1
 800c144:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c148:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c14c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c14e:	e006      	b.n	800c15e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	77fb      	strb	r3, [r7, #31]
      break;
 800c154:	e004      	b.n	800c160 <USB_HC_Init+0x14c>
      break;
 800c156:	bf00      	nop
 800c158:	e002      	b.n	800c160 <USB_HC_Init+0x14c>
      break;
 800c15a:	bf00      	nop
 800c15c:	e000      	b.n	800c160 <USB_HC_Init+0x14c>
      break;
 800c15e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c160:	78fb      	ldrb	r3, [r7, #3]
 800c162:	015a      	lsls	r2, r3, #5
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	4413      	add	r3, r2
 800c168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	78fa      	ldrb	r2, [r7, #3]
 800c170:	0151      	lsls	r1, r2, #5
 800c172:	693a      	ldr	r2, [r7, #16]
 800c174:	440a      	add	r2, r1
 800c176:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c17a:	f043 0302 	orr.w	r3, r3, #2
 800c17e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c186:	699a      	ldr	r2, [r3, #24]
 800c188:	78fb      	ldrb	r3, [r7, #3]
 800c18a:	f003 030f 	and.w	r3, r3, #15
 800c18e:	2101      	movs	r1, #1
 800c190:	fa01 f303 	lsl.w	r3, r1, r3
 800c194:	6939      	ldr	r1, [r7, #16]
 800c196:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c19a:	4313      	orrs	r3, r2
 800c19c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	699b      	ldr	r3, [r3, #24]
 800c1a2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c1aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	da03      	bge.n	800c1ba <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c1b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1b6:	61bb      	str	r3, [r7, #24]
 800c1b8:	e001      	b.n	800c1be <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f7ff feff 	bl	800bfc2 <USB_GetHostSpeed>
 800c1c4:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c1c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c1ca:	2b02      	cmp	r3, #2
 800c1cc:	d106      	bne.n	800c1dc <USB_HC_Init+0x1c8>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	d003      	beq.n	800c1dc <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c1d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c1d8:	617b      	str	r3, [r7, #20]
 800c1da:	e001      	b.n	800c1e0 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c1e0:	787b      	ldrb	r3, [r7, #1]
 800c1e2:	059b      	lsls	r3, r3, #22
 800c1e4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c1e8:	78bb      	ldrb	r3, [r7, #2]
 800c1ea:	02db      	lsls	r3, r3, #11
 800c1ec:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c1f0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c1f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c1f6:	049b      	lsls	r3, r3, #18
 800c1f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c1fc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c1fe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c200:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c204:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c20a:	78fb      	ldrb	r3, [r7, #3]
 800c20c:	0159      	lsls	r1, r3, #5
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	440b      	add	r3, r1
 800c212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c216:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c21c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c21e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c222:	2b03      	cmp	r3, #3
 800c224:	d003      	beq.n	800c22e <USB_HC_Init+0x21a>
 800c226:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d10f      	bne.n	800c24e <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c22e:	78fb      	ldrb	r3, [r7, #3]
 800c230:	015a      	lsls	r2, r3, #5
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	4413      	add	r3, r2
 800c236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	78fa      	ldrb	r2, [r7, #3]
 800c23e:	0151      	lsls	r1, r2, #5
 800c240:	693a      	ldr	r2, [r7, #16]
 800c242:	440a      	add	r2, r1
 800c244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c248:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c24c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c24e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c250:	4618      	mov	r0, r3
 800c252:	3720      	adds	r7, #32
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b08c      	sub	sp, #48	; 0x30
 800c25c:	af02      	add	r7, sp, #8
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	4613      	mov	r3, r2
 800c264:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	785b      	ldrb	r3, [r3, #1]
 800c26e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c270:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c274:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c27a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d02d      	beq.n	800c2de <USB_HC_StartXfer+0x86>
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	791b      	ldrb	r3, [r3, #4]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d129      	bne.n	800c2de <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c28a:	79fb      	ldrb	r3, [r7, #7]
 800c28c:	2b01      	cmp	r3, #1
 800c28e:	d117      	bne.n	800c2c0 <USB_HC_StartXfer+0x68>
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	79db      	ldrb	r3, [r3, #7]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d003      	beq.n	800c2a0 <USB_HC_StartXfer+0x48>
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	79db      	ldrb	r3, [r3, #7]
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	d10f      	bne.n	800c2c0 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	015a      	lsls	r2, r3, #5
 800c2a4:	6a3b      	ldr	r3, [r7, #32]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	69fa      	ldr	r2, [r7, #28]
 800c2b0:	0151      	lsls	r1, r2, #5
 800c2b2:	6a3a      	ldr	r2, [r7, #32]
 800c2b4:	440a      	add	r2, r1
 800c2b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2be:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c2c0:	79fb      	ldrb	r3, [r7, #7]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d10b      	bne.n	800c2de <USB_HC_StartXfer+0x86>
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	795b      	ldrb	r3, [r3, #5]
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d107      	bne.n	800c2de <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	785b      	ldrb	r3, [r3, #1]
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	68f8      	ldr	r0, [r7, #12]
 800c2d6:	f000 fa0f 	bl	800c6f8 <USB_DoPing>
      return HAL_OK;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	e0f8      	b.n	800c4d0 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	695b      	ldr	r3, [r3, #20]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d018      	beq.n	800c318 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	695b      	ldr	r3, [r3, #20]
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	8912      	ldrh	r2, [r2, #8]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	3b01      	subs	r3, #1
 800c2f2:	68ba      	ldr	r2, [r7, #8]
 800c2f4:	8912      	ldrh	r2, [r2, #8]
 800c2f6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2fa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c2fc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c2fe:	8b7b      	ldrh	r3, [r7, #26]
 800c300:	429a      	cmp	r2, r3
 800c302:	d90b      	bls.n	800c31c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c304:	8b7b      	ldrh	r3, [r7, #26]
 800c306:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c308:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c30a:	68ba      	ldr	r2, [r7, #8]
 800c30c:	8912      	ldrh	r2, [r2, #8]
 800c30e:	fb03 f202 	mul.w	r2, r3, r2
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	611a      	str	r2, [r3, #16]
 800c316:	e001      	b.n	800c31c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c318:	2301      	movs	r3, #1
 800c31a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	78db      	ldrb	r3, [r3, #3]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d007      	beq.n	800c334 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c324:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c326:	68ba      	ldr	r2, [r7, #8]
 800c328:	8912      	ldrh	r2, [r2, #8]
 800c32a:	fb03 f202 	mul.w	r2, r3, r2
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	611a      	str	r2, [r3, #16]
 800c332:	e003      	b.n	800c33c <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	695a      	ldr	r2, [r3, #20]
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c344:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c346:	04d9      	lsls	r1, r3, #19
 800c348:	4b63      	ldr	r3, [pc, #396]	; (800c4d8 <USB_HC_StartXfer+0x280>)
 800c34a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c34c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	7a9b      	ldrb	r3, [r3, #10]
 800c352:	075b      	lsls	r3, r3, #29
 800c354:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c358:	69f9      	ldr	r1, [r7, #28]
 800c35a:	0148      	lsls	r0, r1, #5
 800c35c:	6a39      	ldr	r1, [r7, #32]
 800c35e:	4401      	add	r1, r0
 800c360:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c364:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c366:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c368:	79fb      	ldrb	r3, [r7, #7]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d009      	beq.n	800c382 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	68d9      	ldr	r1, [r3, #12]
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	015a      	lsls	r2, r3, #5
 800c376:	6a3b      	ldr	r3, [r7, #32]
 800c378:	4413      	add	r3, r2
 800c37a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c37e:	460a      	mov	r2, r1
 800c380:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c382:	6a3b      	ldr	r3, [r7, #32]
 800c384:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c388:	689b      	ldr	r3, [r3, #8]
 800c38a:	f003 0301 	and.w	r3, r3, #1
 800c38e:	2b00      	cmp	r3, #0
 800c390:	bf0c      	ite	eq
 800c392:	2301      	moveq	r3, #1
 800c394:	2300      	movne	r3, #0
 800c396:	b2db      	uxtb	r3, r3
 800c398:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	015a      	lsls	r2, r3, #5
 800c39e:	6a3b      	ldr	r3, [r7, #32]
 800c3a0:	4413      	add	r3, r2
 800c3a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	69fa      	ldr	r2, [r7, #28]
 800c3aa:	0151      	lsls	r1, r2, #5
 800c3ac:	6a3a      	ldr	r2, [r7, #32]
 800c3ae:	440a      	add	r2, r1
 800c3b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c3b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c3b8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	015a      	lsls	r2, r3, #5
 800c3be:	6a3b      	ldr	r3, [r7, #32]
 800c3c0:	4413      	add	r3, r2
 800c3c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	7e7b      	ldrb	r3, [r7, #25]
 800c3ca:	075b      	lsls	r3, r3, #29
 800c3cc:	69f9      	ldr	r1, [r7, #28]
 800c3ce:	0148      	lsls	r0, r1, #5
 800c3d0:	6a39      	ldr	r1, [r7, #32]
 800c3d2:	4401      	add	r1, r0
 800c3d4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	015a      	lsls	r2, r3, #5
 800c3e0:	6a3b      	ldr	r3, [r7, #32]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c3ec:	693b      	ldr	r3, [r7, #16]
 800c3ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c3f2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	78db      	ldrb	r3, [r3, #3]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d004      	beq.n	800c406 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c402:	613b      	str	r3, [r7, #16]
 800c404:	e003      	b.n	800c40e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c40c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c414:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c416:	69fb      	ldr	r3, [r7, #28]
 800c418:	015a      	lsls	r2, r3, #5
 800c41a:	6a3b      	ldr	r3, [r7, #32]
 800c41c:	4413      	add	r3, r2
 800c41e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c422:	461a      	mov	r2, r3
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c428:	79fb      	ldrb	r3, [r7, #7]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d001      	beq.n	800c432 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c42e:	2300      	movs	r3, #0
 800c430:	e04e      	b.n	800c4d0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	78db      	ldrb	r3, [r3, #3]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d149      	bne.n	800c4ce <USB_HC_StartXfer+0x276>
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	695b      	ldr	r3, [r3, #20]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d045      	beq.n	800c4ce <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	79db      	ldrb	r3, [r3, #7]
 800c446:	2b03      	cmp	r3, #3
 800c448:	d830      	bhi.n	800c4ac <USB_HC_StartXfer+0x254>
 800c44a:	a201      	add	r2, pc, #4	; (adr r2, 800c450 <USB_HC_StartXfer+0x1f8>)
 800c44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c450:	0800c461 	.word	0x0800c461
 800c454:	0800c485 	.word	0x0800c485
 800c458:	0800c461 	.word	0x0800c461
 800c45c:	0800c485 	.word	0x0800c485
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	695b      	ldr	r3, [r3, #20]
 800c464:	3303      	adds	r3, #3
 800c466:	089b      	lsrs	r3, r3, #2
 800c468:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c46a:	8afa      	ldrh	r2, [r7, #22]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c470:	b29b      	uxth	r3, r3
 800c472:	429a      	cmp	r2, r3
 800c474:	d91c      	bls.n	800c4b0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	699b      	ldr	r3, [r3, #24]
 800c47a:	f043 0220 	orr.w	r2, r3, #32
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	619a      	str	r2, [r3, #24]
        }
        break;
 800c482:	e015      	b.n	800c4b0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	695b      	ldr	r3, [r3, #20]
 800c488:	3303      	adds	r3, #3
 800c48a:	089b      	lsrs	r3, r3, #2
 800c48c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c48e:	8afa      	ldrh	r2, [r7, #22]
 800c490:	6a3b      	ldr	r3, [r7, #32]
 800c492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c496:	691b      	ldr	r3, [r3, #16]
 800c498:	b29b      	uxth	r3, r3
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d90a      	bls.n	800c4b4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	699b      	ldr	r3, [r3, #24]
 800c4a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	619a      	str	r2, [r3, #24]
        }
        break;
 800c4aa:	e003      	b.n	800c4b4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c4ac:	bf00      	nop
 800c4ae:	e002      	b.n	800c4b6 <USB_HC_StartXfer+0x25e>
        break;
 800c4b0:	bf00      	nop
 800c4b2:	e000      	b.n	800c4b6 <USB_HC_StartXfer+0x25e>
        break;
 800c4b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	68d9      	ldr	r1, [r3, #12]
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	785a      	ldrb	r2, [r3, #1]
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	695b      	ldr	r3, [r3, #20]
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	2000      	movs	r0, #0
 800c4c6:	9000      	str	r0, [sp, #0]
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f7ff fb31 	bl	800bb30 <USB_WritePacket>
  }

  return HAL_OK;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3728      	adds	r7, #40	; 0x28
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	1ff80000 	.word	0x1ff80000

0800c4dc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	b29b      	uxth	r3, r3
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3714      	adds	r7, #20
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr

0800c4fe <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c4fe:	b480      	push	{r7}
 800c500:	b089      	sub	sp, #36	; 0x24
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	460b      	mov	r3, r1
 800c508:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800c50e:	78fb      	ldrb	r3, [r7, #3]
 800c510:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800c512:	2300      	movs	r3, #0
 800c514:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c516:	69bb      	ldr	r3, [r7, #24]
 800c518:	015a      	lsls	r2, r3, #5
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	4413      	add	r3, r2
 800c51e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	0c9b      	lsrs	r3, r3, #18
 800c526:	f003 0303 	and.w	r3, r3, #3
 800c52a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	015a      	lsls	r2, r3, #5
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	4413      	add	r3, r2
 800c534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	0fdb      	lsrs	r3, r3, #31
 800c53c:	f003 0301 	and.w	r3, r3, #1
 800c540:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	689b      	ldr	r3, [r3, #8]
 800c546:	f003 0320 	and.w	r3, r3, #32
 800c54a:	2b20      	cmp	r3, #32
 800c54c:	d104      	bne.n	800c558 <USB_HC_Halt+0x5a>
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d101      	bne.n	800c558 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c554:	2300      	movs	r3, #0
 800c556:	e0c8      	b.n	800c6ea <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c558:	697b      	ldr	r3, [r7, #20]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d002      	beq.n	800c564 <USB_HC_Halt+0x66>
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	2b02      	cmp	r3, #2
 800c562:	d163      	bne.n	800c62c <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	015a      	lsls	r2, r3, #5
 800c568:	69fb      	ldr	r3, [r7, #28]
 800c56a:	4413      	add	r3, r2
 800c56c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	69ba      	ldr	r2, [r7, #24]
 800c574:	0151      	lsls	r1, r2, #5
 800c576:	69fa      	ldr	r2, [r7, #28]
 800c578:	440a      	add	r2, r1
 800c57a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c57e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c582:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	689b      	ldr	r3, [r3, #8]
 800c588:	f003 0320 	and.w	r3, r3, #32
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f040 80ab 	bne.w	800c6e8 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c596:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d133      	bne.n	800c606 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	015a      	lsls	r2, r3, #5
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	69ba      	ldr	r2, [r7, #24]
 800c5ae:	0151      	lsls	r1, r2, #5
 800c5b0:	69fa      	ldr	r2, [r7, #28]
 800c5b2:	440a      	add	r2, r1
 800c5b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c5bc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	015a      	lsls	r2, r3, #5
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	69ba      	ldr	r2, [r7, #24]
 800c5ce:	0151      	lsls	r1, r2, #5
 800c5d0:	69fa      	ldr	r2, [r7, #28]
 800c5d2:	440a      	add	r2, r1
 800c5d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c5d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c5dc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c5ea:	d81d      	bhi.n	800c628 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c5ec:	69bb      	ldr	r3, [r7, #24]
 800c5ee:	015a      	lsls	r2, r3, #5
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c602:	d0ec      	beq.n	800c5de <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c604:	e070      	b.n	800c6e8 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c606:	69bb      	ldr	r3, [r7, #24]
 800c608:	015a      	lsls	r2, r3, #5
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	4413      	add	r3, r2
 800c60e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	69ba      	ldr	r2, [r7, #24]
 800c616:	0151      	lsls	r1, r2, #5
 800c618:	69fa      	ldr	r2, [r7, #28]
 800c61a:	440a      	add	r2, r1
 800c61c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c624:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c626:	e05f      	b.n	800c6e8 <USB_HC_Halt+0x1ea>
            break;
 800c628:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c62a:	e05d      	b.n	800c6e8 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c62c:	69bb      	ldr	r3, [r7, #24]
 800c62e:	015a      	lsls	r2, r3, #5
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	4413      	add	r3, r2
 800c634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	69ba      	ldr	r2, [r7, #24]
 800c63c:	0151      	lsls	r1, r2, #5
 800c63e:	69fa      	ldr	r2, [r7, #28]
 800c640:	440a      	add	r2, r1
 800c642:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c646:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c64a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c652:	691b      	ldr	r3, [r3, #16]
 800c654:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d133      	bne.n	800c6c4 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	015a      	lsls	r2, r3, #5
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	4413      	add	r3, r2
 800c664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	69ba      	ldr	r2, [r7, #24]
 800c66c:	0151      	lsls	r1, r2, #5
 800c66e:	69fa      	ldr	r2, [r7, #28]
 800c670:	440a      	add	r2, r1
 800c672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c676:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c67a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c67c:	69bb      	ldr	r3, [r7, #24]
 800c67e:	015a      	lsls	r2, r3, #5
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	4413      	add	r3, r2
 800c684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	69ba      	ldr	r2, [r7, #24]
 800c68c:	0151      	lsls	r1, r2, #5
 800c68e:	69fa      	ldr	r2, [r7, #28]
 800c690:	440a      	add	r2, r1
 800c692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c69a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c6a8:	d81d      	bhi.n	800c6e6 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	015a      	lsls	r2, r3, #5
 800c6ae:	69fb      	ldr	r3, [r7, #28]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6c0:	d0ec      	beq.n	800c69c <USB_HC_Halt+0x19e>
 800c6c2:	e011      	b.n	800c6e8 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c6c4:	69bb      	ldr	r3, [r7, #24]
 800c6c6:	015a      	lsls	r2, r3, #5
 800c6c8:	69fb      	ldr	r3, [r7, #28]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	69ba      	ldr	r2, [r7, #24]
 800c6d4:	0151      	lsls	r1, r2, #5
 800c6d6:	69fa      	ldr	r2, [r7, #28]
 800c6d8:	440a      	add	r2, r1
 800c6da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c6e2:	6013      	str	r3, [r2, #0]
 800c6e4:	e000      	b.n	800c6e8 <USB_HC_Halt+0x1ea>
          break;
 800c6e6:	bf00      	nop
    }
  }

  return HAL_OK;
 800c6e8:	2300      	movs	r3, #0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3724      	adds	r7, #36	; 0x24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f4:	4770      	bx	lr
	...

0800c6f8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b087      	sub	sp, #28
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	460b      	mov	r3, r1
 800c702:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c708:	78fb      	ldrb	r3, [r7, #3]
 800c70a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c70c:	2301      	movs	r3, #1
 800c70e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	04da      	lsls	r2, r3, #19
 800c714:	4b15      	ldr	r3, [pc, #84]	; (800c76c <USB_DoPing+0x74>)
 800c716:	4013      	ands	r3, r2
 800c718:	693a      	ldr	r2, [r7, #16]
 800c71a:	0151      	lsls	r1, r2, #5
 800c71c:	697a      	ldr	r2, [r7, #20]
 800c71e:	440a      	add	r2, r1
 800c720:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c724:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c728:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	015a      	lsls	r2, r3, #5
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	4413      	add	r3, r2
 800c732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c740:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c748:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	015a      	lsls	r2, r3, #5
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	4413      	add	r3, r2
 800c752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c756:	461a      	mov	r2, r3
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c75c:	2300      	movs	r3, #0
}
 800c75e:	4618      	mov	r0, r3
 800c760:	371c      	adds	r7, #28
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
 800c76a:	bf00      	nop
 800c76c:	1ff80000 	.word	0x1ff80000

0800c770 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b088      	sub	sp, #32
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c778:	2300      	movs	r3, #0
 800c77a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800c780:	2300      	movs	r3, #0
 800c782:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7ff f911 	bl	800b9ac <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c78a:	2110      	movs	r1, #16
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f7ff f96b 	bl	800ba68 <USB_FlushTxFifo>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d001      	beq.n	800c79c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800c798:	2301      	movs	r3, #1
 800c79a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7ff f997 	bl	800bad0 <USB_FlushRxFifo>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d001      	beq.n	800c7ac <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	61bb      	str	r3, [r7, #24]
 800c7b0:	e01f      	b.n	800c7f2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	015a      	lsls	r2, r3, #5
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7d0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c7d8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	015a      	lsls	r2, r3, #5
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c7ec:	69bb      	ldr	r3, [r7, #24]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	61bb      	str	r3, [r7, #24]
 800c7f2:	69bb      	ldr	r3, [r7, #24]
 800c7f4:	2b0f      	cmp	r3, #15
 800c7f6:	d9dc      	bls.n	800c7b2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	61bb      	str	r3, [r7, #24]
 800c7fc:	e034      	b.n	800c868 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	015a      	lsls	r2, r3, #5
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	4413      	add	r3, r2
 800c806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c814:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c81c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c824:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	015a      	lsls	r2, r3, #5
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	4413      	add	r3, r2
 800c82e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c832:	461a      	mov	r2, r3
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	3301      	adds	r3, #1
 800c83c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c844:	d80c      	bhi.n	800c860 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	015a      	lsls	r2, r3, #5
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	4413      	add	r3, r2
 800c84e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c858:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c85c:	d0ec      	beq.n	800c838 <USB_StopHost+0xc8>
 800c85e:	e000      	b.n	800c862 <USB_StopHost+0xf2>
        break;
 800c860:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	3301      	adds	r3, #1
 800c866:	61bb      	str	r3, [r7, #24]
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	2b0f      	cmp	r3, #15
 800c86c:	d9c7      	bls.n	800c7fe <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c874:	461a      	mov	r2, r3
 800c876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c87a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c882:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f7ff f880 	bl	800b98a <USB_EnableGlobalInt>

  return ret;
 800c88a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3720      	adds	r7, #32
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c894:	b590      	push	{r4, r7, lr}
 800c896:	b089      	sub	sp, #36	; 0x24
 800c898:	af04      	add	r7, sp, #16
 800c89a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c89c:	2301      	movs	r3, #1
 800c89e:	2202      	movs	r2, #2
 800c8a0:	2102      	movs	r1, #2
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f000 fc66 	bl	800d174 <USBH_FindInterface>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c8ac:	7bfb      	ldrb	r3, [r7, #15]
 800c8ae:	2bff      	cmp	r3, #255	; 0xff
 800c8b0:	d002      	beq.n	800c8b8 <USBH_CDC_InterfaceInit+0x24>
 800c8b2:	7bfb      	ldrb	r3, [r7, #15]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d901      	bls.n	800c8bc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c8b8:	2302      	movs	r3, #2
 800c8ba:	e13d      	b.n	800cb38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c8bc:	7bfb      	ldrb	r3, [r7, #15]
 800c8be:	4619      	mov	r1, r3
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f000 fc3b 	bl	800d13c <USBH_SelectInterface>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c8ca:	7bbb      	ldrb	r3, [r7, #14]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d001      	beq.n	800c8d4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	e131      	b.n	800cb38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800c8da:	2050      	movs	r0, #80	; 0x50
 800c8dc:	f002 fb00 	bl	800eee0 <malloc>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c8ea:	69db      	ldr	r3, [r3, #28]
 800c8ec:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d101      	bne.n	800c8f8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c8f4:	2302      	movs	r3, #2
 800c8f6:	e11f      	b.n	800cb38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c8f8:	2250      	movs	r2, #80	; 0x50
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	68b8      	ldr	r0, [r7, #8]
 800c8fe:	f002 faff 	bl	800ef00 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c902:	7bfb      	ldrb	r3, [r7, #15]
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	211a      	movs	r1, #26
 800c908:	fb01 f303 	mul.w	r3, r1, r3
 800c90c:	4413      	add	r3, r2
 800c90e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c912:	781b      	ldrb	r3, [r3, #0]
 800c914:	b25b      	sxtb	r3, r3
 800c916:	2b00      	cmp	r3, #0
 800c918:	da15      	bge.n	800c946 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c91a:	7bfb      	ldrb	r3, [r7, #15]
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	211a      	movs	r1, #26
 800c920:	fb01 f303 	mul.w	r3, r1, r3
 800c924:	4413      	add	r3, r2
 800c926:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c92a:	781a      	ldrb	r2, [r3, #0]
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c930:	7bfb      	ldrb	r3, [r7, #15]
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	211a      	movs	r1, #26
 800c936:	fb01 f303 	mul.w	r3, r1, r3
 800c93a:	4413      	add	r3, r2
 800c93c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c940:	881a      	ldrh	r2, [r3, #0]
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	785b      	ldrb	r3, [r3, #1]
 800c94a:	4619      	mov	r1, r3
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f001 ff2c 	bl	800e7aa <USBH_AllocPipe>
 800c952:	4603      	mov	r3, r0
 800c954:	461a      	mov	r2, r3
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	7819      	ldrb	r1, [r3, #0]
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	7858      	ldrb	r0, [r3, #1]
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	8952      	ldrh	r2, [r2, #10]
 800c972:	9202      	str	r2, [sp, #8]
 800c974:	2203      	movs	r2, #3
 800c976:	9201      	str	r2, [sp, #4]
 800c978:	9300      	str	r3, [sp, #0]
 800c97a:	4623      	mov	r3, r4
 800c97c:	4602      	mov	r2, r0
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	f001 fee4 	bl	800e74c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	2200      	movs	r2, #0
 800c98a:	4619      	mov	r1, r3
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f002 f9f9 	bl	800ed84 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c992:	2300      	movs	r3, #0
 800c994:	2200      	movs	r2, #0
 800c996:	210a      	movs	r1, #10
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 fbeb 	bl	800d174 <USBH_FindInterface>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c9a2:	7bfb      	ldrb	r3, [r7, #15]
 800c9a4:	2bff      	cmp	r3, #255	; 0xff
 800c9a6:	d002      	beq.n	800c9ae <USBH_CDC_InterfaceInit+0x11a>
 800c9a8:	7bfb      	ldrb	r3, [r7, #15]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d901      	bls.n	800c9b2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c9ae:	2302      	movs	r3, #2
 800c9b0:	e0c2      	b.n	800cb38 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800c9b2:	7bfb      	ldrb	r3, [r7, #15]
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	211a      	movs	r1, #26
 800c9b8:	fb01 f303 	mul.w	r3, r1, r3
 800c9bc:	4413      	add	r3, r2
 800c9be:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	b25b      	sxtb	r3, r3
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	da16      	bge.n	800c9f8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c9ca:	7bfb      	ldrb	r3, [r7, #15]
 800c9cc:	687a      	ldr	r2, [r7, #4]
 800c9ce:	211a      	movs	r1, #26
 800c9d0:	fb01 f303 	mul.w	r3, r1, r3
 800c9d4:	4413      	add	r3, r2
 800c9d6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c9da:	781a      	ldrb	r2, [r3, #0]
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c9e0:	7bfb      	ldrb	r3, [r7, #15]
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	211a      	movs	r1, #26
 800c9e6:	fb01 f303 	mul.w	r3, r1, r3
 800c9ea:	4413      	add	r3, r2
 800c9ec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c9f0:	881a      	ldrh	r2, [r3, #0]
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	835a      	strh	r2, [r3, #26]
 800c9f6:	e015      	b.n	800ca24 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c9f8:	7bfb      	ldrb	r3, [r7, #15]
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	211a      	movs	r1, #26
 800c9fe:	fb01 f303 	mul.w	r3, r1, r3
 800ca02:	4413      	add	r3, r2
 800ca04:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ca08:	781a      	ldrb	r2, [r3, #0]
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ca0e:	7bfb      	ldrb	r3, [r7, #15]
 800ca10:	687a      	ldr	r2, [r7, #4]
 800ca12:	211a      	movs	r1, #26
 800ca14:	fb01 f303 	mul.w	r3, r1, r3
 800ca18:	4413      	add	r3, r2
 800ca1a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ca1e:	881a      	ldrh	r2, [r3, #0]
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
 800ca26:	687a      	ldr	r2, [r7, #4]
 800ca28:	211a      	movs	r1, #26
 800ca2a:	fb01 f303 	mul.w	r3, r1, r3
 800ca2e:	4413      	add	r3, r2
 800ca30:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	b25b      	sxtb	r3, r3
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	da16      	bge.n	800ca6a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ca3c:	7bfb      	ldrb	r3, [r7, #15]
 800ca3e:	687a      	ldr	r2, [r7, #4]
 800ca40:	211a      	movs	r1, #26
 800ca42:	fb01 f303 	mul.w	r3, r1, r3
 800ca46:	4413      	add	r3, r2
 800ca48:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ca4c:	781a      	ldrb	r2, [r3, #0]
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ca52:	7bfb      	ldrb	r3, [r7, #15]
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	211a      	movs	r1, #26
 800ca58:	fb01 f303 	mul.w	r3, r1, r3
 800ca5c:	4413      	add	r3, r2
 800ca5e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ca62:	881a      	ldrh	r2, [r3, #0]
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	835a      	strh	r2, [r3, #26]
 800ca68:	e015      	b.n	800ca96 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ca6a:	7bfb      	ldrb	r3, [r7, #15]
 800ca6c:	687a      	ldr	r2, [r7, #4]
 800ca6e:	211a      	movs	r1, #26
 800ca70:	fb01 f303 	mul.w	r3, r1, r3
 800ca74:	4413      	add	r3, r2
 800ca76:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ca7a:	781a      	ldrb	r2, [r3, #0]
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	211a      	movs	r1, #26
 800ca86:	fb01 f303 	mul.w	r3, r1, r3
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ca90:	881a      	ldrh	r2, [r3, #0]
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	7b9b      	ldrb	r3, [r3, #14]
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f001 fe84 	bl	800e7aa <USBH_AllocPipe>
 800caa2:	4603      	mov	r3, r0
 800caa4:	461a      	mov	r2, r3
 800caa6:	68bb      	ldr	r3, [r7, #8]
 800caa8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	7bdb      	ldrb	r3, [r3, #15]
 800caae:	4619      	mov	r1, r3
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f001 fe7a 	bl	800e7aa <USBH_AllocPipe>
 800cab6:	4603      	mov	r3, r0
 800cab8:	461a      	mov	r2, r3
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	7b59      	ldrb	r1, [r3, #13]
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	7b98      	ldrb	r0, [r3, #14]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cad2:	68ba      	ldr	r2, [r7, #8]
 800cad4:	8b12      	ldrh	r2, [r2, #24]
 800cad6:	9202      	str	r2, [sp, #8]
 800cad8:	2202      	movs	r2, #2
 800cada:	9201      	str	r2, [sp, #4]
 800cadc:	9300      	str	r3, [sp, #0]
 800cade:	4623      	mov	r3, r4
 800cae0:	4602      	mov	r2, r0
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f001 fe32 	bl	800e74c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	7b19      	ldrb	r1, [r3, #12]
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	7bd8      	ldrb	r0, [r3, #15]
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800cafc:	68ba      	ldr	r2, [r7, #8]
 800cafe:	8b52      	ldrh	r2, [r2, #26]
 800cb00:	9202      	str	r2, [sp, #8]
 800cb02:	2202      	movs	r2, #2
 800cb04:	9201      	str	r2, [sp, #4]
 800cb06:	9300      	str	r3, [sp, #0]
 800cb08:	4623      	mov	r3, r4
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f001 fe1d 	bl	800e74c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	2200      	movs	r2, #0
 800cb16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	7b5b      	ldrb	r3, [r3, #13]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	4619      	mov	r1, r3
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f002 f92e 	bl	800ed84 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	7b1b      	ldrb	r3, [r3, #12]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	4619      	mov	r1, r3
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f002 f927 	bl	800ed84 <USBH_LL_SetToggle>

  return USBH_OK;
 800cb36:	2300      	movs	r3, #0
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3714      	adds	r7, #20
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd90      	pop	{r4, r7, pc}

0800cb40 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb4e:	69db      	ldr	r3, [r3, #28]
 800cb50:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d00e      	beq.n	800cb78 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	4619      	mov	r1, r3
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f001 fe12 	bl	800e78a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f001 fe3d 	bl	800e7ec <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2200      	movs	r2, #0
 800cb76:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	7b1b      	ldrb	r3, [r3, #12]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d00e      	beq.n	800cb9e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	7b1b      	ldrb	r3, [r3, #12]
 800cb84:	4619      	mov	r1, r3
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f001 fdff 	bl	800e78a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	7b1b      	ldrb	r3, [r3, #12]
 800cb90:	4619      	mov	r1, r3
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f001 fe2a 	bl	800e7ec <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	7b5b      	ldrb	r3, [r3, #13]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00e      	beq.n	800cbc4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	7b5b      	ldrb	r3, [r3, #13]
 800cbaa:	4619      	mov	r1, r3
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f001 fdec 	bl	800e78a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	7b5b      	ldrb	r3, [r3, #13]
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f001 fe17 	bl	800e7ec <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbca:	69db      	ldr	r3, [r3, #28]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d00b      	beq.n	800cbe8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbd6:	69db      	ldr	r3, [r3, #28]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f002 f989 	bl	800eef0 <free>
    phost->pActiveClass->pData = 0U;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3710      	adds	r7, #16
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b084      	sub	sp, #16
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc00:	69db      	ldr	r3, [r3, #28]
 800cc02:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	3340      	adds	r3, #64	; 0x40
 800cc08:	4619      	mov	r1, r3
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 f8b1 	bl	800cd72 <GetLineCoding>
 800cc10:	4603      	mov	r3, r0
 800cc12:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800cc14:	7afb      	ldrb	r3, [r7, #11]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d105      	bne.n	800cc26 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cc20:	2102      	movs	r1, #2
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800cc26:	7afb      	ldrb	r3, [r7, #11]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc46:	69db      	ldr	r3, [r3, #28]
 800cc48:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800cc50:	2b04      	cmp	r3, #4
 800cc52:	d877      	bhi.n	800cd44 <USBH_CDC_Process+0x114>
 800cc54:	a201      	add	r2, pc, #4	; (adr r2, 800cc5c <USBH_CDC_Process+0x2c>)
 800cc56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc5a:	bf00      	nop
 800cc5c:	0800cc71 	.word	0x0800cc71
 800cc60:	0800cc77 	.word	0x0800cc77
 800cc64:	0800cca7 	.word	0x0800cca7
 800cc68:	0800cd1b 	.word	0x0800cd1b
 800cc6c:	0800cd29 	.word	0x0800cd29
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800cc70:	2300      	movs	r3, #0
 800cc72:	73fb      	strb	r3, [r7, #15]
      break;
 800cc74:	e06d      	b.n	800cd52 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 f897 	bl	800cdb0 <SetLineCoding>
 800cc82:	4603      	mov	r3, r0
 800cc84:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cc86:	7bbb      	ldrb	r3, [r7, #14]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d104      	bne.n	800cc96 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	2202      	movs	r2, #2
 800cc90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cc94:	e058      	b.n	800cd48 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800cc96:	7bbb      	ldrb	r3, [r7, #14]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d055      	beq.n	800cd48 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	2204      	movs	r2, #4
 800cca0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cca4:	e050      	b.n	800cd48 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	3340      	adds	r3, #64	; 0x40
 800ccaa:	4619      	mov	r1, r3
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f000 f860 	bl	800cd72 <GetLineCoding>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ccb6:	7bbb      	ldrb	r3, [r7, #14]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d126      	bne.n	800cd0a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccce:	791b      	ldrb	r3, [r3, #4]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d13b      	bne.n	800cd4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccde:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d133      	bne.n	800cd4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccee:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d12b      	bne.n	800cd4c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ccf4:	68bb      	ldr	r3, [r7, #8]
 800ccf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ccfc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d124      	bne.n	800cd4c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f000 f958 	bl	800cfb8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cd08:	e020      	b.n	800cd4c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800cd0a:	7bbb      	ldrb	r3, [r7, #14]
 800cd0c:	2b01      	cmp	r3, #1
 800cd0e:	d01d      	beq.n	800cd4c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	2204      	movs	r2, #4
 800cd14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cd18:	e018      	b.n	800cd4c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 f867 	bl	800cdee <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f000 f8da 	bl	800ceda <CDC_ProcessReception>
      break;
 800cd26:	e014      	b.n	800cd52 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800cd28:	2100      	movs	r1, #0
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f000 ffef 	bl	800dd0e <USBH_ClrFeature>
 800cd30:	4603      	mov	r3, r0
 800cd32:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cd34:	7bbb      	ldrb	r3, [r7, #14]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d10a      	bne.n	800cd50 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800cd42:	e005      	b.n	800cd50 <USBH_CDC_Process+0x120>

    default:
      break;
 800cd44:	bf00      	nop
 800cd46:	e004      	b.n	800cd52 <USBH_CDC_Process+0x122>
      break;
 800cd48:	bf00      	nop
 800cd4a:	e002      	b.n	800cd52 <USBH_CDC_Process+0x122>
      break;
 800cd4c:	bf00      	nop
 800cd4e:	e000      	b.n	800cd52 <USBH_CDC_Process+0x122>
      break;
 800cd50:	bf00      	nop

  }

  return status;
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b083      	sub	sp, #12
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr

0800cd72 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b082      	sub	sp, #8
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	22a1      	movs	r2, #161	; 0xa1
 800cd80:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2221      	movs	r2, #33	; 0x21
 800cd86:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2200      	movs	r2, #0
 800cd92:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2207      	movs	r2, #7
 800cd98:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	2207      	movs	r2, #7
 800cd9e:	4619      	mov	r1, r3
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f001 fa81 	bl	800e2a8 <USBH_CtlReq>
 800cda6:	4603      	mov	r3, r0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2221      	movs	r2, #33	; 0x21
 800cdbe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2220      	movs	r2, #32
 800cdc4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2207      	movs	r2, #7
 800cdd6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	2207      	movs	r2, #7
 800cddc:	4619      	mov	r1, r3
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f001 fa62 	bl	800e2a8 <USBH_CtlReq>
 800cde4:	4603      	mov	r3, r0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b086      	sub	sp, #24
 800cdf2:	af02      	add	r7, sp, #8
 800cdf4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cdfc:	69db      	ldr	r3, [r3, #28]
 800cdfe:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ce00:	2300      	movs	r3, #0
 800ce02:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ce0a:	2b01      	cmp	r3, #1
 800ce0c:	d002      	beq.n	800ce14 <CDC_ProcessTransmission+0x26>
 800ce0e:	2b02      	cmp	r3, #2
 800ce10:	d023      	beq.n	800ce5a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ce12:	e05e      	b.n	800ced2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	8b12      	ldrh	r2, [r2, #24]
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d90b      	bls.n	800ce38 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	69d9      	ldr	r1, [r3, #28]
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	8b1a      	ldrh	r2, [r3, #24]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	7b5b      	ldrb	r3, [r3, #13]
 800ce2c:	2001      	movs	r0, #1
 800ce2e:	9000      	str	r0, [sp, #0]
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f001 fc48 	bl	800e6c6 <USBH_BulkSendData>
 800ce36:	e00b      	b.n	800ce50 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800ce40:	b29a      	uxth	r2, r3
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	7b5b      	ldrb	r3, [r3, #13]
 800ce46:	2001      	movs	r0, #1
 800ce48:	9000      	str	r0, [sp, #0]
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f001 fc3b 	bl	800e6c6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2202      	movs	r2, #2
 800ce54:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ce58:	e03b      	b.n	800ced2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	7b5b      	ldrb	r3, [r3, #13]
 800ce5e:	4619      	mov	r1, r3
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f001 ff65 	bl	800ed30 <USBH_LL_GetURBState>
 800ce66:	4603      	mov	r3, r0
 800ce68:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ce6a:	7afb      	ldrb	r3, [r7, #11]
 800ce6c:	2b01      	cmp	r3, #1
 800ce6e:	d128      	bne.n	800cec2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	8b12      	ldrh	r2, [r2, #24]
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d90e      	bls.n	800ce9a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce80:	68fa      	ldr	r2, [r7, #12]
 800ce82:	8b12      	ldrh	r2, [r2, #24]
 800ce84:	1a9a      	subs	r2, r3, r2
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	69db      	ldr	r3, [r3, #28]
 800ce8e:	68fa      	ldr	r2, [r7, #12]
 800ce90:	8b12      	ldrh	r2, [r2, #24]
 800ce92:	441a      	add	r2, r3
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	61da      	str	r2, [r3, #28]
 800ce98:	e002      	b.n	800cea0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d004      	beq.n	800ceb2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2201      	movs	r2, #1
 800ceac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ceb0:	e00e      	b.n	800ced0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 f868 	bl	800cf90 <USBH_CDC_TransmitCallback>
      break;
 800cec0:	e006      	b.n	800ced0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800cec2:	7afb      	ldrb	r3, [r7, #11]
 800cec4:	2b02      	cmp	r3, #2
 800cec6:	d103      	bne.n	800ced0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2201      	movs	r2, #1
 800cecc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ced0:	bf00      	nop
  }
}
 800ced2:	bf00      	nop
 800ced4:	3710      	adds	r7, #16
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}

0800ceda <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ceda:	b580      	push	{r7, lr}
 800cedc:	b086      	sub	sp, #24
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cee8:	69db      	ldr	r3, [r3, #28]
 800ceea:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ceec:	2300      	movs	r3, #0
 800ceee:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800cef6:	2b03      	cmp	r3, #3
 800cef8:	d002      	beq.n	800cf00 <CDC_ProcessReception+0x26>
 800cefa:	2b04      	cmp	r3, #4
 800cefc:	d00e      	beq.n	800cf1c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800cefe:	e043      	b.n	800cf88 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	6a19      	ldr	r1, [r3, #32]
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	8b5a      	ldrh	r2, [r3, #26]
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	7b1b      	ldrb	r3, [r3, #12]
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f001 fbff 	bl	800e710 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	2204      	movs	r2, #4
 800cf16:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800cf1a:	e035      	b.n	800cf88 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	7b1b      	ldrb	r3, [r3, #12]
 800cf20:	4619      	mov	r1, r3
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f001 ff04 	bl	800ed30 <USBH_LL_GetURBState>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800cf2c:	7cfb      	ldrb	r3, [r7, #19]
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d129      	bne.n	800cf86 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	7b1b      	ldrb	r3, [r3, #12]
 800cf36:	4619      	mov	r1, r3
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f001 fe67 	bl	800ec0c <USBH_LL_GetLastXferSize>
 800cf3e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d016      	beq.n	800cf78 <CDC_ProcessReception+0x9e>
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	8b5b      	ldrh	r3, [r3, #26]
 800cf4e:	461a      	mov	r2, r3
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d910      	bls.n	800cf78 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	1ad2      	subs	r2, r2, r3
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	6a1a      	ldr	r2, [r3, #32]
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	441a      	add	r2, r3
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	2203      	movs	r2, #3
 800cf72:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800cf76:	e006      	b.n	800cf86 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 f80f 	bl	800cfa4 <USBH_CDC_ReceiveCallback>
      break;
 800cf86:	bf00      	nop
  }
}
 800cf88:	bf00      	nop
 800cf8a:	3718      	adds	r7, #24
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cf98:	bf00      	nop
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr

0800cfa4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cfac:	bf00      	nop
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	4613      	mov	r3, r2
 800cfd8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d101      	bne.n	800cfe4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800cfe0:	2302      	movs	r3, #2
 800cfe2:	e029      	b.n	800d038 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	79fa      	ldrb	r2, [r7, #7]
 800cfe8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2200      	movs	r2, #0
 800cff0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2200      	movs	r2, #0
 800cff8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	f000 f81f 	bl	800d040 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2200      	movs	r2, #0
 800d006:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2200      	movs	r2, #0
 800d016:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2200      	movs	r2, #0
 800d01e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d003      	beq.n	800d030 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f001 fd2d 	bl	800ea90 <USBH_LL_Init>

  return USBH_OK;
 800d036:	2300      	movs	r3, #0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d040:	b480      	push	{r7}
 800d042:	b085      	sub	sp, #20
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d048:	2300      	movs	r3, #0
 800d04a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d04c:	2300      	movs	r3, #0
 800d04e:	60fb      	str	r3, [r7, #12]
 800d050:	e009      	b.n	800d066 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	33e0      	adds	r3, #224	; 0xe0
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	4413      	add	r3, r2
 800d05c:	2200      	movs	r2, #0
 800d05e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	3301      	adds	r3, #1
 800d064:	60fb      	str	r3, [r7, #12]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	2b0f      	cmp	r3, #15
 800d06a:	d9f2      	bls.n	800d052 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d06c:	2300      	movs	r3, #0
 800d06e:	60fb      	str	r3, [r7, #12]
 800d070:	e009      	b.n	800d086 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	4413      	add	r3, r2
 800d078:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d07c:	2200      	movs	r2, #0
 800d07e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	3301      	adds	r3, #1
 800d084:	60fb      	str	r3, [r7, #12]
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d08c:	d3f1      	bcc.n	800d072 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2200      	movs	r2, #0
 800d098:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2201      	movs	r2, #1
 800d09e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2240      	movs	r2, #64	; 0x40
 800d0b2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3714      	adds	r7, #20
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b085      	sub	sp, #20
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d016      	beq.n	800d12a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d102:	2b00      	cmp	r3, #0
 800d104:	d10e      	bne.n	800d124 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d10c:	1c59      	adds	r1, r3, #1
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	33de      	adds	r3, #222	; 0xde
 800d118:	6839      	ldr	r1, [r7, #0]
 800d11a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d11e:	2300      	movs	r3, #0
 800d120:	73fb      	strb	r3, [r7, #15]
 800d122:	e004      	b.n	800d12e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d124:	2302      	movs	r3, #2
 800d126:	73fb      	strb	r3, [r7, #15]
 800d128:	e001      	b.n	800d12e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d12a:	2302      	movs	r3, #2
 800d12c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d12e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3714      	adds	r7, #20
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b085      	sub	sp, #20
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	460b      	mov	r3, r1
 800d146:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d148:	2300      	movs	r3, #0
 800d14a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d152:	78fa      	ldrb	r2, [r7, #3]
 800d154:	429a      	cmp	r2, r3
 800d156:	d204      	bcs.n	800d162 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	78fa      	ldrb	r2, [r7, #3]
 800d15c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d160:	e001      	b.n	800d166 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d162:	2302      	movs	r3, #2
 800d164:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d166:	7bfb      	ldrb	r3, [r7, #15]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3714      	adds	r7, #20
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d174:	b480      	push	{r7}
 800d176:	b087      	sub	sp, #28
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	4608      	mov	r0, r1
 800d17e:	4611      	mov	r1, r2
 800d180:	461a      	mov	r2, r3
 800d182:	4603      	mov	r3, r0
 800d184:	70fb      	strb	r3, [r7, #3]
 800d186:	460b      	mov	r3, r1
 800d188:	70bb      	strb	r3, [r7, #2]
 800d18a:	4613      	mov	r3, r2
 800d18c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d18e:	2300      	movs	r3, #0
 800d190:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d192:	2300      	movs	r3, #0
 800d194:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d19c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d19e:	e025      	b.n	800d1ec <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d1a0:	7dfb      	ldrb	r3, [r7, #23]
 800d1a2:	221a      	movs	r2, #26
 800d1a4:	fb02 f303 	mul.w	r3, r2, r3
 800d1a8:	3308      	adds	r3, #8
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	3302      	adds	r3, #2
 800d1b0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	795b      	ldrb	r3, [r3, #5]
 800d1b6:	78fa      	ldrb	r2, [r7, #3]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d002      	beq.n	800d1c2 <USBH_FindInterface+0x4e>
 800d1bc:	78fb      	ldrb	r3, [r7, #3]
 800d1be:	2bff      	cmp	r3, #255	; 0xff
 800d1c0:	d111      	bne.n	800d1e6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d1c6:	78ba      	ldrb	r2, [r7, #2]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d002      	beq.n	800d1d2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1cc:	78bb      	ldrb	r3, [r7, #2]
 800d1ce:	2bff      	cmp	r3, #255	; 0xff
 800d1d0:	d109      	bne.n	800d1e6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1d6:	787a      	ldrb	r2, [r7, #1]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d002      	beq.n	800d1e2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d1dc:	787b      	ldrb	r3, [r7, #1]
 800d1de:	2bff      	cmp	r3, #255	; 0xff
 800d1e0:	d101      	bne.n	800d1e6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d1e2:	7dfb      	ldrb	r3, [r7, #23]
 800d1e4:	e006      	b.n	800d1f4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d1e6:	7dfb      	ldrb	r3, [r7, #23]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d1ec:	7dfb      	ldrb	r3, [r7, #23]
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	d9d6      	bls.n	800d1a0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d1f2:	23ff      	movs	r3, #255	; 0xff
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	371c      	adds	r7, #28
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr

0800d200 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f001 fc87 	bl	800eb1c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800d20e:	2101      	movs	r1, #1
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f001 fda0 	bl	800ed56 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d216:	2300      	movs	r3, #0
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3708      	adds	r7, #8
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b088      	sub	sp, #32
 800d224:	af04      	add	r7, sp, #16
 800d226:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d228:	2302      	movs	r3, #2
 800d22a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d22c:	2300      	movs	r3, #0
 800d22e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d236:	b2db      	uxtb	r3, r3
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d102      	bne.n	800d242 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2203      	movs	r2, #3
 800d240:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	b2db      	uxtb	r3, r3
 800d248:	2b0b      	cmp	r3, #11
 800d24a:	f200 81be 	bhi.w	800d5ca <USBH_Process+0x3aa>
 800d24e:	a201      	add	r2, pc, #4	; (adr r2, 800d254 <USBH_Process+0x34>)
 800d250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d254:	0800d285 	.word	0x0800d285
 800d258:	0800d2b7 	.word	0x0800d2b7
 800d25c:	0800d31f 	.word	0x0800d31f
 800d260:	0800d565 	.word	0x0800d565
 800d264:	0800d5cb 	.word	0x0800d5cb
 800d268:	0800d3c3 	.word	0x0800d3c3
 800d26c:	0800d50b 	.word	0x0800d50b
 800d270:	0800d3f9 	.word	0x0800d3f9
 800d274:	0800d419 	.word	0x0800d419
 800d278:	0800d439 	.word	0x0800d439
 800d27c:	0800d47d 	.word	0x0800d47d
 800d280:	0800d54d 	.word	0x0800d54d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	f000 819e 	beq.w	800d5ce <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2201      	movs	r2, #1
 800d296:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d298:	20c8      	movs	r0, #200	; 0xc8
 800d29a:	f001 fda3 	bl	800ede4 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f001 fc99 	bl	800ebd6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d2b4:	e18b      	b.n	800d5ce <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d2bc:	2b01      	cmp	r3, #1
 800d2be:	d107      	bne.n	800d2d0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2202      	movs	r2, #2
 800d2cc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d2ce:	e18d      	b.n	800d5ec <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d2d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2da:	d914      	bls.n	800d306 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	b2da      	uxtb	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d2f2:	2b03      	cmp	r3, #3
 800d2f4:	d903      	bls.n	800d2fe <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	220d      	movs	r2, #13
 800d2fa:	701a      	strb	r2, [r3, #0]
      break;
 800d2fc:	e176      	b.n	800d5ec <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2200      	movs	r2, #0
 800d302:	701a      	strb	r2, [r3, #0]
      break;
 800d304:	e172      	b.n	800d5ec <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d30c:	f103 020a 	add.w	r2, r3, #10
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d316:	200a      	movs	r0, #10
 800d318:	f001 fd64 	bl	800ede4 <USBH_Delay>
      break;
 800d31c:	e166      	b.n	800d5ec <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d324:	2b00      	cmp	r3, #0
 800d326:	d005      	beq.n	800d334 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d32e:	2104      	movs	r1, #4
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d334:	2064      	movs	r0, #100	; 0x64
 800d336:	f001 fd55 	bl	800ede4 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f001 fc24 	bl	800eb88 <USBH_LL_GetSpeed>
 800d340:	4603      	mov	r3, r0
 800d342:	461a      	mov	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2205      	movs	r2, #5
 800d34e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d350:	2100      	movs	r1, #0
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f001 fa29 	bl	800e7aa <USBH_AllocPipe>
 800d358:	4603      	mov	r3, r0
 800d35a:	461a      	mov	r2, r3
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d360:	2180      	movs	r1, #128	; 0x80
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f001 fa21 	bl	800e7aa <USBH_AllocPipe>
 800d368:	4603      	mov	r3, r0
 800d36a:	461a      	mov	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	7919      	ldrb	r1, [r3, #4]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d384:	b292      	uxth	r2, r2
 800d386:	9202      	str	r2, [sp, #8]
 800d388:	2200      	movs	r2, #0
 800d38a:	9201      	str	r2, [sp, #4]
 800d38c:	9300      	str	r3, [sp, #0]
 800d38e:	4603      	mov	r3, r0
 800d390:	2280      	movs	r2, #128	; 0x80
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f001 f9da 	bl	800e74c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	7959      	ldrb	r1, [r3, #5]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d3ac:	b292      	uxth	r2, r2
 800d3ae:	9202      	str	r2, [sp, #8]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	9201      	str	r2, [sp, #4]
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f001 f9c6 	bl	800e74c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d3c0:	e114      	b.n	800d5ec <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 f918 	bl	800d5f8 <USBH_HandleEnum>
 800d3c8:	4603      	mov	r3, r0
 800d3ca:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d3cc:	7bbb      	ldrb	r3, [r7, #14]
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f040 80fe 	bne.w	800d5d2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d3e4:	2b01      	cmp	r3, #1
 800d3e6:	d103      	bne.n	800d3f0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2208      	movs	r2, #8
 800d3ec:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d3ee:	e0f0      	b.n	800d5d2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2207      	movs	r2, #7
 800d3f4:	701a      	strb	r2, [r3, #0]
      break;
 800d3f6:	e0ec      	b.n	800d5d2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	f000 80e9 	beq.w	800d5d6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d40a:	2101      	movs	r1, #1
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2208      	movs	r2, #8
 800d414:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800d416:	e0de      	b.n	800d5d6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d41e:	b29b      	uxth	r3, r3
 800d420:	4619      	mov	r1, r3
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 fc2c 	bl	800dc80 <USBH_SetCfg>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f040 80d5 	bne.w	800d5da <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2209      	movs	r2, #9
 800d434:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d436:	e0d0      	b.n	800d5da <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d43e:	f003 0320 	and.w	r3, r3, #32
 800d442:	2b00      	cmp	r3, #0
 800d444:	d016      	beq.n	800d474 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d446:	2101      	movs	r1, #1
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 fc3c 	bl	800dcc6 <USBH_SetFeature>
 800d44e:	4603      	mov	r3, r0
 800d450:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d452:	7bbb      	ldrb	r3, [r7, #14]
 800d454:	b2db      	uxtb	r3, r3
 800d456:	2b00      	cmp	r3, #0
 800d458:	d103      	bne.n	800d462 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	220a      	movs	r2, #10
 800d45e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d460:	e0bd      	b.n	800d5de <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800d462:	7bbb      	ldrb	r3, [r7, #14]
 800d464:	b2db      	uxtb	r3, r3
 800d466:	2b03      	cmp	r3, #3
 800d468:	f040 80b9 	bne.w	800d5de <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	220a      	movs	r2, #10
 800d470:	701a      	strb	r2, [r3, #0]
      break;
 800d472:	e0b4      	b.n	800d5de <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	220a      	movs	r2, #10
 800d478:	701a      	strb	r2, [r3, #0]
      break;
 800d47a:	e0b0      	b.n	800d5de <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d482:	2b00      	cmp	r3, #0
 800d484:	f000 80ad 	beq.w	800d5e2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2200      	movs	r2, #0
 800d48c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d490:	2300      	movs	r3, #0
 800d492:	73fb      	strb	r3, [r7, #15]
 800d494:	e016      	b.n	800d4c4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d496:	7bfa      	ldrb	r2, [r7, #15]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	32de      	adds	r2, #222	; 0xde
 800d49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4a0:	791a      	ldrb	r2, [r3, #4]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d108      	bne.n	800d4be <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d4ac:	7bfa      	ldrb	r2, [r7, #15]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	32de      	adds	r2, #222	; 0xde
 800d4b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d4bc:	e005      	b.n	800d4ca <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d4be:	7bfb      	ldrb	r3, [r7, #15]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	73fb      	strb	r3, [r7, #15]
 800d4c4:	7bfb      	ldrb	r3, [r7, #15]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d0e5      	beq.n	800d496 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d016      	beq.n	800d502 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d4da:	689b      	ldr	r3, [r3, #8]
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	4798      	blx	r3
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d109      	bne.n	800d4fa <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2206      	movs	r2, #6
 800d4ea:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d4f2:	2103      	movs	r1, #3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d4f8:	e073      	b.n	800d5e2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	220d      	movs	r2, #13
 800d4fe:	701a      	strb	r2, [r3, #0]
      break;
 800d500:	e06f      	b.n	800d5e2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	220d      	movs	r2, #13
 800d506:	701a      	strb	r2, [r3, #0]
      break;
 800d508:	e06b      	b.n	800d5e2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d510:	2b00      	cmp	r3, #0
 800d512:	d017      	beq.n	800d544 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	4798      	blx	r3
 800d520:	4603      	mov	r3, r0
 800d522:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d524:	7bbb      	ldrb	r3, [r7, #14]
 800d526:	b2db      	uxtb	r3, r3
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d103      	bne.n	800d534 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	220b      	movs	r2, #11
 800d530:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d532:	e058      	b.n	800d5e6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800d534:	7bbb      	ldrb	r3, [r7, #14]
 800d536:	b2db      	uxtb	r3, r3
 800d538:	2b02      	cmp	r3, #2
 800d53a:	d154      	bne.n	800d5e6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	220d      	movs	r2, #13
 800d540:	701a      	strb	r2, [r3, #0]
      break;
 800d542:	e050      	b.n	800d5e6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	220d      	movs	r2, #13
 800d548:	701a      	strb	r2, [r3, #0]
      break;
 800d54a:	e04c      	b.n	800d5e6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d552:	2b00      	cmp	r3, #0
 800d554:	d049      	beq.n	800d5ea <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d55c:	695b      	ldr	r3, [r3, #20]
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	4798      	blx	r3
      }
      break;
 800d562:	e042      	b.n	800d5ea <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7ff fd67 	bl	800d040 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d009      	beq.n	800d590 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2200      	movs	r2, #0
 800d58c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d596:	2b00      	cmp	r3, #0
 800d598:	d005      	beq.n	800d5a6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d5a0:	2105      	movs	r1, #5
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d5ac:	b2db      	uxtb	r3, r3
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d107      	bne.n	800d5c2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7ff fe20 	bl	800d200 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d5c0:	e014      	b.n	800d5ec <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f001 faaa 	bl	800eb1c <USBH_LL_Start>
      break;
 800d5c8:	e010      	b.n	800d5ec <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800d5ca:	bf00      	nop
 800d5cc:	e00e      	b.n	800d5ec <USBH_Process+0x3cc>
      break;
 800d5ce:	bf00      	nop
 800d5d0:	e00c      	b.n	800d5ec <USBH_Process+0x3cc>
      break;
 800d5d2:	bf00      	nop
 800d5d4:	e00a      	b.n	800d5ec <USBH_Process+0x3cc>
    break;
 800d5d6:	bf00      	nop
 800d5d8:	e008      	b.n	800d5ec <USBH_Process+0x3cc>
      break;
 800d5da:	bf00      	nop
 800d5dc:	e006      	b.n	800d5ec <USBH_Process+0x3cc>
      break;
 800d5de:	bf00      	nop
 800d5e0:	e004      	b.n	800d5ec <USBH_Process+0x3cc>
      break;
 800d5e2:	bf00      	nop
 800d5e4:	e002      	b.n	800d5ec <USBH_Process+0x3cc>
      break;
 800d5e6:	bf00      	nop
 800d5e8:	e000      	b.n	800d5ec <USBH_Process+0x3cc>
      break;
 800d5ea:	bf00      	nop
  }
  return USBH_OK;
 800d5ec:	2300      	movs	r3, #0
}
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3710      	adds	r7, #16
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
 800d5f6:	bf00      	nop

0800d5f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b088      	sub	sp, #32
 800d5fc:	af04      	add	r7, sp, #16
 800d5fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d600:	2301      	movs	r3, #1
 800d602:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d604:	2301      	movs	r3, #1
 800d606:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	785b      	ldrb	r3, [r3, #1]
 800d60c:	2b07      	cmp	r3, #7
 800d60e:	f200 81c1 	bhi.w	800d994 <USBH_HandleEnum+0x39c>
 800d612:	a201      	add	r2, pc, #4	; (adr r2, 800d618 <USBH_HandleEnum+0x20>)
 800d614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d618:	0800d639 	.word	0x0800d639
 800d61c:	0800d6f7 	.word	0x0800d6f7
 800d620:	0800d761 	.word	0x0800d761
 800d624:	0800d7ef 	.word	0x0800d7ef
 800d628:	0800d859 	.word	0x0800d859
 800d62c:	0800d8c9 	.word	0x0800d8c9
 800d630:	0800d90f 	.word	0x0800d90f
 800d634:	0800d955 	.word	0x0800d955
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d638:	2108      	movs	r1, #8
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 fa50 	bl	800dae0 <USBH_Get_DevDesc>
 800d640:	4603      	mov	r3, r0
 800d642:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d644:	7bbb      	ldrb	r3, [r7, #14]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d130      	bne.n	800d6ac <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2201      	movs	r2, #1
 800d658:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	7919      	ldrb	r1, [r3, #4]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d66e:	b292      	uxth	r2, r2
 800d670:	9202      	str	r2, [sp, #8]
 800d672:	2200      	movs	r2, #0
 800d674:	9201      	str	r2, [sp, #4]
 800d676:	9300      	str	r3, [sp, #0]
 800d678:	4603      	mov	r3, r0
 800d67a:	2280      	movs	r2, #128	; 0x80
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f001 f865 	bl	800e74c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	7959      	ldrb	r1, [r3, #5]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d692:	687a      	ldr	r2, [r7, #4]
 800d694:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d696:	b292      	uxth	r2, r2
 800d698:	9202      	str	r2, [sp, #8]
 800d69a:	2200      	movs	r2, #0
 800d69c:	9201      	str	r2, [sp, #4]
 800d69e:	9300      	str	r3, [sp, #0]
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	6878      	ldr	r0, [r7, #4]
 800d6a6:	f001 f851 	bl	800e74c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d6aa:	e175      	b.n	800d998 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d6ac:	7bbb      	ldrb	r3, [r7, #14]
 800d6ae:	2b03      	cmp	r3, #3
 800d6b0:	f040 8172 	bne.w	800d998 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	b2da      	uxtb	r2, r3
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d6ca:	2b03      	cmp	r3, #3
 800d6cc:	d903      	bls.n	800d6d6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	220d      	movs	r2, #13
 800d6d2:	701a      	strb	r2, [r3, #0]
      break;
 800d6d4:	e160      	b.n	800d998 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	795b      	ldrb	r3, [r3, #5]
 800d6da:	4619      	mov	r1, r3
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f001 f885 	bl	800e7ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	791b      	ldrb	r3, [r3, #4]
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f001 f87f 	bl	800e7ec <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	701a      	strb	r2, [r3, #0]
      break;
 800d6f4:	e150      	b.n	800d998 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d6f6:	2112      	movs	r1, #18
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 f9f1 	bl	800dae0 <USBH_Get_DevDesc>
 800d6fe:	4603      	mov	r3, r0
 800d700:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d702:	7bbb      	ldrb	r3, [r7, #14]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d103      	bne.n	800d710 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2202      	movs	r2, #2
 800d70c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d70e:	e145      	b.n	800d99c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d710:	7bbb      	ldrb	r3, [r7, #14]
 800d712:	2b03      	cmp	r3, #3
 800d714:	f040 8142 	bne.w	800d99c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d71e:	3301      	adds	r3, #1
 800d720:	b2da      	uxtb	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d72e:	2b03      	cmp	r3, #3
 800d730:	d903      	bls.n	800d73a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	220d      	movs	r2, #13
 800d736:	701a      	strb	r2, [r3, #0]
      break;
 800d738:	e130      	b.n	800d99c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	795b      	ldrb	r3, [r3, #5]
 800d73e:	4619      	mov	r1, r3
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f001 f853 	bl	800e7ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	791b      	ldrb	r3, [r3, #4]
 800d74a:	4619      	mov	r1, r3
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f001 f84d 	bl	800e7ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2200      	movs	r2, #0
 800d756:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2200      	movs	r2, #0
 800d75c:	701a      	strb	r2, [r3, #0]
      break;
 800d75e:	e11d      	b.n	800d99c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d760:	2101      	movs	r1, #1
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 fa68 	bl	800dc38 <USBH_SetAddress>
 800d768:	4603      	mov	r3, r0
 800d76a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d76c:	7bbb      	ldrb	r3, [r7, #14]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d132      	bne.n	800d7d8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d772:	2002      	movs	r0, #2
 800d774:	f001 fb36 	bl	800ede4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2201      	movs	r2, #1
 800d77c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2203      	movs	r2, #3
 800d784:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	7919      	ldrb	r1, [r3, #4]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d796:	687a      	ldr	r2, [r7, #4]
 800d798:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d79a:	b292      	uxth	r2, r2
 800d79c:	9202      	str	r2, [sp, #8]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	9201      	str	r2, [sp, #4]
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2280      	movs	r2, #128	; 0x80
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 ffcf 	bl	800e74c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	7959      	ldrb	r1, [r3, #5]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d7c2:	b292      	uxth	r2, r2
 800d7c4:	9202      	str	r2, [sp, #8]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	9201      	str	r2, [sp, #4]
 800d7ca:	9300      	str	r3, [sp, #0]
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 ffbb 	bl	800e74c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d7d6:	e0e3      	b.n	800d9a0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d7d8:	7bbb      	ldrb	r3, [r7, #14]
 800d7da:	2b03      	cmp	r3, #3
 800d7dc:	f040 80e0 	bne.w	800d9a0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	220d      	movs	r2, #13
 800d7e4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	705a      	strb	r2, [r3, #1]
      break;
 800d7ec:	e0d8      	b.n	800d9a0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d7ee:	2109      	movs	r1, #9
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 f99d 	bl	800db30 <USBH_Get_CfgDesc>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d7fa:	7bbb      	ldrb	r3, [r7, #14]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d103      	bne.n	800d808 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2204      	movs	r2, #4
 800d804:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d806:	e0cd      	b.n	800d9a4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d808:	7bbb      	ldrb	r3, [r7, #14]
 800d80a:	2b03      	cmp	r3, #3
 800d80c:	f040 80ca 	bne.w	800d9a4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d816:	3301      	adds	r3, #1
 800d818:	b2da      	uxtb	r2, r3
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d826:	2b03      	cmp	r3, #3
 800d828:	d903      	bls.n	800d832 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	220d      	movs	r2, #13
 800d82e:	701a      	strb	r2, [r3, #0]
      break;
 800d830:	e0b8      	b.n	800d9a4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	795b      	ldrb	r3, [r3, #5]
 800d836:	4619      	mov	r1, r3
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 ffd7 	bl	800e7ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	791b      	ldrb	r3, [r3, #4]
 800d842:	4619      	mov	r1, r3
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 ffd1 	bl	800e7ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2200      	movs	r2, #0
 800d84e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2200      	movs	r2, #0
 800d854:	701a      	strb	r2, [r3, #0]
      break;
 800d856:	e0a5      	b.n	800d9a4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d85e:	4619      	mov	r1, r3
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 f965 	bl	800db30 <USBH_Get_CfgDesc>
 800d866:	4603      	mov	r3, r0
 800d868:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d86a:	7bbb      	ldrb	r3, [r7, #14]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d103      	bne.n	800d878 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2205      	movs	r2, #5
 800d874:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d876:	e097      	b.n	800d9a8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d878:	7bbb      	ldrb	r3, [r7, #14]
 800d87a:	2b03      	cmp	r3, #3
 800d87c:	f040 8094 	bne.w	800d9a8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d886:	3301      	adds	r3, #1
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d896:	2b03      	cmp	r3, #3
 800d898:	d903      	bls.n	800d8a2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	220d      	movs	r2, #13
 800d89e:	701a      	strb	r2, [r3, #0]
      break;
 800d8a0:	e082      	b.n	800d9a8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	795b      	ldrb	r3, [r3, #5]
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 ff9f 	bl	800e7ec <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	791b      	ldrb	r3, [r3, #4]
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 ff99 	bl	800e7ec <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2200      	movs	r2, #0
 800d8be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	701a      	strb	r2, [r3, #0]
      break;
 800d8c6:	e06f      	b.n	800d9a8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d019      	beq.n	800d906 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d8de:	23ff      	movs	r3, #255	; 0xff
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f000 f949 	bl	800db78 <USBH_Get_StringDesc>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d8ea:	7bbb      	ldrb	r3, [r7, #14]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d103      	bne.n	800d8f8 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2206      	movs	r2, #6
 800d8f4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d8f6:	e059      	b.n	800d9ac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d8f8:	7bbb      	ldrb	r3, [r7, #14]
 800d8fa:	2b03      	cmp	r3, #3
 800d8fc:	d156      	bne.n	800d9ac <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2206      	movs	r2, #6
 800d902:	705a      	strb	r2, [r3, #1]
      break;
 800d904:	e052      	b.n	800d9ac <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	2206      	movs	r2, #6
 800d90a:	705a      	strb	r2, [r3, #1]
      break;
 800d90c:	e04e      	b.n	800d9ac <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d914:	2b00      	cmp	r3, #0
 800d916:	d019      	beq.n	800d94c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d924:	23ff      	movs	r3, #255	; 0xff
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f000 f926 	bl	800db78 <USBH_Get_StringDesc>
 800d92c:	4603      	mov	r3, r0
 800d92e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d930:	7bbb      	ldrb	r3, [r7, #14]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d103      	bne.n	800d93e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2207      	movs	r2, #7
 800d93a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d93c:	e038      	b.n	800d9b0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d93e:	7bbb      	ldrb	r3, [r7, #14]
 800d940:	2b03      	cmp	r3, #3
 800d942:	d135      	bne.n	800d9b0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2207      	movs	r2, #7
 800d948:	705a      	strb	r2, [r3, #1]
      break;
 800d94a:	e031      	b.n	800d9b0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2207      	movs	r2, #7
 800d950:	705a      	strb	r2, [r3, #1]
      break;
 800d952:	e02d      	b.n	800d9b0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d017      	beq.n	800d98e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d96a:	23ff      	movs	r3, #255	; 0xff
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 f903 	bl	800db78 <USBH_Get_StringDesc>
 800d972:	4603      	mov	r3, r0
 800d974:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d976:	7bbb      	ldrb	r3, [r7, #14]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d102      	bne.n	800d982 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d97c:	2300      	movs	r3, #0
 800d97e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d980:	e018      	b.n	800d9b4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d982:	7bbb      	ldrb	r3, [r7, #14]
 800d984:	2b03      	cmp	r3, #3
 800d986:	d115      	bne.n	800d9b4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800d988:	2300      	movs	r3, #0
 800d98a:	73fb      	strb	r3, [r7, #15]
      break;
 800d98c:	e012      	b.n	800d9b4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800d98e:	2300      	movs	r3, #0
 800d990:	73fb      	strb	r3, [r7, #15]
      break;
 800d992:	e00f      	b.n	800d9b4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800d994:	bf00      	nop
 800d996:	e00e      	b.n	800d9b6 <USBH_HandleEnum+0x3be>
      break;
 800d998:	bf00      	nop
 800d99a:	e00c      	b.n	800d9b6 <USBH_HandleEnum+0x3be>
      break;
 800d99c:	bf00      	nop
 800d99e:	e00a      	b.n	800d9b6 <USBH_HandleEnum+0x3be>
      break;
 800d9a0:	bf00      	nop
 800d9a2:	e008      	b.n	800d9b6 <USBH_HandleEnum+0x3be>
      break;
 800d9a4:	bf00      	nop
 800d9a6:	e006      	b.n	800d9b6 <USBH_HandleEnum+0x3be>
      break;
 800d9a8:	bf00      	nop
 800d9aa:	e004      	b.n	800d9b6 <USBH_HandleEnum+0x3be>
      break;
 800d9ac:	bf00      	nop
 800d9ae:	e002      	b.n	800d9b6 <USBH_HandleEnum+0x3be>
      break;
 800d9b0:	bf00      	nop
 800d9b2:	e000      	b.n	800d9b6 <USBH_HandleEnum+0x3be>
      break;
 800d9b4:	bf00      	nop
  }
  return Status;
 800d9b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3710      	adds	r7, #16
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b083      	sub	sp, #12
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d9d2:	bf00      	nop
 800d9d4:	370c      	adds	r7, #12
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr

0800d9de <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b082      	sub	sp, #8
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d9ec:	1c5a      	adds	r2, r3, #1
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 f804 	bl	800da02 <USBH_HandleSof>
}
 800d9fa:	bf00      	nop
 800d9fc:	3708      	adds	r7, #8
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b082      	sub	sp, #8
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	2b0b      	cmp	r3, #11
 800da12:	d10a      	bne.n	800da2a <USBH_HandleSof+0x28>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d005      	beq.n	800da2a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da24:	699b      	ldr	r3, [r3, #24]
 800da26:	6878      	ldr	r0, [r7, #4]
 800da28:	4798      	blx	r3
  }
}
 800da2a:	bf00      	nop
 800da2c:	3708      	adds	r7, #8
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}

0800da32 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800da32:	b480      	push	{r7}
 800da34:	b083      	sub	sp, #12
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2201      	movs	r2, #1
 800da3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800da42:	bf00      	nop
}
 800da44:	370c      	adds	r7, #12
 800da46:	46bd      	mov	sp, r7
 800da48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4c:	4770      	bx	lr

0800da4e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800da4e:	b480      	push	{r7}
 800da50:	b083      	sub	sp, #12
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2200      	movs	r2, #0
 800da5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800da5e:	bf00      	nop
}
 800da60:	370c      	adds	r7, #12
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr

0800da6a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800da6a:	b480      	push	{r7}
 800da6c:	b083      	sub	sp, #12
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2201      	movs	r2, #1
 800da76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2200      	movs	r2, #0
 800da86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800da8a:	2300      	movs	r3, #0
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	370c      	adds	r7, #12
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2201      	movs	r2, #1
 800daa4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2200      	movs	r2, #0
 800daac:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2200      	movs	r2, #0
 800dab4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f001 f84a 	bl	800eb52 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	791b      	ldrb	r3, [r3, #4]
 800dac2:	4619      	mov	r1, r3
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 fe91 	bl	800e7ec <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	795b      	ldrb	r3, [r3, #5]
 800dace:	4619      	mov	r1, r3
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 fe8b 	bl	800e7ec <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3708      	adds	r7, #8
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b086      	sub	sp, #24
 800dae4:	af02      	add	r7, sp, #8
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	460b      	mov	r3, r1
 800daea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800daf2:	78fb      	ldrb	r3, [r7, #3]
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	4613      	mov	r3, r2
 800dafa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dafe:	2100      	movs	r1, #0
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 f864 	bl	800dbce <USBH_GetDescriptor>
 800db06:	4603      	mov	r3, r0
 800db08:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800db0a:	7bfb      	ldrb	r3, [r7, #15]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10a      	bne.n	800db26 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f203 3026 	addw	r0, r3, #806	; 0x326
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800db1c:	78fa      	ldrb	r2, [r7, #3]
 800db1e:	b292      	uxth	r2, r2
 800db20:	4619      	mov	r1, r3
 800db22:	f000 f918 	bl	800dd56 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800db26:	7bfb      	ldrb	r3, [r7, #15]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800db30:	b580      	push	{r7, lr}
 800db32:	b086      	sub	sp, #24
 800db34:	af02      	add	r7, sp, #8
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	460b      	mov	r3, r1
 800db3a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	331c      	adds	r3, #28
 800db40:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800db42:	887b      	ldrh	r3, [r7, #2]
 800db44:	9300      	str	r3, [sp, #0]
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db4c:	2100      	movs	r1, #0
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f000 f83d 	bl	800dbce <USBH_GetDescriptor>
 800db54:	4603      	mov	r3, r0
 800db56:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800db58:	7bfb      	ldrb	r3, [r7, #15]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d107      	bne.n	800db6e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800db5e:	887b      	ldrh	r3, [r7, #2]
 800db60:	461a      	mov	r2, r3
 800db62:	68b9      	ldr	r1, [r7, #8]
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 f987 	bl	800de78 <USBH_ParseCfgDesc>
 800db6a:	4603      	mov	r3, r0
 800db6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800db6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db70:	4618      	mov	r0, r3
 800db72:	3710      	adds	r7, #16
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b088      	sub	sp, #32
 800db7c:	af02      	add	r7, sp, #8
 800db7e:	60f8      	str	r0, [r7, #12]
 800db80:	607a      	str	r2, [r7, #4]
 800db82:	461a      	mov	r2, r3
 800db84:	460b      	mov	r3, r1
 800db86:	72fb      	strb	r3, [r7, #11]
 800db88:	4613      	mov	r3, r2
 800db8a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800db8c:	7afb      	ldrb	r3, [r7, #11]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800db94:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800db9c:	893b      	ldrh	r3, [r7, #8]
 800db9e:	9300      	str	r3, [sp, #0]
 800dba0:	460b      	mov	r3, r1
 800dba2:	2100      	movs	r1, #0
 800dba4:	68f8      	ldr	r0, [r7, #12]
 800dba6:	f000 f812 	bl	800dbce <USBH_GetDescriptor>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800dbae:	7dfb      	ldrb	r3, [r7, #23]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d107      	bne.n	800dbc4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dbba:	893a      	ldrh	r2, [r7, #8]
 800dbbc:	6879      	ldr	r1, [r7, #4]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f000 fb24 	bl	800e20c <USBH_ParseStringDesc>
  }

  return status;
 800dbc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3718      	adds	r7, #24
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b084      	sub	sp, #16
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	60f8      	str	r0, [r7, #12]
 800dbd6:	607b      	str	r3, [r7, #4]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	72fb      	strb	r3, [r7, #11]
 800dbdc:	4613      	mov	r3, r2
 800dbde:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	789b      	ldrb	r3, [r3, #2]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d11c      	bne.n	800dc22 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800dbe8:	7afb      	ldrb	r3, [r7, #11]
 800dbea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dbee:	b2da      	uxtb	r2, r3
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2206      	movs	r2, #6
 800dbf8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	893a      	ldrh	r2, [r7, #8]
 800dbfe:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800dc00:	893b      	ldrh	r3, [r7, #8]
 800dc02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dc06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc0a:	d104      	bne.n	800dc16 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	f240 4209 	movw	r2, #1033	; 0x409
 800dc12:	829a      	strh	r2, [r3, #20]
 800dc14:	e002      	b.n	800dc1c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2200      	movs	r2, #0
 800dc1a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	8b3a      	ldrh	r2, [r7, #24]
 800dc20:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800dc22:	8b3b      	ldrh	r3, [r7, #24]
 800dc24:	461a      	mov	r2, r3
 800dc26:	6879      	ldr	r1, [r7, #4]
 800dc28:	68f8      	ldr	r0, [r7, #12]
 800dc2a:	f000 fb3d 	bl	800e2a8 <USBH_CtlReq>
 800dc2e:	4603      	mov	r3, r0
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3710      	adds	r7, #16
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
 800dc40:	460b      	mov	r3, r1
 800dc42:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	789b      	ldrb	r3, [r3, #2]
 800dc48:	2b01      	cmp	r3, #1
 800dc4a:	d10f      	bne.n	800dc6c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2205      	movs	r2, #5
 800dc56:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800dc58:	78fb      	ldrb	r3, [r7, #3]
 800dc5a:	b29a      	uxth	r2, r3
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	2100      	movs	r1, #0
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 fb19 	bl	800e2a8 <USBH_CtlReq>
 800dc76:	4603      	mov	r3, r0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	460b      	mov	r3, r1
 800dc8a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	789b      	ldrb	r3, [r3, #2]
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	d10e      	bne.n	800dcb2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2209      	movs	r2, #9
 800dc9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	887a      	ldrh	r2, [r7, #2]
 800dca4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	6878      	ldr	r0, [r7, #4]
 800dcb8:	f000 faf6 	bl	800e2a8 <USBH_CtlReq>
 800dcbc:	4603      	mov	r3, r0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}

0800dcc6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b082      	sub	sp, #8
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
 800dcce:	460b      	mov	r3, r1
 800dcd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	789b      	ldrb	r3, [r3, #2]
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d10f      	bne.n	800dcfa <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2203      	movs	r2, #3
 800dce4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800dce6:	78fb      	ldrb	r3, [r7, #3]
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	2100      	movs	r1, #0
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 fad2 	bl	800e2a8 <USBH_CtlReq>
 800dd04:	4603      	mov	r3, r0
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3708      	adds	r7, #8
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b082      	sub	sp, #8
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	460b      	mov	r3, r1
 800dd18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	789b      	ldrb	r3, [r3, #2]
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d10f      	bne.n	800dd42 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2202      	movs	r2, #2
 800dd26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2201      	movs	r2, #1
 800dd2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2200      	movs	r2, #0
 800dd32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800dd34:	78fb      	ldrb	r3, [r7, #3]
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800dd42:	2200      	movs	r2, #0
 800dd44:	2100      	movs	r1, #0
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 faae 	bl	800e2a8 <USBH_CtlReq>
 800dd4c:	4603      	mov	r3, r0
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3708      	adds	r7, #8
 800dd52:	46bd      	mov	sp, r7
 800dd54:	bd80      	pop	{r7, pc}

0800dd56 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800dd56:	b480      	push	{r7}
 800dd58:	b085      	sub	sp, #20
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	60f8      	str	r0, [r7, #12]
 800dd5e:	60b9      	str	r1, [r7, #8]
 800dd60:	4613      	mov	r3, r2
 800dd62:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	781a      	ldrb	r2, [r3, #0]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	785a      	ldrb	r2, [r3, #1]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	3302      	adds	r3, #2
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	3303      	adds	r3, #3
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	021b      	lsls	r3, r3, #8
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	791a      	ldrb	r2, [r3, #4]
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800dd98:	68bb      	ldr	r3, [r7, #8]
 800dd9a:	795a      	ldrb	r2, [r3, #5]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800dda0:	68bb      	ldr	r3, [r7, #8]
 800dda2:	799a      	ldrb	r2, [r3, #6]
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	79da      	ldrb	r2, [r3, #7]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	79db      	ldrb	r3, [r3, #7]
 800ddb4:	2b20      	cmp	r3, #32
 800ddb6:	dc11      	bgt.n	800dddc <USBH_ParseDevDesc+0x86>
 800ddb8:	2b08      	cmp	r3, #8
 800ddba:	db16      	blt.n	800ddea <USBH_ParseDevDesc+0x94>
 800ddbc:	3b08      	subs	r3, #8
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	fa02 f303 	lsl.w	r3, r2, r3
 800ddc4:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800ddc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	bf14      	ite	ne
 800ddd0:	2301      	movne	r3, #1
 800ddd2:	2300      	moveq	r3, #0
 800ddd4:	b2db      	uxtb	r3, r3
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d102      	bne.n	800dde0 <USBH_ParseDevDesc+0x8a>
 800ddda:	e006      	b.n	800ddea <USBH_ParseDevDesc+0x94>
 800dddc:	2b40      	cmp	r3, #64	; 0x40
 800ddde:	d104      	bne.n	800ddea <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	79da      	ldrb	r2, [r3, #7]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	71da      	strb	r2, [r3, #7]
      break;
 800dde8:	e003      	b.n	800ddf2 <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2240      	movs	r2, #64	; 0x40
 800ddee:	71da      	strb	r2, [r3, #7]
      break;
 800ddf0:	bf00      	nop
  }

  if (length > 8U)
 800ddf2:	88fb      	ldrh	r3, [r7, #6]
 800ddf4:	2b08      	cmp	r3, #8
 800ddf6:	d939      	bls.n	800de6c <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	3308      	adds	r3, #8
 800ddfc:	781b      	ldrb	r3, [r3, #0]
 800ddfe:	b29a      	uxth	r2, r3
 800de00:	68bb      	ldr	r3, [r7, #8]
 800de02:	3309      	adds	r3, #9
 800de04:	781b      	ldrb	r3, [r3, #0]
 800de06:	b29b      	uxth	r3, r3
 800de08:	021b      	lsls	r3, r3, #8
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	4313      	orrs	r3, r2
 800de0e:	b29a      	uxth	r2, r3
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	330a      	adds	r3, #10
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	b29a      	uxth	r2, r3
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	330b      	adds	r3, #11
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	b29b      	uxth	r3, r3
 800de24:	021b      	lsls	r3, r3, #8
 800de26:	b29b      	uxth	r3, r3
 800de28:	4313      	orrs	r3, r2
 800de2a:	b29a      	uxth	r2, r3
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	330c      	adds	r3, #12
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	b29a      	uxth	r2, r3
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	330d      	adds	r3, #13
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	b29b      	uxth	r3, r3
 800de40:	021b      	lsls	r3, r3, #8
 800de42:	b29b      	uxth	r3, r3
 800de44:	4313      	orrs	r3, r2
 800de46:	b29a      	uxth	r2, r3
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	7b9a      	ldrb	r2, [r3, #14]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	7bda      	ldrb	r2, [r3, #15]
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	7c1a      	ldrb	r2, [r3, #16]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	7c5a      	ldrb	r2, [r3, #17]
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	745a      	strb	r2, [r3, #17]
  }
}
 800de6c:	bf00      	nop
 800de6e:	3714      	adds	r7, #20
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr

0800de78 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b08c      	sub	sp, #48	; 0x30
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	60f8      	str	r0, [r7, #12]
 800de80:	60b9      	str	r1, [r7, #8]
 800de82:	4613      	mov	r3, r2
 800de84:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800de8c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800de8e:	2300      	movs	r3, #0
 800de90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800de98:	2300      	movs	r3, #0
 800de9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800de9e:	2300      	movs	r3, #0
 800dea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800dea4:	68bb      	ldr	r3, [r7, #8]
 800dea6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	781a      	ldrb	r2, [r3, #0]
 800deac:	6a3b      	ldr	r3, [r7, #32]
 800deae:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	785a      	ldrb	r2, [r3, #1]
 800deb4:	6a3b      	ldr	r3, [r7, #32]
 800deb6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	3302      	adds	r3, #2
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	b29a      	uxth	r2, r3
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	3303      	adds	r3, #3
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	021b      	lsls	r3, r3, #8
 800deca:	b29b      	uxth	r3, r3
 800decc:	4313      	orrs	r3, r2
 800dece:	b29b      	uxth	r3, r3
 800ded0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ded4:	bf28      	it	cs
 800ded6:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800deda:	b29a      	uxth	r2, r3
 800dedc:	6a3b      	ldr	r3, [r7, #32]
 800dede:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	791a      	ldrb	r2, [r3, #4]
 800dee4:	6a3b      	ldr	r3, [r7, #32]
 800dee6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	795a      	ldrb	r2, [r3, #5]
 800deec:	6a3b      	ldr	r3, [r7, #32]
 800deee:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	799a      	ldrb	r2, [r3, #6]
 800def4:	6a3b      	ldr	r3, [r7, #32]
 800def6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	79da      	ldrb	r2, [r3, #7]
 800defc:	6a3b      	ldr	r3, [r7, #32]
 800defe:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	7a1a      	ldrb	r2, [r3, #8]
 800df04:	6a3b      	ldr	r3, [r7, #32]
 800df06:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800df08:	6a3b      	ldr	r3, [r7, #32]
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	2b09      	cmp	r3, #9
 800df0e:	d002      	beq.n	800df16 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800df10:	6a3b      	ldr	r3, [r7, #32]
 800df12:	2209      	movs	r2, #9
 800df14:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800df16:	88fb      	ldrh	r3, [r7, #6]
 800df18:	2b09      	cmp	r3, #9
 800df1a:	f240 809d 	bls.w	800e058 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800df1e:	2309      	movs	r3, #9
 800df20:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800df22:	2300      	movs	r3, #0
 800df24:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800df26:	e081      	b.n	800e02c <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800df28:	f107 0316 	add.w	r3, r7, #22
 800df2c:	4619      	mov	r1, r3
 800df2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df30:	f000 f99f 	bl	800e272 <USBH_GetNextDesc>
 800df34:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800df36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df38:	785b      	ldrb	r3, [r3, #1]
 800df3a:	2b04      	cmp	r3, #4
 800df3c:	d176      	bne.n	800e02c <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800df3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	2b09      	cmp	r3, #9
 800df44:	d002      	beq.n	800df4c <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800df46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df48:	2209      	movs	r2, #9
 800df4a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800df4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df50:	221a      	movs	r2, #26
 800df52:	fb02 f303 	mul.w	r3, r2, r3
 800df56:	3308      	adds	r3, #8
 800df58:	6a3a      	ldr	r2, [r7, #32]
 800df5a:	4413      	add	r3, r2
 800df5c:	3302      	adds	r3, #2
 800df5e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800df60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df62:	69f8      	ldr	r0, [r7, #28]
 800df64:	f000 f87e 	bl	800e064 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800df68:	2300      	movs	r3, #0
 800df6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800df6e:	2300      	movs	r3, #0
 800df70:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800df72:	e043      	b.n	800dffc <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800df74:	f107 0316 	add.w	r3, r7, #22
 800df78:	4619      	mov	r1, r3
 800df7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df7c:	f000 f979 	bl	800e272 <USBH_GetNextDesc>
 800df80:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800df82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df84:	785b      	ldrb	r3, [r3, #1]
 800df86:	2b05      	cmp	r3, #5
 800df88:	d138      	bne.n	800dffc <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	795b      	ldrb	r3, [r3, #5]
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d10f      	bne.n	800dfb2 <USBH_ParseCfgDesc+0x13a>
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	799b      	ldrb	r3, [r3, #6]
 800df96:	2b02      	cmp	r3, #2
 800df98:	d10b      	bne.n	800dfb2 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800df9a:	69fb      	ldr	r3, [r7, #28]
 800df9c:	79db      	ldrb	r3, [r3, #7]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d10f      	bne.n	800dfc2 <USBH_ParseCfgDesc+0x14a>
 800dfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	2b09      	cmp	r3, #9
 800dfa8:	d00b      	beq.n	800dfc2 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800dfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfac:	2209      	movs	r2, #9
 800dfae:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800dfb0:	e007      	b.n	800dfc2 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800dfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	2b07      	cmp	r3, #7
 800dfb8:	d004      	beq.n	800dfc4 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800dfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfbc:	2207      	movs	r2, #7
 800dfbe:	701a      	strb	r2, [r3, #0]
 800dfc0:	e000      	b.n	800dfc4 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800dfc2:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800dfc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfc8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800dfcc:	3201      	adds	r2, #1
 800dfce:	00d2      	lsls	r2, r2, #3
 800dfd0:	211a      	movs	r1, #26
 800dfd2:	fb01 f303 	mul.w	r3, r1, r3
 800dfd6:	4413      	add	r3, r2
 800dfd8:	3308      	adds	r3, #8
 800dfda:	6a3a      	ldr	r2, [r7, #32]
 800dfdc:	4413      	add	r3, r2
 800dfde:	3304      	adds	r3, #4
 800dfe0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800dfe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfe4:	69b9      	ldr	r1, [r7, #24]
 800dfe6:	68f8      	ldr	r0, [r7, #12]
 800dfe8:	f000 f86b 	bl	800e0c2 <USBH_ParseEPDesc>
 800dfec:	4603      	mov	r3, r0
 800dfee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800dff2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dff6:	3301      	adds	r3, #1
 800dff8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	791b      	ldrb	r3, [r3, #4]
 800e000:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e004:	429a      	cmp	r2, r3
 800e006:	d204      	bcs.n	800e012 <USBH_ParseCfgDesc+0x19a>
 800e008:	6a3b      	ldr	r3, [r7, #32]
 800e00a:	885a      	ldrh	r2, [r3, #2]
 800e00c:	8afb      	ldrh	r3, [r7, #22]
 800e00e:	429a      	cmp	r2, r3
 800e010:	d8b0      	bhi.n	800df74 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	791b      	ldrb	r3, [r3, #4]
 800e016:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d201      	bcs.n	800e022 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800e01e:	2303      	movs	r3, #3
 800e020:	e01c      	b.n	800e05c <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800e022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e026:	3301      	adds	r3, #1
 800e028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e02c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e030:	2b01      	cmp	r3, #1
 800e032:	d805      	bhi.n	800e040 <USBH_ParseCfgDesc+0x1c8>
 800e034:	6a3b      	ldr	r3, [r7, #32]
 800e036:	885a      	ldrh	r2, [r3, #2]
 800e038:	8afb      	ldrh	r3, [r7, #22]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	f63f af74 	bhi.w	800df28 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800e040:	6a3b      	ldr	r3, [r7, #32]
 800e042:	791b      	ldrb	r3, [r3, #4]
 800e044:	2b02      	cmp	r3, #2
 800e046:	bf28      	it	cs
 800e048:	2302      	movcs	r3, #2
 800e04a:	b2db      	uxtb	r3, r3
 800e04c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e050:	429a      	cmp	r2, r3
 800e052:	d201      	bcs.n	800e058 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800e054:	2303      	movs	r3, #3
 800e056:	e001      	b.n	800e05c <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800e058:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3730      	adds	r7, #48	; 0x30
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	781a      	ldrb	r2, [r3, #0]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	785a      	ldrb	r2, [r3, #1]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	789a      	ldrb	r2, [r3, #2]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	78da      	ldrb	r2, [r3, #3]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	791a      	ldrb	r2, [r3, #4]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	795a      	ldrb	r2, [r3, #5]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	799a      	ldrb	r2, [r3, #6]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	79da      	ldrb	r2, [r3, #7]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	7a1a      	ldrb	r2, [r3, #8]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	721a      	strb	r2, [r3, #8]
}
 800e0b6:	bf00      	nop
 800e0b8:	370c      	adds	r7, #12
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr

0800e0c2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800e0c2:	b480      	push	{r7}
 800e0c4:	b087      	sub	sp, #28
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	60f8      	str	r0, [r7, #12]
 800e0ca:	60b9      	str	r1, [r7, #8]
 800e0cc:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	781a      	ldrb	r2, [r3, #0]
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	785a      	ldrb	r2, [r3, #1]
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	789a      	ldrb	r2, [r3, #2]
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	78da      	ldrb	r2, [r3, #3]
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	3304      	adds	r3, #4
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	3305      	adds	r3, #5
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	b29b      	uxth	r3, r3
 800e102:	021b      	lsls	r3, r3, #8
 800e104:	b29b      	uxth	r3, r3
 800e106:	4313      	orrs	r3, r2
 800e108:	b29a      	uxth	r2, r3
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	799a      	ldrb	r2, [r3, #6]
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	889b      	ldrh	r3, [r3, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d102      	bne.n	800e124 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800e11e:	2303      	movs	r3, #3
 800e120:	75fb      	strb	r3, [r7, #23]
 800e122:	e033      	b.n	800e18c <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	889b      	ldrh	r3, [r3, #4]
 800e128:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e12c:	f023 0307 	bic.w	r3, r3, #7
 800e130:	b29a      	uxth	r2, r3
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	889b      	ldrh	r3, [r3, #4]
 800e13a:	b21a      	sxth	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	3304      	adds	r3, #4
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	b299      	uxth	r1, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	3305      	adds	r3, #5
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	021b      	lsls	r3, r3, #8
 800e14e:	b29b      	uxth	r3, r3
 800e150:	430b      	orrs	r3, r1
 800e152:	b29b      	uxth	r3, r3
 800e154:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d110      	bne.n	800e17e <USBH_ParseEPDesc+0xbc>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	3304      	adds	r3, #4
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	b299      	uxth	r1, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	3305      	adds	r3, #5
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	021b      	lsls	r3, r3, #8
 800e16e:	b29b      	uxth	r3, r3
 800e170:	430b      	orrs	r3, r1
 800e172:	b29b      	uxth	r3, r3
 800e174:	b21b      	sxth	r3, r3
 800e176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e17a:	b21b      	sxth	r3, r3
 800e17c:	e001      	b.n	800e182 <USBH_ParseEPDesc+0xc0>
 800e17e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e182:	4313      	orrs	r3, r2
 800e184:	b21b      	sxth	r3, r3
 800e186:	b29a      	uxth	r2, r3
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e192:	2b00      	cmp	r3, #0
 800e194:	d116      	bne.n	800e1c4 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	78db      	ldrb	r3, [r3, #3]
 800e19a:	f003 0303 	and.w	r3, r3, #3
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	d005      	beq.n	800e1ae <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	78db      	ldrb	r3, [r3, #3]
 800e1a6:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e1aa:	2b03      	cmp	r3, #3
 800e1ac:	d127      	bne.n	800e1fe <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	799b      	ldrb	r3, [r3, #6]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d003      	beq.n	800e1be <USBH_ParseEPDesc+0xfc>
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	799b      	ldrb	r3, [r3, #6]
 800e1ba:	2b10      	cmp	r3, #16
 800e1bc:	d91f      	bls.n	800e1fe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e1be:	2303      	movs	r3, #3
 800e1c0:	75fb      	strb	r3, [r7, #23]
 800e1c2:	e01c      	b.n	800e1fe <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e1c4:	68bb      	ldr	r3, [r7, #8]
 800e1c6:	78db      	ldrb	r3, [r3, #3]
 800e1c8:	f003 0303 	and.w	r3, r3, #3
 800e1cc:	2b01      	cmp	r3, #1
 800e1ce:	d10a      	bne.n	800e1e6 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	799b      	ldrb	r3, [r3, #6]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d003      	beq.n	800e1e0 <USBH_ParseEPDesc+0x11e>
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	799b      	ldrb	r3, [r3, #6]
 800e1dc:	2b10      	cmp	r3, #16
 800e1de:	d90e      	bls.n	800e1fe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e1e0:	2303      	movs	r3, #3
 800e1e2:	75fb      	strb	r3, [r7, #23]
 800e1e4:	e00b      	b.n	800e1fe <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	78db      	ldrb	r3, [r3, #3]
 800e1ea:	f003 0303 	and.w	r3, r3, #3
 800e1ee:	2b03      	cmp	r3, #3
 800e1f0:	d105      	bne.n	800e1fe <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800e1f2:	68bb      	ldr	r3, [r7, #8]
 800e1f4:	799b      	ldrb	r3, [r3, #6]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d101      	bne.n	800e1fe <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800e1fa:	2303      	movs	r3, #3
 800e1fc:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800e1fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800e200:	4618      	mov	r0, r3
 800e202:	371c      	adds	r7, #28
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr

0800e20c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b087      	sub	sp, #28
 800e210:	af00      	add	r7, sp, #0
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	60b9      	str	r1, [r7, #8]
 800e216:	4613      	mov	r3, r2
 800e218:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	3301      	adds	r3, #1
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	2b03      	cmp	r3, #3
 800e222:	d120      	bne.n	800e266 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	1e9a      	subs	r2, r3, #2
 800e22a:	88fb      	ldrh	r3, [r7, #6]
 800e22c:	4293      	cmp	r3, r2
 800e22e:	bf28      	it	cs
 800e230:	4613      	movcs	r3, r2
 800e232:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	3302      	adds	r3, #2
 800e238:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e23a:	2300      	movs	r3, #0
 800e23c:	82fb      	strh	r3, [r7, #22]
 800e23e:	e00b      	b.n	800e258 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e240:	8afb      	ldrh	r3, [r7, #22]
 800e242:	68fa      	ldr	r2, [r7, #12]
 800e244:	4413      	add	r3, r2
 800e246:	781a      	ldrb	r2, [r3, #0]
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	3301      	adds	r3, #1
 800e250:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e252:	8afb      	ldrh	r3, [r7, #22]
 800e254:	3302      	adds	r3, #2
 800e256:	82fb      	strh	r3, [r7, #22]
 800e258:	8afa      	ldrh	r2, [r7, #22]
 800e25a:	8abb      	ldrh	r3, [r7, #20]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d3ef      	bcc.n	800e240 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	2200      	movs	r2, #0
 800e264:	701a      	strb	r2, [r3, #0]
  }
}
 800e266:	bf00      	nop
 800e268:	371c      	adds	r7, #28
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr

0800e272 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e272:	b480      	push	{r7}
 800e274:	b085      	sub	sp, #20
 800e276:	af00      	add	r7, sp, #0
 800e278:	6078      	str	r0, [r7, #4]
 800e27a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	881a      	ldrh	r2, [r3, #0]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	781b      	ldrb	r3, [r3, #0]
 800e284:	b29b      	uxth	r3, r3
 800e286:	4413      	add	r3, r2
 800e288:	b29a      	uxth	r2, r3
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	4413      	add	r3, r2
 800e298:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e29a:	68fb      	ldr	r3, [r7, #12]
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3714      	adds	r7, #20
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b086      	sub	sp, #24
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	60b9      	str	r1, [r7, #8]
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	789b      	ldrb	r3, [r3, #2]
 800e2be:	2b01      	cmp	r3, #1
 800e2c0:	d002      	beq.n	800e2c8 <USBH_CtlReq+0x20>
 800e2c2:	2b02      	cmp	r3, #2
 800e2c4:	d00f      	beq.n	800e2e6 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e2c6:	e027      	b.n	800e318 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	68ba      	ldr	r2, [r7, #8]
 800e2cc:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	88fa      	ldrh	r2, [r7, #6]
 800e2d2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2202      	movs	r2, #2
 800e2de:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	75fb      	strb	r3, [r7, #23]
      break;
 800e2e4:	e018      	b.n	800e318 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e2e6:	68f8      	ldr	r0, [r7, #12]
 800e2e8:	f000 f81c 	bl	800e324 <USBH_HandleControl>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e2f0:	7dfb      	ldrb	r3, [r7, #23]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d002      	beq.n	800e2fc <USBH_CtlReq+0x54>
 800e2f6:	7dfb      	ldrb	r3, [r7, #23]
 800e2f8:	2b03      	cmp	r3, #3
 800e2fa:	d106      	bne.n	800e30a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2201      	movs	r2, #1
 800e300:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2200      	movs	r2, #0
 800e306:	761a      	strb	r2, [r3, #24]
      break;
 800e308:	e005      	b.n	800e316 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e30a:	7dfb      	ldrb	r3, [r7, #23]
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	d102      	bne.n	800e316 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2201      	movs	r2, #1
 800e314:	709a      	strb	r2, [r3, #2]
      break;
 800e316:	bf00      	nop
  }
  return status;
 800e318:	7dfb      	ldrb	r3, [r7, #23]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3718      	adds	r7, #24
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd80      	pop	{r7, pc}
	...

0800e324 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b086      	sub	sp, #24
 800e328:	af02      	add	r7, sp, #8
 800e32a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e32c:	2301      	movs	r3, #1
 800e32e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e330:	2300      	movs	r3, #0
 800e332:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	7e1b      	ldrb	r3, [r3, #24]
 800e338:	3b01      	subs	r3, #1
 800e33a:	2b0a      	cmp	r3, #10
 800e33c:	f200 8156 	bhi.w	800e5ec <USBH_HandleControl+0x2c8>
 800e340:	a201      	add	r2, pc, #4	; (adr r2, 800e348 <USBH_HandleControl+0x24>)
 800e342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e346:	bf00      	nop
 800e348:	0800e375 	.word	0x0800e375
 800e34c:	0800e38f 	.word	0x0800e38f
 800e350:	0800e3f9 	.word	0x0800e3f9
 800e354:	0800e41f 	.word	0x0800e41f
 800e358:	0800e457 	.word	0x0800e457
 800e35c:	0800e481 	.word	0x0800e481
 800e360:	0800e4d3 	.word	0x0800e4d3
 800e364:	0800e4f5 	.word	0x0800e4f5
 800e368:	0800e531 	.word	0x0800e531
 800e36c:	0800e557 	.word	0x0800e557
 800e370:	0800e595 	.word	0x0800e595
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	f103 0110 	add.w	r1, r3, #16
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	795b      	ldrb	r3, [r3, #5]
 800e37e:	461a      	mov	r2, r3
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 f943 	bl	800e60c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2202      	movs	r2, #2
 800e38a:	761a      	strb	r2, [r3, #24]
      break;
 800e38c:	e139      	b.n	800e602 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	795b      	ldrb	r3, [r3, #5]
 800e392:	4619      	mov	r1, r3
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 fccb 	bl	800ed30 <USBH_LL_GetURBState>
 800e39a:	4603      	mov	r3, r0
 800e39c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e39e:	7bbb      	ldrb	r3, [r7, #14]
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	d11e      	bne.n	800e3e2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	7c1b      	ldrb	r3, [r3, #16]
 800e3a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e3ac:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	8adb      	ldrh	r3, [r3, #22]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00a      	beq.n	800e3cc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e3b6:	7b7b      	ldrb	r3, [r7, #13]
 800e3b8:	2b80      	cmp	r3, #128	; 0x80
 800e3ba:	d103      	bne.n	800e3c4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	2203      	movs	r2, #3
 800e3c0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e3c2:	e115      	b.n	800e5f0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2205      	movs	r2, #5
 800e3c8:	761a      	strb	r2, [r3, #24]
      break;
 800e3ca:	e111      	b.n	800e5f0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e3cc:	7b7b      	ldrb	r3, [r7, #13]
 800e3ce:	2b80      	cmp	r3, #128	; 0x80
 800e3d0:	d103      	bne.n	800e3da <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2209      	movs	r2, #9
 800e3d6:	761a      	strb	r2, [r3, #24]
      break;
 800e3d8:	e10a      	b.n	800e5f0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2207      	movs	r2, #7
 800e3de:	761a      	strb	r2, [r3, #24]
      break;
 800e3e0:	e106      	b.n	800e5f0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e3e2:	7bbb      	ldrb	r3, [r7, #14]
 800e3e4:	2b04      	cmp	r3, #4
 800e3e6:	d003      	beq.n	800e3f0 <USBH_HandleControl+0xcc>
 800e3e8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ea:	2b02      	cmp	r3, #2
 800e3ec:	f040 8100 	bne.w	800e5f0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	220b      	movs	r2, #11
 800e3f4:	761a      	strb	r2, [r3, #24]
      break;
 800e3f6:	e0fb      	b.n	800e5f0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e3fe:	b29a      	uxth	r2, r3
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6899      	ldr	r1, [r3, #8]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	899a      	ldrh	r2, [r3, #12]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	791b      	ldrb	r3, [r3, #4]
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f000 f93a 	bl	800e68a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2204      	movs	r2, #4
 800e41a:	761a      	strb	r2, [r3, #24]
      break;
 800e41c:	e0f1      	b.n	800e602 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	791b      	ldrb	r3, [r3, #4]
 800e422:	4619      	mov	r1, r3
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f000 fc83 	bl	800ed30 <USBH_LL_GetURBState>
 800e42a:	4603      	mov	r3, r0
 800e42c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e42e:	7bbb      	ldrb	r3, [r7, #14]
 800e430:	2b01      	cmp	r3, #1
 800e432:	d102      	bne.n	800e43a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2209      	movs	r2, #9
 800e438:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e43a:	7bbb      	ldrb	r3, [r7, #14]
 800e43c:	2b05      	cmp	r3, #5
 800e43e:	d102      	bne.n	800e446 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e440:	2303      	movs	r3, #3
 800e442:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e444:	e0d6      	b.n	800e5f4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e446:	7bbb      	ldrb	r3, [r7, #14]
 800e448:	2b04      	cmp	r3, #4
 800e44a:	f040 80d3 	bne.w	800e5f4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	220b      	movs	r2, #11
 800e452:	761a      	strb	r2, [r3, #24]
      break;
 800e454:	e0ce      	b.n	800e5f4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6899      	ldr	r1, [r3, #8]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	899a      	ldrh	r2, [r3, #12]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	795b      	ldrb	r3, [r3, #5]
 800e462:	2001      	movs	r0, #1
 800e464:	9000      	str	r0, [sp, #0]
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 f8ea 	bl	800e640 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e472:	b29a      	uxth	r2, r3
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2206      	movs	r2, #6
 800e47c:	761a      	strb	r2, [r3, #24]
      break;
 800e47e:	e0c0      	b.n	800e602 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	795b      	ldrb	r3, [r3, #5]
 800e484:	4619      	mov	r1, r3
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 fc52 	bl	800ed30 <USBH_LL_GetURBState>
 800e48c:	4603      	mov	r3, r0
 800e48e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e490:	7bbb      	ldrb	r3, [r7, #14]
 800e492:	2b01      	cmp	r3, #1
 800e494:	d103      	bne.n	800e49e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2207      	movs	r2, #7
 800e49a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e49c:	e0ac      	b.n	800e5f8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e49e:	7bbb      	ldrb	r3, [r7, #14]
 800e4a0:	2b05      	cmp	r3, #5
 800e4a2:	d105      	bne.n	800e4b0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	220c      	movs	r2, #12
 800e4a8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e4aa:	2303      	movs	r3, #3
 800e4ac:	73fb      	strb	r3, [r7, #15]
      break;
 800e4ae:	e0a3      	b.n	800e5f8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e4b0:	7bbb      	ldrb	r3, [r7, #14]
 800e4b2:	2b02      	cmp	r3, #2
 800e4b4:	d103      	bne.n	800e4be <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2205      	movs	r2, #5
 800e4ba:	761a      	strb	r2, [r3, #24]
      break;
 800e4bc:	e09c      	b.n	800e5f8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e4be:	7bbb      	ldrb	r3, [r7, #14]
 800e4c0:	2b04      	cmp	r3, #4
 800e4c2:	f040 8099 	bne.w	800e5f8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	220b      	movs	r2, #11
 800e4ca:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e4cc:	2302      	movs	r3, #2
 800e4ce:	73fb      	strb	r3, [r7, #15]
      break;
 800e4d0:	e092      	b.n	800e5f8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	791b      	ldrb	r3, [r3, #4]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	2100      	movs	r1, #0
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 f8d5 	bl	800e68a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e4e6:	b29a      	uxth	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2208      	movs	r2, #8
 800e4f0:	761a      	strb	r2, [r3, #24]

      break;
 800e4f2:	e086      	b.n	800e602 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	791b      	ldrb	r3, [r3, #4]
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 fc18 	bl	800ed30 <USBH_LL_GetURBState>
 800e500:	4603      	mov	r3, r0
 800e502:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e504:	7bbb      	ldrb	r3, [r7, #14]
 800e506:	2b01      	cmp	r3, #1
 800e508:	d105      	bne.n	800e516 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	220d      	movs	r2, #13
 800e50e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e510:	2300      	movs	r3, #0
 800e512:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e514:	e072      	b.n	800e5fc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800e516:	7bbb      	ldrb	r3, [r7, #14]
 800e518:	2b04      	cmp	r3, #4
 800e51a:	d103      	bne.n	800e524 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	220b      	movs	r2, #11
 800e520:	761a      	strb	r2, [r3, #24]
      break;
 800e522:	e06b      	b.n	800e5fc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800e524:	7bbb      	ldrb	r3, [r7, #14]
 800e526:	2b05      	cmp	r3, #5
 800e528:	d168      	bne.n	800e5fc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800e52a:	2303      	movs	r3, #3
 800e52c:	73fb      	strb	r3, [r7, #15]
      break;
 800e52e:	e065      	b.n	800e5fc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	795b      	ldrb	r3, [r3, #5]
 800e534:	2201      	movs	r2, #1
 800e536:	9200      	str	r2, [sp, #0]
 800e538:	2200      	movs	r2, #0
 800e53a:	2100      	movs	r1, #0
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f000 f87f 	bl	800e640 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e548:	b29a      	uxth	r2, r3
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	220a      	movs	r2, #10
 800e552:	761a      	strb	r2, [r3, #24]
      break;
 800e554:	e055      	b.n	800e602 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	795b      	ldrb	r3, [r3, #5]
 800e55a:	4619      	mov	r1, r3
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f000 fbe7 	bl	800ed30 <USBH_LL_GetURBState>
 800e562:	4603      	mov	r3, r0
 800e564:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e566:	7bbb      	ldrb	r3, [r7, #14]
 800e568:	2b01      	cmp	r3, #1
 800e56a:	d105      	bne.n	800e578 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800e56c:	2300      	movs	r3, #0
 800e56e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	220d      	movs	r2, #13
 800e574:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e576:	e043      	b.n	800e600 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e578:	7bbb      	ldrb	r3, [r7, #14]
 800e57a:	2b02      	cmp	r3, #2
 800e57c:	d103      	bne.n	800e586 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2209      	movs	r2, #9
 800e582:	761a      	strb	r2, [r3, #24]
      break;
 800e584:	e03c      	b.n	800e600 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800e586:	7bbb      	ldrb	r3, [r7, #14]
 800e588:	2b04      	cmp	r3, #4
 800e58a:	d139      	bne.n	800e600 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	220b      	movs	r2, #11
 800e590:	761a      	strb	r2, [r3, #24]
      break;
 800e592:	e035      	b.n	800e600 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	7e5b      	ldrb	r3, [r3, #25]
 800e598:	3301      	adds	r3, #1
 800e59a:	b2da      	uxtb	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	765a      	strb	r2, [r3, #25]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	7e5b      	ldrb	r3, [r3, #25]
 800e5a4:	2b02      	cmp	r3, #2
 800e5a6:	d806      	bhi.n	800e5b6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e5b4:	e025      	b.n	800e602 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e5bc:	2106      	movs	r1, #6
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	795b      	ldrb	r3, [r3, #5]
 800e5cc:	4619      	mov	r1, r3
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f000 f90c 	bl	800e7ec <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	791b      	ldrb	r3, [r3, #4]
 800e5d8:	4619      	mov	r1, r3
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 f906 	bl	800e7ec <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e5e6:	2302      	movs	r3, #2
 800e5e8:	73fb      	strb	r3, [r7, #15]
      break;
 800e5ea:	e00a      	b.n	800e602 <USBH_HandleControl+0x2de>

    default:
      break;
 800e5ec:	bf00      	nop
 800e5ee:	e008      	b.n	800e602 <USBH_HandleControl+0x2de>
      break;
 800e5f0:	bf00      	nop
 800e5f2:	e006      	b.n	800e602 <USBH_HandleControl+0x2de>
      break;
 800e5f4:	bf00      	nop
 800e5f6:	e004      	b.n	800e602 <USBH_HandleControl+0x2de>
      break;
 800e5f8:	bf00      	nop
 800e5fa:	e002      	b.n	800e602 <USBH_HandleControl+0x2de>
      break;
 800e5fc:	bf00      	nop
 800e5fe:	e000      	b.n	800e602 <USBH_HandleControl+0x2de>
      break;
 800e600:	bf00      	nop
  }

  return status;
 800e602:	7bfb      	ldrb	r3, [r7, #15]
}
 800e604:	4618      	mov	r0, r3
 800e606:	3710      	adds	r7, #16
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b088      	sub	sp, #32
 800e610:	af04      	add	r7, sp, #16
 800e612:	60f8      	str	r0, [r7, #12]
 800e614:	60b9      	str	r1, [r7, #8]
 800e616:	4613      	mov	r3, r2
 800e618:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e61a:	79f9      	ldrb	r1, [r7, #7]
 800e61c:	2300      	movs	r3, #0
 800e61e:	9303      	str	r3, [sp, #12]
 800e620:	2308      	movs	r3, #8
 800e622:	9302      	str	r3, [sp, #8]
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	9301      	str	r3, [sp, #4]
 800e628:	2300      	movs	r3, #0
 800e62a:	9300      	str	r3, [sp, #0]
 800e62c:	2300      	movs	r3, #0
 800e62e:	2200      	movs	r2, #0
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f000 fb4c 	bl	800ecce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e636:	2300      	movs	r3, #0
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3710      	adds	r7, #16
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b088      	sub	sp, #32
 800e644:	af04      	add	r7, sp, #16
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	60b9      	str	r1, [r7, #8]
 800e64a:	4611      	mov	r1, r2
 800e64c:	461a      	mov	r2, r3
 800e64e:	460b      	mov	r3, r1
 800e650:	80fb      	strh	r3, [r7, #6]
 800e652:	4613      	mov	r3, r2
 800e654:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d001      	beq.n	800e664 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e660:	2300      	movs	r3, #0
 800e662:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e664:	7979      	ldrb	r1, [r7, #5]
 800e666:	7e3b      	ldrb	r3, [r7, #24]
 800e668:	9303      	str	r3, [sp, #12]
 800e66a:	88fb      	ldrh	r3, [r7, #6]
 800e66c:	9302      	str	r3, [sp, #8]
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	9301      	str	r3, [sp, #4]
 800e672:	2301      	movs	r3, #1
 800e674:	9300      	str	r3, [sp, #0]
 800e676:	2300      	movs	r3, #0
 800e678:	2200      	movs	r2, #0
 800e67a:	68f8      	ldr	r0, [r7, #12]
 800e67c:	f000 fb27 	bl	800ecce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e680:	2300      	movs	r3, #0
}
 800e682:	4618      	mov	r0, r3
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}

0800e68a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e68a:	b580      	push	{r7, lr}
 800e68c:	b088      	sub	sp, #32
 800e68e:	af04      	add	r7, sp, #16
 800e690:	60f8      	str	r0, [r7, #12]
 800e692:	60b9      	str	r1, [r7, #8]
 800e694:	4611      	mov	r1, r2
 800e696:	461a      	mov	r2, r3
 800e698:	460b      	mov	r3, r1
 800e69a:	80fb      	strh	r3, [r7, #6]
 800e69c:	4613      	mov	r3, r2
 800e69e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e6a0:	7979      	ldrb	r1, [r7, #5]
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	9303      	str	r3, [sp, #12]
 800e6a6:	88fb      	ldrh	r3, [r7, #6]
 800e6a8:	9302      	str	r3, [sp, #8]
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	9301      	str	r3, [sp, #4]
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	9300      	str	r3, [sp, #0]
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	68f8      	ldr	r0, [r7, #12]
 800e6b8:	f000 fb09 	bl	800ecce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e6bc:	2300      	movs	r3, #0

}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3710      	adds	r7, #16
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}

0800e6c6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e6c6:	b580      	push	{r7, lr}
 800e6c8:	b088      	sub	sp, #32
 800e6ca:	af04      	add	r7, sp, #16
 800e6cc:	60f8      	str	r0, [r7, #12]
 800e6ce:	60b9      	str	r1, [r7, #8]
 800e6d0:	4611      	mov	r1, r2
 800e6d2:	461a      	mov	r2, r3
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	80fb      	strh	r3, [r7, #6]
 800e6d8:	4613      	mov	r3, r2
 800e6da:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d001      	beq.n	800e6ea <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e6ea:	7979      	ldrb	r1, [r7, #5]
 800e6ec:	7e3b      	ldrb	r3, [r7, #24]
 800e6ee:	9303      	str	r3, [sp, #12]
 800e6f0:	88fb      	ldrh	r3, [r7, #6]
 800e6f2:	9302      	str	r3, [sp, #8]
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	9301      	str	r3, [sp, #4]
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	9300      	str	r3, [sp, #0]
 800e6fc:	2302      	movs	r3, #2
 800e6fe:	2200      	movs	r2, #0
 800e700:	68f8      	ldr	r0, [r7, #12]
 800e702:	f000 fae4 	bl	800ecce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e706:	2300      	movs	r3, #0
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3710      	adds	r7, #16
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}

0800e710 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b088      	sub	sp, #32
 800e714:	af04      	add	r7, sp, #16
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	4611      	mov	r1, r2
 800e71c:	461a      	mov	r2, r3
 800e71e:	460b      	mov	r3, r1
 800e720:	80fb      	strh	r3, [r7, #6]
 800e722:	4613      	mov	r3, r2
 800e724:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e726:	7979      	ldrb	r1, [r7, #5]
 800e728:	2300      	movs	r3, #0
 800e72a:	9303      	str	r3, [sp, #12]
 800e72c:	88fb      	ldrh	r3, [r7, #6]
 800e72e:	9302      	str	r3, [sp, #8]
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	9301      	str	r3, [sp, #4]
 800e734:	2301      	movs	r3, #1
 800e736:	9300      	str	r3, [sp, #0]
 800e738:	2302      	movs	r3, #2
 800e73a:	2201      	movs	r2, #1
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f000 fac6 	bl	800ecce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e742:	2300      	movs	r3, #0
}
 800e744:	4618      	mov	r0, r3
 800e746:	3710      	adds	r7, #16
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b086      	sub	sp, #24
 800e750:	af04      	add	r7, sp, #16
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	4608      	mov	r0, r1
 800e756:	4611      	mov	r1, r2
 800e758:	461a      	mov	r2, r3
 800e75a:	4603      	mov	r3, r0
 800e75c:	70fb      	strb	r3, [r7, #3]
 800e75e:	460b      	mov	r3, r1
 800e760:	70bb      	strb	r3, [r7, #2]
 800e762:	4613      	mov	r3, r2
 800e764:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e766:	7878      	ldrb	r0, [r7, #1]
 800e768:	78ba      	ldrb	r2, [r7, #2]
 800e76a:	78f9      	ldrb	r1, [r7, #3]
 800e76c:	8b3b      	ldrh	r3, [r7, #24]
 800e76e:	9302      	str	r3, [sp, #8]
 800e770:	7d3b      	ldrb	r3, [r7, #20]
 800e772:	9301      	str	r3, [sp, #4]
 800e774:	7c3b      	ldrb	r3, [r7, #16]
 800e776:	9300      	str	r3, [sp, #0]
 800e778:	4603      	mov	r3, r0
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f000 fa59 	bl	800ec32 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e780:	2300      	movs	r3, #0
}
 800e782:	4618      	mov	r0, r3
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e78a:	b580      	push	{r7, lr}
 800e78c:	b082      	sub	sp, #8
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
 800e792:	460b      	mov	r3, r1
 800e794:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e796:	78fb      	ldrb	r3, [r7, #3]
 800e798:	4619      	mov	r1, r3
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 fa78 	bl	800ec90 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3708      	adds	r7, #8
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b084      	sub	sp, #16
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
 800e7b2:	460b      	mov	r3, r1
 800e7b4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f000 f836 	bl	800e828 <USBH_GetFreePipe>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e7c0:	89fb      	ldrh	r3, [r7, #14]
 800e7c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d00a      	beq.n	800e7e0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e7ca:	78fa      	ldrb	r2, [r7, #3]
 800e7cc:	89fb      	ldrh	r3, [r7, #14]
 800e7ce:	f003 030f 	and.w	r3, r3, #15
 800e7d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e7d6:	6879      	ldr	r1, [r7, #4]
 800e7d8:	33e0      	adds	r3, #224	; 0xe0
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	440b      	add	r3, r1
 800e7de:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e7e0:	89fb      	ldrh	r3, [r7, #14]
 800e7e2:	b2db      	uxtb	r3, r3
}
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b083      	sub	sp, #12
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e7f8:	78fb      	ldrb	r3, [r7, #3]
 800e7fa:	2b0f      	cmp	r3, #15
 800e7fc:	d80d      	bhi.n	800e81a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e7fe:	78fb      	ldrb	r3, [r7, #3]
 800e800:	687a      	ldr	r2, [r7, #4]
 800e802:	33e0      	adds	r3, #224	; 0xe0
 800e804:	009b      	lsls	r3, r3, #2
 800e806:	4413      	add	r3, r2
 800e808:	685a      	ldr	r2, [r3, #4]
 800e80a:	78fb      	ldrb	r3, [r7, #3]
 800e80c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e810:	6879      	ldr	r1, [r7, #4]
 800e812:	33e0      	adds	r3, #224	; 0xe0
 800e814:	009b      	lsls	r3, r3, #2
 800e816:	440b      	add	r3, r1
 800e818:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e81a:	2300      	movs	r3, #0
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	370c      	adds	r7, #12
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr

0800e828 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e828:	b480      	push	{r7}
 800e82a:	b085      	sub	sp, #20
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e830:	2300      	movs	r3, #0
 800e832:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800e834:	2300      	movs	r3, #0
 800e836:	73fb      	strb	r3, [r7, #15]
 800e838:	e00f      	b.n	800e85a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e83a:	7bfb      	ldrb	r3, [r7, #15]
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	33e0      	adds	r3, #224	; 0xe0
 800e840:	009b      	lsls	r3, r3, #2
 800e842:	4413      	add	r3, r2
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d102      	bne.n	800e854 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e84e:	7bfb      	ldrb	r3, [r7, #15]
 800e850:	b29b      	uxth	r3, r3
 800e852:	e007      	b.n	800e864 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800e854:	7bfb      	ldrb	r3, [r7, #15]
 800e856:	3301      	adds	r3, #1
 800e858:	73fb      	strb	r3, [r7, #15]
 800e85a:	7bfb      	ldrb	r3, [r7, #15]
 800e85c:	2b0f      	cmp	r3, #15
 800e85e:	d9ec      	bls.n	800e83a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e860:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e864:	4618      	mov	r0, r3
 800e866:	3714      	adds	r7, #20
 800e868:	46bd      	mov	sp, r7
 800e86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86e:	4770      	bx	lr

0800e870 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800e874:	2200      	movs	r2, #0
 800e876:	490e      	ldr	r1, [pc, #56]	; (800e8b0 <MX_USB_HOST_Init+0x40>)
 800e878:	480e      	ldr	r0, [pc, #56]	; (800e8b4 <MX_USB_HOST_Init+0x44>)
 800e87a:	f7fe fba7 	bl	800cfcc <USBH_Init>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d001      	beq.n	800e888 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e884:	f7f3 fd40 	bl	8002308 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800e888:	490b      	ldr	r1, [pc, #44]	; (800e8b8 <MX_USB_HOST_Init+0x48>)
 800e88a:	480a      	ldr	r0, [pc, #40]	; (800e8b4 <MX_USB_HOST_Init+0x44>)
 800e88c:	f7fe fc2c 	bl	800d0e8 <USBH_RegisterClass>
 800e890:	4603      	mov	r3, r0
 800e892:	2b00      	cmp	r3, #0
 800e894:	d001      	beq.n	800e89a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e896:	f7f3 fd37 	bl	8002308 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800e89a:	4806      	ldr	r0, [pc, #24]	; (800e8b4 <MX_USB_HOST_Init+0x44>)
 800e89c:	f7fe fcb0 	bl	800d200 <USBH_Start>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d001      	beq.n	800e8aa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e8a6:	f7f3 fd2f 	bl	8002308 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e8aa:	bf00      	nop
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	0800e8d1 	.word	0x0800e8d1
 800e8b4:	200040d0 	.word	0x200040d0
 800e8b8:	20000054 	.word	0x20000054

0800e8bc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800e8c0:	4802      	ldr	r0, [pc, #8]	; (800e8cc <MX_USB_HOST_Process+0x10>)
 800e8c2:	f7fe fcad 	bl	800d220 <USBH_Process>
}
 800e8c6:	bf00      	nop
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	200040d0 	.word	0x200040d0

0800e8d0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	460b      	mov	r3, r1
 800e8da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e8dc:	78fb      	ldrb	r3, [r7, #3]
 800e8de:	3b01      	subs	r3, #1
 800e8e0:	2b04      	cmp	r3, #4
 800e8e2:	d819      	bhi.n	800e918 <USBH_UserProcess+0x48>
 800e8e4:	a201      	add	r2, pc, #4	; (adr r2, 800e8ec <USBH_UserProcess+0x1c>)
 800e8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ea:	bf00      	nop
 800e8ec:	0800e919 	.word	0x0800e919
 800e8f0:	0800e909 	.word	0x0800e909
 800e8f4:	0800e919 	.word	0x0800e919
 800e8f8:	0800e911 	.word	0x0800e911
 800e8fc:	0800e901 	.word	0x0800e901
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e900:	4b09      	ldr	r3, [pc, #36]	; (800e928 <USBH_UserProcess+0x58>)
 800e902:	2203      	movs	r2, #3
 800e904:	701a      	strb	r2, [r3, #0]
  break;
 800e906:	e008      	b.n	800e91a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e908:	4b07      	ldr	r3, [pc, #28]	; (800e928 <USBH_UserProcess+0x58>)
 800e90a:	2202      	movs	r2, #2
 800e90c:	701a      	strb	r2, [r3, #0]
  break;
 800e90e:	e004      	b.n	800e91a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e910:	4b05      	ldr	r3, [pc, #20]	; (800e928 <USBH_UserProcess+0x58>)
 800e912:	2201      	movs	r2, #1
 800e914:	701a      	strb	r2, [r3, #0]
  break;
 800e916:	e000      	b.n	800e91a <USBH_UserProcess+0x4a>

  default:
  break;
 800e918:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e91a:	bf00      	nop
 800e91c:	370c      	adds	r7, #12
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	200044a8 	.word	0x200044a8

0800e92c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b08a      	sub	sp, #40	; 0x28
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e934:	f107 0314 	add.w	r3, r7, #20
 800e938:	2200      	movs	r2, #0
 800e93a:	601a      	str	r2, [r3, #0]
 800e93c:	605a      	str	r2, [r3, #4]
 800e93e:	609a      	str	r2, [r3, #8]
 800e940:	60da      	str	r2, [r3, #12]
 800e942:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	4a24      	ldr	r2, [pc, #144]	; (800e9dc <HAL_HCD_MspInit+0xb0>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d141      	bne.n	800e9d2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e94e:	2300      	movs	r3, #0
 800e950:	613b      	str	r3, [r7, #16]
 800e952:	4b23      	ldr	r3, [pc, #140]	; (800e9e0 <HAL_HCD_MspInit+0xb4>)
 800e954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e956:	4a22      	ldr	r2, [pc, #136]	; (800e9e0 <HAL_HCD_MspInit+0xb4>)
 800e958:	f043 0302 	orr.w	r3, r3, #2
 800e95c:	6313      	str	r3, [r2, #48]	; 0x30
 800e95e:	4b20      	ldr	r3, [pc, #128]	; (800e9e0 <HAL_HCD_MspInit+0xb4>)
 800e960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e962:	f003 0302 	and.w	r3, r3, #2
 800e966:	613b      	str	r3, [r7, #16]
 800e968:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800e96a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800e96e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e970:	2302      	movs	r3, #2
 800e972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e974:	2300      	movs	r3, #0
 800e976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e978:	2300      	movs	r3, #0
 800e97a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e97c:	230c      	movs	r3, #12
 800e97e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e980:	f107 0314 	add.w	r3, r7, #20
 800e984:	4619      	mov	r1, r3
 800e986:	4817      	ldr	r0, [pc, #92]	; (800e9e4 <HAL_HCD_MspInit+0xb8>)
 800e988:	f7f7 f9b2 	bl	8005cf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800e98c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e992:	2300      	movs	r3, #0
 800e994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e996:	2300      	movs	r3, #0
 800e998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800e99a:	f107 0314 	add.w	r3, r7, #20
 800e99e:	4619      	mov	r1, r3
 800e9a0:	4810      	ldr	r0, [pc, #64]	; (800e9e4 <HAL_HCD_MspInit+0xb8>)
 800e9a2:	f7f7 f9a5 	bl	8005cf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	60fb      	str	r3, [r7, #12]
 800e9aa:	4b0d      	ldr	r3, [pc, #52]	; (800e9e0 <HAL_HCD_MspInit+0xb4>)
 800e9ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ae:	4a0c      	ldr	r2, [pc, #48]	; (800e9e0 <HAL_HCD_MspInit+0xb4>)
 800e9b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e9b4:	6313      	str	r3, [r2, #48]	; 0x30
 800e9b6:	4b0a      	ldr	r3, [pc, #40]	; (800e9e0 <HAL_HCD_MspInit+0xb4>)
 800e9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e9be:	60fb      	str	r3, [r7, #12]
 800e9c0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	2100      	movs	r1, #0
 800e9c6:	204d      	movs	r0, #77	; 0x4d
 800e9c8:	f7f6 f972 	bl	8004cb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e9cc:	204d      	movs	r0, #77	; 0x4d
 800e9ce:	f7f6 f98b 	bl	8004ce8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e9d2:	bf00      	nop
 800e9d4:	3728      	adds	r7, #40	; 0x28
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	40040000 	.word	0x40040000
 800e9e0:	40023800 	.word	0x40023800
 800e9e4:	40020400 	.word	0x40020400

0800e9e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7fe fff1 	bl	800d9de <USBH_LL_IncTimer>
}
 800e9fc:	bf00      	nop
 800e9fe:	3708      	adds	r7, #8
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7ff f829 	bl	800da6a <USBH_LL_Connect>
}
 800ea18:	bf00      	nop
 800ea1a:	3708      	adds	r7, #8
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7ff f832 	bl	800da98 <USBH_LL_Disconnect>
}
 800ea34:	bf00      	nop
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b083      	sub	sp, #12
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	460b      	mov	r3, r1
 800ea46:	70fb      	strb	r3, [r7, #3]
 800ea48:	4613      	mov	r3, r2
 800ea4a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ea4c:	bf00      	nop
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea56:	4770      	bx	lr

0800ea58 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fe ffe3 	bl	800da32 <USBH_LL_PortEnabled>
}
 800ea6c:	bf00      	nop
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b082      	sub	sp, #8
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7fe ffe3 	bl	800da4e <USBH_LL_PortDisabled>
}
 800ea88:	bf00      	nop
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b082      	sub	sp, #8
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d132      	bne.n	800eb08 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800eaa2:	4a1c      	ldr	r2, [pc, #112]	; (800eb14 <USBH_LL_Init+0x84>)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	4a19      	ldr	r2, [pc, #100]	; (800eb14 <USBH_LL_Init+0x84>)
 800eaae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800eab2:	4b18      	ldr	r3, [pc, #96]	; (800eb14 <USBH_LL_Init+0x84>)
 800eab4:	4a18      	ldr	r2, [pc, #96]	; (800eb18 <USBH_LL_Init+0x88>)
 800eab6:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800eab8:	4b16      	ldr	r3, [pc, #88]	; (800eb14 <USBH_LL_Init+0x84>)
 800eaba:	220c      	movs	r2, #12
 800eabc:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800eabe:	4b15      	ldr	r3, [pc, #84]	; (800eb14 <USBH_LL_Init+0x84>)
 800eac0:	2201      	movs	r2, #1
 800eac2:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800eac4:	4b13      	ldr	r3, [pc, #76]	; (800eb14 <USBH_LL_Init+0x84>)
 800eac6:	2200      	movs	r2, #0
 800eac8:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800eaca:	4b12      	ldr	r3, [pc, #72]	; (800eb14 <USBH_LL_Init+0x84>)
 800eacc:	2202      	movs	r2, #2
 800eace:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ead0:	4b10      	ldr	r3, [pc, #64]	; (800eb14 <USBH_LL_Init+0x84>)
 800ead2:	2200      	movs	r2, #0
 800ead4:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ead6:	4b0f      	ldr	r3, [pc, #60]	; (800eb14 <USBH_LL_Init+0x84>)
 800ead8:	2200      	movs	r2, #0
 800eada:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800eadc:	4b0d      	ldr	r3, [pc, #52]	; (800eb14 <USBH_LL_Init+0x84>)
 800eade:	2200      	movs	r2, #0
 800eae0:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800eae2:	4b0c      	ldr	r3, [pc, #48]	; (800eb14 <USBH_LL_Init+0x84>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800eae8:	480a      	ldr	r0, [pc, #40]	; (800eb14 <USBH_LL_Init+0x84>)
 800eaea:	f7f7 fc04 	bl	80062f6 <HAL_HCD_Init>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d001      	beq.n	800eaf8 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800eaf4:	f7f3 fc08 	bl	8002308 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800eaf8:	4806      	ldr	r0, [pc, #24]	; (800eb14 <USBH_LL_Init+0x84>)
 800eafa:	f7f7 ffe8 	bl	8006ace <HAL_HCD_GetCurrentFrame>
 800eafe:	4603      	mov	r3, r0
 800eb00:	4619      	mov	r1, r3
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7fe ff5c 	bl	800d9c0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800eb08:	2300      	movs	r3, #0
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3708      	adds	r7, #8
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	200044ac 	.word	0x200044ac
 800eb18:	40040000 	.word	0x40040000

0800eb1c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb24:	2300      	movs	r3, #0
 800eb26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb28:	2300      	movs	r3, #0
 800eb2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7f7 ff55 	bl	80069e2 <HAL_HCD_Start>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb3c:	7bfb      	ldrb	r3, [r7, #15]
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f000 f95c 	bl	800edfc <USBH_Get_USB_Status>
 800eb44:	4603      	mov	r3, r0
 800eb46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb48:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}

0800eb52 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800eb52:	b580      	push	{r7, lr}
 800eb54:	b084      	sub	sp, #16
 800eb56:	af00      	add	r7, sp, #0
 800eb58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7f7 ff5d 	bl	8006a28 <HAL_HCD_Stop>
 800eb6e:	4603      	mov	r3, r0
 800eb70:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800eb72:	7bfb      	ldrb	r3, [r7, #15]
 800eb74:	4618      	mov	r0, r3
 800eb76:	f000 f941 	bl	800edfc <USBH_Get_USB_Status>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3710      	adds	r7, #16
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b084      	sub	sp, #16
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800eb90:	2301      	movs	r3, #1
 800eb92:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7f7 ffa5 	bl	8006aea <HAL_HCD_GetCurrentSpeed>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b02      	cmp	r3, #2
 800eba4:	d00c      	beq.n	800ebc0 <USBH_LL_GetSpeed+0x38>
 800eba6:	2b02      	cmp	r3, #2
 800eba8:	d80d      	bhi.n	800ebc6 <USBH_LL_GetSpeed+0x3e>
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d002      	beq.n	800ebb4 <USBH_LL_GetSpeed+0x2c>
 800ebae:	2b01      	cmp	r3, #1
 800ebb0:	d003      	beq.n	800ebba <USBH_LL_GetSpeed+0x32>
 800ebb2:	e008      	b.n	800ebc6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	73fb      	strb	r3, [r7, #15]
    break;
 800ebb8:	e008      	b.n	800ebcc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ebba:	2301      	movs	r3, #1
 800ebbc:	73fb      	strb	r3, [r7, #15]
    break;
 800ebbe:	e005      	b.n	800ebcc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ebc0:	2302      	movs	r3, #2
 800ebc2:	73fb      	strb	r3, [r7, #15]
    break;
 800ebc4:	e002      	b.n	800ebcc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	73fb      	strb	r3, [r7, #15]
    break;
 800ebca:	bf00      	nop
  }
  return  speed;
 800ebcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}

0800ebd6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	b084      	sub	sp, #16
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ebec:	4618      	mov	r0, r3
 800ebee:	f7f7 ff38 	bl	8006a62 <HAL_HCD_ResetPort>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ebf6:	7bfb      	ldrb	r3, [r7, #15]
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f000 f8ff 	bl	800edfc <USBH_Get_USB_Status>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec02:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b082      	sub	sp, #8
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	460b      	mov	r3, r1
 800ec16:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ec1e:	78fa      	ldrb	r2, [r7, #3]
 800ec20:	4611      	mov	r1, r2
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7f7 ff3f 	bl	8006aa6 <HAL_HCD_HC_GetXferCount>
 800ec28:	4603      	mov	r3, r0
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3708      	adds	r7, #8
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ec32:	b590      	push	{r4, r7, lr}
 800ec34:	b089      	sub	sp, #36	; 0x24
 800ec36:	af04      	add	r7, sp, #16
 800ec38:	6078      	str	r0, [r7, #4]
 800ec3a:	4608      	mov	r0, r1
 800ec3c:	4611      	mov	r1, r2
 800ec3e:	461a      	mov	r2, r3
 800ec40:	4603      	mov	r3, r0
 800ec42:	70fb      	strb	r3, [r7, #3]
 800ec44:	460b      	mov	r3, r1
 800ec46:	70bb      	strb	r3, [r7, #2]
 800ec48:	4613      	mov	r3, r2
 800ec4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ec50:	2300      	movs	r3, #0
 800ec52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ec5a:	787c      	ldrb	r4, [r7, #1]
 800ec5c:	78ba      	ldrb	r2, [r7, #2]
 800ec5e:	78f9      	ldrb	r1, [r7, #3]
 800ec60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec62:	9302      	str	r3, [sp, #8]
 800ec64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ec68:	9301      	str	r3, [sp, #4]
 800ec6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ec6e:	9300      	str	r3, [sp, #0]
 800ec70:	4623      	mov	r3, r4
 800ec72:	f7f7 fba2 	bl	80063ba <HAL_HCD_HC_Init>
 800ec76:	4603      	mov	r3, r0
 800ec78:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ec7a:	7bfb      	ldrb	r3, [r7, #15]
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f000 f8bd 	bl	800edfc <USBH_Get_USB_Status>
 800ec82:	4603      	mov	r3, r0
 800ec84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3714      	adds	r7, #20
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd90      	pop	{r4, r7, pc}

0800ec90 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	460b      	mov	r3, r1
 800ec9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eca0:	2300      	movs	r3, #0
 800eca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ecaa:	78fa      	ldrb	r2, [r7, #3]
 800ecac:	4611      	mov	r1, r2
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7f7 fc12 	bl	80064d8 <HAL_HCD_HC_Halt>
 800ecb4:	4603      	mov	r3, r0
 800ecb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ecb8:	7bfb      	ldrb	r3, [r7, #15]
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f000 f89e 	bl	800edfc <USBH_Get_USB_Status>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3710      	adds	r7, #16
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ecce:	b590      	push	{r4, r7, lr}
 800ecd0:	b089      	sub	sp, #36	; 0x24
 800ecd2:	af04      	add	r7, sp, #16
 800ecd4:	6078      	str	r0, [r7, #4]
 800ecd6:	4608      	mov	r0, r1
 800ecd8:	4611      	mov	r1, r2
 800ecda:	461a      	mov	r2, r3
 800ecdc:	4603      	mov	r3, r0
 800ecde:	70fb      	strb	r3, [r7, #3]
 800ece0:	460b      	mov	r3, r1
 800ece2:	70bb      	strb	r3, [r7, #2]
 800ece4:	4613      	mov	r3, r2
 800ece6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ece8:	2300      	movs	r3, #0
 800ecea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ecec:	2300      	movs	r3, #0
 800ecee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ecf6:	787c      	ldrb	r4, [r7, #1]
 800ecf8:	78ba      	ldrb	r2, [r7, #2]
 800ecfa:	78f9      	ldrb	r1, [r7, #3]
 800ecfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ed00:	9303      	str	r3, [sp, #12]
 800ed02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ed04:	9302      	str	r3, [sp, #8]
 800ed06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed08:	9301      	str	r3, [sp, #4]
 800ed0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	4623      	mov	r3, r4
 800ed12:	f7f7 fc05 	bl	8006520 <HAL_HCD_HC_SubmitRequest>
 800ed16:	4603      	mov	r3, r0
 800ed18:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ed1a:	7bfb      	ldrb	r3, [r7, #15]
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f000 f86d 	bl	800edfc <USBH_Get_USB_Status>
 800ed22:	4603      	mov	r3, r0
 800ed24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed26:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3714      	adds	r7, #20
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd90      	pop	{r4, r7, pc}

0800ed30 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	460b      	mov	r3, r1
 800ed3a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed42:	78fa      	ldrb	r2, [r7, #3]
 800ed44:	4611      	mov	r1, r2
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7f7 fe99 	bl	8006a7e <HAL_HCD_HC_GetURBState>
 800ed4c:	4603      	mov	r3, r0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3708      	adds	r7, #8
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}

0800ed56 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b082      	sub	sp, #8
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
 800ed5e:	460b      	mov	r3, r1
 800ed60:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d103      	bne.n	800ed74 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800ed6c:	78fb      	ldrb	r3, [r7, #3]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f000 f870 	bl	800ee54 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ed74:	20c8      	movs	r0, #200	; 0xc8
 800ed76:	f7f5 fa4d 	bl	8004214 <HAL_Delay>
  return USBH_OK;
 800ed7a:	2300      	movs	r3, #0
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3708      	adds	r7, #8
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ed84:	b480      	push	{r7}
 800ed86:	b085      	sub	sp, #20
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	70fb      	strb	r3, [r7, #3]
 800ed90:	4613      	mov	r3, r2
 800ed92:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ed9a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ed9c:	78fb      	ldrb	r3, [r7, #3]
 800ed9e:	68fa      	ldr	r2, [r7, #12]
 800eda0:	212c      	movs	r1, #44	; 0x2c
 800eda2:	fb01 f303 	mul.w	r3, r1, r3
 800eda6:	4413      	add	r3, r2
 800eda8:	333b      	adds	r3, #59	; 0x3b
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d009      	beq.n	800edc4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800edb0:	78fb      	ldrb	r3, [r7, #3]
 800edb2:	68fa      	ldr	r2, [r7, #12]
 800edb4:	212c      	movs	r1, #44	; 0x2c
 800edb6:	fb01 f303 	mul.w	r3, r1, r3
 800edba:	4413      	add	r3, r2
 800edbc:	3354      	adds	r3, #84	; 0x54
 800edbe:	78ba      	ldrb	r2, [r7, #2]
 800edc0:	701a      	strb	r2, [r3, #0]
 800edc2:	e008      	b.n	800edd6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800edc4:	78fb      	ldrb	r3, [r7, #3]
 800edc6:	68fa      	ldr	r2, [r7, #12]
 800edc8:	212c      	movs	r1, #44	; 0x2c
 800edca:	fb01 f303 	mul.w	r3, r1, r3
 800edce:	4413      	add	r3, r2
 800edd0:	3355      	adds	r3, #85	; 0x55
 800edd2:	78ba      	ldrb	r2, [r7, #2]
 800edd4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800edd6:	2300      	movs	r3, #0
}
 800edd8:	4618      	mov	r0, r3
 800edda:	3714      	adds	r7, #20
 800eddc:	46bd      	mov	sp, r7
 800edde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede2:	4770      	bx	lr

0800ede4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b082      	sub	sp, #8
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f7f5 fa11 	bl	8004214 <HAL_Delay>
}
 800edf2:	bf00      	nop
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}
	...

0800edfc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800edfc:	b480      	push	{r7}
 800edfe:	b085      	sub	sp, #20
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	4603      	mov	r3, r0
 800ee04:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee06:	2300      	movs	r3, #0
 800ee08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ee0a:	79fb      	ldrb	r3, [r7, #7]
 800ee0c:	2b03      	cmp	r3, #3
 800ee0e:	d817      	bhi.n	800ee40 <USBH_Get_USB_Status+0x44>
 800ee10:	a201      	add	r2, pc, #4	; (adr r2, 800ee18 <USBH_Get_USB_Status+0x1c>)
 800ee12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee16:	bf00      	nop
 800ee18:	0800ee29 	.word	0x0800ee29
 800ee1c:	0800ee2f 	.word	0x0800ee2f
 800ee20:	0800ee35 	.word	0x0800ee35
 800ee24:	0800ee3b 	.word	0x0800ee3b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	73fb      	strb	r3, [r7, #15]
    break;
 800ee2c:	e00b      	b.n	800ee46 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ee2e:	2302      	movs	r3, #2
 800ee30:	73fb      	strb	r3, [r7, #15]
    break;
 800ee32:	e008      	b.n	800ee46 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ee34:	2301      	movs	r3, #1
 800ee36:	73fb      	strb	r3, [r7, #15]
    break;
 800ee38:	e005      	b.n	800ee46 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ee3a:	2302      	movs	r3, #2
 800ee3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ee3e:	e002      	b.n	800ee46 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ee40:	2302      	movs	r3, #2
 800ee42:	73fb      	strb	r3, [r7, #15]
    break;
 800ee44:	bf00      	nop
  }
  return usb_status;
 800ee46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee48:	4618      	mov	r0, r3
 800ee4a:	3714      	adds	r7, #20
 800ee4c:	46bd      	mov	sp, r7
 800ee4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee52:	4770      	bx	lr

0800ee54 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b084      	sub	sp, #16
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ee5e:	79fb      	ldrb	r3, [r7, #7]
 800ee60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800ee62:	79fb      	ldrb	r3, [r7, #7]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d102      	bne.n	800ee6e <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	73fb      	strb	r3, [r7, #15]
 800ee6c:	e001      	b.n	800ee72 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800ee72:	7bfb      	ldrb	r3, [r7, #15]
 800ee74:	461a      	mov	r2, r3
 800ee76:	2110      	movs	r1, #16
 800ee78:	4803      	ldr	r0, [pc, #12]	; (800ee88 <MX_DriverVbusHS+0x34>)
 800ee7a:	f7f7 fa09 	bl	8006290 <HAL_GPIO_WritePin>
}
 800ee7e:	bf00      	nop
 800ee80:	3710      	adds	r7, #16
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	40020800 	.word	0x40020800

0800ee8c <__errno>:
 800ee8c:	4b01      	ldr	r3, [pc, #4]	; (800ee94 <__errno+0x8>)
 800ee8e:	6818      	ldr	r0, [r3, #0]
 800ee90:	4770      	bx	lr
 800ee92:	bf00      	nop
 800ee94:	20000074 	.word	0x20000074

0800ee98 <__libc_init_array>:
 800ee98:	b570      	push	{r4, r5, r6, lr}
 800ee9a:	4d0d      	ldr	r5, [pc, #52]	; (800eed0 <__libc_init_array+0x38>)
 800ee9c:	4c0d      	ldr	r4, [pc, #52]	; (800eed4 <__libc_init_array+0x3c>)
 800ee9e:	1b64      	subs	r4, r4, r5
 800eea0:	10a4      	asrs	r4, r4, #2
 800eea2:	2600      	movs	r6, #0
 800eea4:	42a6      	cmp	r6, r4
 800eea6:	d109      	bne.n	800eebc <__libc_init_array+0x24>
 800eea8:	4d0b      	ldr	r5, [pc, #44]	; (800eed8 <__libc_init_array+0x40>)
 800eeaa:	4c0c      	ldr	r4, [pc, #48]	; (800eedc <__libc_init_array+0x44>)
 800eeac:	f001 fd46 	bl	801093c <_init>
 800eeb0:	1b64      	subs	r4, r4, r5
 800eeb2:	10a4      	asrs	r4, r4, #2
 800eeb4:	2600      	movs	r6, #0
 800eeb6:	42a6      	cmp	r6, r4
 800eeb8:	d105      	bne.n	800eec6 <__libc_init_array+0x2e>
 800eeba:	bd70      	pop	{r4, r5, r6, pc}
 800eebc:	f855 3b04 	ldr.w	r3, [r5], #4
 800eec0:	4798      	blx	r3
 800eec2:	3601      	adds	r6, #1
 800eec4:	e7ee      	b.n	800eea4 <__libc_init_array+0xc>
 800eec6:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeca:	4798      	blx	r3
 800eecc:	3601      	adds	r6, #1
 800eece:	e7f2      	b.n	800eeb6 <__libc_init_array+0x1e>
 800eed0:	08082e90 	.word	0x08082e90
 800eed4:	08082e90 	.word	0x08082e90
 800eed8:	08082e90 	.word	0x08082e90
 800eedc:	08082e94 	.word	0x08082e94

0800eee0 <malloc>:
 800eee0:	4b02      	ldr	r3, [pc, #8]	; (800eeec <malloc+0xc>)
 800eee2:	4601      	mov	r1, r0
 800eee4:	6818      	ldr	r0, [r3, #0]
 800eee6:	f000 b87f 	b.w	800efe8 <_malloc_r>
 800eeea:	bf00      	nop
 800eeec:	20000074 	.word	0x20000074

0800eef0 <free>:
 800eef0:	4b02      	ldr	r3, [pc, #8]	; (800eefc <free+0xc>)
 800eef2:	4601      	mov	r1, r0
 800eef4:	6818      	ldr	r0, [r3, #0]
 800eef6:	f000 b80b 	b.w	800ef10 <_free_r>
 800eefa:	bf00      	nop
 800eefc:	20000074 	.word	0x20000074

0800ef00 <memset>:
 800ef00:	4402      	add	r2, r0
 800ef02:	4603      	mov	r3, r0
 800ef04:	4293      	cmp	r3, r2
 800ef06:	d100      	bne.n	800ef0a <memset+0xa>
 800ef08:	4770      	bx	lr
 800ef0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ef0e:	e7f9      	b.n	800ef04 <memset+0x4>

0800ef10 <_free_r>:
 800ef10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef12:	2900      	cmp	r1, #0
 800ef14:	d044      	beq.n	800efa0 <_free_r+0x90>
 800ef16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef1a:	9001      	str	r0, [sp, #4]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	f1a1 0404 	sub.w	r4, r1, #4
 800ef22:	bfb8      	it	lt
 800ef24:	18e4      	addlt	r4, r4, r3
 800ef26:	f000 f8e3 	bl	800f0f0 <__malloc_lock>
 800ef2a:	4a1e      	ldr	r2, [pc, #120]	; (800efa4 <_free_r+0x94>)
 800ef2c:	9801      	ldr	r0, [sp, #4]
 800ef2e:	6813      	ldr	r3, [r2, #0]
 800ef30:	b933      	cbnz	r3, 800ef40 <_free_r+0x30>
 800ef32:	6063      	str	r3, [r4, #4]
 800ef34:	6014      	str	r4, [r2, #0]
 800ef36:	b003      	add	sp, #12
 800ef38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef3c:	f000 b8de 	b.w	800f0fc <__malloc_unlock>
 800ef40:	42a3      	cmp	r3, r4
 800ef42:	d908      	bls.n	800ef56 <_free_r+0x46>
 800ef44:	6825      	ldr	r5, [r4, #0]
 800ef46:	1961      	adds	r1, r4, r5
 800ef48:	428b      	cmp	r3, r1
 800ef4a:	bf01      	itttt	eq
 800ef4c:	6819      	ldreq	r1, [r3, #0]
 800ef4e:	685b      	ldreq	r3, [r3, #4]
 800ef50:	1949      	addeq	r1, r1, r5
 800ef52:	6021      	streq	r1, [r4, #0]
 800ef54:	e7ed      	b.n	800ef32 <_free_r+0x22>
 800ef56:	461a      	mov	r2, r3
 800ef58:	685b      	ldr	r3, [r3, #4]
 800ef5a:	b10b      	cbz	r3, 800ef60 <_free_r+0x50>
 800ef5c:	42a3      	cmp	r3, r4
 800ef5e:	d9fa      	bls.n	800ef56 <_free_r+0x46>
 800ef60:	6811      	ldr	r1, [r2, #0]
 800ef62:	1855      	adds	r5, r2, r1
 800ef64:	42a5      	cmp	r5, r4
 800ef66:	d10b      	bne.n	800ef80 <_free_r+0x70>
 800ef68:	6824      	ldr	r4, [r4, #0]
 800ef6a:	4421      	add	r1, r4
 800ef6c:	1854      	adds	r4, r2, r1
 800ef6e:	42a3      	cmp	r3, r4
 800ef70:	6011      	str	r1, [r2, #0]
 800ef72:	d1e0      	bne.n	800ef36 <_free_r+0x26>
 800ef74:	681c      	ldr	r4, [r3, #0]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	6053      	str	r3, [r2, #4]
 800ef7a:	4421      	add	r1, r4
 800ef7c:	6011      	str	r1, [r2, #0]
 800ef7e:	e7da      	b.n	800ef36 <_free_r+0x26>
 800ef80:	d902      	bls.n	800ef88 <_free_r+0x78>
 800ef82:	230c      	movs	r3, #12
 800ef84:	6003      	str	r3, [r0, #0]
 800ef86:	e7d6      	b.n	800ef36 <_free_r+0x26>
 800ef88:	6825      	ldr	r5, [r4, #0]
 800ef8a:	1961      	adds	r1, r4, r5
 800ef8c:	428b      	cmp	r3, r1
 800ef8e:	bf04      	itt	eq
 800ef90:	6819      	ldreq	r1, [r3, #0]
 800ef92:	685b      	ldreq	r3, [r3, #4]
 800ef94:	6063      	str	r3, [r4, #4]
 800ef96:	bf04      	itt	eq
 800ef98:	1949      	addeq	r1, r1, r5
 800ef9a:	6021      	streq	r1, [r4, #0]
 800ef9c:	6054      	str	r4, [r2, #4]
 800ef9e:	e7ca      	b.n	800ef36 <_free_r+0x26>
 800efa0:	b003      	add	sp, #12
 800efa2:	bd30      	pop	{r4, r5, pc}
 800efa4:	200047b0 	.word	0x200047b0

0800efa8 <sbrk_aligned>:
 800efa8:	b570      	push	{r4, r5, r6, lr}
 800efaa:	4e0e      	ldr	r6, [pc, #56]	; (800efe4 <sbrk_aligned+0x3c>)
 800efac:	460c      	mov	r4, r1
 800efae:	6831      	ldr	r1, [r6, #0]
 800efb0:	4605      	mov	r5, r0
 800efb2:	b911      	cbnz	r1, 800efba <sbrk_aligned+0x12>
 800efb4:	f000 f88c 	bl	800f0d0 <_sbrk_r>
 800efb8:	6030      	str	r0, [r6, #0]
 800efba:	4621      	mov	r1, r4
 800efbc:	4628      	mov	r0, r5
 800efbe:	f000 f887 	bl	800f0d0 <_sbrk_r>
 800efc2:	1c43      	adds	r3, r0, #1
 800efc4:	d00a      	beq.n	800efdc <sbrk_aligned+0x34>
 800efc6:	1cc4      	adds	r4, r0, #3
 800efc8:	f024 0403 	bic.w	r4, r4, #3
 800efcc:	42a0      	cmp	r0, r4
 800efce:	d007      	beq.n	800efe0 <sbrk_aligned+0x38>
 800efd0:	1a21      	subs	r1, r4, r0
 800efd2:	4628      	mov	r0, r5
 800efd4:	f000 f87c 	bl	800f0d0 <_sbrk_r>
 800efd8:	3001      	adds	r0, #1
 800efda:	d101      	bne.n	800efe0 <sbrk_aligned+0x38>
 800efdc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800efe0:	4620      	mov	r0, r4
 800efe2:	bd70      	pop	{r4, r5, r6, pc}
 800efe4:	200047b4 	.word	0x200047b4

0800efe8 <_malloc_r>:
 800efe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efec:	1ccd      	adds	r5, r1, #3
 800efee:	f025 0503 	bic.w	r5, r5, #3
 800eff2:	3508      	adds	r5, #8
 800eff4:	2d0c      	cmp	r5, #12
 800eff6:	bf38      	it	cc
 800eff8:	250c      	movcc	r5, #12
 800effa:	2d00      	cmp	r5, #0
 800effc:	4607      	mov	r7, r0
 800effe:	db01      	blt.n	800f004 <_malloc_r+0x1c>
 800f000:	42a9      	cmp	r1, r5
 800f002:	d905      	bls.n	800f010 <_malloc_r+0x28>
 800f004:	230c      	movs	r3, #12
 800f006:	603b      	str	r3, [r7, #0]
 800f008:	2600      	movs	r6, #0
 800f00a:	4630      	mov	r0, r6
 800f00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f010:	4e2e      	ldr	r6, [pc, #184]	; (800f0cc <_malloc_r+0xe4>)
 800f012:	f000 f86d 	bl	800f0f0 <__malloc_lock>
 800f016:	6833      	ldr	r3, [r6, #0]
 800f018:	461c      	mov	r4, r3
 800f01a:	bb34      	cbnz	r4, 800f06a <_malloc_r+0x82>
 800f01c:	4629      	mov	r1, r5
 800f01e:	4638      	mov	r0, r7
 800f020:	f7ff ffc2 	bl	800efa8 <sbrk_aligned>
 800f024:	1c43      	adds	r3, r0, #1
 800f026:	4604      	mov	r4, r0
 800f028:	d14d      	bne.n	800f0c6 <_malloc_r+0xde>
 800f02a:	6834      	ldr	r4, [r6, #0]
 800f02c:	4626      	mov	r6, r4
 800f02e:	2e00      	cmp	r6, #0
 800f030:	d140      	bne.n	800f0b4 <_malloc_r+0xcc>
 800f032:	6823      	ldr	r3, [r4, #0]
 800f034:	4631      	mov	r1, r6
 800f036:	4638      	mov	r0, r7
 800f038:	eb04 0803 	add.w	r8, r4, r3
 800f03c:	f000 f848 	bl	800f0d0 <_sbrk_r>
 800f040:	4580      	cmp	r8, r0
 800f042:	d13a      	bne.n	800f0ba <_malloc_r+0xd2>
 800f044:	6821      	ldr	r1, [r4, #0]
 800f046:	3503      	adds	r5, #3
 800f048:	1a6d      	subs	r5, r5, r1
 800f04a:	f025 0503 	bic.w	r5, r5, #3
 800f04e:	3508      	adds	r5, #8
 800f050:	2d0c      	cmp	r5, #12
 800f052:	bf38      	it	cc
 800f054:	250c      	movcc	r5, #12
 800f056:	4629      	mov	r1, r5
 800f058:	4638      	mov	r0, r7
 800f05a:	f7ff ffa5 	bl	800efa8 <sbrk_aligned>
 800f05e:	3001      	adds	r0, #1
 800f060:	d02b      	beq.n	800f0ba <_malloc_r+0xd2>
 800f062:	6823      	ldr	r3, [r4, #0]
 800f064:	442b      	add	r3, r5
 800f066:	6023      	str	r3, [r4, #0]
 800f068:	e00e      	b.n	800f088 <_malloc_r+0xa0>
 800f06a:	6822      	ldr	r2, [r4, #0]
 800f06c:	1b52      	subs	r2, r2, r5
 800f06e:	d41e      	bmi.n	800f0ae <_malloc_r+0xc6>
 800f070:	2a0b      	cmp	r2, #11
 800f072:	d916      	bls.n	800f0a2 <_malloc_r+0xba>
 800f074:	1961      	adds	r1, r4, r5
 800f076:	42a3      	cmp	r3, r4
 800f078:	6025      	str	r5, [r4, #0]
 800f07a:	bf18      	it	ne
 800f07c:	6059      	strne	r1, [r3, #4]
 800f07e:	6863      	ldr	r3, [r4, #4]
 800f080:	bf08      	it	eq
 800f082:	6031      	streq	r1, [r6, #0]
 800f084:	5162      	str	r2, [r4, r5]
 800f086:	604b      	str	r3, [r1, #4]
 800f088:	4638      	mov	r0, r7
 800f08a:	f104 060b 	add.w	r6, r4, #11
 800f08e:	f000 f835 	bl	800f0fc <__malloc_unlock>
 800f092:	f026 0607 	bic.w	r6, r6, #7
 800f096:	1d23      	adds	r3, r4, #4
 800f098:	1af2      	subs	r2, r6, r3
 800f09a:	d0b6      	beq.n	800f00a <_malloc_r+0x22>
 800f09c:	1b9b      	subs	r3, r3, r6
 800f09e:	50a3      	str	r3, [r4, r2]
 800f0a0:	e7b3      	b.n	800f00a <_malloc_r+0x22>
 800f0a2:	6862      	ldr	r2, [r4, #4]
 800f0a4:	42a3      	cmp	r3, r4
 800f0a6:	bf0c      	ite	eq
 800f0a8:	6032      	streq	r2, [r6, #0]
 800f0aa:	605a      	strne	r2, [r3, #4]
 800f0ac:	e7ec      	b.n	800f088 <_malloc_r+0xa0>
 800f0ae:	4623      	mov	r3, r4
 800f0b0:	6864      	ldr	r4, [r4, #4]
 800f0b2:	e7b2      	b.n	800f01a <_malloc_r+0x32>
 800f0b4:	4634      	mov	r4, r6
 800f0b6:	6876      	ldr	r6, [r6, #4]
 800f0b8:	e7b9      	b.n	800f02e <_malloc_r+0x46>
 800f0ba:	230c      	movs	r3, #12
 800f0bc:	603b      	str	r3, [r7, #0]
 800f0be:	4638      	mov	r0, r7
 800f0c0:	f000 f81c 	bl	800f0fc <__malloc_unlock>
 800f0c4:	e7a1      	b.n	800f00a <_malloc_r+0x22>
 800f0c6:	6025      	str	r5, [r4, #0]
 800f0c8:	e7de      	b.n	800f088 <_malloc_r+0xa0>
 800f0ca:	bf00      	nop
 800f0cc:	200047b0 	.word	0x200047b0

0800f0d0 <_sbrk_r>:
 800f0d0:	b538      	push	{r3, r4, r5, lr}
 800f0d2:	4d06      	ldr	r5, [pc, #24]	; (800f0ec <_sbrk_r+0x1c>)
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	4608      	mov	r0, r1
 800f0da:	602b      	str	r3, [r5, #0]
 800f0dc:	f7f3 fe20 	bl	8002d20 <_sbrk>
 800f0e0:	1c43      	adds	r3, r0, #1
 800f0e2:	d102      	bne.n	800f0ea <_sbrk_r+0x1a>
 800f0e4:	682b      	ldr	r3, [r5, #0]
 800f0e6:	b103      	cbz	r3, 800f0ea <_sbrk_r+0x1a>
 800f0e8:	6023      	str	r3, [r4, #0]
 800f0ea:	bd38      	pop	{r3, r4, r5, pc}
 800f0ec:	200047b8 	.word	0x200047b8

0800f0f0 <__malloc_lock>:
 800f0f0:	4801      	ldr	r0, [pc, #4]	; (800f0f8 <__malloc_lock+0x8>)
 800f0f2:	f000 b809 	b.w	800f108 <__retarget_lock_acquire_recursive>
 800f0f6:	bf00      	nop
 800f0f8:	200047bc 	.word	0x200047bc

0800f0fc <__malloc_unlock>:
 800f0fc:	4801      	ldr	r0, [pc, #4]	; (800f104 <__malloc_unlock+0x8>)
 800f0fe:	f000 b804 	b.w	800f10a <__retarget_lock_release_recursive>
 800f102:	bf00      	nop
 800f104:	200047bc 	.word	0x200047bc

0800f108 <__retarget_lock_acquire_recursive>:
 800f108:	4770      	bx	lr

0800f10a <__retarget_lock_release_recursive>:
 800f10a:	4770      	bx	lr

0800f10c <cabsf>:
 800f10c:	b508      	push	{r3, lr}
 800f10e:	ed2d 8b04 	vpush	{d8-d9}
 800f112:	eeb0 9a40 	vmov.f32	s18, s0
 800f116:	eef0 8a60 	vmov.f32	s17, s1
 800f11a:	f000 f815 	bl	800f148 <crealf>
 800f11e:	eef0 0a68 	vmov.f32	s1, s17
 800f122:	eeb0 8a40 	vmov.f32	s16, s0
 800f126:	eeb0 0a49 	vmov.f32	s0, s18
 800f12a:	f000 f80a 	bl	800f142 <cimagf>
 800f12e:	eef0 0a40 	vmov.f32	s1, s0
 800f132:	eeb0 0a48 	vmov.f32	s0, s16
 800f136:	ecbd 8b04 	vpop	{d8-d9}
 800f13a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f13e:	f000 b8f1 	b.w	800f324 <hypotf>

0800f142 <cimagf>:
 800f142:	eeb0 0a60 	vmov.f32	s0, s1
 800f146:	4770      	bx	lr

0800f148 <crealf>:
 800f148:	4770      	bx	lr
 800f14a:	0000      	movs	r0, r0
 800f14c:	0000      	movs	r0, r0
	...

0800f150 <cos>:
 800f150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f152:	ec53 2b10 	vmov	r2, r3, d0
 800f156:	4826      	ldr	r0, [pc, #152]	; (800f1f0 <cos+0xa0>)
 800f158:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f15c:	4281      	cmp	r1, r0
 800f15e:	dc06      	bgt.n	800f16e <cos+0x1e>
 800f160:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800f1e8 <cos+0x98>
 800f164:	b005      	add	sp, #20
 800f166:	f85d eb04 	ldr.w	lr, [sp], #4
 800f16a:	f000 bc31 	b.w	800f9d0 <__kernel_cos>
 800f16e:	4821      	ldr	r0, [pc, #132]	; (800f1f4 <cos+0xa4>)
 800f170:	4281      	cmp	r1, r0
 800f172:	dd09      	ble.n	800f188 <cos+0x38>
 800f174:	ee10 0a10 	vmov	r0, s0
 800f178:	4619      	mov	r1, r3
 800f17a:	f7f1 f83d 	bl	80001f8 <__aeabi_dsub>
 800f17e:	ec41 0b10 	vmov	d0, r0, r1
 800f182:	b005      	add	sp, #20
 800f184:	f85d fb04 	ldr.w	pc, [sp], #4
 800f188:	4668      	mov	r0, sp
 800f18a:	f000 f97d 	bl	800f488 <__ieee754_rem_pio2>
 800f18e:	f000 0003 	and.w	r0, r0, #3
 800f192:	2801      	cmp	r0, #1
 800f194:	d00b      	beq.n	800f1ae <cos+0x5e>
 800f196:	2802      	cmp	r0, #2
 800f198:	d016      	beq.n	800f1c8 <cos+0x78>
 800f19a:	b9e0      	cbnz	r0, 800f1d6 <cos+0x86>
 800f19c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1a0:	ed9d 0b00 	vldr	d0, [sp]
 800f1a4:	f000 fc14 	bl	800f9d0 <__kernel_cos>
 800f1a8:	ec51 0b10 	vmov	r0, r1, d0
 800f1ac:	e7e7      	b.n	800f17e <cos+0x2e>
 800f1ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1b2:	ed9d 0b00 	vldr	d0, [sp]
 800f1b6:	f001 f823 	bl	8010200 <__kernel_sin>
 800f1ba:	ec53 2b10 	vmov	r2, r3, d0
 800f1be:	ee10 0a10 	vmov	r0, s0
 800f1c2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f1c6:	e7da      	b.n	800f17e <cos+0x2e>
 800f1c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1cc:	ed9d 0b00 	vldr	d0, [sp]
 800f1d0:	f000 fbfe 	bl	800f9d0 <__kernel_cos>
 800f1d4:	e7f1      	b.n	800f1ba <cos+0x6a>
 800f1d6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1da:	ed9d 0b00 	vldr	d0, [sp]
 800f1de:	2001      	movs	r0, #1
 800f1e0:	f001 f80e 	bl	8010200 <__kernel_sin>
 800f1e4:	e7e0      	b.n	800f1a8 <cos+0x58>
 800f1e6:	bf00      	nop
	...
 800f1f0:	3fe921fb 	.word	0x3fe921fb
 800f1f4:	7fefffff 	.word	0x7fefffff

0800f1f8 <sin>:
 800f1f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1fa:	ec53 2b10 	vmov	r2, r3, d0
 800f1fe:	4828      	ldr	r0, [pc, #160]	; (800f2a0 <sin+0xa8>)
 800f200:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f204:	4281      	cmp	r1, r0
 800f206:	dc07      	bgt.n	800f218 <sin+0x20>
 800f208:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f298 <sin+0xa0>
 800f20c:	2000      	movs	r0, #0
 800f20e:	b005      	add	sp, #20
 800f210:	f85d eb04 	ldr.w	lr, [sp], #4
 800f214:	f000 bff4 	b.w	8010200 <__kernel_sin>
 800f218:	4822      	ldr	r0, [pc, #136]	; (800f2a4 <sin+0xac>)
 800f21a:	4281      	cmp	r1, r0
 800f21c:	dd09      	ble.n	800f232 <sin+0x3a>
 800f21e:	ee10 0a10 	vmov	r0, s0
 800f222:	4619      	mov	r1, r3
 800f224:	f7f0 ffe8 	bl	80001f8 <__aeabi_dsub>
 800f228:	ec41 0b10 	vmov	d0, r0, r1
 800f22c:	b005      	add	sp, #20
 800f22e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f232:	4668      	mov	r0, sp
 800f234:	f000 f928 	bl	800f488 <__ieee754_rem_pio2>
 800f238:	f000 0003 	and.w	r0, r0, #3
 800f23c:	2801      	cmp	r0, #1
 800f23e:	d00c      	beq.n	800f25a <sin+0x62>
 800f240:	2802      	cmp	r0, #2
 800f242:	d011      	beq.n	800f268 <sin+0x70>
 800f244:	b9f0      	cbnz	r0, 800f284 <sin+0x8c>
 800f246:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f24a:	ed9d 0b00 	vldr	d0, [sp]
 800f24e:	2001      	movs	r0, #1
 800f250:	f000 ffd6 	bl	8010200 <__kernel_sin>
 800f254:	ec51 0b10 	vmov	r0, r1, d0
 800f258:	e7e6      	b.n	800f228 <sin+0x30>
 800f25a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f25e:	ed9d 0b00 	vldr	d0, [sp]
 800f262:	f000 fbb5 	bl	800f9d0 <__kernel_cos>
 800f266:	e7f5      	b.n	800f254 <sin+0x5c>
 800f268:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f26c:	ed9d 0b00 	vldr	d0, [sp]
 800f270:	2001      	movs	r0, #1
 800f272:	f000 ffc5 	bl	8010200 <__kernel_sin>
 800f276:	ec53 2b10 	vmov	r2, r3, d0
 800f27a:	ee10 0a10 	vmov	r0, s0
 800f27e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f282:	e7d1      	b.n	800f228 <sin+0x30>
 800f284:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f288:	ed9d 0b00 	vldr	d0, [sp]
 800f28c:	f000 fba0 	bl	800f9d0 <__kernel_cos>
 800f290:	e7f1      	b.n	800f276 <sin+0x7e>
 800f292:	bf00      	nop
 800f294:	f3af 8000 	nop.w
	...
 800f2a0:	3fe921fb 	.word	0x3fe921fb
 800f2a4:	7fefffff 	.word	0x7fefffff

0800f2a8 <log10>:
 800f2a8:	b538      	push	{r3, r4, r5, lr}
 800f2aa:	ed2d 8b02 	vpush	{d8}
 800f2ae:	ec55 4b10 	vmov	r4, r5, d0
 800f2b2:	f000 f85d 	bl	800f370 <__ieee754_log10>
 800f2b6:	4622      	mov	r2, r4
 800f2b8:	462b      	mov	r3, r5
 800f2ba:	4620      	mov	r0, r4
 800f2bc:	4629      	mov	r1, r5
 800f2be:	eeb0 8a40 	vmov.f32	s16, s0
 800f2c2:	eef0 8a60 	vmov.f32	s17, s1
 800f2c6:	f7f1 fbe9 	bl	8000a9c <__aeabi_dcmpun>
 800f2ca:	b998      	cbnz	r0, 800f2f4 <log10+0x4c>
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	4629      	mov	r1, r5
 800f2d4:	f7f1 fbc4 	bl	8000a60 <__aeabi_dcmple>
 800f2d8:	b160      	cbz	r0, 800f2f4 <log10+0x4c>
 800f2da:	2200      	movs	r2, #0
 800f2dc:	2300      	movs	r3, #0
 800f2de:	4620      	mov	r0, r4
 800f2e0:	4629      	mov	r1, r5
 800f2e2:	f7f1 fba9 	bl	8000a38 <__aeabi_dcmpeq>
 800f2e6:	b160      	cbz	r0, 800f302 <log10+0x5a>
 800f2e8:	f7ff fdd0 	bl	800ee8c <__errno>
 800f2ec:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800f318 <log10+0x70>
 800f2f0:	2322      	movs	r3, #34	; 0x22
 800f2f2:	6003      	str	r3, [r0, #0]
 800f2f4:	eeb0 0a48 	vmov.f32	s0, s16
 800f2f8:	eef0 0a68 	vmov.f32	s1, s17
 800f2fc:	ecbd 8b02 	vpop	{d8}
 800f300:	bd38      	pop	{r3, r4, r5, pc}
 800f302:	f7ff fdc3 	bl	800ee8c <__errno>
 800f306:	ecbd 8b02 	vpop	{d8}
 800f30a:	2321      	movs	r3, #33	; 0x21
 800f30c:	6003      	str	r3, [r0, #0]
 800f30e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f312:	4803      	ldr	r0, [pc, #12]	; (800f320 <log10+0x78>)
 800f314:	f001 b8bc 	b.w	8010490 <nan>
 800f318:	00000000 	.word	0x00000000
 800f31c:	fff00000 	.word	0xfff00000
 800f320:	08082cac 	.word	0x08082cac

0800f324 <hypotf>:
 800f324:	b508      	push	{r3, lr}
 800f326:	ed2d 8b04 	vpush	{d8-d9}
 800f32a:	eeb0 9a40 	vmov.f32	s18, s0
 800f32e:	eef0 8a60 	vmov.f32	s17, s1
 800f332:	f000 fab5 	bl	800f8a0 <__ieee754_hypotf>
 800f336:	eeb0 8a40 	vmov.f32	s16, s0
 800f33a:	f001 f937 	bl	80105ac <finitef>
 800f33e:	b978      	cbnz	r0, 800f360 <hypotf+0x3c>
 800f340:	eeb0 0a49 	vmov.f32	s0, s18
 800f344:	f001 f932 	bl	80105ac <finitef>
 800f348:	b150      	cbz	r0, 800f360 <hypotf+0x3c>
 800f34a:	eeb0 0a68 	vmov.f32	s0, s17
 800f34e:	f001 f92d 	bl	80105ac <finitef>
 800f352:	b128      	cbz	r0, 800f360 <hypotf+0x3c>
 800f354:	f7ff fd9a 	bl	800ee8c <__errno>
 800f358:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800f36c <hypotf+0x48>
 800f35c:	2322      	movs	r3, #34	; 0x22
 800f35e:	6003      	str	r3, [r0, #0]
 800f360:	eeb0 0a48 	vmov.f32	s0, s16
 800f364:	ecbd 8b04 	vpop	{d8-d9}
 800f368:	bd08      	pop	{r3, pc}
 800f36a:	bf00      	nop
 800f36c:	7f800000 	.word	0x7f800000

0800f370 <__ieee754_log10>:
 800f370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f374:	ec55 4b10 	vmov	r4, r5, d0
 800f378:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800f37c:	462b      	mov	r3, r5
 800f37e:	da2f      	bge.n	800f3e0 <__ieee754_log10+0x70>
 800f380:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800f384:	4322      	orrs	r2, r4
 800f386:	d109      	bne.n	800f39c <__ieee754_log10+0x2c>
 800f388:	493b      	ldr	r1, [pc, #236]	; (800f478 <__ieee754_log10+0x108>)
 800f38a:	2200      	movs	r2, #0
 800f38c:	2300      	movs	r3, #0
 800f38e:	2000      	movs	r0, #0
 800f390:	f7f1 fa14 	bl	80007bc <__aeabi_ddiv>
 800f394:	ec41 0b10 	vmov	d0, r0, r1
 800f398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f39c:	2d00      	cmp	r5, #0
 800f39e:	da09      	bge.n	800f3b4 <__ieee754_log10+0x44>
 800f3a0:	ee10 2a10 	vmov	r2, s0
 800f3a4:	ee10 0a10 	vmov	r0, s0
 800f3a8:	4629      	mov	r1, r5
 800f3aa:	f7f0 ff25 	bl	80001f8 <__aeabi_dsub>
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	e7ed      	b.n	800f390 <__ieee754_log10+0x20>
 800f3b4:	4b31      	ldr	r3, [pc, #196]	; (800f47c <__ieee754_log10+0x10c>)
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	4629      	mov	r1, r5
 800f3ba:	ee10 0a10 	vmov	r0, s0
 800f3be:	f7f1 f8d3 	bl	8000568 <__aeabi_dmul>
 800f3c2:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800f3c6:	4604      	mov	r4, r0
 800f3c8:	460d      	mov	r5, r1
 800f3ca:	460b      	mov	r3, r1
 800f3cc:	492c      	ldr	r1, [pc, #176]	; (800f480 <__ieee754_log10+0x110>)
 800f3ce:	428b      	cmp	r3, r1
 800f3d0:	dd08      	ble.n	800f3e4 <__ieee754_log10+0x74>
 800f3d2:	4622      	mov	r2, r4
 800f3d4:	462b      	mov	r3, r5
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	4629      	mov	r1, r5
 800f3da:	f7f0 ff0f 	bl	80001fc <__adddf3>
 800f3de:	e7d9      	b.n	800f394 <__ieee754_log10+0x24>
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	e7f3      	b.n	800f3cc <__ieee754_log10+0x5c>
 800f3e4:	1518      	asrs	r0, r3, #20
 800f3e6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800f3ea:	4410      	add	r0, r2
 800f3ec:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800f3f0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800f3f4:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800f3f8:	f7f1 f84c 	bl	8000494 <__aeabi_i2d>
 800f3fc:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800f400:	3303      	adds	r3, #3
 800f402:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800f406:	ec45 4b10 	vmov	d0, r4, r5
 800f40a:	4606      	mov	r6, r0
 800f40c:	460f      	mov	r7, r1
 800f40e:	f001 f8db 	bl	80105c8 <__ieee754_log>
 800f412:	a313      	add	r3, pc, #76	; (adr r3, 800f460 <__ieee754_log10+0xf0>)
 800f414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f418:	4630      	mov	r0, r6
 800f41a:	4639      	mov	r1, r7
 800f41c:	ec59 8b10 	vmov	r8, r9, d0
 800f420:	f7f1 f8a2 	bl	8000568 <__aeabi_dmul>
 800f424:	a310      	add	r3, pc, #64	; (adr r3, 800f468 <__ieee754_log10+0xf8>)
 800f426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f42a:	4604      	mov	r4, r0
 800f42c:	460d      	mov	r5, r1
 800f42e:	4640      	mov	r0, r8
 800f430:	4649      	mov	r1, r9
 800f432:	f7f1 f899 	bl	8000568 <__aeabi_dmul>
 800f436:	4602      	mov	r2, r0
 800f438:	460b      	mov	r3, r1
 800f43a:	4620      	mov	r0, r4
 800f43c:	4629      	mov	r1, r5
 800f43e:	f7f0 fedd 	bl	80001fc <__adddf3>
 800f442:	a30b      	add	r3, pc, #44	; (adr r3, 800f470 <__ieee754_log10+0x100>)
 800f444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f448:	4604      	mov	r4, r0
 800f44a:	460d      	mov	r5, r1
 800f44c:	4630      	mov	r0, r6
 800f44e:	4639      	mov	r1, r7
 800f450:	f7f1 f88a 	bl	8000568 <__aeabi_dmul>
 800f454:	4602      	mov	r2, r0
 800f456:	460b      	mov	r3, r1
 800f458:	4620      	mov	r0, r4
 800f45a:	4629      	mov	r1, r5
 800f45c:	e7bd      	b.n	800f3da <__ieee754_log10+0x6a>
 800f45e:	bf00      	nop
 800f460:	11f12b36 	.word	0x11f12b36
 800f464:	3d59fef3 	.word	0x3d59fef3
 800f468:	1526e50e 	.word	0x1526e50e
 800f46c:	3fdbcb7b 	.word	0x3fdbcb7b
 800f470:	509f6000 	.word	0x509f6000
 800f474:	3fd34413 	.word	0x3fd34413
 800f478:	c3500000 	.word	0xc3500000
 800f47c:	43500000 	.word	0x43500000
 800f480:	7fefffff 	.word	0x7fefffff
 800f484:	00000000 	.word	0x00000000

0800f488 <__ieee754_rem_pio2>:
 800f488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f48c:	ed2d 8b02 	vpush	{d8}
 800f490:	ec55 4b10 	vmov	r4, r5, d0
 800f494:	4bca      	ldr	r3, [pc, #808]	; (800f7c0 <__ieee754_rem_pio2+0x338>)
 800f496:	b08b      	sub	sp, #44	; 0x2c
 800f498:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f49c:	4598      	cmp	r8, r3
 800f49e:	4682      	mov	sl, r0
 800f4a0:	9502      	str	r5, [sp, #8]
 800f4a2:	dc08      	bgt.n	800f4b6 <__ieee754_rem_pio2+0x2e>
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	ed80 0b00 	vstr	d0, [r0]
 800f4ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f4b0:	f04f 0b00 	mov.w	fp, #0
 800f4b4:	e028      	b.n	800f508 <__ieee754_rem_pio2+0x80>
 800f4b6:	4bc3      	ldr	r3, [pc, #780]	; (800f7c4 <__ieee754_rem_pio2+0x33c>)
 800f4b8:	4598      	cmp	r8, r3
 800f4ba:	dc78      	bgt.n	800f5ae <__ieee754_rem_pio2+0x126>
 800f4bc:	9b02      	ldr	r3, [sp, #8]
 800f4be:	4ec2      	ldr	r6, [pc, #776]	; (800f7c8 <__ieee754_rem_pio2+0x340>)
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	ee10 0a10 	vmov	r0, s0
 800f4c6:	a3b0      	add	r3, pc, #704	; (adr r3, 800f788 <__ieee754_rem_pio2+0x300>)
 800f4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4cc:	4629      	mov	r1, r5
 800f4ce:	dd39      	ble.n	800f544 <__ieee754_rem_pio2+0xbc>
 800f4d0:	f7f0 fe92 	bl	80001f8 <__aeabi_dsub>
 800f4d4:	45b0      	cmp	r8, r6
 800f4d6:	4604      	mov	r4, r0
 800f4d8:	460d      	mov	r5, r1
 800f4da:	d01b      	beq.n	800f514 <__ieee754_rem_pio2+0x8c>
 800f4dc:	a3ac      	add	r3, pc, #688	; (adr r3, 800f790 <__ieee754_rem_pio2+0x308>)
 800f4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e2:	f7f0 fe89 	bl	80001f8 <__aeabi_dsub>
 800f4e6:	4602      	mov	r2, r0
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	e9ca 2300 	strd	r2, r3, [sl]
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	4629      	mov	r1, r5
 800f4f2:	f7f0 fe81 	bl	80001f8 <__aeabi_dsub>
 800f4f6:	a3a6      	add	r3, pc, #664	; (adr r3, 800f790 <__ieee754_rem_pio2+0x308>)
 800f4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4fc:	f7f0 fe7c 	bl	80001f8 <__aeabi_dsub>
 800f500:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f504:	f04f 0b01 	mov.w	fp, #1
 800f508:	4658      	mov	r0, fp
 800f50a:	b00b      	add	sp, #44	; 0x2c
 800f50c:	ecbd 8b02 	vpop	{d8}
 800f510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f514:	a3a0      	add	r3, pc, #640	; (adr r3, 800f798 <__ieee754_rem_pio2+0x310>)
 800f516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f51a:	f7f0 fe6d 	bl	80001f8 <__aeabi_dsub>
 800f51e:	a3a0      	add	r3, pc, #640	; (adr r3, 800f7a0 <__ieee754_rem_pio2+0x318>)
 800f520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f524:	4604      	mov	r4, r0
 800f526:	460d      	mov	r5, r1
 800f528:	f7f0 fe66 	bl	80001f8 <__aeabi_dsub>
 800f52c:	4602      	mov	r2, r0
 800f52e:	460b      	mov	r3, r1
 800f530:	e9ca 2300 	strd	r2, r3, [sl]
 800f534:	4620      	mov	r0, r4
 800f536:	4629      	mov	r1, r5
 800f538:	f7f0 fe5e 	bl	80001f8 <__aeabi_dsub>
 800f53c:	a398      	add	r3, pc, #608	; (adr r3, 800f7a0 <__ieee754_rem_pio2+0x318>)
 800f53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f542:	e7db      	b.n	800f4fc <__ieee754_rem_pio2+0x74>
 800f544:	f7f0 fe5a 	bl	80001fc <__adddf3>
 800f548:	45b0      	cmp	r8, r6
 800f54a:	4604      	mov	r4, r0
 800f54c:	460d      	mov	r5, r1
 800f54e:	d016      	beq.n	800f57e <__ieee754_rem_pio2+0xf6>
 800f550:	a38f      	add	r3, pc, #572	; (adr r3, 800f790 <__ieee754_rem_pio2+0x308>)
 800f552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f556:	f7f0 fe51 	bl	80001fc <__adddf3>
 800f55a:	4602      	mov	r2, r0
 800f55c:	460b      	mov	r3, r1
 800f55e:	e9ca 2300 	strd	r2, r3, [sl]
 800f562:	4620      	mov	r0, r4
 800f564:	4629      	mov	r1, r5
 800f566:	f7f0 fe47 	bl	80001f8 <__aeabi_dsub>
 800f56a:	a389      	add	r3, pc, #548	; (adr r3, 800f790 <__ieee754_rem_pio2+0x308>)
 800f56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f570:	f7f0 fe44 	bl	80001fc <__adddf3>
 800f574:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800f578:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f57c:	e7c4      	b.n	800f508 <__ieee754_rem_pio2+0x80>
 800f57e:	a386      	add	r3, pc, #536	; (adr r3, 800f798 <__ieee754_rem_pio2+0x310>)
 800f580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f584:	f7f0 fe3a 	bl	80001fc <__adddf3>
 800f588:	a385      	add	r3, pc, #532	; (adr r3, 800f7a0 <__ieee754_rem_pio2+0x318>)
 800f58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58e:	4604      	mov	r4, r0
 800f590:	460d      	mov	r5, r1
 800f592:	f7f0 fe33 	bl	80001fc <__adddf3>
 800f596:	4602      	mov	r2, r0
 800f598:	460b      	mov	r3, r1
 800f59a:	e9ca 2300 	strd	r2, r3, [sl]
 800f59e:	4620      	mov	r0, r4
 800f5a0:	4629      	mov	r1, r5
 800f5a2:	f7f0 fe29 	bl	80001f8 <__aeabi_dsub>
 800f5a6:	a37e      	add	r3, pc, #504	; (adr r3, 800f7a0 <__ieee754_rem_pio2+0x318>)
 800f5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ac:	e7e0      	b.n	800f570 <__ieee754_rem_pio2+0xe8>
 800f5ae:	4b87      	ldr	r3, [pc, #540]	; (800f7cc <__ieee754_rem_pio2+0x344>)
 800f5b0:	4598      	cmp	r8, r3
 800f5b2:	f300 80d9 	bgt.w	800f768 <__ieee754_rem_pio2+0x2e0>
 800f5b6:	f000 fee1 	bl	801037c <fabs>
 800f5ba:	ec55 4b10 	vmov	r4, r5, d0
 800f5be:	ee10 0a10 	vmov	r0, s0
 800f5c2:	a379      	add	r3, pc, #484	; (adr r3, 800f7a8 <__ieee754_rem_pio2+0x320>)
 800f5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c8:	4629      	mov	r1, r5
 800f5ca:	f7f0 ffcd 	bl	8000568 <__aeabi_dmul>
 800f5ce:	4b80      	ldr	r3, [pc, #512]	; (800f7d0 <__ieee754_rem_pio2+0x348>)
 800f5d0:	2200      	movs	r2, #0
 800f5d2:	f7f0 fe13 	bl	80001fc <__adddf3>
 800f5d6:	f7f1 fa77 	bl	8000ac8 <__aeabi_d2iz>
 800f5da:	4683      	mov	fp, r0
 800f5dc:	f7f0 ff5a 	bl	8000494 <__aeabi_i2d>
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	460b      	mov	r3, r1
 800f5e4:	ec43 2b18 	vmov	d8, r2, r3
 800f5e8:	a367      	add	r3, pc, #412	; (adr r3, 800f788 <__ieee754_rem_pio2+0x300>)
 800f5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ee:	f7f0 ffbb 	bl	8000568 <__aeabi_dmul>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	4620      	mov	r0, r4
 800f5f8:	4629      	mov	r1, r5
 800f5fa:	f7f0 fdfd 	bl	80001f8 <__aeabi_dsub>
 800f5fe:	a364      	add	r3, pc, #400	; (adr r3, 800f790 <__ieee754_rem_pio2+0x308>)
 800f600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f604:	4606      	mov	r6, r0
 800f606:	460f      	mov	r7, r1
 800f608:	ec51 0b18 	vmov	r0, r1, d8
 800f60c:	f7f0 ffac 	bl	8000568 <__aeabi_dmul>
 800f610:	f1bb 0f1f 	cmp.w	fp, #31
 800f614:	4604      	mov	r4, r0
 800f616:	460d      	mov	r5, r1
 800f618:	dc0d      	bgt.n	800f636 <__ieee754_rem_pio2+0x1ae>
 800f61a:	4b6e      	ldr	r3, [pc, #440]	; (800f7d4 <__ieee754_rem_pio2+0x34c>)
 800f61c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800f620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f624:	4543      	cmp	r3, r8
 800f626:	d006      	beq.n	800f636 <__ieee754_rem_pio2+0x1ae>
 800f628:	4622      	mov	r2, r4
 800f62a:	462b      	mov	r3, r5
 800f62c:	4630      	mov	r0, r6
 800f62e:	4639      	mov	r1, r7
 800f630:	f7f0 fde2 	bl	80001f8 <__aeabi_dsub>
 800f634:	e00f      	b.n	800f656 <__ieee754_rem_pio2+0x1ce>
 800f636:	462b      	mov	r3, r5
 800f638:	4622      	mov	r2, r4
 800f63a:	4630      	mov	r0, r6
 800f63c:	4639      	mov	r1, r7
 800f63e:	f7f0 fddb 	bl	80001f8 <__aeabi_dsub>
 800f642:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f646:	9303      	str	r3, [sp, #12]
 800f648:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f64c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f650:	f1b8 0f10 	cmp.w	r8, #16
 800f654:	dc02      	bgt.n	800f65c <__ieee754_rem_pio2+0x1d4>
 800f656:	e9ca 0100 	strd	r0, r1, [sl]
 800f65a:	e039      	b.n	800f6d0 <__ieee754_rem_pio2+0x248>
 800f65c:	a34e      	add	r3, pc, #312	; (adr r3, 800f798 <__ieee754_rem_pio2+0x310>)
 800f65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f662:	ec51 0b18 	vmov	r0, r1, d8
 800f666:	f7f0 ff7f 	bl	8000568 <__aeabi_dmul>
 800f66a:	4604      	mov	r4, r0
 800f66c:	460d      	mov	r5, r1
 800f66e:	4602      	mov	r2, r0
 800f670:	460b      	mov	r3, r1
 800f672:	4630      	mov	r0, r6
 800f674:	4639      	mov	r1, r7
 800f676:	f7f0 fdbf 	bl	80001f8 <__aeabi_dsub>
 800f67a:	4602      	mov	r2, r0
 800f67c:	460b      	mov	r3, r1
 800f67e:	4680      	mov	r8, r0
 800f680:	4689      	mov	r9, r1
 800f682:	4630      	mov	r0, r6
 800f684:	4639      	mov	r1, r7
 800f686:	f7f0 fdb7 	bl	80001f8 <__aeabi_dsub>
 800f68a:	4622      	mov	r2, r4
 800f68c:	462b      	mov	r3, r5
 800f68e:	f7f0 fdb3 	bl	80001f8 <__aeabi_dsub>
 800f692:	a343      	add	r3, pc, #268	; (adr r3, 800f7a0 <__ieee754_rem_pio2+0x318>)
 800f694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f698:	4604      	mov	r4, r0
 800f69a:	460d      	mov	r5, r1
 800f69c:	ec51 0b18 	vmov	r0, r1, d8
 800f6a0:	f7f0 ff62 	bl	8000568 <__aeabi_dmul>
 800f6a4:	4622      	mov	r2, r4
 800f6a6:	462b      	mov	r3, r5
 800f6a8:	f7f0 fda6 	bl	80001f8 <__aeabi_dsub>
 800f6ac:	4602      	mov	r2, r0
 800f6ae:	460b      	mov	r3, r1
 800f6b0:	4604      	mov	r4, r0
 800f6b2:	460d      	mov	r5, r1
 800f6b4:	4640      	mov	r0, r8
 800f6b6:	4649      	mov	r1, r9
 800f6b8:	f7f0 fd9e 	bl	80001f8 <__aeabi_dsub>
 800f6bc:	9a03      	ldr	r2, [sp, #12]
 800f6be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f6c2:	1ad3      	subs	r3, r2, r3
 800f6c4:	2b31      	cmp	r3, #49	; 0x31
 800f6c6:	dc24      	bgt.n	800f712 <__ieee754_rem_pio2+0x28a>
 800f6c8:	e9ca 0100 	strd	r0, r1, [sl]
 800f6cc:	4646      	mov	r6, r8
 800f6ce:	464f      	mov	r7, r9
 800f6d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800f6d4:	4630      	mov	r0, r6
 800f6d6:	4642      	mov	r2, r8
 800f6d8:	464b      	mov	r3, r9
 800f6da:	4639      	mov	r1, r7
 800f6dc:	f7f0 fd8c 	bl	80001f8 <__aeabi_dsub>
 800f6e0:	462b      	mov	r3, r5
 800f6e2:	4622      	mov	r2, r4
 800f6e4:	f7f0 fd88 	bl	80001f8 <__aeabi_dsub>
 800f6e8:	9b02      	ldr	r3, [sp, #8]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f6f0:	f6bf af0a 	bge.w	800f508 <__ieee754_rem_pio2+0x80>
 800f6f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f6f8:	f8ca 3004 	str.w	r3, [sl, #4]
 800f6fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f700:	f8ca 8000 	str.w	r8, [sl]
 800f704:	f8ca 0008 	str.w	r0, [sl, #8]
 800f708:	f8ca 300c 	str.w	r3, [sl, #12]
 800f70c:	f1cb 0b00 	rsb	fp, fp, #0
 800f710:	e6fa      	b.n	800f508 <__ieee754_rem_pio2+0x80>
 800f712:	a327      	add	r3, pc, #156	; (adr r3, 800f7b0 <__ieee754_rem_pio2+0x328>)
 800f714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f718:	ec51 0b18 	vmov	r0, r1, d8
 800f71c:	f7f0 ff24 	bl	8000568 <__aeabi_dmul>
 800f720:	4604      	mov	r4, r0
 800f722:	460d      	mov	r5, r1
 800f724:	4602      	mov	r2, r0
 800f726:	460b      	mov	r3, r1
 800f728:	4640      	mov	r0, r8
 800f72a:	4649      	mov	r1, r9
 800f72c:	f7f0 fd64 	bl	80001f8 <__aeabi_dsub>
 800f730:	4602      	mov	r2, r0
 800f732:	460b      	mov	r3, r1
 800f734:	4606      	mov	r6, r0
 800f736:	460f      	mov	r7, r1
 800f738:	4640      	mov	r0, r8
 800f73a:	4649      	mov	r1, r9
 800f73c:	f7f0 fd5c 	bl	80001f8 <__aeabi_dsub>
 800f740:	4622      	mov	r2, r4
 800f742:	462b      	mov	r3, r5
 800f744:	f7f0 fd58 	bl	80001f8 <__aeabi_dsub>
 800f748:	a31b      	add	r3, pc, #108	; (adr r3, 800f7b8 <__ieee754_rem_pio2+0x330>)
 800f74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74e:	4604      	mov	r4, r0
 800f750:	460d      	mov	r5, r1
 800f752:	ec51 0b18 	vmov	r0, r1, d8
 800f756:	f7f0 ff07 	bl	8000568 <__aeabi_dmul>
 800f75a:	4622      	mov	r2, r4
 800f75c:	462b      	mov	r3, r5
 800f75e:	f7f0 fd4b 	bl	80001f8 <__aeabi_dsub>
 800f762:	4604      	mov	r4, r0
 800f764:	460d      	mov	r5, r1
 800f766:	e75f      	b.n	800f628 <__ieee754_rem_pio2+0x1a0>
 800f768:	4b1b      	ldr	r3, [pc, #108]	; (800f7d8 <__ieee754_rem_pio2+0x350>)
 800f76a:	4598      	cmp	r8, r3
 800f76c:	dd36      	ble.n	800f7dc <__ieee754_rem_pio2+0x354>
 800f76e:	ee10 2a10 	vmov	r2, s0
 800f772:	462b      	mov	r3, r5
 800f774:	4620      	mov	r0, r4
 800f776:	4629      	mov	r1, r5
 800f778:	f7f0 fd3e 	bl	80001f8 <__aeabi_dsub>
 800f77c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f780:	e9ca 0100 	strd	r0, r1, [sl]
 800f784:	e694      	b.n	800f4b0 <__ieee754_rem_pio2+0x28>
 800f786:	bf00      	nop
 800f788:	54400000 	.word	0x54400000
 800f78c:	3ff921fb 	.word	0x3ff921fb
 800f790:	1a626331 	.word	0x1a626331
 800f794:	3dd0b461 	.word	0x3dd0b461
 800f798:	1a600000 	.word	0x1a600000
 800f79c:	3dd0b461 	.word	0x3dd0b461
 800f7a0:	2e037073 	.word	0x2e037073
 800f7a4:	3ba3198a 	.word	0x3ba3198a
 800f7a8:	6dc9c883 	.word	0x6dc9c883
 800f7ac:	3fe45f30 	.word	0x3fe45f30
 800f7b0:	2e000000 	.word	0x2e000000
 800f7b4:	3ba3198a 	.word	0x3ba3198a
 800f7b8:	252049c1 	.word	0x252049c1
 800f7bc:	397b839a 	.word	0x397b839a
 800f7c0:	3fe921fb 	.word	0x3fe921fb
 800f7c4:	4002d97b 	.word	0x4002d97b
 800f7c8:	3ff921fb 	.word	0x3ff921fb
 800f7cc:	413921fb 	.word	0x413921fb
 800f7d0:	3fe00000 	.word	0x3fe00000
 800f7d4:	08082cb0 	.word	0x08082cb0
 800f7d8:	7fefffff 	.word	0x7fefffff
 800f7dc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f7e0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f7e4:	ee10 0a10 	vmov	r0, s0
 800f7e8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f7ec:	ee10 6a10 	vmov	r6, s0
 800f7f0:	460f      	mov	r7, r1
 800f7f2:	f7f1 f969 	bl	8000ac8 <__aeabi_d2iz>
 800f7f6:	f7f0 fe4d 	bl	8000494 <__aeabi_i2d>
 800f7fa:	4602      	mov	r2, r0
 800f7fc:	460b      	mov	r3, r1
 800f7fe:	4630      	mov	r0, r6
 800f800:	4639      	mov	r1, r7
 800f802:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f806:	f7f0 fcf7 	bl	80001f8 <__aeabi_dsub>
 800f80a:	4b23      	ldr	r3, [pc, #140]	; (800f898 <__ieee754_rem_pio2+0x410>)
 800f80c:	2200      	movs	r2, #0
 800f80e:	f7f0 feab 	bl	8000568 <__aeabi_dmul>
 800f812:	460f      	mov	r7, r1
 800f814:	4606      	mov	r6, r0
 800f816:	f7f1 f957 	bl	8000ac8 <__aeabi_d2iz>
 800f81a:	f7f0 fe3b 	bl	8000494 <__aeabi_i2d>
 800f81e:	4602      	mov	r2, r0
 800f820:	460b      	mov	r3, r1
 800f822:	4630      	mov	r0, r6
 800f824:	4639      	mov	r1, r7
 800f826:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f82a:	f7f0 fce5 	bl	80001f8 <__aeabi_dsub>
 800f82e:	4b1a      	ldr	r3, [pc, #104]	; (800f898 <__ieee754_rem_pio2+0x410>)
 800f830:	2200      	movs	r2, #0
 800f832:	f7f0 fe99 	bl	8000568 <__aeabi_dmul>
 800f836:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f83a:	ad04      	add	r5, sp, #16
 800f83c:	f04f 0803 	mov.w	r8, #3
 800f840:	46a9      	mov	r9, r5
 800f842:	2600      	movs	r6, #0
 800f844:	2700      	movs	r7, #0
 800f846:	4632      	mov	r2, r6
 800f848:	463b      	mov	r3, r7
 800f84a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f84e:	46c3      	mov	fp, r8
 800f850:	3d08      	subs	r5, #8
 800f852:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f856:	f7f1 f8ef 	bl	8000a38 <__aeabi_dcmpeq>
 800f85a:	2800      	cmp	r0, #0
 800f85c:	d1f3      	bne.n	800f846 <__ieee754_rem_pio2+0x3be>
 800f85e:	4b0f      	ldr	r3, [pc, #60]	; (800f89c <__ieee754_rem_pio2+0x414>)
 800f860:	9301      	str	r3, [sp, #4]
 800f862:	2302      	movs	r3, #2
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	4622      	mov	r2, r4
 800f868:	465b      	mov	r3, fp
 800f86a:	4651      	mov	r1, sl
 800f86c:	4648      	mov	r0, r9
 800f86e:	f000 f977 	bl	800fb60 <__kernel_rem_pio2>
 800f872:	9b02      	ldr	r3, [sp, #8]
 800f874:	2b00      	cmp	r3, #0
 800f876:	4683      	mov	fp, r0
 800f878:	f6bf ae46 	bge.w	800f508 <__ieee754_rem_pio2+0x80>
 800f87c:	e9da 2100 	ldrd	r2, r1, [sl]
 800f880:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f884:	e9ca 2300 	strd	r2, r3, [sl]
 800f888:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f88c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f890:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f894:	e73a      	b.n	800f70c <__ieee754_rem_pio2+0x284>
 800f896:	bf00      	nop
 800f898:	41700000 	.word	0x41700000
 800f89c:	08082d30 	.word	0x08082d30

0800f8a0 <__ieee754_hypotf>:
 800f8a0:	b513      	push	{r0, r1, r4, lr}
 800f8a2:	ed8d 0a00 	vstr	s0, [sp]
 800f8a6:	edcd 0a01 	vstr	s1, [sp, #4]
 800f8aa:	9b00      	ldr	r3, [sp, #0]
 800f8ac:	9a01      	ldr	r2, [sp, #4]
 800f8ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f8b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	bfbe      	ittt	lt
 800f8ba:	4619      	movlt	r1, r3
 800f8bc:	4613      	movlt	r3, r2
 800f8be:	460a      	movlt	r2, r1
 800f8c0:	1a99      	subs	r1, r3, r2
 800f8c2:	f1b1 6f70 	cmp.w	r1, #251658240	; 0xf000000
 800f8c6:	ee00 3a10 	vmov	s0, r3
 800f8ca:	ee06 2a90 	vmov	s13, r2
 800f8ce:	dd03      	ble.n	800f8d8 <__ieee754_hypotf+0x38>
 800f8d0:	ee30 0a26 	vadd.f32	s0, s0, s13
 800f8d4:	b002      	add	sp, #8
 800f8d6:	bd10      	pop	{r4, pc}
 800f8d8:	f1b3 4fb1 	cmp.w	r3, #1484783616	; 0x58800000
 800f8dc:	dd48      	ble.n	800f970 <__ieee754_hypotf+0xd0>
 800f8de:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f8e2:	db0c      	blt.n	800f8fe <__ieee754_hypotf+0x5e>
 800f8e4:	bf14      	ite	ne
 800f8e6:	ee30 0a26 	vaddne.f32	s0, s0, s13
 800f8ea:	ed9f 0a34 	vldreq	s0, [pc, #208]	; 800f9bc <__ieee754_hypotf+0x11c>
 800f8ee:	eddf 7a33 	vldr	s15, [pc, #204]	; 800f9bc <__ieee754_hypotf+0x11c>
 800f8f2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f8f6:	bf08      	it	eq
 800f8f8:	eeb0 0a67 	vmoveq.f32	s0, s15
 800f8fc:	e7ea      	b.n	800f8d4 <__ieee754_hypotf+0x34>
 800f8fe:	f103 435e 	add.w	r3, r3, #3724541952	; 0xde000000
 800f902:	f102 425e 	add.w	r2, r2, #3724541952	; 0xde000000
 800f906:	ee00 3a10 	vmov	s0, r3
 800f90a:	ee06 2a90 	vmov	s13, r2
 800f90e:	2444      	movs	r4, #68	; 0x44
 800f910:	f1b2 5f1a 	cmp.w	r2, #645922816	; 0x26800000
 800f914:	da0b      	bge.n	800f92e <__ieee754_hypotf+0x8e>
 800f916:	2a00      	cmp	r2, #0
 800f918:	d0dc      	beq.n	800f8d4 <__ieee754_hypotf+0x34>
 800f91a:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800f91e:	da29      	bge.n	800f974 <__ieee754_hypotf+0xd4>
 800f920:	eddf 7a27 	vldr	s15, [pc, #156]	; 800f9c0 <__ieee754_hypotf+0x120>
 800f924:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800f928:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f92c:	3c7e      	subs	r4, #126	; 0x7e
 800f92e:	ee30 6a66 	vsub.f32	s12, s0, s13
 800f932:	4924      	ldr	r1, [pc, #144]	; (800f9c4 <__ieee754_hypotf+0x124>)
 800f934:	eef4 6ac6 	vcmpe.f32	s13, s12
 800f938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f93c:	d524      	bpl.n	800f988 <__ieee754_hypotf+0xe8>
 800f93e:	400b      	ands	r3, r1
 800f940:	ee07 3a90 	vmov	s15, r3
 800f944:	ee30 7a27 	vadd.f32	s14, s0, s15
 800f948:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f94c:	ee20 0a47 	vnmul.f32	s0, s0, s14
 800f950:	eea6 0ae6 	vfms.f32	s0, s13, s13
 800f954:	ee97 0aa7 	vfnms.f32	s0, s15, s15
 800f958:	f000 f836 	bl	800f9c8 <__ieee754_sqrtf>
 800f95c:	2c00      	cmp	r4, #0
 800f95e:	d0b9      	beq.n	800f8d4 <__ieee754_hypotf+0x34>
 800f960:	05e4      	lsls	r4, r4, #23
 800f962:	f104 547e 	add.w	r4, r4, #1065353216	; 0x3f800000
 800f966:	ee07 4a90 	vmov	s15, r4
 800f96a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f96e:	e7b1      	b.n	800f8d4 <__ieee754_hypotf+0x34>
 800f970:	2400      	movs	r4, #0
 800f972:	e7cd      	b.n	800f910 <__ieee754_hypotf+0x70>
 800f974:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
 800f978:	f102 5208 	add.w	r2, r2, #570425344	; 0x22000000
 800f97c:	ee00 3a10 	vmov	s0, r3
 800f980:	ee06 2a90 	vmov	s13, r2
 800f984:	3c44      	subs	r4, #68	; 0x44
 800f986:	e7d2      	b.n	800f92e <__ieee754_hypotf+0x8e>
 800f988:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 800f98c:	400b      	ands	r3, r1
 800f98e:	ee05 3a10 	vmov	s10, r3
 800f992:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800f996:	ee90 5a24 	vfnms.f32	s10, s0, s9
 800f99a:	400a      	ands	r2, r1
 800f99c:	ee07 2a10 	vmov	s14, r2
 800f9a0:	ee07 3a90 	vmov	s15, r3
 800f9a4:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800f9a8:	ee26 0a85 	vmul.f32	s0, s13, s10
 800f9ac:	eea5 0aa7 	vfma.f32	s0, s11, s15
 800f9b0:	ee96 0a46 	vfnma.f32	s0, s12, s12
 800f9b4:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800f9b8:	e7ce      	b.n	800f958 <__ieee754_hypotf+0xb8>
 800f9ba:	bf00      	nop
 800f9bc:	7f800000 	.word	0x7f800000
 800f9c0:	7e800000 	.word	0x7e800000
 800f9c4:	fffff000 	.word	0xfffff000

0800f9c8 <__ieee754_sqrtf>:
 800f9c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f9cc:	4770      	bx	lr
	...

0800f9d0 <__kernel_cos>:
 800f9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d4:	ec57 6b10 	vmov	r6, r7, d0
 800f9d8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f9dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f9e0:	ed8d 1b00 	vstr	d1, [sp]
 800f9e4:	da07      	bge.n	800f9f6 <__kernel_cos+0x26>
 800f9e6:	ee10 0a10 	vmov	r0, s0
 800f9ea:	4639      	mov	r1, r7
 800f9ec:	f7f1 f86c 	bl	8000ac8 <__aeabi_d2iz>
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	f000 8088 	beq.w	800fb06 <__kernel_cos+0x136>
 800f9f6:	4632      	mov	r2, r6
 800f9f8:	463b      	mov	r3, r7
 800f9fa:	4630      	mov	r0, r6
 800f9fc:	4639      	mov	r1, r7
 800f9fe:	f7f0 fdb3 	bl	8000568 <__aeabi_dmul>
 800fa02:	4b51      	ldr	r3, [pc, #324]	; (800fb48 <__kernel_cos+0x178>)
 800fa04:	2200      	movs	r2, #0
 800fa06:	4604      	mov	r4, r0
 800fa08:	460d      	mov	r5, r1
 800fa0a:	f7f0 fdad 	bl	8000568 <__aeabi_dmul>
 800fa0e:	a340      	add	r3, pc, #256	; (adr r3, 800fb10 <__kernel_cos+0x140>)
 800fa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa14:	4682      	mov	sl, r0
 800fa16:	468b      	mov	fp, r1
 800fa18:	4620      	mov	r0, r4
 800fa1a:	4629      	mov	r1, r5
 800fa1c:	f7f0 fda4 	bl	8000568 <__aeabi_dmul>
 800fa20:	a33d      	add	r3, pc, #244	; (adr r3, 800fb18 <__kernel_cos+0x148>)
 800fa22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa26:	f7f0 fbe9 	bl	80001fc <__adddf3>
 800fa2a:	4622      	mov	r2, r4
 800fa2c:	462b      	mov	r3, r5
 800fa2e:	f7f0 fd9b 	bl	8000568 <__aeabi_dmul>
 800fa32:	a33b      	add	r3, pc, #236	; (adr r3, 800fb20 <__kernel_cos+0x150>)
 800fa34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa38:	f7f0 fbde 	bl	80001f8 <__aeabi_dsub>
 800fa3c:	4622      	mov	r2, r4
 800fa3e:	462b      	mov	r3, r5
 800fa40:	f7f0 fd92 	bl	8000568 <__aeabi_dmul>
 800fa44:	a338      	add	r3, pc, #224	; (adr r3, 800fb28 <__kernel_cos+0x158>)
 800fa46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa4a:	f7f0 fbd7 	bl	80001fc <__adddf3>
 800fa4e:	4622      	mov	r2, r4
 800fa50:	462b      	mov	r3, r5
 800fa52:	f7f0 fd89 	bl	8000568 <__aeabi_dmul>
 800fa56:	a336      	add	r3, pc, #216	; (adr r3, 800fb30 <__kernel_cos+0x160>)
 800fa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa5c:	f7f0 fbcc 	bl	80001f8 <__aeabi_dsub>
 800fa60:	4622      	mov	r2, r4
 800fa62:	462b      	mov	r3, r5
 800fa64:	f7f0 fd80 	bl	8000568 <__aeabi_dmul>
 800fa68:	a333      	add	r3, pc, #204	; (adr r3, 800fb38 <__kernel_cos+0x168>)
 800fa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6e:	f7f0 fbc5 	bl	80001fc <__adddf3>
 800fa72:	4622      	mov	r2, r4
 800fa74:	462b      	mov	r3, r5
 800fa76:	f7f0 fd77 	bl	8000568 <__aeabi_dmul>
 800fa7a:	4622      	mov	r2, r4
 800fa7c:	462b      	mov	r3, r5
 800fa7e:	f7f0 fd73 	bl	8000568 <__aeabi_dmul>
 800fa82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa86:	4604      	mov	r4, r0
 800fa88:	460d      	mov	r5, r1
 800fa8a:	4630      	mov	r0, r6
 800fa8c:	4639      	mov	r1, r7
 800fa8e:	f7f0 fd6b 	bl	8000568 <__aeabi_dmul>
 800fa92:	460b      	mov	r3, r1
 800fa94:	4602      	mov	r2, r0
 800fa96:	4629      	mov	r1, r5
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f7f0 fbad 	bl	80001f8 <__aeabi_dsub>
 800fa9e:	4b2b      	ldr	r3, [pc, #172]	; (800fb4c <__kernel_cos+0x17c>)
 800faa0:	4598      	cmp	r8, r3
 800faa2:	4606      	mov	r6, r0
 800faa4:	460f      	mov	r7, r1
 800faa6:	dc10      	bgt.n	800faca <__kernel_cos+0xfa>
 800faa8:	4602      	mov	r2, r0
 800faaa:	460b      	mov	r3, r1
 800faac:	4650      	mov	r0, sl
 800faae:	4659      	mov	r1, fp
 800fab0:	f7f0 fba2 	bl	80001f8 <__aeabi_dsub>
 800fab4:	460b      	mov	r3, r1
 800fab6:	4926      	ldr	r1, [pc, #152]	; (800fb50 <__kernel_cos+0x180>)
 800fab8:	4602      	mov	r2, r0
 800faba:	2000      	movs	r0, #0
 800fabc:	f7f0 fb9c 	bl	80001f8 <__aeabi_dsub>
 800fac0:	ec41 0b10 	vmov	d0, r0, r1
 800fac4:	b003      	add	sp, #12
 800fac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faca:	4b22      	ldr	r3, [pc, #136]	; (800fb54 <__kernel_cos+0x184>)
 800facc:	4920      	ldr	r1, [pc, #128]	; (800fb50 <__kernel_cos+0x180>)
 800face:	4598      	cmp	r8, r3
 800fad0:	bfcc      	ite	gt
 800fad2:	4d21      	ldrgt	r5, [pc, #132]	; (800fb58 <__kernel_cos+0x188>)
 800fad4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800fad8:	2400      	movs	r4, #0
 800fada:	4622      	mov	r2, r4
 800fadc:	462b      	mov	r3, r5
 800fade:	2000      	movs	r0, #0
 800fae0:	f7f0 fb8a 	bl	80001f8 <__aeabi_dsub>
 800fae4:	4622      	mov	r2, r4
 800fae6:	4680      	mov	r8, r0
 800fae8:	4689      	mov	r9, r1
 800faea:	462b      	mov	r3, r5
 800faec:	4650      	mov	r0, sl
 800faee:	4659      	mov	r1, fp
 800faf0:	f7f0 fb82 	bl	80001f8 <__aeabi_dsub>
 800faf4:	4632      	mov	r2, r6
 800faf6:	463b      	mov	r3, r7
 800faf8:	f7f0 fb7e 	bl	80001f8 <__aeabi_dsub>
 800fafc:	4602      	mov	r2, r0
 800fafe:	460b      	mov	r3, r1
 800fb00:	4640      	mov	r0, r8
 800fb02:	4649      	mov	r1, r9
 800fb04:	e7da      	b.n	800fabc <__kernel_cos+0xec>
 800fb06:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800fb40 <__kernel_cos+0x170>
 800fb0a:	e7db      	b.n	800fac4 <__kernel_cos+0xf4>
 800fb0c:	f3af 8000 	nop.w
 800fb10:	be8838d4 	.word	0xbe8838d4
 800fb14:	bda8fae9 	.word	0xbda8fae9
 800fb18:	bdb4b1c4 	.word	0xbdb4b1c4
 800fb1c:	3e21ee9e 	.word	0x3e21ee9e
 800fb20:	809c52ad 	.word	0x809c52ad
 800fb24:	3e927e4f 	.word	0x3e927e4f
 800fb28:	19cb1590 	.word	0x19cb1590
 800fb2c:	3efa01a0 	.word	0x3efa01a0
 800fb30:	16c15177 	.word	0x16c15177
 800fb34:	3f56c16c 	.word	0x3f56c16c
 800fb38:	5555554c 	.word	0x5555554c
 800fb3c:	3fa55555 	.word	0x3fa55555
 800fb40:	00000000 	.word	0x00000000
 800fb44:	3ff00000 	.word	0x3ff00000
 800fb48:	3fe00000 	.word	0x3fe00000
 800fb4c:	3fd33332 	.word	0x3fd33332
 800fb50:	3ff00000 	.word	0x3ff00000
 800fb54:	3fe90000 	.word	0x3fe90000
 800fb58:	3fd20000 	.word	0x3fd20000
 800fb5c:	00000000 	.word	0x00000000

0800fb60 <__kernel_rem_pio2>:
 800fb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb64:	ed2d 8b02 	vpush	{d8}
 800fb68:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800fb6c:	f112 0f14 	cmn.w	r2, #20
 800fb70:	9308      	str	r3, [sp, #32]
 800fb72:	9101      	str	r1, [sp, #4]
 800fb74:	4bc4      	ldr	r3, [pc, #784]	; (800fe88 <__kernel_rem_pio2+0x328>)
 800fb76:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800fb78:	900b      	str	r0, [sp, #44]	; 0x2c
 800fb7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fb7e:	9302      	str	r3, [sp, #8]
 800fb80:	9b08      	ldr	r3, [sp, #32]
 800fb82:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800fb86:	bfa8      	it	ge
 800fb88:	1ed4      	subge	r4, r2, #3
 800fb8a:	9306      	str	r3, [sp, #24]
 800fb8c:	bfb2      	itee	lt
 800fb8e:	2400      	movlt	r4, #0
 800fb90:	2318      	movge	r3, #24
 800fb92:	fb94 f4f3 	sdivge	r4, r4, r3
 800fb96:	f06f 0317 	mvn.w	r3, #23
 800fb9a:	fb04 3303 	mla	r3, r4, r3, r3
 800fb9e:	eb03 0a02 	add.w	sl, r3, r2
 800fba2:	9b02      	ldr	r3, [sp, #8]
 800fba4:	9a06      	ldr	r2, [sp, #24]
 800fba6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800fe78 <__kernel_rem_pio2+0x318>
 800fbaa:	eb03 0802 	add.w	r8, r3, r2
 800fbae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fbb0:	1aa7      	subs	r7, r4, r2
 800fbb2:	ae22      	add	r6, sp, #136	; 0x88
 800fbb4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fbb8:	2500      	movs	r5, #0
 800fbba:	4545      	cmp	r5, r8
 800fbbc:	dd13      	ble.n	800fbe6 <__kernel_rem_pio2+0x86>
 800fbbe:	9b08      	ldr	r3, [sp, #32]
 800fbc0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800fe78 <__kernel_rem_pio2+0x318>
 800fbc4:	aa22      	add	r2, sp, #136	; 0x88
 800fbc6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fbca:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800fbce:	f04f 0800 	mov.w	r8, #0
 800fbd2:	9b02      	ldr	r3, [sp, #8]
 800fbd4:	4598      	cmp	r8, r3
 800fbd6:	dc2f      	bgt.n	800fc38 <__kernel_rem_pio2+0xd8>
 800fbd8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fbdc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800fbe0:	462f      	mov	r7, r5
 800fbe2:	2600      	movs	r6, #0
 800fbe4:	e01b      	b.n	800fc1e <__kernel_rem_pio2+0xbe>
 800fbe6:	42ef      	cmn	r7, r5
 800fbe8:	d407      	bmi.n	800fbfa <__kernel_rem_pio2+0x9a>
 800fbea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fbee:	f7f0 fc51 	bl	8000494 <__aeabi_i2d>
 800fbf2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fbf6:	3501      	adds	r5, #1
 800fbf8:	e7df      	b.n	800fbba <__kernel_rem_pio2+0x5a>
 800fbfa:	ec51 0b18 	vmov	r0, r1, d8
 800fbfe:	e7f8      	b.n	800fbf2 <__kernel_rem_pio2+0x92>
 800fc00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fc08:	f7f0 fcae 	bl	8000568 <__aeabi_dmul>
 800fc0c:	4602      	mov	r2, r0
 800fc0e:	460b      	mov	r3, r1
 800fc10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fc14:	f7f0 faf2 	bl	80001fc <__adddf3>
 800fc18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fc1c:	3601      	adds	r6, #1
 800fc1e:	9b06      	ldr	r3, [sp, #24]
 800fc20:	429e      	cmp	r6, r3
 800fc22:	f1a7 0708 	sub.w	r7, r7, #8
 800fc26:	ddeb      	ble.n	800fc00 <__kernel_rem_pio2+0xa0>
 800fc28:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fc2c:	f108 0801 	add.w	r8, r8, #1
 800fc30:	ecab 7b02 	vstmia	fp!, {d7}
 800fc34:	3508      	adds	r5, #8
 800fc36:	e7cc      	b.n	800fbd2 <__kernel_rem_pio2+0x72>
 800fc38:	9b02      	ldr	r3, [sp, #8]
 800fc3a:	aa0e      	add	r2, sp, #56	; 0x38
 800fc3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc40:	930d      	str	r3, [sp, #52]	; 0x34
 800fc42:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fc44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fc48:	9c02      	ldr	r4, [sp, #8]
 800fc4a:	930c      	str	r3, [sp, #48]	; 0x30
 800fc4c:	00e3      	lsls	r3, r4, #3
 800fc4e:	930a      	str	r3, [sp, #40]	; 0x28
 800fc50:	ab9a      	add	r3, sp, #616	; 0x268
 800fc52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fc56:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fc5a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fc5e:	ab72      	add	r3, sp, #456	; 0x1c8
 800fc60:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800fc64:	46c3      	mov	fp, r8
 800fc66:	46a1      	mov	r9, r4
 800fc68:	f1b9 0f00 	cmp.w	r9, #0
 800fc6c:	f1a5 0508 	sub.w	r5, r5, #8
 800fc70:	dc77      	bgt.n	800fd62 <__kernel_rem_pio2+0x202>
 800fc72:	ec47 6b10 	vmov	d0, r6, r7
 800fc76:	4650      	mov	r0, sl
 800fc78:	f000 fc12 	bl	80104a0 <scalbn>
 800fc7c:	ec57 6b10 	vmov	r6, r7, d0
 800fc80:	2200      	movs	r2, #0
 800fc82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fc86:	ee10 0a10 	vmov	r0, s0
 800fc8a:	4639      	mov	r1, r7
 800fc8c:	f7f0 fc6c 	bl	8000568 <__aeabi_dmul>
 800fc90:	ec41 0b10 	vmov	d0, r0, r1
 800fc94:	f000 fb7c 	bl	8010390 <floor>
 800fc98:	4b7c      	ldr	r3, [pc, #496]	; (800fe8c <__kernel_rem_pio2+0x32c>)
 800fc9a:	ec51 0b10 	vmov	r0, r1, d0
 800fc9e:	2200      	movs	r2, #0
 800fca0:	f7f0 fc62 	bl	8000568 <__aeabi_dmul>
 800fca4:	4602      	mov	r2, r0
 800fca6:	460b      	mov	r3, r1
 800fca8:	4630      	mov	r0, r6
 800fcaa:	4639      	mov	r1, r7
 800fcac:	f7f0 faa4 	bl	80001f8 <__aeabi_dsub>
 800fcb0:	460f      	mov	r7, r1
 800fcb2:	4606      	mov	r6, r0
 800fcb4:	f7f0 ff08 	bl	8000ac8 <__aeabi_d2iz>
 800fcb8:	9004      	str	r0, [sp, #16]
 800fcba:	f7f0 fbeb 	bl	8000494 <__aeabi_i2d>
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	4630      	mov	r0, r6
 800fcc4:	4639      	mov	r1, r7
 800fcc6:	f7f0 fa97 	bl	80001f8 <__aeabi_dsub>
 800fcca:	f1ba 0f00 	cmp.w	sl, #0
 800fcce:	4606      	mov	r6, r0
 800fcd0:	460f      	mov	r7, r1
 800fcd2:	dd6d      	ble.n	800fdb0 <__kernel_rem_pio2+0x250>
 800fcd4:	1e62      	subs	r2, r4, #1
 800fcd6:	ab0e      	add	r3, sp, #56	; 0x38
 800fcd8:	9d04      	ldr	r5, [sp, #16]
 800fcda:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fcde:	f1ca 0118 	rsb	r1, sl, #24
 800fce2:	fa40 f301 	asr.w	r3, r0, r1
 800fce6:	441d      	add	r5, r3
 800fce8:	408b      	lsls	r3, r1
 800fcea:	1ac0      	subs	r0, r0, r3
 800fcec:	ab0e      	add	r3, sp, #56	; 0x38
 800fcee:	9504      	str	r5, [sp, #16]
 800fcf0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800fcf4:	f1ca 0317 	rsb	r3, sl, #23
 800fcf8:	fa40 fb03 	asr.w	fp, r0, r3
 800fcfc:	f1bb 0f00 	cmp.w	fp, #0
 800fd00:	dd65      	ble.n	800fdce <__kernel_rem_pio2+0x26e>
 800fd02:	9b04      	ldr	r3, [sp, #16]
 800fd04:	2200      	movs	r2, #0
 800fd06:	3301      	adds	r3, #1
 800fd08:	9304      	str	r3, [sp, #16]
 800fd0a:	4615      	mov	r5, r2
 800fd0c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800fd10:	4294      	cmp	r4, r2
 800fd12:	f300 809c 	bgt.w	800fe4e <__kernel_rem_pio2+0x2ee>
 800fd16:	f1ba 0f00 	cmp.w	sl, #0
 800fd1a:	dd07      	ble.n	800fd2c <__kernel_rem_pio2+0x1cc>
 800fd1c:	f1ba 0f01 	cmp.w	sl, #1
 800fd20:	f000 80c0 	beq.w	800fea4 <__kernel_rem_pio2+0x344>
 800fd24:	f1ba 0f02 	cmp.w	sl, #2
 800fd28:	f000 80c6 	beq.w	800feb8 <__kernel_rem_pio2+0x358>
 800fd2c:	f1bb 0f02 	cmp.w	fp, #2
 800fd30:	d14d      	bne.n	800fdce <__kernel_rem_pio2+0x26e>
 800fd32:	4632      	mov	r2, r6
 800fd34:	463b      	mov	r3, r7
 800fd36:	4956      	ldr	r1, [pc, #344]	; (800fe90 <__kernel_rem_pio2+0x330>)
 800fd38:	2000      	movs	r0, #0
 800fd3a:	f7f0 fa5d 	bl	80001f8 <__aeabi_dsub>
 800fd3e:	4606      	mov	r6, r0
 800fd40:	460f      	mov	r7, r1
 800fd42:	2d00      	cmp	r5, #0
 800fd44:	d043      	beq.n	800fdce <__kernel_rem_pio2+0x26e>
 800fd46:	4650      	mov	r0, sl
 800fd48:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800fe80 <__kernel_rem_pio2+0x320>
 800fd4c:	f000 fba8 	bl	80104a0 <scalbn>
 800fd50:	4630      	mov	r0, r6
 800fd52:	4639      	mov	r1, r7
 800fd54:	ec53 2b10 	vmov	r2, r3, d0
 800fd58:	f7f0 fa4e 	bl	80001f8 <__aeabi_dsub>
 800fd5c:	4606      	mov	r6, r0
 800fd5e:	460f      	mov	r7, r1
 800fd60:	e035      	b.n	800fdce <__kernel_rem_pio2+0x26e>
 800fd62:	4b4c      	ldr	r3, [pc, #304]	; (800fe94 <__kernel_rem_pio2+0x334>)
 800fd64:	2200      	movs	r2, #0
 800fd66:	4630      	mov	r0, r6
 800fd68:	4639      	mov	r1, r7
 800fd6a:	f7f0 fbfd 	bl	8000568 <__aeabi_dmul>
 800fd6e:	f7f0 feab 	bl	8000ac8 <__aeabi_d2iz>
 800fd72:	f7f0 fb8f 	bl	8000494 <__aeabi_i2d>
 800fd76:	4602      	mov	r2, r0
 800fd78:	460b      	mov	r3, r1
 800fd7a:	ec43 2b18 	vmov	d8, r2, r3
 800fd7e:	4b46      	ldr	r3, [pc, #280]	; (800fe98 <__kernel_rem_pio2+0x338>)
 800fd80:	2200      	movs	r2, #0
 800fd82:	f7f0 fbf1 	bl	8000568 <__aeabi_dmul>
 800fd86:	4602      	mov	r2, r0
 800fd88:	460b      	mov	r3, r1
 800fd8a:	4630      	mov	r0, r6
 800fd8c:	4639      	mov	r1, r7
 800fd8e:	f7f0 fa33 	bl	80001f8 <__aeabi_dsub>
 800fd92:	f7f0 fe99 	bl	8000ac8 <__aeabi_d2iz>
 800fd96:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd9a:	f84b 0b04 	str.w	r0, [fp], #4
 800fd9e:	ec51 0b18 	vmov	r0, r1, d8
 800fda2:	f7f0 fa2b 	bl	80001fc <__adddf3>
 800fda6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800fdaa:	4606      	mov	r6, r0
 800fdac:	460f      	mov	r7, r1
 800fdae:	e75b      	b.n	800fc68 <__kernel_rem_pio2+0x108>
 800fdb0:	d106      	bne.n	800fdc0 <__kernel_rem_pio2+0x260>
 800fdb2:	1e63      	subs	r3, r4, #1
 800fdb4:	aa0e      	add	r2, sp, #56	; 0x38
 800fdb6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fdba:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800fdbe:	e79d      	b.n	800fcfc <__kernel_rem_pio2+0x19c>
 800fdc0:	4b36      	ldr	r3, [pc, #216]	; (800fe9c <__kernel_rem_pio2+0x33c>)
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f7f0 fe56 	bl	8000a74 <__aeabi_dcmpge>
 800fdc8:	2800      	cmp	r0, #0
 800fdca:	d13d      	bne.n	800fe48 <__kernel_rem_pio2+0x2e8>
 800fdcc:	4683      	mov	fp, r0
 800fdce:	2200      	movs	r2, #0
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	4630      	mov	r0, r6
 800fdd4:	4639      	mov	r1, r7
 800fdd6:	f7f0 fe2f 	bl	8000a38 <__aeabi_dcmpeq>
 800fdda:	2800      	cmp	r0, #0
 800fddc:	f000 80c0 	beq.w	800ff60 <__kernel_rem_pio2+0x400>
 800fde0:	1e65      	subs	r5, r4, #1
 800fde2:	462b      	mov	r3, r5
 800fde4:	2200      	movs	r2, #0
 800fde6:	9902      	ldr	r1, [sp, #8]
 800fde8:	428b      	cmp	r3, r1
 800fdea:	da6c      	bge.n	800fec6 <__kernel_rem_pio2+0x366>
 800fdec:	2a00      	cmp	r2, #0
 800fdee:	f000 8089 	beq.w	800ff04 <__kernel_rem_pio2+0x3a4>
 800fdf2:	ab0e      	add	r3, sp, #56	; 0x38
 800fdf4:	f1aa 0a18 	sub.w	sl, sl, #24
 800fdf8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f000 80ad 	beq.w	800ff5c <__kernel_rem_pio2+0x3fc>
 800fe02:	4650      	mov	r0, sl
 800fe04:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800fe80 <__kernel_rem_pio2+0x320>
 800fe08:	f000 fb4a 	bl	80104a0 <scalbn>
 800fe0c:	ab9a      	add	r3, sp, #616	; 0x268
 800fe0e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fe12:	ec57 6b10 	vmov	r6, r7, d0
 800fe16:	00ec      	lsls	r4, r5, #3
 800fe18:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800fe1c:	46aa      	mov	sl, r5
 800fe1e:	f1ba 0f00 	cmp.w	sl, #0
 800fe22:	f280 80d6 	bge.w	800ffd2 <__kernel_rem_pio2+0x472>
 800fe26:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800fe78 <__kernel_rem_pio2+0x318>
 800fe2a:	462e      	mov	r6, r5
 800fe2c:	2e00      	cmp	r6, #0
 800fe2e:	f2c0 8104 	blt.w	801003a <__kernel_rem_pio2+0x4da>
 800fe32:	ab72      	add	r3, sp, #456	; 0x1c8
 800fe34:	ed8d 8b06 	vstr	d8, [sp, #24]
 800fe38:	f8df a064 	ldr.w	sl, [pc, #100]	; 800fea0 <__kernel_rem_pio2+0x340>
 800fe3c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800fe40:	f04f 0800 	mov.w	r8, #0
 800fe44:	1baf      	subs	r7, r5, r6
 800fe46:	e0ea      	b.n	801001e <__kernel_rem_pio2+0x4be>
 800fe48:	f04f 0b02 	mov.w	fp, #2
 800fe4c:	e759      	b.n	800fd02 <__kernel_rem_pio2+0x1a2>
 800fe4e:	f8d8 3000 	ldr.w	r3, [r8]
 800fe52:	b955      	cbnz	r5, 800fe6a <__kernel_rem_pio2+0x30a>
 800fe54:	b123      	cbz	r3, 800fe60 <__kernel_rem_pio2+0x300>
 800fe56:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fe5a:	f8c8 3000 	str.w	r3, [r8]
 800fe5e:	2301      	movs	r3, #1
 800fe60:	3201      	adds	r2, #1
 800fe62:	f108 0804 	add.w	r8, r8, #4
 800fe66:	461d      	mov	r5, r3
 800fe68:	e752      	b.n	800fd10 <__kernel_rem_pio2+0x1b0>
 800fe6a:	1acb      	subs	r3, r1, r3
 800fe6c:	f8c8 3000 	str.w	r3, [r8]
 800fe70:	462b      	mov	r3, r5
 800fe72:	e7f5      	b.n	800fe60 <__kernel_rem_pio2+0x300>
 800fe74:	f3af 8000 	nop.w
	...
 800fe84:	3ff00000 	.word	0x3ff00000
 800fe88:	08082e78 	.word	0x08082e78
 800fe8c:	40200000 	.word	0x40200000
 800fe90:	3ff00000 	.word	0x3ff00000
 800fe94:	3e700000 	.word	0x3e700000
 800fe98:	41700000 	.word	0x41700000
 800fe9c:	3fe00000 	.word	0x3fe00000
 800fea0:	08082e38 	.word	0x08082e38
 800fea4:	1e62      	subs	r2, r4, #1
 800fea6:	ab0e      	add	r3, sp, #56	; 0x38
 800fea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feac:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800feb0:	a90e      	add	r1, sp, #56	; 0x38
 800feb2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800feb6:	e739      	b.n	800fd2c <__kernel_rem_pio2+0x1cc>
 800feb8:	1e62      	subs	r2, r4, #1
 800feba:	ab0e      	add	r3, sp, #56	; 0x38
 800febc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fec0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fec4:	e7f4      	b.n	800feb0 <__kernel_rem_pio2+0x350>
 800fec6:	a90e      	add	r1, sp, #56	; 0x38
 800fec8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fecc:	3b01      	subs	r3, #1
 800fece:	430a      	orrs	r2, r1
 800fed0:	e789      	b.n	800fde6 <__kernel_rem_pio2+0x286>
 800fed2:	3301      	adds	r3, #1
 800fed4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fed8:	2900      	cmp	r1, #0
 800feda:	d0fa      	beq.n	800fed2 <__kernel_rem_pio2+0x372>
 800fedc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fede:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800fee2:	446a      	add	r2, sp
 800fee4:	3a98      	subs	r2, #152	; 0x98
 800fee6:	920a      	str	r2, [sp, #40]	; 0x28
 800fee8:	9a08      	ldr	r2, [sp, #32]
 800feea:	18e3      	adds	r3, r4, r3
 800feec:	18a5      	adds	r5, r4, r2
 800feee:	aa22      	add	r2, sp, #136	; 0x88
 800fef0:	f104 0801 	add.w	r8, r4, #1
 800fef4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800fef8:	9304      	str	r3, [sp, #16]
 800fefa:	9b04      	ldr	r3, [sp, #16]
 800fefc:	4543      	cmp	r3, r8
 800fefe:	da04      	bge.n	800ff0a <__kernel_rem_pio2+0x3aa>
 800ff00:	461c      	mov	r4, r3
 800ff02:	e6a3      	b.n	800fc4c <__kernel_rem_pio2+0xec>
 800ff04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ff06:	2301      	movs	r3, #1
 800ff08:	e7e4      	b.n	800fed4 <__kernel_rem_pio2+0x374>
 800ff0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff0c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ff10:	f7f0 fac0 	bl	8000494 <__aeabi_i2d>
 800ff14:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ff18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ff1a:	46ab      	mov	fp, r5
 800ff1c:	461c      	mov	r4, r3
 800ff1e:	f04f 0900 	mov.w	r9, #0
 800ff22:	2600      	movs	r6, #0
 800ff24:	2700      	movs	r7, #0
 800ff26:	9b06      	ldr	r3, [sp, #24]
 800ff28:	4599      	cmp	r9, r3
 800ff2a:	dd06      	ble.n	800ff3a <__kernel_rem_pio2+0x3da>
 800ff2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff2e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ff32:	f108 0801 	add.w	r8, r8, #1
 800ff36:	930a      	str	r3, [sp, #40]	; 0x28
 800ff38:	e7df      	b.n	800fefa <__kernel_rem_pio2+0x39a>
 800ff3a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ff3e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ff42:	f7f0 fb11 	bl	8000568 <__aeabi_dmul>
 800ff46:	4602      	mov	r2, r0
 800ff48:	460b      	mov	r3, r1
 800ff4a:	4630      	mov	r0, r6
 800ff4c:	4639      	mov	r1, r7
 800ff4e:	f7f0 f955 	bl	80001fc <__adddf3>
 800ff52:	f109 0901 	add.w	r9, r9, #1
 800ff56:	4606      	mov	r6, r0
 800ff58:	460f      	mov	r7, r1
 800ff5a:	e7e4      	b.n	800ff26 <__kernel_rem_pio2+0x3c6>
 800ff5c:	3d01      	subs	r5, #1
 800ff5e:	e748      	b.n	800fdf2 <__kernel_rem_pio2+0x292>
 800ff60:	ec47 6b10 	vmov	d0, r6, r7
 800ff64:	f1ca 0000 	rsb	r0, sl, #0
 800ff68:	f000 fa9a 	bl	80104a0 <scalbn>
 800ff6c:	ec57 6b10 	vmov	r6, r7, d0
 800ff70:	4ba0      	ldr	r3, [pc, #640]	; (80101f4 <__kernel_rem_pio2+0x694>)
 800ff72:	ee10 0a10 	vmov	r0, s0
 800ff76:	2200      	movs	r2, #0
 800ff78:	4639      	mov	r1, r7
 800ff7a:	f7f0 fd7b 	bl	8000a74 <__aeabi_dcmpge>
 800ff7e:	b1f8      	cbz	r0, 800ffc0 <__kernel_rem_pio2+0x460>
 800ff80:	4b9d      	ldr	r3, [pc, #628]	; (80101f8 <__kernel_rem_pio2+0x698>)
 800ff82:	2200      	movs	r2, #0
 800ff84:	4630      	mov	r0, r6
 800ff86:	4639      	mov	r1, r7
 800ff88:	f7f0 faee 	bl	8000568 <__aeabi_dmul>
 800ff8c:	f7f0 fd9c 	bl	8000ac8 <__aeabi_d2iz>
 800ff90:	4680      	mov	r8, r0
 800ff92:	f7f0 fa7f 	bl	8000494 <__aeabi_i2d>
 800ff96:	4b97      	ldr	r3, [pc, #604]	; (80101f4 <__kernel_rem_pio2+0x694>)
 800ff98:	2200      	movs	r2, #0
 800ff9a:	f7f0 fae5 	bl	8000568 <__aeabi_dmul>
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	4602      	mov	r2, r0
 800ffa2:	4639      	mov	r1, r7
 800ffa4:	4630      	mov	r0, r6
 800ffa6:	f7f0 f927 	bl	80001f8 <__aeabi_dsub>
 800ffaa:	f7f0 fd8d 	bl	8000ac8 <__aeabi_d2iz>
 800ffae:	1c65      	adds	r5, r4, #1
 800ffb0:	ab0e      	add	r3, sp, #56	; 0x38
 800ffb2:	f10a 0a18 	add.w	sl, sl, #24
 800ffb6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ffba:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ffbe:	e720      	b.n	800fe02 <__kernel_rem_pio2+0x2a2>
 800ffc0:	4630      	mov	r0, r6
 800ffc2:	4639      	mov	r1, r7
 800ffc4:	f7f0 fd80 	bl	8000ac8 <__aeabi_d2iz>
 800ffc8:	ab0e      	add	r3, sp, #56	; 0x38
 800ffca:	4625      	mov	r5, r4
 800ffcc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ffd0:	e717      	b.n	800fe02 <__kernel_rem_pio2+0x2a2>
 800ffd2:	ab0e      	add	r3, sp, #56	; 0x38
 800ffd4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ffd8:	f7f0 fa5c 	bl	8000494 <__aeabi_i2d>
 800ffdc:	4632      	mov	r2, r6
 800ffde:	463b      	mov	r3, r7
 800ffe0:	f7f0 fac2 	bl	8000568 <__aeabi_dmul>
 800ffe4:	4b84      	ldr	r3, [pc, #528]	; (80101f8 <__kernel_rem_pio2+0x698>)
 800ffe6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ffea:	2200      	movs	r2, #0
 800ffec:	4630      	mov	r0, r6
 800ffee:	4639      	mov	r1, r7
 800fff0:	f7f0 faba 	bl	8000568 <__aeabi_dmul>
 800fff4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fff8:	4606      	mov	r6, r0
 800fffa:	460f      	mov	r7, r1
 800fffc:	e70f      	b.n	800fe1e <__kernel_rem_pio2+0x2be>
 800fffe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8010002:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8010006:	f7f0 faaf 	bl	8000568 <__aeabi_dmul>
 801000a:	4602      	mov	r2, r0
 801000c:	460b      	mov	r3, r1
 801000e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010012:	f7f0 f8f3 	bl	80001fc <__adddf3>
 8010016:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801001a:	f108 0801 	add.w	r8, r8, #1
 801001e:	9b02      	ldr	r3, [sp, #8]
 8010020:	4598      	cmp	r8, r3
 8010022:	dc01      	bgt.n	8010028 <__kernel_rem_pio2+0x4c8>
 8010024:	45b8      	cmp	r8, r7
 8010026:	ddea      	ble.n	800fffe <__kernel_rem_pio2+0x49e>
 8010028:	ed9d 7b06 	vldr	d7, [sp, #24]
 801002c:	ab4a      	add	r3, sp, #296	; 0x128
 801002e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8010032:	ed87 7b00 	vstr	d7, [r7]
 8010036:	3e01      	subs	r6, #1
 8010038:	e6f8      	b.n	800fe2c <__kernel_rem_pio2+0x2cc>
 801003a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801003c:	2b02      	cmp	r3, #2
 801003e:	dc0b      	bgt.n	8010058 <__kernel_rem_pio2+0x4f8>
 8010040:	2b00      	cmp	r3, #0
 8010042:	dc35      	bgt.n	80100b0 <__kernel_rem_pio2+0x550>
 8010044:	d059      	beq.n	80100fa <__kernel_rem_pio2+0x59a>
 8010046:	9b04      	ldr	r3, [sp, #16]
 8010048:	f003 0007 	and.w	r0, r3, #7
 801004c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8010050:	ecbd 8b02 	vpop	{d8}
 8010054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010058:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801005a:	2b03      	cmp	r3, #3
 801005c:	d1f3      	bne.n	8010046 <__kernel_rem_pio2+0x4e6>
 801005e:	ab4a      	add	r3, sp, #296	; 0x128
 8010060:	4423      	add	r3, r4
 8010062:	9306      	str	r3, [sp, #24]
 8010064:	461c      	mov	r4, r3
 8010066:	469a      	mov	sl, r3
 8010068:	9502      	str	r5, [sp, #8]
 801006a:	9b02      	ldr	r3, [sp, #8]
 801006c:	2b00      	cmp	r3, #0
 801006e:	f1aa 0a08 	sub.w	sl, sl, #8
 8010072:	dc6b      	bgt.n	801014c <__kernel_rem_pio2+0x5ec>
 8010074:	46aa      	mov	sl, r5
 8010076:	f1ba 0f01 	cmp.w	sl, #1
 801007a:	f1a4 0408 	sub.w	r4, r4, #8
 801007e:	f300 8085 	bgt.w	801018c <__kernel_rem_pio2+0x62c>
 8010082:	9c06      	ldr	r4, [sp, #24]
 8010084:	2000      	movs	r0, #0
 8010086:	3408      	adds	r4, #8
 8010088:	2100      	movs	r1, #0
 801008a:	2d01      	cmp	r5, #1
 801008c:	f300 809d 	bgt.w	80101ca <__kernel_rem_pio2+0x66a>
 8010090:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010094:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8010098:	f1bb 0f00 	cmp.w	fp, #0
 801009c:	f040 809b 	bne.w	80101d6 <__kernel_rem_pio2+0x676>
 80100a0:	9b01      	ldr	r3, [sp, #4]
 80100a2:	e9c3 5600 	strd	r5, r6, [r3]
 80100a6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80100aa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80100ae:	e7ca      	b.n	8010046 <__kernel_rem_pio2+0x4e6>
 80100b0:	3408      	adds	r4, #8
 80100b2:	ab4a      	add	r3, sp, #296	; 0x128
 80100b4:	441c      	add	r4, r3
 80100b6:	462e      	mov	r6, r5
 80100b8:	2000      	movs	r0, #0
 80100ba:	2100      	movs	r1, #0
 80100bc:	2e00      	cmp	r6, #0
 80100be:	da36      	bge.n	801012e <__kernel_rem_pio2+0x5ce>
 80100c0:	f1bb 0f00 	cmp.w	fp, #0
 80100c4:	d039      	beq.n	801013a <__kernel_rem_pio2+0x5da>
 80100c6:	4602      	mov	r2, r0
 80100c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100cc:	9c01      	ldr	r4, [sp, #4]
 80100ce:	e9c4 2300 	strd	r2, r3, [r4]
 80100d2:	4602      	mov	r2, r0
 80100d4:	460b      	mov	r3, r1
 80100d6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80100da:	f7f0 f88d 	bl	80001f8 <__aeabi_dsub>
 80100de:	ae4c      	add	r6, sp, #304	; 0x130
 80100e0:	2401      	movs	r4, #1
 80100e2:	42a5      	cmp	r5, r4
 80100e4:	da2c      	bge.n	8010140 <__kernel_rem_pio2+0x5e0>
 80100e6:	f1bb 0f00 	cmp.w	fp, #0
 80100ea:	d002      	beq.n	80100f2 <__kernel_rem_pio2+0x592>
 80100ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100f0:	4619      	mov	r1, r3
 80100f2:	9b01      	ldr	r3, [sp, #4]
 80100f4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80100f8:	e7a5      	b.n	8010046 <__kernel_rem_pio2+0x4e6>
 80100fa:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80100fe:	eb0d 0403 	add.w	r4, sp, r3
 8010102:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010106:	2000      	movs	r0, #0
 8010108:	2100      	movs	r1, #0
 801010a:	2d00      	cmp	r5, #0
 801010c:	da09      	bge.n	8010122 <__kernel_rem_pio2+0x5c2>
 801010e:	f1bb 0f00 	cmp.w	fp, #0
 8010112:	d002      	beq.n	801011a <__kernel_rem_pio2+0x5ba>
 8010114:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010118:	4619      	mov	r1, r3
 801011a:	9b01      	ldr	r3, [sp, #4]
 801011c:	e9c3 0100 	strd	r0, r1, [r3]
 8010120:	e791      	b.n	8010046 <__kernel_rem_pio2+0x4e6>
 8010122:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010126:	f7f0 f869 	bl	80001fc <__adddf3>
 801012a:	3d01      	subs	r5, #1
 801012c:	e7ed      	b.n	801010a <__kernel_rem_pio2+0x5aa>
 801012e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010132:	f7f0 f863 	bl	80001fc <__adddf3>
 8010136:	3e01      	subs	r6, #1
 8010138:	e7c0      	b.n	80100bc <__kernel_rem_pio2+0x55c>
 801013a:	4602      	mov	r2, r0
 801013c:	460b      	mov	r3, r1
 801013e:	e7c5      	b.n	80100cc <__kernel_rem_pio2+0x56c>
 8010140:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8010144:	f7f0 f85a 	bl	80001fc <__adddf3>
 8010148:	3401      	adds	r4, #1
 801014a:	e7ca      	b.n	80100e2 <__kernel_rem_pio2+0x582>
 801014c:	e9da 8900 	ldrd	r8, r9, [sl]
 8010150:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010154:	9b02      	ldr	r3, [sp, #8]
 8010156:	3b01      	subs	r3, #1
 8010158:	9302      	str	r3, [sp, #8]
 801015a:	4632      	mov	r2, r6
 801015c:	463b      	mov	r3, r7
 801015e:	4640      	mov	r0, r8
 8010160:	4649      	mov	r1, r9
 8010162:	f7f0 f84b 	bl	80001fc <__adddf3>
 8010166:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801016a:	4602      	mov	r2, r0
 801016c:	460b      	mov	r3, r1
 801016e:	4640      	mov	r0, r8
 8010170:	4649      	mov	r1, r9
 8010172:	f7f0 f841 	bl	80001f8 <__aeabi_dsub>
 8010176:	4632      	mov	r2, r6
 8010178:	463b      	mov	r3, r7
 801017a:	f7f0 f83f 	bl	80001fc <__adddf3>
 801017e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8010182:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010186:	ed8a 7b00 	vstr	d7, [sl]
 801018a:	e76e      	b.n	801006a <__kernel_rem_pio2+0x50a>
 801018c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010190:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010194:	4640      	mov	r0, r8
 8010196:	4632      	mov	r2, r6
 8010198:	463b      	mov	r3, r7
 801019a:	4649      	mov	r1, r9
 801019c:	f7f0 f82e 	bl	80001fc <__adddf3>
 80101a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80101a4:	4602      	mov	r2, r0
 80101a6:	460b      	mov	r3, r1
 80101a8:	4640      	mov	r0, r8
 80101aa:	4649      	mov	r1, r9
 80101ac:	f7f0 f824 	bl	80001f8 <__aeabi_dsub>
 80101b0:	4632      	mov	r2, r6
 80101b2:	463b      	mov	r3, r7
 80101b4:	f7f0 f822 	bl	80001fc <__adddf3>
 80101b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80101bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80101c0:	ed84 7b00 	vstr	d7, [r4]
 80101c4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80101c8:	e755      	b.n	8010076 <__kernel_rem_pio2+0x516>
 80101ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80101ce:	f7f0 f815 	bl	80001fc <__adddf3>
 80101d2:	3d01      	subs	r5, #1
 80101d4:	e759      	b.n	801008a <__kernel_rem_pio2+0x52a>
 80101d6:	9b01      	ldr	r3, [sp, #4]
 80101d8:	9a01      	ldr	r2, [sp, #4]
 80101da:	601d      	str	r5, [r3, #0]
 80101dc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80101e0:	605c      	str	r4, [r3, #4]
 80101e2:	609f      	str	r7, [r3, #8]
 80101e4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80101e8:	60d3      	str	r3, [r2, #12]
 80101ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101ee:	6110      	str	r0, [r2, #16]
 80101f0:	6153      	str	r3, [r2, #20]
 80101f2:	e728      	b.n	8010046 <__kernel_rem_pio2+0x4e6>
 80101f4:	41700000 	.word	0x41700000
 80101f8:	3e700000 	.word	0x3e700000
 80101fc:	00000000 	.word	0x00000000

08010200 <__kernel_sin>:
 8010200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010204:	ed2d 8b04 	vpush	{d8-d9}
 8010208:	eeb0 8a41 	vmov.f32	s16, s2
 801020c:	eef0 8a61 	vmov.f32	s17, s3
 8010210:	ec55 4b10 	vmov	r4, r5, d0
 8010214:	b083      	sub	sp, #12
 8010216:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801021a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801021e:	9001      	str	r0, [sp, #4]
 8010220:	da06      	bge.n	8010230 <__kernel_sin+0x30>
 8010222:	ee10 0a10 	vmov	r0, s0
 8010226:	4629      	mov	r1, r5
 8010228:	f7f0 fc4e 	bl	8000ac8 <__aeabi_d2iz>
 801022c:	2800      	cmp	r0, #0
 801022e:	d051      	beq.n	80102d4 <__kernel_sin+0xd4>
 8010230:	4622      	mov	r2, r4
 8010232:	462b      	mov	r3, r5
 8010234:	4620      	mov	r0, r4
 8010236:	4629      	mov	r1, r5
 8010238:	f7f0 f996 	bl	8000568 <__aeabi_dmul>
 801023c:	4682      	mov	sl, r0
 801023e:	468b      	mov	fp, r1
 8010240:	4602      	mov	r2, r0
 8010242:	460b      	mov	r3, r1
 8010244:	4620      	mov	r0, r4
 8010246:	4629      	mov	r1, r5
 8010248:	f7f0 f98e 	bl	8000568 <__aeabi_dmul>
 801024c:	a341      	add	r3, pc, #260	; (adr r3, 8010354 <__kernel_sin+0x154>)
 801024e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010252:	4680      	mov	r8, r0
 8010254:	4689      	mov	r9, r1
 8010256:	4650      	mov	r0, sl
 8010258:	4659      	mov	r1, fp
 801025a:	f7f0 f985 	bl	8000568 <__aeabi_dmul>
 801025e:	a33f      	add	r3, pc, #252	; (adr r3, 801035c <__kernel_sin+0x15c>)
 8010260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010264:	f7ef ffc8 	bl	80001f8 <__aeabi_dsub>
 8010268:	4652      	mov	r2, sl
 801026a:	465b      	mov	r3, fp
 801026c:	f7f0 f97c 	bl	8000568 <__aeabi_dmul>
 8010270:	a33c      	add	r3, pc, #240	; (adr r3, 8010364 <__kernel_sin+0x164>)
 8010272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010276:	f7ef ffc1 	bl	80001fc <__adddf3>
 801027a:	4652      	mov	r2, sl
 801027c:	465b      	mov	r3, fp
 801027e:	f7f0 f973 	bl	8000568 <__aeabi_dmul>
 8010282:	a33a      	add	r3, pc, #232	; (adr r3, 801036c <__kernel_sin+0x16c>)
 8010284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010288:	f7ef ffb6 	bl	80001f8 <__aeabi_dsub>
 801028c:	4652      	mov	r2, sl
 801028e:	465b      	mov	r3, fp
 8010290:	f7f0 f96a 	bl	8000568 <__aeabi_dmul>
 8010294:	a337      	add	r3, pc, #220	; (adr r3, 8010374 <__kernel_sin+0x174>)
 8010296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801029a:	f7ef ffaf 	bl	80001fc <__adddf3>
 801029e:	9b01      	ldr	r3, [sp, #4]
 80102a0:	4606      	mov	r6, r0
 80102a2:	460f      	mov	r7, r1
 80102a4:	b9eb      	cbnz	r3, 80102e2 <__kernel_sin+0xe2>
 80102a6:	4602      	mov	r2, r0
 80102a8:	460b      	mov	r3, r1
 80102aa:	4650      	mov	r0, sl
 80102ac:	4659      	mov	r1, fp
 80102ae:	f7f0 f95b 	bl	8000568 <__aeabi_dmul>
 80102b2:	a325      	add	r3, pc, #148	; (adr r3, 8010348 <__kernel_sin+0x148>)
 80102b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b8:	f7ef ff9e 	bl	80001f8 <__aeabi_dsub>
 80102bc:	4642      	mov	r2, r8
 80102be:	464b      	mov	r3, r9
 80102c0:	f7f0 f952 	bl	8000568 <__aeabi_dmul>
 80102c4:	4602      	mov	r2, r0
 80102c6:	460b      	mov	r3, r1
 80102c8:	4620      	mov	r0, r4
 80102ca:	4629      	mov	r1, r5
 80102cc:	f7ef ff96 	bl	80001fc <__adddf3>
 80102d0:	4604      	mov	r4, r0
 80102d2:	460d      	mov	r5, r1
 80102d4:	ec45 4b10 	vmov	d0, r4, r5
 80102d8:	b003      	add	sp, #12
 80102da:	ecbd 8b04 	vpop	{d8-d9}
 80102de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102e2:	4b1b      	ldr	r3, [pc, #108]	; (8010350 <__kernel_sin+0x150>)
 80102e4:	ec51 0b18 	vmov	r0, r1, d8
 80102e8:	2200      	movs	r2, #0
 80102ea:	f7f0 f93d 	bl	8000568 <__aeabi_dmul>
 80102ee:	4632      	mov	r2, r6
 80102f0:	ec41 0b19 	vmov	d9, r0, r1
 80102f4:	463b      	mov	r3, r7
 80102f6:	4640      	mov	r0, r8
 80102f8:	4649      	mov	r1, r9
 80102fa:	f7f0 f935 	bl	8000568 <__aeabi_dmul>
 80102fe:	4602      	mov	r2, r0
 8010300:	460b      	mov	r3, r1
 8010302:	ec51 0b19 	vmov	r0, r1, d9
 8010306:	f7ef ff77 	bl	80001f8 <__aeabi_dsub>
 801030a:	4652      	mov	r2, sl
 801030c:	465b      	mov	r3, fp
 801030e:	f7f0 f92b 	bl	8000568 <__aeabi_dmul>
 8010312:	ec53 2b18 	vmov	r2, r3, d8
 8010316:	f7ef ff6f 	bl	80001f8 <__aeabi_dsub>
 801031a:	a30b      	add	r3, pc, #44	; (adr r3, 8010348 <__kernel_sin+0x148>)
 801031c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010320:	4606      	mov	r6, r0
 8010322:	460f      	mov	r7, r1
 8010324:	4640      	mov	r0, r8
 8010326:	4649      	mov	r1, r9
 8010328:	f7f0 f91e 	bl	8000568 <__aeabi_dmul>
 801032c:	4602      	mov	r2, r0
 801032e:	460b      	mov	r3, r1
 8010330:	4630      	mov	r0, r6
 8010332:	4639      	mov	r1, r7
 8010334:	f7ef ff62 	bl	80001fc <__adddf3>
 8010338:	4602      	mov	r2, r0
 801033a:	460b      	mov	r3, r1
 801033c:	4620      	mov	r0, r4
 801033e:	4629      	mov	r1, r5
 8010340:	f7ef ff5a 	bl	80001f8 <__aeabi_dsub>
 8010344:	e7c4      	b.n	80102d0 <__kernel_sin+0xd0>
 8010346:	bf00      	nop
 8010348:	55555549 	.word	0x55555549
 801034c:	3fc55555 	.word	0x3fc55555
 8010350:	3fe00000 	.word	0x3fe00000
 8010354:	5acfd57c 	.word	0x5acfd57c
 8010358:	3de5d93a 	.word	0x3de5d93a
 801035c:	8a2b9ceb 	.word	0x8a2b9ceb
 8010360:	3e5ae5e6 	.word	0x3e5ae5e6
 8010364:	57b1fe7d 	.word	0x57b1fe7d
 8010368:	3ec71de3 	.word	0x3ec71de3
 801036c:	19c161d5 	.word	0x19c161d5
 8010370:	3f2a01a0 	.word	0x3f2a01a0
 8010374:	1110f8a6 	.word	0x1110f8a6
 8010378:	3f811111 	.word	0x3f811111

0801037c <fabs>:
 801037c:	ec51 0b10 	vmov	r0, r1, d0
 8010380:	ee10 2a10 	vmov	r2, s0
 8010384:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010388:	ec43 2b10 	vmov	d0, r2, r3
 801038c:	4770      	bx	lr
	...

08010390 <floor>:
 8010390:	ec51 0b10 	vmov	r0, r1, d0
 8010394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010398:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801039c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80103a0:	2e13      	cmp	r6, #19
 80103a2:	ee10 5a10 	vmov	r5, s0
 80103a6:	ee10 8a10 	vmov	r8, s0
 80103aa:	460c      	mov	r4, r1
 80103ac:	dc32      	bgt.n	8010414 <floor+0x84>
 80103ae:	2e00      	cmp	r6, #0
 80103b0:	da14      	bge.n	80103dc <floor+0x4c>
 80103b2:	a333      	add	r3, pc, #204	; (adr r3, 8010480 <floor+0xf0>)
 80103b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b8:	f7ef ff20 	bl	80001fc <__adddf3>
 80103bc:	2200      	movs	r2, #0
 80103be:	2300      	movs	r3, #0
 80103c0:	f7f0 fb62 	bl	8000a88 <__aeabi_dcmpgt>
 80103c4:	b138      	cbz	r0, 80103d6 <floor+0x46>
 80103c6:	2c00      	cmp	r4, #0
 80103c8:	da57      	bge.n	801047a <floor+0xea>
 80103ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80103ce:	431d      	orrs	r5, r3
 80103d0:	d001      	beq.n	80103d6 <floor+0x46>
 80103d2:	4c2d      	ldr	r4, [pc, #180]	; (8010488 <floor+0xf8>)
 80103d4:	2500      	movs	r5, #0
 80103d6:	4621      	mov	r1, r4
 80103d8:	4628      	mov	r0, r5
 80103da:	e025      	b.n	8010428 <floor+0x98>
 80103dc:	4f2b      	ldr	r7, [pc, #172]	; (801048c <floor+0xfc>)
 80103de:	4137      	asrs	r7, r6
 80103e0:	ea01 0307 	and.w	r3, r1, r7
 80103e4:	4303      	orrs	r3, r0
 80103e6:	d01f      	beq.n	8010428 <floor+0x98>
 80103e8:	a325      	add	r3, pc, #148	; (adr r3, 8010480 <floor+0xf0>)
 80103ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ee:	f7ef ff05 	bl	80001fc <__adddf3>
 80103f2:	2200      	movs	r2, #0
 80103f4:	2300      	movs	r3, #0
 80103f6:	f7f0 fb47 	bl	8000a88 <__aeabi_dcmpgt>
 80103fa:	2800      	cmp	r0, #0
 80103fc:	d0eb      	beq.n	80103d6 <floor+0x46>
 80103fe:	2c00      	cmp	r4, #0
 8010400:	bfbe      	ittt	lt
 8010402:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010406:	fa43 f606 	asrlt.w	r6, r3, r6
 801040a:	19a4      	addlt	r4, r4, r6
 801040c:	ea24 0407 	bic.w	r4, r4, r7
 8010410:	2500      	movs	r5, #0
 8010412:	e7e0      	b.n	80103d6 <floor+0x46>
 8010414:	2e33      	cmp	r6, #51	; 0x33
 8010416:	dd0b      	ble.n	8010430 <floor+0xa0>
 8010418:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801041c:	d104      	bne.n	8010428 <floor+0x98>
 801041e:	ee10 2a10 	vmov	r2, s0
 8010422:	460b      	mov	r3, r1
 8010424:	f7ef feea 	bl	80001fc <__adddf3>
 8010428:	ec41 0b10 	vmov	d0, r0, r1
 801042c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010430:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010438:	fa23 f707 	lsr.w	r7, r3, r7
 801043c:	4207      	tst	r7, r0
 801043e:	d0f3      	beq.n	8010428 <floor+0x98>
 8010440:	a30f      	add	r3, pc, #60	; (adr r3, 8010480 <floor+0xf0>)
 8010442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010446:	f7ef fed9 	bl	80001fc <__adddf3>
 801044a:	2200      	movs	r2, #0
 801044c:	2300      	movs	r3, #0
 801044e:	f7f0 fb1b 	bl	8000a88 <__aeabi_dcmpgt>
 8010452:	2800      	cmp	r0, #0
 8010454:	d0bf      	beq.n	80103d6 <floor+0x46>
 8010456:	2c00      	cmp	r4, #0
 8010458:	da02      	bge.n	8010460 <floor+0xd0>
 801045a:	2e14      	cmp	r6, #20
 801045c:	d103      	bne.n	8010466 <floor+0xd6>
 801045e:	3401      	adds	r4, #1
 8010460:	ea25 0507 	bic.w	r5, r5, r7
 8010464:	e7b7      	b.n	80103d6 <floor+0x46>
 8010466:	2301      	movs	r3, #1
 8010468:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801046c:	fa03 f606 	lsl.w	r6, r3, r6
 8010470:	4435      	add	r5, r6
 8010472:	4545      	cmp	r5, r8
 8010474:	bf38      	it	cc
 8010476:	18e4      	addcc	r4, r4, r3
 8010478:	e7f2      	b.n	8010460 <floor+0xd0>
 801047a:	2500      	movs	r5, #0
 801047c:	462c      	mov	r4, r5
 801047e:	e7aa      	b.n	80103d6 <floor+0x46>
 8010480:	8800759c 	.word	0x8800759c
 8010484:	7e37e43c 	.word	0x7e37e43c
 8010488:	bff00000 	.word	0xbff00000
 801048c:	000fffff 	.word	0x000fffff

08010490 <nan>:
 8010490:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010498 <nan+0x8>
 8010494:	4770      	bx	lr
 8010496:	bf00      	nop
 8010498:	00000000 	.word	0x00000000
 801049c:	7ff80000 	.word	0x7ff80000

080104a0 <scalbn>:
 80104a0:	b570      	push	{r4, r5, r6, lr}
 80104a2:	ec55 4b10 	vmov	r4, r5, d0
 80104a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80104aa:	4606      	mov	r6, r0
 80104ac:	462b      	mov	r3, r5
 80104ae:	b99a      	cbnz	r2, 80104d8 <scalbn+0x38>
 80104b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80104b4:	4323      	orrs	r3, r4
 80104b6:	d036      	beq.n	8010526 <scalbn+0x86>
 80104b8:	4b39      	ldr	r3, [pc, #228]	; (80105a0 <scalbn+0x100>)
 80104ba:	4629      	mov	r1, r5
 80104bc:	ee10 0a10 	vmov	r0, s0
 80104c0:	2200      	movs	r2, #0
 80104c2:	f7f0 f851 	bl	8000568 <__aeabi_dmul>
 80104c6:	4b37      	ldr	r3, [pc, #220]	; (80105a4 <scalbn+0x104>)
 80104c8:	429e      	cmp	r6, r3
 80104ca:	4604      	mov	r4, r0
 80104cc:	460d      	mov	r5, r1
 80104ce:	da10      	bge.n	80104f2 <scalbn+0x52>
 80104d0:	a32b      	add	r3, pc, #172	; (adr r3, 8010580 <scalbn+0xe0>)
 80104d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d6:	e03a      	b.n	801054e <scalbn+0xae>
 80104d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80104dc:	428a      	cmp	r2, r1
 80104de:	d10c      	bne.n	80104fa <scalbn+0x5a>
 80104e0:	ee10 2a10 	vmov	r2, s0
 80104e4:	4620      	mov	r0, r4
 80104e6:	4629      	mov	r1, r5
 80104e8:	f7ef fe88 	bl	80001fc <__adddf3>
 80104ec:	4604      	mov	r4, r0
 80104ee:	460d      	mov	r5, r1
 80104f0:	e019      	b.n	8010526 <scalbn+0x86>
 80104f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80104f6:	460b      	mov	r3, r1
 80104f8:	3a36      	subs	r2, #54	; 0x36
 80104fa:	4432      	add	r2, r6
 80104fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010500:	428a      	cmp	r2, r1
 8010502:	dd08      	ble.n	8010516 <scalbn+0x76>
 8010504:	2d00      	cmp	r5, #0
 8010506:	a120      	add	r1, pc, #128	; (adr r1, 8010588 <scalbn+0xe8>)
 8010508:	e9d1 0100 	ldrd	r0, r1, [r1]
 801050c:	da1c      	bge.n	8010548 <scalbn+0xa8>
 801050e:	a120      	add	r1, pc, #128	; (adr r1, 8010590 <scalbn+0xf0>)
 8010510:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010514:	e018      	b.n	8010548 <scalbn+0xa8>
 8010516:	2a00      	cmp	r2, #0
 8010518:	dd08      	ble.n	801052c <scalbn+0x8c>
 801051a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801051e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010522:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010526:	ec45 4b10 	vmov	d0, r4, r5
 801052a:	bd70      	pop	{r4, r5, r6, pc}
 801052c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010530:	da19      	bge.n	8010566 <scalbn+0xc6>
 8010532:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010536:	429e      	cmp	r6, r3
 8010538:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801053c:	dd0a      	ble.n	8010554 <scalbn+0xb4>
 801053e:	a112      	add	r1, pc, #72	; (adr r1, 8010588 <scalbn+0xe8>)
 8010540:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d1e2      	bne.n	801050e <scalbn+0x6e>
 8010548:	a30f      	add	r3, pc, #60	; (adr r3, 8010588 <scalbn+0xe8>)
 801054a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054e:	f7f0 f80b 	bl	8000568 <__aeabi_dmul>
 8010552:	e7cb      	b.n	80104ec <scalbn+0x4c>
 8010554:	a10a      	add	r1, pc, #40	; (adr r1, 8010580 <scalbn+0xe0>)
 8010556:	e9d1 0100 	ldrd	r0, r1, [r1]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d0b8      	beq.n	80104d0 <scalbn+0x30>
 801055e:	a10e      	add	r1, pc, #56	; (adr r1, 8010598 <scalbn+0xf8>)
 8010560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010564:	e7b4      	b.n	80104d0 <scalbn+0x30>
 8010566:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801056a:	3236      	adds	r2, #54	; 0x36
 801056c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010570:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010574:	4620      	mov	r0, r4
 8010576:	4b0c      	ldr	r3, [pc, #48]	; (80105a8 <scalbn+0x108>)
 8010578:	2200      	movs	r2, #0
 801057a:	e7e8      	b.n	801054e <scalbn+0xae>
 801057c:	f3af 8000 	nop.w
 8010580:	c2f8f359 	.word	0xc2f8f359
 8010584:	01a56e1f 	.word	0x01a56e1f
 8010588:	8800759c 	.word	0x8800759c
 801058c:	7e37e43c 	.word	0x7e37e43c
 8010590:	8800759c 	.word	0x8800759c
 8010594:	fe37e43c 	.word	0xfe37e43c
 8010598:	c2f8f359 	.word	0xc2f8f359
 801059c:	81a56e1f 	.word	0x81a56e1f
 80105a0:	43500000 	.word	0x43500000
 80105a4:	ffff3cb0 	.word	0xffff3cb0
 80105a8:	3c900000 	.word	0x3c900000

080105ac <finitef>:
 80105ac:	b082      	sub	sp, #8
 80105ae:	ed8d 0a01 	vstr	s0, [sp, #4]
 80105b2:	9801      	ldr	r0, [sp, #4]
 80105b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80105b8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80105bc:	bfac      	ite	ge
 80105be:	2000      	movge	r0, #0
 80105c0:	2001      	movlt	r0, #1
 80105c2:	b002      	add	sp, #8
 80105c4:	4770      	bx	lr
	...

080105c8 <__ieee754_log>:
 80105c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105cc:	ec51 0b10 	vmov	r0, r1, d0
 80105d0:	ed2d 8b04 	vpush	{d8-d9}
 80105d4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80105d8:	b083      	sub	sp, #12
 80105da:	460d      	mov	r5, r1
 80105dc:	da29      	bge.n	8010632 <__ieee754_log+0x6a>
 80105de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80105e2:	4303      	orrs	r3, r0
 80105e4:	ee10 2a10 	vmov	r2, s0
 80105e8:	d10c      	bne.n	8010604 <__ieee754_log+0x3c>
 80105ea:	49cf      	ldr	r1, [pc, #828]	; (8010928 <__ieee754_log+0x360>)
 80105ec:	2200      	movs	r2, #0
 80105ee:	2300      	movs	r3, #0
 80105f0:	2000      	movs	r0, #0
 80105f2:	f7f0 f8e3 	bl	80007bc <__aeabi_ddiv>
 80105f6:	ec41 0b10 	vmov	d0, r0, r1
 80105fa:	b003      	add	sp, #12
 80105fc:	ecbd 8b04 	vpop	{d8-d9}
 8010600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010604:	2900      	cmp	r1, #0
 8010606:	da05      	bge.n	8010614 <__ieee754_log+0x4c>
 8010608:	460b      	mov	r3, r1
 801060a:	f7ef fdf5 	bl	80001f8 <__aeabi_dsub>
 801060e:	2200      	movs	r2, #0
 8010610:	2300      	movs	r3, #0
 8010612:	e7ee      	b.n	80105f2 <__ieee754_log+0x2a>
 8010614:	4bc5      	ldr	r3, [pc, #788]	; (801092c <__ieee754_log+0x364>)
 8010616:	2200      	movs	r2, #0
 8010618:	f7ef ffa6 	bl	8000568 <__aeabi_dmul>
 801061c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8010620:	460d      	mov	r5, r1
 8010622:	4ac3      	ldr	r2, [pc, #780]	; (8010930 <__ieee754_log+0x368>)
 8010624:	4295      	cmp	r5, r2
 8010626:	dd06      	ble.n	8010636 <__ieee754_log+0x6e>
 8010628:	4602      	mov	r2, r0
 801062a:	460b      	mov	r3, r1
 801062c:	f7ef fde6 	bl	80001fc <__adddf3>
 8010630:	e7e1      	b.n	80105f6 <__ieee754_log+0x2e>
 8010632:	2300      	movs	r3, #0
 8010634:	e7f5      	b.n	8010622 <__ieee754_log+0x5a>
 8010636:	152c      	asrs	r4, r5, #20
 8010638:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801063c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010640:	441c      	add	r4, r3
 8010642:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8010646:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801064a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801064e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8010652:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8010656:	ea42 0105 	orr.w	r1, r2, r5
 801065a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801065e:	2200      	movs	r2, #0
 8010660:	4bb4      	ldr	r3, [pc, #720]	; (8010934 <__ieee754_log+0x36c>)
 8010662:	f7ef fdc9 	bl	80001f8 <__aeabi_dsub>
 8010666:	1cab      	adds	r3, r5, #2
 8010668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801066c:	2b02      	cmp	r3, #2
 801066e:	4682      	mov	sl, r0
 8010670:	468b      	mov	fp, r1
 8010672:	f04f 0200 	mov.w	r2, #0
 8010676:	dc53      	bgt.n	8010720 <__ieee754_log+0x158>
 8010678:	2300      	movs	r3, #0
 801067a:	f7f0 f9dd 	bl	8000a38 <__aeabi_dcmpeq>
 801067e:	b1d0      	cbz	r0, 80106b6 <__ieee754_log+0xee>
 8010680:	2c00      	cmp	r4, #0
 8010682:	f000 8122 	beq.w	80108ca <__ieee754_log+0x302>
 8010686:	4620      	mov	r0, r4
 8010688:	f7ef ff04 	bl	8000494 <__aeabi_i2d>
 801068c:	a390      	add	r3, pc, #576	; (adr r3, 80108d0 <__ieee754_log+0x308>)
 801068e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010692:	4606      	mov	r6, r0
 8010694:	460f      	mov	r7, r1
 8010696:	f7ef ff67 	bl	8000568 <__aeabi_dmul>
 801069a:	a38f      	add	r3, pc, #572	; (adr r3, 80108d8 <__ieee754_log+0x310>)
 801069c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106a0:	4604      	mov	r4, r0
 80106a2:	460d      	mov	r5, r1
 80106a4:	4630      	mov	r0, r6
 80106a6:	4639      	mov	r1, r7
 80106a8:	f7ef ff5e 	bl	8000568 <__aeabi_dmul>
 80106ac:	4602      	mov	r2, r0
 80106ae:	460b      	mov	r3, r1
 80106b0:	4620      	mov	r0, r4
 80106b2:	4629      	mov	r1, r5
 80106b4:	e7ba      	b.n	801062c <__ieee754_log+0x64>
 80106b6:	a38a      	add	r3, pc, #552	; (adr r3, 80108e0 <__ieee754_log+0x318>)
 80106b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106bc:	4650      	mov	r0, sl
 80106be:	4659      	mov	r1, fp
 80106c0:	f7ef ff52 	bl	8000568 <__aeabi_dmul>
 80106c4:	4602      	mov	r2, r0
 80106c6:	460b      	mov	r3, r1
 80106c8:	2000      	movs	r0, #0
 80106ca:	499b      	ldr	r1, [pc, #620]	; (8010938 <__ieee754_log+0x370>)
 80106cc:	f7ef fd94 	bl	80001f8 <__aeabi_dsub>
 80106d0:	4652      	mov	r2, sl
 80106d2:	4606      	mov	r6, r0
 80106d4:	460f      	mov	r7, r1
 80106d6:	465b      	mov	r3, fp
 80106d8:	4650      	mov	r0, sl
 80106da:	4659      	mov	r1, fp
 80106dc:	f7ef ff44 	bl	8000568 <__aeabi_dmul>
 80106e0:	4602      	mov	r2, r0
 80106e2:	460b      	mov	r3, r1
 80106e4:	4630      	mov	r0, r6
 80106e6:	4639      	mov	r1, r7
 80106e8:	f7ef ff3e 	bl	8000568 <__aeabi_dmul>
 80106ec:	4606      	mov	r6, r0
 80106ee:	460f      	mov	r7, r1
 80106f0:	b914      	cbnz	r4, 80106f8 <__ieee754_log+0x130>
 80106f2:	4632      	mov	r2, r6
 80106f4:	463b      	mov	r3, r7
 80106f6:	e0a2      	b.n	801083e <__ieee754_log+0x276>
 80106f8:	4620      	mov	r0, r4
 80106fa:	f7ef fecb 	bl	8000494 <__aeabi_i2d>
 80106fe:	a374      	add	r3, pc, #464	; (adr r3, 80108d0 <__ieee754_log+0x308>)
 8010700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010704:	4680      	mov	r8, r0
 8010706:	4689      	mov	r9, r1
 8010708:	f7ef ff2e 	bl	8000568 <__aeabi_dmul>
 801070c:	a372      	add	r3, pc, #456	; (adr r3, 80108d8 <__ieee754_log+0x310>)
 801070e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010712:	4604      	mov	r4, r0
 8010714:	460d      	mov	r5, r1
 8010716:	4640      	mov	r0, r8
 8010718:	4649      	mov	r1, r9
 801071a:	f7ef ff25 	bl	8000568 <__aeabi_dmul>
 801071e:	e0a7      	b.n	8010870 <__ieee754_log+0x2a8>
 8010720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010724:	f7ef fd6a 	bl	80001fc <__adddf3>
 8010728:	4602      	mov	r2, r0
 801072a:	460b      	mov	r3, r1
 801072c:	4650      	mov	r0, sl
 801072e:	4659      	mov	r1, fp
 8010730:	f7f0 f844 	bl	80007bc <__aeabi_ddiv>
 8010734:	ec41 0b18 	vmov	d8, r0, r1
 8010738:	4620      	mov	r0, r4
 801073a:	f7ef feab 	bl	8000494 <__aeabi_i2d>
 801073e:	ec53 2b18 	vmov	r2, r3, d8
 8010742:	ec41 0b19 	vmov	d9, r0, r1
 8010746:	ec51 0b18 	vmov	r0, r1, d8
 801074a:	f7ef ff0d 	bl	8000568 <__aeabi_dmul>
 801074e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8010752:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8010756:	9301      	str	r3, [sp, #4]
 8010758:	4602      	mov	r2, r0
 801075a:	460b      	mov	r3, r1
 801075c:	4680      	mov	r8, r0
 801075e:	4689      	mov	r9, r1
 8010760:	f7ef ff02 	bl	8000568 <__aeabi_dmul>
 8010764:	a360      	add	r3, pc, #384	; (adr r3, 80108e8 <__ieee754_log+0x320>)
 8010766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801076a:	4606      	mov	r6, r0
 801076c:	460f      	mov	r7, r1
 801076e:	f7ef fefb 	bl	8000568 <__aeabi_dmul>
 8010772:	a35f      	add	r3, pc, #380	; (adr r3, 80108f0 <__ieee754_log+0x328>)
 8010774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010778:	f7ef fd40 	bl	80001fc <__adddf3>
 801077c:	4632      	mov	r2, r6
 801077e:	463b      	mov	r3, r7
 8010780:	f7ef fef2 	bl	8000568 <__aeabi_dmul>
 8010784:	a35c      	add	r3, pc, #368	; (adr r3, 80108f8 <__ieee754_log+0x330>)
 8010786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078a:	f7ef fd37 	bl	80001fc <__adddf3>
 801078e:	4632      	mov	r2, r6
 8010790:	463b      	mov	r3, r7
 8010792:	f7ef fee9 	bl	8000568 <__aeabi_dmul>
 8010796:	a35a      	add	r3, pc, #360	; (adr r3, 8010900 <__ieee754_log+0x338>)
 8010798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801079c:	f7ef fd2e 	bl	80001fc <__adddf3>
 80107a0:	4642      	mov	r2, r8
 80107a2:	464b      	mov	r3, r9
 80107a4:	f7ef fee0 	bl	8000568 <__aeabi_dmul>
 80107a8:	a357      	add	r3, pc, #348	; (adr r3, 8010908 <__ieee754_log+0x340>)
 80107aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ae:	4680      	mov	r8, r0
 80107b0:	4689      	mov	r9, r1
 80107b2:	4630      	mov	r0, r6
 80107b4:	4639      	mov	r1, r7
 80107b6:	f7ef fed7 	bl	8000568 <__aeabi_dmul>
 80107ba:	a355      	add	r3, pc, #340	; (adr r3, 8010910 <__ieee754_log+0x348>)
 80107bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c0:	f7ef fd1c 	bl	80001fc <__adddf3>
 80107c4:	4632      	mov	r2, r6
 80107c6:	463b      	mov	r3, r7
 80107c8:	f7ef fece 	bl	8000568 <__aeabi_dmul>
 80107cc:	a352      	add	r3, pc, #328	; (adr r3, 8010918 <__ieee754_log+0x350>)
 80107ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107d2:	f7ef fd13 	bl	80001fc <__adddf3>
 80107d6:	4632      	mov	r2, r6
 80107d8:	463b      	mov	r3, r7
 80107da:	f7ef fec5 	bl	8000568 <__aeabi_dmul>
 80107de:	460b      	mov	r3, r1
 80107e0:	4602      	mov	r2, r0
 80107e2:	4649      	mov	r1, r9
 80107e4:	4640      	mov	r0, r8
 80107e6:	f7ef fd09 	bl	80001fc <__adddf3>
 80107ea:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80107ee:	9b01      	ldr	r3, [sp, #4]
 80107f0:	3551      	adds	r5, #81	; 0x51
 80107f2:	431d      	orrs	r5, r3
 80107f4:	2d00      	cmp	r5, #0
 80107f6:	4680      	mov	r8, r0
 80107f8:	4689      	mov	r9, r1
 80107fa:	dd48      	ble.n	801088e <__ieee754_log+0x2c6>
 80107fc:	4b4e      	ldr	r3, [pc, #312]	; (8010938 <__ieee754_log+0x370>)
 80107fe:	2200      	movs	r2, #0
 8010800:	4650      	mov	r0, sl
 8010802:	4659      	mov	r1, fp
 8010804:	f7ef feb0 	bl	8000568 <__aeabi_dmul>
 8010808:	4652      	mov	r2, sl
 801080a:	465b      	mov	r3, fp
 801080c:	f7ef feac 	bl	8000568 <__aeabi_dmul>
 8010810:	4602      	mov	r2, r0
 8010812:	460b      	mov	r3, r1
 8010814:	4606      	mov	r6, r0
 8010816:	460f      	mov	r7, r1
 8010818:	4640      	mov	r0, r8
 801081a:	4649      	mov	r1, r9
 801081c:	f7ef fcee 	bl	80001fc <__adddf3>
 8010820:	ec53 2b18 	vmov	r2, r3, d8
 8010824:	f7ef fea0 	bl	8000568 <__aeabi_dmul>
 8010828:	4680      	mov	r8, r0
 801082a:	4689      	mov	r9, r1
 801082c:	b964      	cbnz	r4, 8010848 <__ieee754_log+0x280>
 801082e:	4602      	mov	r2, r0
 8010830:	460b      	mov	r3, r1
 8010832:	4630      	mov	r0, r6
 8010834:	4639      	mov	r1, r7
 8010836:	f7ef fcdf 	bl	80001f8 <__aeabi_dsub>
 801083a:	4602      	mov	r2, r0
 801083c:	460b      	mov	r3, r1
 801083e:	4650      	mov	r0, sl
 8010840:	4659      	mov	r1, fp
 8010842:	f7ef fcd9 	bl	80001f8 <__aeabi_dsub>
 8010846:	e6d6      	b.n	80105f6 <__ieee754_log+0x2e>
 8010848:	a321      	add	r3, pc, #132	; (adr r3, 80108d0 <__ieee754_log+0x308>)
 801084a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801084e:	ec51 0b19 	vmov	r0, r1, d9
 8010852:	f7ef fe89 	bl	8000568 <__aeabi_dmul>
 8010856:	a320      	add	r3, pc, #128	; (adr r3, 80108d8 <__ieee754_log+0x310>)
 8010858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085c:	4604      	mov	r4, r0
 801085e:	460d      	mov	r5, r1
 8010860:	ec51 0b19 	vmov	r0, r1, d9
 8010864:	f7ef fe80 	bl	8000568 <__aeabi_dmul>
 8010868:	4642      	mov	r2, r8
 801086a:	464b      	mov	r3, r9
 801086c:	f7ef fcc6 	bl	80001fc <__adddf3>
 8010870:	4602      	mov	r2, r0
 8010872:	460b      	mov	r3, r1
 8010874:	4630      	mov	r0, r6
 8010876:	4639      	mov	r1, r7
 8010878:	f7ef fcbe 	bl	80001f8 <__aeabi_dsub>
 801087c:	4652      	mov	r2, sl
 801087e:	465b      	mov	r3, fp
 8010880:	f7ef fcba 	bl	80001f8 <__aeabi_dsub>
 8010884:	4602      	mov	r2, r0
 8010886:	460b      	mov	r3, r1
 8010888:	4620      	mov	r0, r4
 801088a:	4629      	mov	r1, r5
 801088c:	e7d9      	b.n	8010842 <__ieee754_log+0x27a>
 801088e:	4602      	mov	r2, r0
 8010890:	460b      	mov	r3, r1
 8010892:	4650      	mov	r0, sl
 8010894:	4659      	mov	r1, fp
 8010896:	f7ef fcaf 	bl	80001f8 <__aeabi_dsub>
 801089a:	ec53 2b18 	vmov	r2, r3, d8
 801089e:	f7ef fe63 	bl	8000568 <__aeabi_dmul>
 80108a2:	4606      	mov	r6, r0
 80108a4:	460f      	mov	r7, r1
 80108a6:	2c00      	cmp	r4, #0
 80108a8:	f43f af23 	beq.w	80106f2 <__ieee754_log+0x12a>
 80108ac:	a308      	add	r3, pc, #32	; (adr r3, 80108d0 <__ieee754_log+0x308>)
 80108ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b2:	ec51 0b19 	vmov	r0, r1, d9
 80108b6:	f7ef fe57 	bl	8000568 <__aeabi_dmul>
 80108ba:	a307      	add	r3, pc, #28	; (adr r3, 80108d8 <__ieee754_log+0x310>)
 80108bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108c0:	4604      	mov	r4, r0
 80108c2:	460d      	mov	r5, r1
 80108c4:	ec51 0b19 	vmov	r0, r1, d9
 80108c8:	e727      	b.n	801071a <__ieee754_log+0x152>
 80108ca:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8010920 <__ieee754_log+0x358>
 80108ce:	e694      	b.n	80105fa <__ieee754_log+0x32>
 80108d0:	fee00000 	.word	0xfee00000
 80108d4:	3fe62e42 	.word	0x3fe62e42
 80108d8:	35793c76 	.word	0x35793c76
 80108dc:	3dea39ef 	.word	0x3dea39ef
 80108e0:	55555555 	.word	0x55555555
 80108e4:	3fd55555 	.word	0x3fd55555
 80108e8:	df3e5244 	.word	0xdf3e5244
 80108ec:	3fc2f112 	.word	0x3fc2f112
 80108f0:	96cb03de 	.word	0x96cb03de
 80108f4:	3fc74664 	.word	0x3fc74664
 80108f8:	94229359 	.word	0x94229359
 80108fc:	3fd24924 	.word	0x3fd24924
 8010900:	55555593 	.word	0x55555593
 8010904:	3fe55555 	.word	0x3fe55555
 8010908:	d078c69f 	.word	0xd078c69f
 801090c:	3fc39a09 	.word	0x3fc39a09
 8010910:	1d8e78af 	.word	0x1d8e78af
 8010914:	3fcc71c5 	.word	0x3fcc71c5
 8010918:	9997fa04 	.word	0x9997fa04
 801091c:	3fd99999 	.word	0x3fd99999
	...
 8010928:	c3500000 	.word	0xc3500000
 801092c:	43500000 	.word	0x43500000
 8010930:	7fefffff 	.word	0x7fefffff
 8010934:	3ff00000 	.word	0x3ff00000
 8010938:	3fe00000 	.word	0x3fe00000

0801093c <_init>:
 801093c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801093e:	bf00      	nop
 8010940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010942:	bc08      	pop	{r3}
 8010944:	469e      	mov	lr, r3
 8010946:	4770      	bx	lr

08010948 <_fini>:
 8010948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801094a:	bf00      	nop
 801094c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801094e:	bc08      	pop	{r3}
 8010950:	469e      	mov	lr, r3
 8010952:	4770      	bx	lr
